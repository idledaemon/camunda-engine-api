/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the VariableQueryParameterDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableQueryParameterDto{}

// VariableQueryParameterDto struct for VariableQueryParameterDto
type VariableQueryParameterDto struct {
	// Comparison operator to be used. `notLike` is not supported by all endpoints.
	Operator NullableString `json:"operator,omitempty"`
	// Can be any value - string, number, boolean, array or object.  **Note**: Not every endpoint supports every type.
	Value interface{} `json:"value,omitempty"`
	// Variable name
	Name NullableString `json:"name,omitempty"`
}

// NewVariableQueryParameterDto instantiates a new VariableQueryParameterDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableQueryParameterDto() *VariableQueryParameterDto {
	this := VariableQueryParameterDto{}
	return &this
}

// NewVariableQueryParameterDtoWithDefaults instantiates a new VariableQueryParameterDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableQueryParameterDtoWithDefaults() *VariableQueryParameterDto {
	this := VariableQueryParameterDto{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableQueryParameterDto) GetOperator() string {
	if o == nil || IsNil(o.Operator.Get()) {
		var ret string
		return ret
	}
	return *o.Operator.Get()
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableQueryParameterDto) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator.Get(), o.Operator.IsSet()
}

// HasOperator returns a boolean if a field has been set.
func (o *VariableQueryParameterDto) HasOperator() bool {
	if o != nil && o.Operator.IsSet() {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NullableString and assigns it to the Operator field.
func (o *VariableQueryParameterDto) SetOperator(v string) {
	o.Operator.Set(&v)
}
// SetOperatorNil sets the value for Operator to be an explicit nil
func (o *VariableQueryParameterDto) SetOperatorNil() {
	o.Operator.Set(nil)
}

// UnsetOperator ensures that no value is present for Operator, not even an explicit nil
func (o *VariableQueryParameterDto) UnsetOperator() {
	o.Operator.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableQueryParameterDto) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableQueryParameterDto) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariableQueryParameterDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *VariableQueryParameterDto) SetValue(v interface{}) {
	o.Value = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableQueryParameterDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableQueryParameterDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VariableQueryParameterDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VariableQueryParameterDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VariableQueryParameterDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VariableQueryParameterDto) UnsetName() {
	o.Name.Unset()
}

func (o VariableQueryParameterDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableQueryParameterDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator.IsSet() {
		toSerialize["operator"] = o.Operator.Get()
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableVariableQueryParameterDto struct {
	value *VariableQueryParameterDto
	isSet bool
}

func (v NullableVariableQueryParameterDto) Get() *VariableQueryParameterDto {
	return v.value
}

func (v *NullableVariableQueryParameterDto) Set(val *VariableQueryParameterDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableQueryParameterDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableQueryParameterDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableQueryParameterDto(val *VariableQueryParameterDto) *NullableVariableQueryParameterDto {
	return &NullableVariableQueryParameterDto{value: val, isSet: true}
}

func (v NullableVariableQueryParameterDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableQueryParameterDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


