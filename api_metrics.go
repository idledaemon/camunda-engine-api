/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type MetricsAPI interface {

	/*
	DeleteTaskMetrics Delete Task Worker Metrics

	Deletes all task worker metrics prior to the given date or all if no date is provided.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTaskMetricsRequest
	*/
	DeleteTaskMetrics(ctx context.Context) ApiDeleteTaskMetricsRequest

	// DeleteTaskMetricsExecute executes the request
	DeleteTaskMetricsExecute(r ApiDeleteTaskMetricsRequest) (*http.Response, error)

	/*
	GetMetrics Get Sum

	Retrieves the `sum` (count) for a given metric.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param metricsName The name of the metric.
	@return ApiGetMetricsRequest
	*/
	GetMetrics(ctx context.Context, metricsName string) ApiGetMetricsRequest

	// GetMetricsExecute executes the request
	//  @return MetricsResultDto
	GetMetricsExecute(r ApiGetMetricsRequest) (*MetricsResultDto, *http.Response, error)

	/*
	Interval Get Metrics in Interval

	Retrieves a list of metrics, aggregated for a given interval.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIntervalRequest
	*/
	Interval(ctx context.Context) ApiIntervalRequest

	// IntervalExecute executes the request
	//  @return []MetricsIntervalResultDto
	IntervalExecute(r ApiIntervalRequest) ([]MetricsIntervalResultDto, *http.Response, error)
}

// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiDeleteTaskMetricsRequest struct {
	ctx context.Context
	ApiService MetricsAPI
	date *time.Time
}

// The date prior to which all task worker metrics should be deleted.
func (r ApiDeleteTaskMetricsRequest) Date(date time.Time) ApiDeleteTaskMetricsRequest {
	r.date = &date
	return r
}

func (r ApiDeleteTaskMetricsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTaskMetricsExecute(r)
}

/*
DeleteTaskMetrics Delete Task Worker Metrics

Deletes all task worker metrics prior to the given date or all if no date is provided.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteTaskMetricsRequest
*/
func (a *MetricsAPIService) DeleteTaskMetrics(ctx context.Context) ApiDeleteTaskMetricsRequest {
	return ApiDeleteTaskMetricsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetricsAPIService) DeleteTaskMetricsExecute(r ApiDeleteTaskMetricsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.DeleteTaskMetrics")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/task-worker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMetricsRequest struct {
	ctx context.Context
	ApiService MetricsAPI
	metricsName string
	startDate *time.Time
	endDate *time.Time
}

// The start date (inclusive).
func (r ApiGetMetricsRequest) StartDate(startDate time.Time) ApiGetMetricsRequest {
	r.startDate = &startDate
	return r
}

// The end date (exclusive).
func (r ApiGetMetricsRequest) EndDate(endDate time.Time) ApiGetMetricsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetMetricsRequest) Execute() (*MetricsResultDto, *http.Response, error) {
	return r.ApiService.GetMetricsExecute(r)
}

/*
GetMetrics Get Sum

Retrieves the `sum` (count) for a given metric.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metricsName The name of the metric.
 @return ApiGetMetricsRequest
*/
func (a *MetricsAPIService) GetMetrics(ctx context.Context, metricsName string) ApiGetMetricsRequest {
	return ApiGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		metricsName: metricsName,
	}
}

// Execute executes the request
//  @return MetricsResultDto
func (a *MetricsAPIService) GetMetricsExecute(r ApiGetMetricsRequest) (*MetricsResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricsResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/{metrics-name}/sum"
	localVarPath = strings.Replace(localVarPath, "{"+"metrics-name"+"}", url.PathEscape(parameterValueToString(r.metricsName, "metricsName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIntervalRequest struct {
	ctx context.Context
	ApiService MetricsAPI
	name *string
	reporter *string
	startDate *time.Time
	endDate *time.Time
	firstResult *int32
	maxResults *int32
	interval *string
	aggregateByReporter *string
}

// The name of the metric.
func (r ApiIntervalRequest) Name(name string) ApiIntervalRequest {
	r.name = &name
	return r
}

// The name of the reporter (host), on which the metrics was logged. This will have value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.21/reference/deployment-descriptors/tags/process-engine/#hostname).
func (r ApiIntervalRequest) Reporter(reporter string) ApiIntervalRequest {
	r.reporter = &reporter
	return r
}

// The start date (inclusive).
func (r ApiIntervalRequest) StartDate(startDate time.Time) ApiIntervalRequest {
	r.startDate = &startDate
	return r
}

// The end date (exclusive).
func (r ApiIntervalRequest) EndDate(endDate time.Time) ApiIntervalRequest {
	r.endDate = &endDate
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiIntervalRequest) FirstResult(firstResult int32) ApiIntervalRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiIntervalRequest) MaxResults(maxResults int32) ApiIntervalRequest {
	r.maxResults = &maxResults
	return r
}

// The interval for which the metrics should be aggregated. Time unit is seconds. Default: The interval is set to 15 minutes (900 seconds).
func (r ApiIntervalRequest) Interval(interval string) ApiIntervalRequest {
	r.interval = &interval
	return r
}

// Aggregate metrics by reporter.
func (r ApiIntervalRequest) AggregateByReporter(aggregateByReporter string) ApiIntervalRequest {
	r.aggregateByReporter = &aggregateByReporter
	return r
}

func (r ApiIntervalRequest) Execute() ([]MetricsIntervalResultDto, *http.Response, error) {
	return r.ApiService.IntervalExecute(r)
}

/*
Interval Get Metrics in Interval

Retrieves a list of metrics, aggregated for a given interval.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIntervalRequest
*/
func (a *MetricsAPIService) Interval(ctx context.Context) ApiIntervalRequest {
	return ApiIntervalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MetricsIntervalResultDto
func (a *MetricsAPIService) IntervalExecute(r ApiIntervalRequest) ([]MetricsIntervalResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MetricsIntervalResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.Interval")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.reporter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reporter", r.reporter, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "")
	} else {
		var defaultValue string = "900"
		r.interval = &defaultValue
	}
	if r.aggregateByReporter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "aggregateByReporter", r.aggregateByReporter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
