/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type HistoricExternalTaskLogAPI interface {

	/*
	GetErrorDetailsHistoricExternalTaskLog Get External Task Log Error Details

	Retrieves the corresponding error details of the passed historic external task log
by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the historic external task log to get the error details for.
	@return ApiGetErrorDetailsHistoricExternalTaskLogRequest
	*/
	GetErrorDetailsHistoricExternalTaskLog(ctx context.Context, id string) ApiGetErrorDetailsHistoricExternalTaskLogRequest

	// GetErrorDetailsHistoricExternalTaskLogExecute executes the request
	//  @return interface{}
	GetErrorDetailsHistoricExternalTaskLogExecute(r ApiGetErrorDetailsHistoricExternalTaskLogRequest) (interface{}, *http.Response, error)

	/*
	GetHistoricExternalTaskLog Get External Task Log

	Retrieves a historic external task log by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the log entry.
	@return ApiGetHistoricExternalTaskLogRequest
	*/
	GetHistoricExternalTaskLog(ctx context.Context, id string) ApiGetHistoricExternalTaskLogRequest

	// GetHistoricExternalTaskLogExecute executes the request
	//  @return HistoricExternalTaskLogDto
	GetHistoricExternalTaskLogExecute(r ApiGetHistoricExternalTaskLogRequest) (*HistoricExternalTaskLogDto, *http.Response, error)

	/*
	GetHistoricExternalTaskLogs Get External Task Logs

	Queries for historic external task logs that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get External Task Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricExternalTaskLogsRequest
	*/
	GetHistoricExternalTaskLogs(ctx context.Context) ApiGetHistoricExternalTaskLogsRequest

	// GetHistoricExternalTaskLogsExecute executes the request
	//  @return []HistoricExternalTaskLogDto
	GetHistoricExternalTaskLogsExecute(r ApiGetHistoricExternalTaskLogsRequest) ([]HistoricExternalTaskLogDto, *http.Response, error)

	/*
	GetHistoricExternalTaskLogsCount Get External Task Log Count

	Queries for the number of historic external task logs that fulfill the given
parameters.
Takes the same parameters as the
[Get External Task Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricExternalTaskLogsCountRequest
	*/
	GetHistoricExternalTaskLogsCount(ctx context.Context) ApiGetHistoricExternalTaskLogsCountRequest

	// GetHistoricExternalTaskLogsCountExecute executes the request
	//  @return CountResultDto
	GetHistoricExternalTaskLogsCountExecute(r ApiGetHistoricExternalTaskLogsCountRequest) (*CountResultDto, *http.Response, error)

	/*
	QueryHistoricExternalTaskLogs Get External Task Logs (POST)

	Queries for historic external task logs that fulfill the given parameters.
This method is slightly more powerful than the
[Get External Task Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query/)
method because it allows filtering by historic external task logs
values of the different types `String`, `Number` or `Boolean`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricExternalTaskLogsRequest
	*/
	QueryHistoricExternalTaskLogs(ctx context.Context) ApiQueryHistoricExternalTaskLogsRequest

	// QueryHistoricExternalTaskLogsExecute executes the request
	//  @return []HistoricExternalTaskLogDto
	QueryHistoricExternalTaskLogsExecute(r ApiQueryHistoricExternalTaskLogsRequest) ([]HistoricExternalTaskLogDto, *http.Response, error)

	/*
	QueryHistoricExternalTaskLogsCount Get External Task Log Count (POST)

	Queries for the number of historic external task logs that fulfill the given
parameters.
This method takes the same message body as the
[Get External Task Logs (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/post-external-task-log-query/)
method and therefore it is slightly more powerful than the
[Get External Task Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricExternalTaskLogsCountRequest
	*/
	QueryHistoricExternalTaskLogsCount(ctx context.Context) ApiQueryHistoricExternalTaskLogsCountRequest

	// QueryHistoricExternalTaskLogsCountExecute executes the request
	//  @return CountResultDto
	QueryHistoricExternalTaskLogsCountExecute(r ApiQueryHistoricExternalTaskLogsCountRequest) (*CountResultDto, *http.Response, error)
}

// HistoricExternalTaskLogAPIService HistoricExternalTaskLogAPI service
type HistoricExternalTaskLogAPIService service

type ApiGetErrorDetailsHistoricExternalTaskLogRequest struct {
	ctx context.Context
	ApiService HistoricExternalTaskLogAPI
	id string
}

func (r ApiGetErrorDetailsHistoricExternalTaskLogRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetErrorDetailsHistoricExternalTaskLogExecute(r)
}

/*
GetErrorDetailsHistoricExternalTaskLog Get External Task Log Error Details

Retrieves the corresponding error details of the passed historic external task log
by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the historic external task log to get the error details for.
 @return ApiGetErrorDetailsHistoricExternalTaskLogRequest
*/
func (a *HistoricExternalTaskLogAPIService) GetErrorDetailsHistoricExternalTaskLog(ctx context.Context, id string) ApiGetErrorDetailsHistoricExternalTaskLogRequest {
	return ApiGetErrorDetailsHistoricExternalTaskLogRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return interface{}
func (a *HistoricExternalTaskLogAPIService) GetErrorDetailsHistoricExternalTaskLogExecute(r ApiGetErrorDetailsHistoricExternalTaskLogRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricExternalTaskLogAPIService.GetErrorDetailsHistoricExternalTaskLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/external-task-log/{id}/error-details"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricExternalTaskLogRequest struct {
	ctx context.Context
	ApiService HistoricExternalTaskLogAPI
	id string
}

func (r ApiGetHistoricExternalTaskLogRequest) Execute() (*HistoricExternalTaskLogDto, *http.Response, error) {
	return r.ApiService.GetHistoricExternalTaskLogExecute(r)
}

/*
GetHistoricExternalTaskLog Get External Task Log

Retrieves a historic external task log by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the log entry.
 @return ApiGetHistoricExternalTaskLogRequest
*/
func (a *HistoricExternalTaskLogAPIService) GetHistoricExternalTaskLog(ctx context.Context, id string) ApiGetHistoricExternalTaskLogRequest {
	return ApiGetHistoricExternalTaskLogRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistoricExternalTaskLogDto
func (a *HistoricExternalTaskLogAPIService) GetHistoricExternalTaskLogExecute(r ApiGetHistoricExternalTaskLogRequest) (*HistoricExternalTaskLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricExternalTaskLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricExternalTaskLogAPIService.GetHistoricExternalTaskLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/external-task-log/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricExternalTaskLogsRequest struct {
	ctx context.Context
	ApiService HistoricExternalTaskLogAPI
	logId *string
	externalTaskId *string
	topicName *string
	workerId *string
	errorMessage *string
	activityIdIn *string
	activityInstanceIdIn *string
	executionIdIn *string
	processInstanceId *string
	processDefinitionId *string
	processDefinitionKey *string
	tenantIdIn *string
	withoutTenantId *bool
	priorityLowerThanOrEquals *int64
	priorityHigherThanOrEquals *int64
	creationLog *bool
	failureLog *bool
	successLog *bool
	deletionLog *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Filter by historic external task log id.
func (r ApiGetHistoricExternalTaskLogsRequest) LogId(logId string) ApiGetHistoricExternalTaskLogsRequest {
	r.logId = &logId
	return r
}

// Filter by external task id.
func (r ApiGetHistoricExternalTaskLogsRequest) ExternalTaskId(externalTaskId string) ApiGetHistoricExternalTaskLogsRequest {
	r.externalTaskId = &externalTaskId
	return r
}

// Filter by an external task topic.
func (r ApiGetHistoricExternalTaskLogsRequest) TopicName(topicName string) ApiGetHistoricExternalTaskLogsRequest {
	r.topicName = &topicName
	return r
}

// Filter by the id of the worker that the task was most recently locked by.
func (r ApiGetHistoricExternalTaskLogsRequest) WorkerId(workerId string) ApiGetHistoricExternalTaskLogsRequest {
	r.workerId = &workerId
	return r
}

// Filter by external task exception message.
func (r ApiGetHistoricExternalTaskLogsRequest) ErrorMessage(errorMessage string) ApiGetHistoricExternalTaskLogsRequest {
	r.errorMessage = &errorMessage
	return r
}

// Only include historic external task logs which belong to one of the passed activity ids.
func (r ApiGetHistoricExternalTaskLogsRequest) ActivityIdIn(activityIdIn string) ApiGetHistoricExternalTaskLogsRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Only include historic external task logs which belong to one of the passed activity instance ids.
func (r ApiGetHistoricExternalTaskLogsRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetHistoricExternalTaskLogsRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Only include historic external task logs which belong to one of the passed execution ids.
func (r ApiGetHistoricExternalTaskLogsRequest) ExecutionIdIn(executionIdIn string) ApiGetHistoricExternalTaskLogsRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricExternalTaskLogsRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricExternalTaskLogsRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process definition id.
func (r ApiGetHistoricExternalTaskLogsRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricExternalTaskLogsRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by process definition key.
func (r ApiGetHistoricExternalTaskLogsRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricExternalTaskLogsRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
func (r ApiGetHistoricExternalTaskLogsRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricExternalTaskLogsRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricExternalTaskLogsRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricExternalTaskLogsRequest) PriorityLowerThanOrEquals(priorityLowerThanOrEquals int64) ApiGetHistoricExternalTaskLogsRequest {
	r.priorityLowerThanOrEquals = &priorityLowerThanOrEquals
	return r
}

// Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricExternalTaskLogsRequest) PriorityHigherThanOrEquals(priorityHigherThanOrEquals int64) ApiGetHistoricExternalTaskLogsRequest {
	r.priorityHigherThanOrEquals = &priorityHigherThanOrEquals
	return r
}

// Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsRequest) CreationLog(creationLog bool) ApiGetHistoricExternalTaskLogsRequest {
	r.creationLog = &creationLog
	return r
}

// Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsRequest) FailureLog(failureLog bool) ApiGetHistoricExternalTaskLogsRequest {
	r.failureLog = &failureLog
	return r
}

// Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsRequest) SuccessLog(successLog bool) ApiGetHistoricExternalTaskLogsRequest {
	r.successLog = &successLog
	return r
}

// Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsRequest) DeletionLog(deletionLog bool) ApiGetHistoricExternalTaskLogsRequest {
	r.deletionLog = &deletionLog
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricExternalTaskLogsRequest) SortBy(sortBy string) ApiGetHistoricExternalTaskLogsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricExternalTaskLogsRequest) SortOrder(sortOrder string) ApiGetHistoricExternalTaskLogsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricExternalTaskLogsRequest) FirstResult(firstResult int32) ApiGetHistoricExternalTaskLogsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricExternalTaskLogsRequest) MaxResults(maxResults int32) ApiGetHistoricExternalTaskLogsRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetHistoricExternalTaskLogsRequest) Execute() ([]HistoricExternalTaskLogDto, *http.Response, error) {
	return r.ApiService.GetHistoricExternalTaskLogsExecute(r)
}

/*
GetHistoricExternalTaskLogs Get External Task Logs

Queries for historic external task logs that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get External Task Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricExternalTaskLogsRequest
*/
func (a *HistoricExternalTaskLogAPIService) GetHistoricExternalTaskLogs(ctx context.Context) ApiGetHistoricExternalTaskLogsRequest {
	return ApiGetHistoricExternalTaskLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricExternalTaskLogDto
func (a *HistoricExternalTaskLogAPIService) GetHistoricExternalTaskLogsExecute(r ApiGetHistoricExternalTaskLogsRequest) ([]HistoricExternalTaskLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricExternalTaskLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricExternalTaskLogAPIService.GetHistoricExternalTaskLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/external-task-log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.logId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logId", r.logId, "")
	}
	if r.externalTaskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalTaskId", r.externalTaskId, "")
	}
	if r.topicName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "topicName", r.topicName, "")
	}
	if r.workerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workerId", r.workerId, "")
	}
	if r.errorMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "errorMessage", r.errorMessage, "")
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionIdIn", r.executionIdIn, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.priorityLowerThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priorityLowerThanOrEquals", r.priorityLowerThanOrEquals, "")
	}
	if r.priorityHigherThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priorityHigherThanOrEquals", r.priorityHigherThanOrEquals, "")
	}
	if r.creationLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creationLog", r.creationLog, "")
	}
	if r.failureLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failureLog", r.failureLog, "")
	}
	if r.successLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "successLog", r.successLog, "")
	}
	if r.deletionLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deletionLog", r.deletionLog, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricExternalTaskLogsCountRequest struct {
	ctx context.Context
	ApiService HistoricExternalTaskLogAPI
	logId *string
	externalTaskId *string
	topicName *string
	workerId *string
	errorMessage *string
	activityIdIn *string
	activityInstanceIdIn *string
	executionIdIn *string
	processInstanceId *string
	processDefinitionId *string
	processDefinitionKey *string
	tenantIdIn *string
	withoutTenantId *bool
	priorityLowerThanOrEquals *int64
	priorityHigherThanOrEquals *int64
	creationLog *bool
	failureLog *bool
	successLog *bool
	deletionLog *bool
}

// Filter by historic external task log id.
func (r ApiGetHistoricExternalTaskLogsCountRequest) LogId(logId string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.logId = &logId
	return r
}

// Filter by external task id.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ExternalTaskId(externalTaskId string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.externalTaskId = &externalTaskId
	return r
}

// Filter by an external task topic.
func (r ApiGetHistoricExternalTaskLogsCountRequest) TopicName(topicName string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.topicName = &topicName
	return r
}

// Filter by the id of the worker that the task was most recently locked by.
func (r ApiGetHistoricExternalTaskLogsCountRequest) WorkerId(workerId string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.workerId = &workerId
	return r
}

// Filter by external task exception message.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ErrorMessage(errorMessage string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.errorMessage = &errorMessage
	return r
}

// Only include historic external task logs which belong to one of the passed activity ids.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ActivityIdIn(activityIdIn string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Only include historic external task logs which belong to one of the passed activity instance ids.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Only include historic external task logs which belong to one of the passed execution ids.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ExecutionIdIn(executionIdIn string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process definition id.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by process definition key.
func (r ApiGetHistoricExternalTaskLogsCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Only include historic external task log entries which belong to one of the passed and comma-separated tenant ids.
func (r ApiGetHistoricExternalTaskLogsCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricExternalTaskLogsCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic external task log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricExternalTaskLogsCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include logs for which the associated external task had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricExternalTaskLogsCountRequest) PriorityLowerThanOrEquals(priorityLowerThanOrEquals int64) ApiGetHistoricExternalTaskLogsCountRequest {
	r.priorityLowerThanOrEquals = &priorityLowerThanOrEquals
	return r
}

// Only include logs for which the associated external task had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricExternalTaskLogsCountRequest) PriorityHigherThanOrEquals(priorityHigherThanOrEquals int64) ApiGetHistoricExternalTaskLogsCountRequest {
	r.priorityHigherThanOrEquals = &priorityHigherThanOrEquals
	return r
}

// Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsCountRequest) CreationLog(creationLog bool) ApiGetHistoricExternalTaskLogsCountRequest {
	r.creationLog = &creationLog
	return r
}

// Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsCountRequest) FailureLog(failureLog bool) ApiGetHistoricExternalTaskLogsCountRequest {
	r.failureLog = &failureLog
	return r
}

// Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsCountRequest) SuccessLog(successLog bool) ApiGetHistoricExternalTaskLogsCountRequest {
	r.successLog = &successLog
	return r
}

// Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricExternalTaskLogsCountRequest) DeletionLog(deletionLog bool) ApiGetHistoricExternalTaskLogsCountRequest {
	r.deletionLog = &deletionLog
	return r
}

func (r ApiGetHistoricExternalTaskLogsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricExternalTaskLogsCountExecute(r)
}

/*
GetHistoricExternalTaskLogsCount Get External Task Log Count

Queries for the number of historic external task logs that fulfill the given
parameters.
Takes the same parameters as the
[Get External Task Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricExternalTaskLogsCountRequest
*/
func (a *HistoricExternalTaskLogAPIService) GetHistoricExternalTaskLogsCount(ctx context.Context) ApiGetHistoricExternalTaskLogsCountRequest {
	return ApiGetHistoricExternalTaskLogsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricExternalTaskLogAPIService) GetHistoricExternalTaskLogsCountExecute(r ApiGetHistoricExternalTaskLogsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricExternalTaskLogAPIService.GetHistoricExternalTaskLogsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/external-task-log/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.logId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logId", r.logId, "")
	}
	if r.externalTaskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalTaskId", r.externalTaskId, "")
	}
	if r.topicName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "topicName", r.topicName, "")
	}
	if r.workerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workerId", r.workerId, "")
	}
	if r.errorMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "errorMessage", r.errorMessage, "")
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionIdIn", r.executionIdIn, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.priorityLowerThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priorityLowerThanOrEquals", r.priorityLowerThanOrEquals, "")
	}
	if r.priorityHigherThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priorityHigherThanOrEquals", r.priorityHigherThanOrEquals, "")
	}
	if r.creationLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creationLog", r.creationLog, "")
	}
	if r.failureLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failureLog", r.failureLog, "")
	}
	if r.successLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "successLog", r.successLog, "")
	}
	if r.deletionLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deletionLog", r.deletionLog, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricExternalTaskLogsRequest struct {
	ctx context.Context
	ApiService HistoricExternalTaskLogAPI
	historicExternalTaskLogQueryDto *HistoricExternalTaskLogQueryDto
}

func (r ApiQueryHistoricExternalTaskLogsRequest) HistoricExternalTaskLogQueryDto(historicExternalTaskLogQueryDto HistoricExternalTaskLogQueryDto) ApiQueryHistoricExternalTaskLogsRequest {
	r.historicExternalTaskLogQueryDto = &historicExternalTaskLogQueryDto
	return r
}

func (r ApiQueryHistoricExternalTaskLogsRequest) Execute() ([]HistoricExternalTaskLogDto, *http.Response, error) {
	return r.ApiService.QueryHistoricExternalTaskLogsExecute(r)
}

/*
QueryHistoricExternalTaskLogs Get External Task Logs (POST)

Queries for historic external task logs that fulfill the given parameters.
This method is slightly more powerful than the
[Get External Task Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query/)
method because it allows filtering by historic external task logs
values of the different types `String`, `Number` or `Boolean`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricExternalTaskLogsRequest
*/
func (a *HistoricExternalTaskLogAPIService) QueryHistoricExternalTaskLogs(ctx context.Context) ApiQueryHistoricExternalTaskLogsRequest {
	return ApiQueryHistoricExternalTaskLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricExternalTaskLogDto
func (a *HistoricExternalTaskLogAPIService) QueryHistoricExternalTaskLogsExecute(r ApiQueryHistoricExternalTaskLogsRequest) ([]HistoricExternalTaskLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricExternalTaskLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricExternalTaskLogAPIService.QueryHistoricExternalTaskLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/external-task-log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicExternalTaskLogQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricExternalTaskLogsCountRequest struct {
	ctx context.Context
	ApiService HistoricExternalTaskLogAPI
	historicExternalTaskLogQueryDto *HistoricExternalTaskLogQueryDto
}

func (r ApiQueryHistoricExternalTaskLogsCountRequest) HistoricExternalTaskLogQueryDto(historicExternalTaskLogQueryDto HistoricExternalTaskLogQueryDto) ApiQueryHistoricExternalTaskLogsCountRequest {
	r.historicExternalTaskLogQueryDto = &historicExternalTaskLogQueryDto
	return r
}

func (r ApiQueryHistoricExternalTaskLogsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.QueryHistoricExternalTaskLogsCountExecute(r)
}

/*
QueryHistoricExternalTaskLogsCount Get External Task Log Count (POST)

Queries for the number of historic external task logs that fulfill the given
parameters.
This method takes the same message body as the
[Get External Task Logs (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/post-external-task-log-query/)
method and therefore it is slightly more powerful than the
[Get External Task Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/external-task-log/get-external-task-log-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricExternalTaskLogsCountRequest
*/
func (a *HistoricExternalTaskLogAPIService) QueryHistoricExternalTaskLogsCount(ctx context.Context) ApiQueryHistoricExternalTaskLogsCountRequest {
	return ApiQueryHistoricExternalTaskLogsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricExternalTaskLogAPIService) QueryHistoricExternalTaskLogsCountExecute(r ApiQueryHistoricExternalTaskLogsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricExternalTaskLogAPIService.QueryHistoricExternalTaskLogsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/external-task-log/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicExternalTaskLogQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
