/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the DecisionDefinitionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecisionDefinitionDto{}

// DecisionDefinitionDto struct for DecisionDefinitionDto
type DecisionDefinitionDto struct {
	// The id of the decision definition
	Id NullableString `json:"id,omitempty"`
	// The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition.
	Key NullableString `json:"key,omitempty"`
	// The category of the decision definition.
	Category NullableString `json:"category,omitempty"`
	// The name of the decision definition.
	Name NullableString `json:"name,omitempty"`
	// The version of the decision definition that the engine assigned to it.
	Version NullableInt32 `json:"version,omitempty"`
	// The file name of the decision definition.
	Resource NullableString `json:"resource,omitempty"`
	// The deployment id of the decision definition.
	DeploymentId NullableString `json:"deploymentId,omitempty"`
	// The tenant id of the decision definition.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The id of the decision requirements definition this decision definition belongs to.
	DecisionRequirementsDefinitionId NullableString `json:"decisionRequirementsDefinitionId,omitempty"`
	// The key of the decision requirements definition this decision definition belongs to.
	DecisionRequirementsDefinitionKey NullableString `json:"decisionRequirementsDefinitionKey,omitempty"`
	// History time to live value of the decision definition. Is used within [History cleanup](https://docs.camunda.org/manual/7.21/user-guide/process-engine/history/#history-cleanup).
	HistoryTimeToLive NullableInt32 `json:"historyTimeToLive,omitempty"`
	// The version tag of the decision definition.
	VersionTag NullableString `json:"versionTag,omitempty"`
}

// NewDecisionDefinitionDto instantiates a new DecisionDefinitionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecisionDefinitionDto() *DecisionDefinitionDto {
	this := DecisionDefinitionDto{}
	return &this
}

// NewDecisionDefinitionDtoWithDefaults instantiates a new DecisionDefinitionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecisionDefinitionDtoWithDefaults() *DecisionDefinitionDto {
	this := DecisionDefinitionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DecisionDefinitionDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DecisionDefinitionDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetId() {
	o.Id.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *DecisionDefinitionDto) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *DecisionDefinitionDto) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetKey() {
	o.Key.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *DecisionDefinitionDto) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *DecisionDefinitionDto) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetCategory() {
	o.Category.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DecisionDefinitionDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DecisionDefinitionDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetName() {
	o.Name.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetVersion() int32 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *DecisionDefinitionDto) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *DecisionDefinitionDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetVersion() {
	o.Version.Unset()
}

// GetResource returns the Resource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetResource() string {
	if o == nil || IsNil(o.Resource.Get()) {
		var ret string
		return ret
	}
	return *o.Resource.Get()
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resource.Get(), o.Resource.IsSet()
}

// HasResource returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasResource() bool {
	if o != nil && o.Resource.IsSet() {
		return true
	}

	return false
}

// SetResource gets a reference to the given NullableString and assigns it to the Resource field.
func (o *DecisionDefinitionDto) SetResource(v string) {
	o.Resource.Set(&v)
}
// SetResourceNil sets the value for Resource to be an explicit nil
func (o *DecisionDefinitionDto) SetResourceNil() {
	o.Resource.Set(nil)
}

// UnsetResource ensures that no value is present for Resource, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetResource() {
	o.Resource.Unset()
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *DecisionDefinitionDto) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *DecisionDefinitionDto) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *DecisionDefinitionDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *DecisionDefinitionDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetDecisionRequirementsDefinitionId returns the DecisionRequirementsDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetDecisionRequirementsDefinitionId() string {
	if o == nil || IsNil(o.DecisionRequirementsDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionRequirementsDefinitionId.Get()
}

// GetDecisionRequirementsDefinitionIdOk returns a tuple with the DecisionRequirementsDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetDecisionRequirementsDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionRequirementsDefinitionId.Get(), o.DecisionRequirementsDefinitionId.IsSet()
}

// HasDecisionRequirementsDefinitionId returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasDecisionRequirementsDefinitionId() bool {
	if o != nil && o.DecisionRequirementsDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetDecisionRequirementsDefinitionId gets a reference to the given NullableString and assigns it to the DecisionRequirementsDefinitionId field.
func (o *DecisionDefinitionDto) SetDecisionRequirementsDefinitionId(v string) {
	o.DecisionRequirementsDefinitionId.Set(&v)
}
// SetDecisionRequirementsDefinitionIdNil sets the value for DecisionRequirementsDefinitionId to be an explicit nil
func (o *DecisionDefinitionDto) SetDecisionRequirementsDefinitionIdNil() {
	o.DecisionRequirementsDefinitionId.Set(nil)
}

// UnsetDecisionRequirementsDefinitionId ensures that no value is present for DecisionRequirementsDefinitionId, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetDecisionRequirementsDefinitionId() {
	o.DecisionRequirementsDefinitionId.Unset()
}

// GetDecisionRequirementsDefinitionKey returns the DecisionRequirementsDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetDecisionRequirementsDefinitionKey() string {
	if o == nil || IsNil(o.DecisionRequirementsDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionRequirementsDefinitionKey.Get()
}

// GetDecisionRequirementsDefinitionKeyOk returns a tuple with the DecisionRequirementsDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetDecisionRequirementsDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionRequirementsDefinitionKey.Get(), o.DecisionRequirementsDefinitionKey.IsSet()
}

// HasDecisionRequirementsDefinitionKey returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasDecisionRequirementsDefinitionKey() bool {
	if o != nil && o.DecisionRequirementsDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetDecisionRequirementsDefinitionKey gets a reference to the given NullableString and assigns it to the DecisionRequirementsDefinitionKey field.
func (o *DecisionDefinitionDto) SetDecisionRequirementsDefinitionKey(v string) {
	o.DecisionRequirementsDefinitionKey.Set(&v)
}
// SetDecisionRequirementsDefinitionKeyNil sets the value for DecisionRequirementsDefinitionKey to be an explicit nil
func (o *DecisionDefinitionDto) SetDecisionRequirementsDefinitionKeyNil() {
	o.DecisionRequirementsDefinitionKey.Set(nil)
}

// UnsetDecisionRequirementsDefinitionKey ensures that no value is present for DecisionRequirementsDefinitionKey, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetDecisionRequirementsDefinitionKey() {
	o.DecisionRequirementsDefinitionKey.Unset()
}

// GetHistoryTimeToLive returns the HistoryTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetHistoryTimeToLive() int32 {
	if o == nil || IsNil(o.HistoryTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HistoryTimeToLive.Get()
}

// GetHistoryTimeToLiveOk returns a tuple with the HistoryTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetHistoryTimeToLiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryTimeToLive.Get(), o.HistoryTimeToLive.IsSet()
}

// HasHistoryTimeToLive returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasHistoryTimeToLive() bool {
	if o != nil && o.HistoryTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHistoryTimeToLive gets a reference to the given NullableInt32 and assigns it to the HistoryTimeToLive field.
func (o *DecisionDefinitionDto) SetHistoryTimeToLive(v int32) {
	o.HistoryTimeToLive.Set(&v)
}
// SetHistoryTimeToLiveNil sets the value for HistoryTimeToLive to be an explicit nil
func (o *DecisionDefinitionDto) SetHistoryTimeToLiveNil() {
	o.HistoryTimeToLive.Set(nil)
}

// UnsetHistoryTimeToLive ensures that no value is present for HistoryTimeToLive, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetHistoryTimeToLive() {
	o.HistoryTimeToLive.Unset()
}

// GetVersionTag returns the VersionTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionDefinitionDto) GetVersionTag() string {
	if o == nil || IsNil(o.VersionTag.Get()) {
		var ret string
		return ret
	}
	return *o.VersionTag.Get()
}

// GetVersionTagOk returns a tuple with the VersionTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionDefinitionDto) GetVersionTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionTag.Get(), o.VersionTag.IsSet()
}

// HasVersionTag returns a boolean if a field has been set.
func (o *DecisionDefinitionDto) HasVersionTag() bool {
	if o != nil && o.VersionTag.IsSet() {
		return true
	}

	return false
}

// SetVersionTag gets a reference to the given NullableString and assigns it to the VersionTag field.
func (o *DecisionDefinitionDto) SetVersionTag(v string) {
	o.VersionTag.Set(&v)
}
// SetVersionTagNil sets the value for VersionTag to be an explicit nil
func (o *DecisionDefinitionDto) SetVersionTagNil() {
	o.VersionTag.Set(nil)
}

// UnsetVersionTag ensures that no value is present for VersionTag, not even an explicit nil
func (o *DecisionDefinitionDto) UnsetVersionTag() {
	o.VersionTag.Unset()
}

func (o DecisionDefinitionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecisionDefinitionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Resource.IsSet() {
		toSerialize["resource"] = o.Resource.Get()
	}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.DecisionRequirementsDefinitionId.IsSet() {
		toSerialize["decisionRequirementsDefinitionId"] = o.DecisionRequirementsDefinitionId.Get()
	}
	if o.DecisionRequirementsDefinitionKey.IsSet() {
		toSerialize["decisionRequirementsDefinitionKey"] = o.DecisionRequirementsDefinitionKey.Get()
	}
	if o.HistoryTimeToLive.IsSet() {
		toSerialize["historyTimeToLive"] = o.HistoryTimeToLive.Get()
	}
	if o.VersionTag.IsSet() {
		toSerialize["versionTag"] = o.VersionTag.Get()
	}
	return toSerialize, nil
}

type NullableDecisionDefinitionDto struct {
	value *DecisionDefinitionDto
	isSet bool
}

func (v NullableDecisionDefinitionDto) Get() *DecisionDefinitionDto {
	return v.value
}

func (v *NullableDecisionDefinitionDto) Set(val *DecisionDefinitionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDecisionDefinitionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDecisionDefinitionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecisionDefinitionDto(val *DecisionDefinitionDto) *NullableDecisionDefinitionDto {
	return &NullableDecisionDefinitionDto{value: val, isSet: true}
}

func (v NullableDecisionDefinitionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecisionDefinitionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


