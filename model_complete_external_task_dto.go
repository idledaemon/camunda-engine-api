/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CompleteExternalTaskDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteExternalTaskDto{}

// CompleteExternalTaskDto struct for CompleteExternalTaskDto
type CompleteExternalTaskDto struct {
	// **Mandatory.** The ID of the worker who is performing the operation on the external task. If the task is already locked, must match the id of the worker who has most recently locked the task.
	WorkerId *string `json:"workerId,omitempty"`
	// A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:
	Variables map[string]VariableValueDto `json:"variables,omitempty"`
	// A JSON object containing local variable key-value pairs. Local variables are set only in the scope of external task. Each key is a variable name and each value a JSON variable value object with the following properties:
	LocalVariables map[string]VariableValueDto `json:"localVariables,omitempty"`
}

// NewCompleteExternalTaskDto instantiates a new CompleteExternalTaskDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteExternalTaskDto() *CompleteExternalTaskDto {
	this := CompleteExternalTaskDto{}
	return &this
}

// NewCompleteExternalTaskDtoWithDefaults instantiates a new CompleteExternalTaskDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteExternalTaskDtoWithDefaults() *CompleteExternalTaskDto {
	this := CompleteExternalTaskDto{}
	return &this
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *CompleteExternalTaskDto) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId) {
		var ret string
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteExternalTaskDto) GetWorkerIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkerId) {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *CompleteExternalTaskDto) HasWorkerId() bool {
	if o != nil && !IsNil(o.WorkerId) {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given string and assigns it to the WorkerId field.
func (o *CompleteExternalTaskDto) SetWorkerId(v string) {
	o.WorkerId = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteExternalTaskDto) GetVariables() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteExternalTaskDto) GetVariablesOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return &o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *CompleteExternalTaskDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]VariableValueDto and assigns it to the Variables field.
func (o *CompleteExternalTaskDto) SetVariables(v map[string]VariableValueDto) {
	o.Variables = v
}

// GetLocalVariables returns the LocalVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteExternalTaskDto) GetLocalVariables() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.LocalVariables
}

// GetLocalVariablesOk returns a tuple with the LocalVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteExternalTaskDto) GetLocalVariablesOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.LocalVariables) {
		return nil, false
	}
	return &o.LocalVariables, true
}

// HasLocalVariables returns a boolean if a field has been set.
func (o *CompleteExternalTaskDto) HasLocalVariables() bool {
	if o != nil && !IsNil(o.LocalVariables) {
		return true
	}

	return false
}

// SetLocalVariables gets a reference to the given map[string]VariableValueDto and assigns it to the LocalVariables field.
func (o *CompleteExternalTaskDto) SetLocalVariables(v map[string]VariableValueDto) {
	o.LocalVariables = v
}

func (o CompleteExternalTaskDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteExternalTaskDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WorkerId) {
		toSerialize["workerId"] = o.WorkerId
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.LocalVariables != nil {
		toSerialize["localVariables"] = o.LocalVariables
	}
	return toSerialize, nil
}

type NullableCompleteExternalTaskDto struct {
	value *CompleteExternalTaskDto
	isSet bool
}

func (v NullableCompleteExternalTaskDto) Get() *CompleteExternalTaskDto {
	return v.value
}

func (v *NullableCompleteExternalTaskDto) Set(val *CompleteExternalTaskDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteExternalTaskDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteExternalTaskDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteExternalTaskDto(val *CompleteExternalTaskDto) *NullableCompleteExternalTaskDto {
	return &NullableCompleteExternalTaskDto{value: val, isSet: true}
}

func (v NullableCompleteExternalTaskDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteExternalTaskDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


