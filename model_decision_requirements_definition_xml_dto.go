/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the DecisionRequirementsDefinitionXmlDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecisionRequirementsDefinitionXmlDto{}

// DecisionRequirementsDefinitionXmlDto struct for DecisionRequirementsDefinitionXmlDto
type DecisionRequirementsDefinitionXmlDto struct {
	// The id of the decision requirements definition.
	Id NullableString `json:"id,omitempty"`
	// An escaped XML string containing the XML that this decision requirements definition was deployed with. Carriage returns, line feeds and quotation marks are escaped.
	DmnXml NullableString `json:"dmnXml,omitempty"`
}

// NewDecisionRequirementsDefinitionXmlDto instantiates a new DecisionRequirementsDefinitionXmlDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecisionRequirementsDefinitionXmlDto() *DecisionRequirementsDefinitionXmlDto {
	this := DecisionRequirementsDefinitionXmlDto{}
	return &this
}

// NewDecisionRequirementsDefinitionXmlDtoWithDefaults instantiates a new DecisionRequirementsDefinitionXmlDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecisionRequirementsDefinitionXmlDtoWithDefaults() *DecisionRequirementsDefinitionXmlDto {
	this := DecisionRequirementsDefinitionXmlDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionRequirementsDefinitionXmlDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionRequirementsDefinitionXmlDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DecisionRequirementsDefinitionXmlDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DecisionRequirementsDefinitionXmlDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DecisionRequirementsDefinitionXmlDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DecisionRequirementsDefinitionXmlDto) UnsetId() {
	o.Id.Unset()
}

// GetDmnXml returns the DmnXml field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DecisionRequirementsDefinitionXmlDto) GetDmnXml() string {
	if o == nil || IsNil(o.DmnXml.Get()) {
		var ret string
		return ret
	}
	return *o.DmnXml.Get()
}

// GetDmnXmlOk returns a tuple with the DmnXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DecisionRequirementsDefinitionXmlDto) GetDmnXmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DmnXml.Get(), o.DmnXml.IsSet()
}

// HasDmnXml returns a boolean if a field has been set.
func (o *DecisionRequirementsDefinitionXmlDto) HasDmnXml() bool {
	if o != nil && o.DmnXml.IsSet() {
		return true
	}

	return false
}

// SetDmnXml gets a reference to the given NullableString and assigns it to the DmnXml field.
func (o *DecisionRequirementsDefinitionXmlDto) SetDmnXml(v string) {
	o.DmnXml.Set(&v)
}
// SetDmnXmlNil sets the value for DmnXml to be an explicit nil
func (o *DecisionRequirementsDefinitionXmlDto) SetDmnXmlNil() {
	o.DmnXml.Set(nil)
}

// UnsetDmnXml ensures that no value is present for DmnXml, not even an explicit nil
func (o *DecisionRequirementsDefinitionXmlDto) UnsetDmnXml() {
	o.DmnXml.Unset()
}

func (o DecisionRequirementsDefinitionXmlDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecisionRequirementsDefinitionXmlDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.DmnXml.IsSet() {
		toSerialize["dmnXml"] = o.DmnXml.Get()
	}
	return toSerialize, nil
}

type NullableDecisionRequirementsDefinitionXmlDto struct {
	value *DecisionRequirementsDefinitionXmlDto
	isSet bool
}

func (v NullableDecisionRequirementsDefinitionXmlDto) Get() *DecisionRequirementsDefinitionXmlDto {
	return v.value
}

func (v *NullableDecisionRequirementsDefinitionXmlDto) Set(val *DecisionRequirementsDefinitionXmlDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDecisionRequirementsDefinitionXmlDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDecisionRequirementsDefinitionXmlDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecisionRequirementsDefinitionXmlDto(val *DecisionRequirementsDefinitionXmlDto) *NullableDecisionRequirementsDefinitionXmlDto {
	return &NullableDecisionRequirementsDefinitionXmlDto{value: val, isSet: true}
}

func (v NullableDecisionRequirementsDefinitionXmlDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecisionRequirementsDefinitionXmlDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


