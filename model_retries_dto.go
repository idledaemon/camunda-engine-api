/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the RetriesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetriesDto{}

// RetriesDto struct for RetriesDto
type RetriesDto struct {
	// The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again. Can not be null.
	Retries NullableInt32 `json:"retries,omitempty"`
}

// NewRetriesDto instantiates a new RetriesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetriesDto() *RetriesDto {
	this := RetriesDto{}
	return &this
}

// NewRetriesDtoWithDefaults instantiates a new RetriesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetriesDtoWithDefaults() *RetriesDto {
	this := RetriesDto{}
	return &this
}

// GetRetries returns the Retries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetriesDto) GetRetries() int32 {
	if o == nil || IsNil(o.Retries.Get()) {
		var ret int32
		return ret
	}
	return *o.Retries.Get()
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetriesDto) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Retries.Get(), o.Retries.IsSet()
}

// HasRetries returns a boolean if a field has been set.
func (o *RetriesDto) HasRetries() bool {
	if o != nil && o.Retries.IsSet() {
		return true
	}

	return false
}

// SetRetries gets a reference to the given NullableInt32 and assigns it to the Retries field.
func (o *RetriesDto) SetRetries(v int32) {
	o.Retries.Set(&v)
}
// SetRetriesNil sets the value for Retries to be an explicit nil
func (o *RetriesDto) SetRetriesNil() {
	o.Retries.Set(nil)
}

// UnsetRetries ensures that no value is present for Retries, not even an explicit nil
func (o *RetriesDto) UnsetRetries() {
	o.Retries.Unset()
}

func (o RetriesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetriesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Retries.IsSet() {
		toSerialize["retries"] = o.Retries.Get()
	}
	return toSerialize, nil
}

type NullableRetriesDto struct {
	value *RetriesDto
	isSet bool
}

func (v NullableRetriesDto) Get() *RetriesDto {
	return v.value
}

func (v *NullableRetriesDto) Set(val *RetriesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRetriesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRetriesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetriesDto(val *RetriesDto) *NullableRetriesDto {
	return &NullableRetriesDto{value: val, isSet: true}
}

func (v NullableRetriesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetriesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


