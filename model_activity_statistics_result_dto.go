/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ActivityStatisticsResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStatisticsResultDto{}

// ActivityStatisticsResultDto struct for ActivityStatisticsResultDto
type ActivityStatisticsResultDto struct {
	// The id of the activity the results are aggregated for.
	Id NullableString `json:"id,omitempty"`
	// The total number of running process instances of this activity.
	Instances *int32 `json:"instances,omitempty"`
	// The total number of failed jobs for the running instances. **Note**: Will be `0` (not `null`), if failed jobs were excluded.
	FailedJobs *int32 `json:"failedJobs,omitempty"`
	// Each item in the resulting array is an object which contains `incidentType` and `incidentCount`. **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded. Furthermore, the array will be also empty if no incidents were found.
	Incidents []IncidentStatisticsResultDto `json:"incidents,omitempty"`
	// The fully qualified class name of the data transfer object class. The class name might change in future releases.
	Class NullableString `json:"@class,omitempty"`
}

// NewActivityStatisticsResultDto instantiates a new ActivityStatisticsResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStatisticsResultDto() *ActivityStatisticsResultDto {
	this := ActivityStatisticsResultDto{}
	return &this
}

// NewActivityStatisticsResultDtoWithDefaults instantiates a new ActivityStatisticsResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatisticsResultDtoWithDefaults() *ActivityStatisticsResultDto {
	this := ActivityStatisticsResultDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityStatisticsResultDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityStatisticsResultDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ActivityStatisticsResultDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ActivityStatisticsResultDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ActivityStatisticsResultDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ActivityStatisticsResultDto) UnsetId() {
	o.Id.Unset()
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *ActivityStatisticsResultDto) GetInstances() int32 {
	if o == nil || IsNil(o.Instances) {
		var ret int32
		return ret
	}
	return *o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatisticsResultDto) GetInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *ActivityStatisticsResultDto) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given int32 and assigns it to the Instances field.
func (o *ActivityStatisticsResultDto) SetInstances(v int32) {
	o.Instances = &v
}

// GetFailedJobs returns the FailedJobs field value if set, zero value otherwise.
func (o *ActivityStatisticsResultDto) GetFailedJobs() int32 {
	if o == nil || IsNil(o.FailedJobs) {
		var ret int32
		return ret
	}
	return *o.FailedJobs
}

// GetFailedJobsOk returns a tuple with the FailedJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatisticsResultDto) GetFailedJobsOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedJobs) {
		return nil, false
	}
	return o.FailedJobs, true
}

// HasFailedJobs returns a boolean if a field has been set.
func (o *ActivityStatisticsResultDto) HasFailedJobs() bool {
	if o != nil && !IsNil(o.FailedJobs) {
		return true
	}

	return false
}

// SetFailedJobs gets a reference to the given int32 and assigns it to the FailedJobs field.
func (o *ActivityStatisticsResultDto) SetFailedJobs(v int32) {
	o.FailedJobs = &v
}

// GetIncidents returns the Incidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityStatisticsResultDto) GetIncidents() []IncidentStatisticsResultDto {
	if o == nil {
		var ret []IncidentStatisticsResultDto
		return ret
	}
	return o.Incidents
}

// GetIncidentsOk returns a tuple with the Incidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityStatisticsResultDto) GetIncidentsOk() ([]IncidentStatisticsResultDto, bool) {
	if o == nil || IsNil(o.Incidents) {
		return nil, false
	}
	return o.Incidents, true
}

// HasIncidents returns a boolean if a field has been set.
func (o *ActivityStatisticsResultDto) HasIncidents() bool {
	if o != nil && !IsNil(o.Incidents) {
		return true
	}

	return false
}

// SetIncidents gets a reference to the given []IncidentStatisticsResultDto and assigns it to the Incidents field.
func (o *ActivityStatisticsResultDto) SetIncidents(v []IncidentStatisticsResultDto) {
	o.Incidents = v
}

// GetClass returns the Class field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityStatisticsResultDto) GetClass() string {
	if o == nil || IsNil(o.Class.Get()) {
		var ret string
		return ret
	}
	return *o.Class.Get()
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityStatisticsResultDto) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Class.Get(), o.Class.IsSet()
}

// HasClass returns a boolean if a field has been set.
func (o *ActivityStatisticsResultDto) HasClass() bool {
	if o != nil && o.Class.IsSet() {
		return true
	}

	return false
}

// SetClass gets a reference to the given NullableString and assigns it to the Class field.
func (o *ActivityStatisticsResultDto) SetClass(v string) {
	o.Class.Set(&v)
}
// SetClassNil sets the value for Class to be an explicit nil
func (o *ActivityStatisticsResultDto) SetClassNil() {
	o.Class.Set(nil)
}

// UnsetClass ensures that no value is present for Class, not even an explicit nil
func (o *ActivityStatisticsResultDto) UnsetClass() {
	o.Class.Unset()
}

func (o ActivityStatisticsResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStatisticsResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.FailedJobs) {
		toSerialize["failedJobs"] = o.FailedJobs
	}
	if o.Incidents != nil {
		toSerialize["incidents"] = o.Incidents
	}
	if o.Class.IsSet() {
		toSerialize["@class"] = o.Class.Get()
	}
	return toSerialize, nil
}

type NullableActivityStatisticsResultDto struct {
	value *ActivityStatisticsResultDto
	isSet bool
}

func (v NullableActivityStatisticsResultDto) Get() *ActivityStatisticsResultDto {
	return v.value
}

func (v *NullableActivityStatisticsResultDto) Set(val *ActivityStatisticsResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatisticsResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatisticsResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatisticsResultDto(val *ActivityStatisticsResultDto) *NullableActivityStatisticsResultDto {
	return &NullableActivityStatisticsResultDto{value: val, isSet: true}
}

func (v NullableActivityStatisticsResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatisticsResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


