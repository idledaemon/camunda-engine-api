/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the IdentityServiceGroupInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityServiceGroupInfoDto{}

// IdentityServiceGroupInfoDto struct for IdentityServiceGroupInfoDto
type IdentityServiceGroupInfoDto struct {
	// An array of group objects.
	Groups []IdentityServiceGroupDto `json:"groups,omitempty"`
	// An array that contains all users that are member in one of the groups.
	GroupUsers []IdentityServiceUserDto `json:"groupUsers,omitempty"`
}

// NewIdentityServiceGroupInfoDto instantiates a new IdentityServiceGroupInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityServiceGroupInfoDto() *IdentityServiceGroupInfoDto {
	this := IdentityServiceGroupInfoDto{}
	return &this
}

// NewIdentityServiceGroupInfoDtoWithDefaults instantiates a new IdentityServiceGroupInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityServiceGroupInfoDtoWithDefaults() *IdentityServiceGroupInfoDto {
	this := IdentityServiceGroupInfoDto{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityServiceGroupInfoDto) GetGroups() []IdentityServiceGroupDto {
	if o == nil {
		var ret []IdentityServiceGroupDto
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityServiceGroupInfoDto) GetGroupsOk() ([]IdentityServiceGroupDto, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IdentityServiceGroupInfoDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []IdentityServiceGroupDto and assigns it to the Groups field.
func (o *IdentityServiceGroupInfoDto) SetGroups(v []IdentityServiceGroupDto) {
	o.Groups = v
}

// GetGroupUsers returns the GroupUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityServiceGroupInfoDto) GetGroupUsers() []IdentityServiceUserDto {
	if o == nil {
		var ret []IdentityServiceUserDto
		return ret
	}
	return o.GroupUsers
}

// GetGroupUsersOk returns a tuple with the GroupUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityServiceGroupInfoDto) GetGroupUsersOk() ([]IdentityServiceUserDto, bool) {
	if o == nil || IsNil(o.GroupUsers) {
		return nil, false
	}
	return o.GroupUsers, true
}

// HasGroupUsers returns a boolean if a field has been set.
func (o *IdentityServiceGroupInfoDto) HasGroupUsers() bool {
	if o != nil && !IsNil(o.GroupUsers) {
		return true
	}

	return false
}

// SetGroupUsers gets a reference to the given []IdentityServiceUserDto and assigns it to the GroupUsers field.
func (o *IdentityServiceGroupInfoDto) SetGroupUsers(v []IdentityServiceUserDto) {
	o.GroupUsers = v
}

func (o IdentityServiceGroupInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityServiceGroupInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.GroupUsers != nil {
		toSerialize["groupUsers"] = o.GroupUsers
	}
	return toSerialize, nil
}

type NullableIdentityServiceGroupInfoDto struct {
	value *IdentityServiceGroupInfoDto
	isSet bool
}

func (v NullableIdentityServiceGroupInfoDto) Get() *IdentityServiceGroupInfoDto {
	return v.value
}

func (v *NullableIdentityServiceGroupInfoDto) Set(val *IdentityServiceGroupInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityServiceGroupInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityServiceGroupInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityServiceGroupInfoDto(val *IdentityServiceGroupInfoDto) *NullableIdentityServiceGroupInfoDto {
	return &NullableIdentityServiceGroupInfoDto{value: val, isSet: true}
}

func (v NullableIdentityServiceGroupInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityServiceGroupInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


