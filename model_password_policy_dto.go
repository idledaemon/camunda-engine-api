/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the PasswordPolicyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicyDto{}

// PasswordPolicyDto struct for PasswordPolicyDto
type PasswordPolicyDto struct {
	// An array of password policy rules. Each element of the array is representing one rule of the policy.
	Rules []PasswordPolicyRuleDto `json:"rules,omitempty"`
}

// NewPasswordPolicyDto instantiates a new PasswordPolicyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicyDto() *PasswordPolicyDto {
	this := PasswordPolicyDto{}
	return &this
}

// NewPasswordPolicyDtoWithDefaults instantiates a new PasswordPolicyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyDtoWithDefaults() *PasswordPolicyDto {
	this := PasswordPolicyDto{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordPolicyDto) GetRules() []PasswordPolicyRuleDto {
	if o == nil {
		var ret []PasswordPolicyRuleDto
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordPolicyDto) GetRulesOk() ([]PasswordPolicyRuleDto, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *PasswordPolicyDto) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PasswordPolicyRuleDto and assigns it to the Rules field.
func (o *PasswordPolicyDto) SetRules(v []PasswordPolicyRuleDto) {
	o.Rules = v
}

func (o PasswordPolicyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullablePasswordPolicyDto struct {
	value *PasswordPolicyDto
	isSet bool
}

func (v NullablePasswordPolicyDto) Get() *PasswordPolicyDto {
	return v.value
}

func (v *NullablePasswordPolicyDto) Set(val *PasswordPolicyDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicyDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicyDto(val *PasswordPolicyDto) *NullablePasswordPolicyDto {
	return &NullablePasswordPolicyDto{value: val, isSet: true}
}

func (v NullablePasswordPolicyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


