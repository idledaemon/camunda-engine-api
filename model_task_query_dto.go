/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the TaskQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskQueryDto{}

// TaskQueryDto A Task query which defines a group of Tasks.
type TaskQueryDto struct {
	// Restrict to task with the given id.
	TaskId NullableString `json:"taskId,omitempty"`
	// Restrict to tasks with any of the given ids.
	TaskIdIn []string `json:"taskIdIn,omitempty"`
	// Restrict to tasks that belong to process instances with the given id.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Restrict to tasks that belong to process instances with the given ids.
	ProcessInstanceIdIn []string `json:"processInstanceIdIn,omitempty"`
	// Restrict to tasks that belong to process instances with the given business key.
	ProcessInstanceBusinessKey NullableString `json:"processInstanceBusinessKey,omitempty"`
	// Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
	ProcessInstanceBusinessKeyExpression NullableString `json:"processInstanceBusinessKeyExpression,omitempty"`
	// Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
	ProcessInstanceBusinessKeyIn []string `json:"processInstanceBusinessKeyIn,omitempty"`
	// Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
	ProcessInstanceBusinessKeyLike NullableString `json:"processInstanceBusinessKeyLike,omitempty"`
	// Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
	ProcessInstanceBusinessKeyLikeExpression NullableString `json:"processInstanceBusinessKeyLikeExpression,omitempty"`
	// Restrict to tasks that belong to a process definition with the given id.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Restrict to tasks that belong to a process definition with the given key.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
	ProcessDefinitionKeyIn []string `json:"processDefinitionKeyIn,omitempty"`
	// Restrict to tasks that belong to a process definition with the given name.
	ProcessDefinitionName NullableString `json:"processDefinitionName,omitempty"`
	// Restrict to tasks that have a process definition name that has the parameter value as  a substring.
	ProcessDefinitionNameLike NullableString `json:"processDefinitionNameLike,omitempty"`
	// Restrict to tasks that belong to an execution with the given id.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// Restrict to tasks that belong to case instances with the given id.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// Restrict to tasks that belong to case instances with the given business key.
	CaseInstanceBusinessKey NullableString `json:"caseInstanceBusinessKey,omitempty"`
	// Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
	CaseInstanceBusinessKeyLike NullableString `json:"caseInstanceBusinessKeyLike,omitempty"`
	// Restrict to tasks that belong to a case definition with the given id.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// Restrict to tasks that belong to a case definition with the given key.
	CaseDefinitionKey NullableString `json:"caseDefinitionKey,omitempty"`
	// Restrict to tasks that belong to a case definition with the given name.
	CaseDefinitionName NullableString `json:"caseDefinitionName,omitempty"`
	// Restrict to tasks that have a case definition name that has the parameter value as a  substring.
	CaseDefinitionNameLike NullableString `json:"caseDefinitionNameLike,omitempty"`
	// Restrict to tasks that belong to a case execution with the given id.
	CaseExecutionId NullableString `json:"caseExecutionId,omitempty"`
	// Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
	ActivityInstanceIdIn []string `json:"activityInstanceIdIn,omitempty"`
	// Only include tasks which belong to one of the passed and comma-separated  tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Restrict to tasks that the given user is assigned to.
	Assignee NullableString `json:"assignee,omitempty"`
	// Restrict to tasks that the user described by the given expression is assigned to. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
	AssigneeExpression NullableString `json:"assigneeExpression,omitempty"`
	// Restrict to tasks that have an assignee that has the parameter  value as a substring.
	AssigneeLike NullableString `json:"assigneeLike,omitempty"`
	// Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
	AssigneeLikeExpression NullableString `json:"assigneeLikeExpression,omitempty"`
	// Only include tasks which are assigned to one of the passed and comma-separated user ids.
	AssigneeIn []string `json:"assigneeIn,omitempty"`
	// Only include tasks which are not assigned to one of the passed and comma-separated user ids.
	AssigneeNotIn []string `json:"assigneeNotIn,omitempty"`
	// Restrict to tasks that the given user owns.
	Owner NullableString `json:"owner,omitempty"`
	// Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
	OwnerExpression NullableString `json:"ownerExpression,omitempty"`
	// Only include tasks that are offered to the given group.
	CandidateGroup NullableString `json:"candidateGroup,omitempty"`
	// Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
	CandidateGroupExpression NullableString `json:"candidateGroupExpression,omitempty"`
	// Only include tasks that are offered to the given user or to one of his groups.
	CandidateUser NullableString `json:"candidateUser,omitempty"`
	// Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
	CandidateUserExpression NullableString `json:"candidateUserExpression,omitempty"`
	// Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s).
	IncludeAssignedTasks NullableBool `json:"includeAssignedTasks,omitempty"`
	// Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
	InvolvedUser NullableString `json:"involvedUser,omitempty"`
	// Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
	InvolvedUserExpression NullableString `json:"involvedUserExpression,omitempty"`
	// If set to `true`, restricts the query to all tasks that are assigned.
	Assigned NullableBool `json:"assigned,omitempty"`
	// If set to `true`, restricts the query to all tasks that are unassigned.
	Unassigned NullableBool `json:"unassigned,omitempty"`
	// Restrict to tasks that have the given key.
	TaskDefinitionKey NullableString `json:"taskDefinitionKey,omitempty"`
	// Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
	TaskDefinitionKeyIn []string `json:"taskDefinitionKeyIn,omitempty"`
	// Restrict to tasks that have a key that has the parameter value as a substring.
	TaskDefinitionKeyLike NullableString `json:"taskDefinitionKeyLike,omitempty"`
	// Restrict to tasks that have the given name.
	Name NullableString `json:"name,omitempty"`
	// Restrict to tasks that do not have the given name.
	NameNotEqual NullableString `json:"nameNotEqual,omitempty"`
	// Restrict to tasks that have a name with the given parameter value as substring.
	NameLike NullableString `json:"nameLike,omitempty"`
	// Restrict to tasks that do not have a name with the given parameter value as substring.
	NameNotLike NullableString `json:"nameNotLike,omitempty"`
	// Restrict to tasks that have the given description.
	Description NullableString `json:"description,omitempty"`
	// Restrict to tasks that have a description that has the parameter value as a substring.
	DescriptionLike NullableString `json:"descriptionLike,omitempty"`
	// Restrict to tasks that have the given priority.
	Priority NullableInt32 `json:"priority,omitempty"`
	// Restrict to tasks that have a lower or equal priority.
	MaxPriority NullableInt32 `json:"maxPriority,omitempty"`
	// Restrict to tasks that have a higher or equal priority.
	MinPriority NullableInt32 `json:"minPriority,omitempty"`
	// Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
	DueDate NullableTime `json:"dueDate,omitempty"`
	// Restrict to tasks that are due on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	DueDateExpression NullableString `json:"dueDateExpression,omitempty"`
	// Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
	DueAfter NullableTime `json:"dueAfter,omitempty"`
	// Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	DueAfterExpression NullableString `json:"dueAfterExpression,omitempty"`
	// Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
	DueBefore NullableTime `json:"dueBefore,omitempty"`
	// Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	DueBeforeExpression NullableString `json:"dueBeforeExpression,omitempty"`
	// Only include tasks which have no due date. Value may only be `true`,  as `false` is the default behavior.
	WithoutDueDate NullableBool `json:"withoutDueDate,omitempty"`
	// Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
	FollowUpDate NullableTime `json:"followUpDate,omitempty"`
	// Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	FollowUpDateExpression NullableString `json:"followUpDateExpression,omitempty"`
	// Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
	FollowUpAfter NullableTime `json:"followUpAfter,omitempty"`
	// Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	FollowUpAfterExpression NullableString `json:"followUpAfterExpression,omitempty"`
	// Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
	FollowUpBefore NullableString `json:"followUpBefore,omitempty"`
	// Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	FollowUpBeforeExpression NullableString `json:"followUpBeforeExpression,omitempty"`
	// Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.
	FollowUpBeforeOrNotExistent NullableTime `json:"followUpBeforeOrNotExistent,omitempty"`
	// Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	FollowUpBeforeOrNotExistentExpression NullableString `json:"followUpBeforeOrNotExistentExpression,omitempty"`
	// Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
	CreatedOn NullableTime `json:"createdOn,omitempty"`
	// Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	CreatedOnExpression NullableString `json:"createdOnExpression,omitempty"`
	// Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
	CreatedAfter NullableTime `json:"createdAfter,omitempty"`
	// Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	CreatedAfterExpression NullableString `json:"createdAfterExpression,omitempty"`
	// Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
	CreatedBefore NullableTime `json:"createdBefore,omitempty"`
	// Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	CreatedBeforeExpression NullableString `json:"createdBeforeExpression,omitempty"`
	// Restrict to tasks that were updated after the given date. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.21/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
	UpdatedAfter NullableTime `json:"updatedAfter,omitempty"`
	// Restrict to tasks that were updated after the date described by the given expression. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.21/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
	UpdatedAfterExpression NullableString `json:"updatedAfterExpression,omitempty"`
	// Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.
	DelegationState NullableString `json:"delegationState,omitempty"`
	// Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.
	CandidateGroups []string `json:"candidateGroups,omitempty"`
	// Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.
	CandidateGroupsExpression NullableString `json:"candidateGroupsExpression,omitempty"`
	// Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.
	WithCandidateGroups NullableBool `json:"withCandidateGroups,omitempty"`
	// Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.
	WithoutCandidateGroups NullableBool `json:"withoutCandidateGroups,omitempty"`
	// Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior.
	WithCandidateUsers NullableBool `json:"withCandidateUsers,omitempty"`
	// Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior.
	WithoutCandidateUsers NullableBool `json:"withoutCandidateUsers,omitempty"`
	// Only include active tasks. Value may only be `true`, as `false` is the default behavior.
	Active NullableBool `json:"active,omitempty"`
	// Only include suspended tasks. Value may only be `true`, as `false` is the default behavior.
	Suspended NullableBool `json:"suspended,omitempty"`
	// A JSON array to only include tasks that have variables with certain values. The array consists of JSON objects with three properties `name`, `operator` and `value`. `name` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
	TaskVariables []VariableQueryParameterDto `json:"taskVariables,omitempty"`
	// A JSON array to only include tasks that belong to a process instance with variables with certain values. The array consists of JSON objects with three properties `name`, `operator` and `value`. `name` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`; `notLike`. `key` and `value` may not contain underscore or comma characters.
	ProcessVariables []VariableQueryParameterDto `json:"processVariables,omitempty"`
	// A JSON array to only include tasks that belong to a case instance with variables with certain values. The array consists of JSON objects with three properties `name`, `operator` and `value`. `name` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
	CaseInstanceVariables []VariableQueryParameterDto `json:"caseInstanceVariables,omitempty"`
	// Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal.
	VariableNamesIgnoreCase NullableBool `json:"variableNamesIgnoreCase,omitempty"`
	// Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal.
	VariableValuesIgnoreCase NullableBool `json:"variableValuesIgnoreCase,omitempty"`
	// Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
	ParentTaskId NullableString `json:"parentTaskId,omitempty"`
	// A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All task query properties can be used except for: `sorting`, `withCandidateGroups`, `withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`  See the [User guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
	OrQueries []TaskQueryDto `json:"orQueries,omitempty"`
	// Apply sorting of the result
	Sorting []TaskQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewTaskQueryDto instantiates a new TaskQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskQueryDto() *TaskQueryDto {
	this := TaskQueryDto{}
	var withoutTenantId bool = false
	this.WithoutTenantId = *NewNullableBool(&withoutTenantId)
	var includeAssignedTasks bool = false
	this.IncludeAssignedTasks = *NewNullableBool(&includeAssignedTasks)
	var assigned bool = false
	this.Assigned = *NewNullableBool(&assigned)
	var unassigned bool = false
	this.Unassigned = *NewNullableBool(&unassigned)
	var withoutDueDate bool = false
	this.WithoutDueDate = *NewNullableBool(&withoutDueDate)
	var withCandidateGroups bool = false
	this.WithCandidateGroups = *NewNullableBool(&withCandidateGroups)
	var withoutCandidateGroups bool = false
	this.WithoutCandidateGroups = *NewNullableBool(&withoutCandidateGroups)
	var withCandidateUsers bool = false
	this.WithCandidateUsers = *NewNullableBool(&withCandidateUsers)
	var withoutCandidateUsers bool = false
	this.WithoutCandidateUsers = *NewNullableBool(&withoutCandidateUsers)
	var active bool = false
	this.Active = *NewNullableBool(&active)
	var suspended bool = false
	this.Suspended = *NewNullableBool(&suspended)
	var variableNamesIgnoreCase bool = false
	this.VariableNamesIgnoreCase = *NewNullableBool(&variableNamesIgnoreCase)
	var variableValuesIgnoreCase bool = false
	this.VariableValuesIgnoreCase = *NewNullableBool(&variableValuesIgnoreCase)
	return &this
}

// NewTaskQueryDtoWithDefaults instantiates a new TaskQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskQueryDtoWithDefaults() *TaskQueryDto {
	this := TaskQueryDto{}
	var withoutTenantId bool = false
	this.WithoutTenantId = *NewNullableBool(&withoutTenantId)
	var includeAssignedTasks bool = false
	this.IncludeAssignedTasks = *NewNullableBool(&includeAssignedTasks)
	var assigned bool = false
	this.Assigned = *NewNullableBool(&assigned)
	var unassigned bool = false
	this.Unassigned = *NewNullableBool(&unassigned)
	var withoutDueDate bool = false
	this.WithoutDueDate = *NewNullableBool(&withoutDueDate)
	var withCandidateGroups bool = false
	this.WithCandidateGroups = *NewNullableBool(&withCandidateGroups)
	var withoutCandidateGroups bool = false
	this.WithoutCandidateGroups = *NewNullableBool(&withoutCandidateGroups)
	var withCandidateUsers bool = false
	this.WithCandidateUsers = *NewNullableBool(&withCandidateUsers)
	var withoutCandidateUsers bool = false
	this.WithoutCandidateUsers = *NewNullableBool(&withoutCandidateUsers)
	var active bool = false
	this.Active = *NewNullableBool(&active)
	var suspended bool = false
	this.Suspended = *NewNullableBool(&suspended)
	var variableNamesIgnoreCase bool = false
	this.VariableNamesIgnoreCase = *NewNullableBool(&variableNamesIgnoreCase)
	var variableValuesIgnoreCase bool = false
	this.VariableValuesIgnoreCase = *NewNullableBool(&variableValuesIgnoreCase)
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *TaskQueryDto) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *TaskQueryDto) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *TaskQueryDto) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetTaskIdIn returns the TaskIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTaskIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TaskIdIn
}

// GetTaskIdInOk returns a tuple with the TaskIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTaskIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TaskIdIn) {
		return nil, false
	}
	return o.TaskIdIn, true
}

// HasTaskIdIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTaskIdIn() bool {
	if o != nil && !IsNil(o.TaskIdIn) {
		return true
	}

	return false
}

// SetTaskIdIn gets a reference to the given []string and assigns it to the TaskIdIn field.
func (o *TaskQueryDto) SetTaskIdIn(v []string) {
	o.TaskIdIn = v
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *TaskQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *TaskQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessInstanceIdIn returns the ProcessInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIdIn
}

// GetProcessInstanceIdInOk returns a tuple with the ProcessInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIdIn) {
		return nil, false
	}
	return o.ProcessInstanceIdIn, true
}

// HasProcessInstanceIdIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceIdIn() bool {
	if o != nil && !IsNil(o.ProcessInstanceIdIn) {
		return true
	}

	return false
}

// SetProcessInstanceIdIn gets a reference to the given []string and assigns it to the ProcessInstanceIdIn field.
func (o *TaskQueryDto) SetProcessInstanceIdIn(v []string) {
	o.ProcessInstanceIdIn = v
}

// GetProcessInstanceBusinessKey returns the ProcessInstanceBusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceBusinessKey() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKey.Get()
}

// GetProcessInstanceBusinessKeyOk returns a tuple with the ProcessInstanceBusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKey.Get(), o.ProcessInstanceBusinessKey.IsSet()
}

// HasProcessInstanceBusinessKey returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceBusinessKey() bool {
	if o != nil && o.ProcessInstanceBusinessKey.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKey gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKey field.
func (o *TaskQueryDto) SetProcessInstanceBusinessKey(v string) {
	o.ProcessInstanceBusinessKey.Set(&v)
}
// SetProcessInstanceBusinessKeyNil sets the value for ProcessInstanceBusinessKey to be an explicit nil
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyNil() {
	o.ProcessInstanceBusinessKey.Set(nil)
}

// UnsetProcessInstanceBusinessKey ensures that no value is present for ProcessInstanceBusinessKey, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessInstanceBusinessKey() {
	o.ProcessInstanceBusinessKey.Unset()
}

// GetProcessInstanceBusinessKeyExpression returns the ProcessInstanceBusinessKeyExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyExpression() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyExpression.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKeyExpression.Get()
}

// GetProcessInstanceBusinessKeyExpressionOk returns a tuple with the ProcessInstanceBusinessKeyExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyExpression.Get(), o.ProcessInstanceBusinessKeyExpression.IsSet()
}

// HasProcessInstanceBusinessKeyExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceBusinessKeyExpression() bool {
	if o != nil && o.ProcessInstanceBusinessKeyExpression.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyExpression gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKeyExpression field.
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyExpression(v string) {
	o.ProcessInstanceBusinessKeyExpression.Set(&v)
}
// SetProcessInstanceBusinessKeyExpressionNil sets the value for ProcessInstanceBusinessKeyExpression to be an explicit nil
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyExpressionNil() {
	o.ProcessInstanceBusinessKeyExpression.Set(nil)
}

// UnsetProcessInstanceBusinessKeyExpression ensures that no value is present for ProcessInstanceBusinessKeyExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessInstanceBusinessKeyExpression() {
	o.ProcessInstanceBusinessKeyExpression.Unset()
}

// GetProcessInstanceBusinessKeyIn returns the ProcessInstanceBusinessKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceBusinessKeyIn
}

// GetProcessInstanceBusinessKeyInOk returns a tuple with the ProcessInstanceBusinessKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyIn) {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyIn, true
}

// HasProcessInstanceBusinessKeyIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceBusinessKeyIn() bool {
	if o != nil && !IsNil(o.ProcessInstanceBusinessKeyIn) {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyIn gets a reference to the given []string and assigns it to the ProcessInstanceBusinessKeyIn field.
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyIn(v []string) {
	o.ProcessInstanceBusinessKeyIn = v
}

// GetProcessInstanceBusinessKeyLike returns the ProcessInstanceBusinessKeyLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyLike() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyLike.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKeyLike.Get()
}

// GetProcessInstanceBusinessKeyLikeOk returns a tuple with the ProcessInstanceBusinessKeyLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyLike.Get(), o.ProcessInstanceBusinessKeyLike.IsSet()
}

// HasProcessInstanceBusinessKeyLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceBusinessKeyLike() bool {
	if o != nil && o.ProcessInstanceBusinessKeyLike.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyLike gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKeyLike field.
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyLike(v string) {
	o.ProcessInstanceBusinessKeyLike.Set(&v)
}
// SetProcessInstanceBusinessKeyLikeNil sets the value for ProcessInstanceBusinessKeyLike to be an explicit nil
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyLikeNil() {
	o.ProcessInstanceBusinessKeyLike.Set(nil)
}

// UnsetProcessInstanceBusinessKeyLike ensures that no value is present for ProcessInstanceBusinessKeyLike, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessInstanceBusinessKeyLike() {
	o.ProcessInstanceBusinessKeyLike.Unset()
}

// GetProcessInstanceBusinessKeyLikeExpression returns the ProcessInstanceBusinessKeyLikeExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyLikeExpression() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyLikeExpression.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKeyLikeExpression.Get()
}

// GetProcessInstanceBusinessKeyLikeExpressionOk returns a tuple with the ProcessInstanceBusinessKeyLikeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessInstanceBusinessKeyLikeExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyLikeExpression.Get(), o.ProcessInstanceBusinessKeyLikeExpression.IsSet()
}

// HasProcessInstanceBusinessKeyLikeExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessInstanceBusinessKeyLikeExpression() bool {
	if o != nil && o.ProcessInstanceBusinessKeyLikeExpression.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyLikeExpression gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKeyLikeExpression field.
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyLikeExpression(v string) {
	o.ProcessInstanceBusinessKeyLikeExpression.Set(&v)
}
// SetProcessInstanceBusinessKeyLikeExpressionNil sets the value for ProcessInstanceBusinessKeyLikeExpression to be an explicit nil
func (o *TaskQueryDto) SetProcessInstanceBusinessKeyLikeExpressionNil() {
	o.ProcessInstanceBusinessKeyLikeExpression.Set(nil)
}

// UnsetProcessInstanceBusinessKeyLikeExpression ensures that no value is present for ProcessInstanceBusinessKeyLikeExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessInstanceBusinessKeyLikeExpression() {
	o.ProcessInstanceBusinessKeyLikeExpression.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *TaskQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *TaskQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *TaskQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *TaskQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionKeyIn returns the ProcessDefinitionKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessDefinitionKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessDefinitionKeyIn
}

// GetProcessDefinitionKeyInOk returns a tuple with the ProcessDefinitionKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessDefinitionKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessDefinitionKeyIn) {
		return nil, false
	}
	return o.ProcessDefinitionKeyIn, true
}

// HasProcessDefinitionKeyIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessDefinitionKeyIn() bool {
	if o != nil && !IsNil(o.ProcessDefinitionKeyIn) {
		return true
	}

	return false
}

// SetProcessDefinitionKeyIn gets a reference to the given []string and assigns it to the ProcessDefinitionKeyIn field.
func (o *TaskQueryDto) SetProcessDefinitionKeyIn(v []string) {
	o.ProcessDefinitionKeyIn = v
}

// GetProcessDefinitionName returns the ProcessDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessDefinitionName() string {
	if o == nil || IsNil(o.ProcessDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionName.Get()
}

// GetProcessDefinitionNameOk returns a tuple with the ProcessDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionName.Get(), o.ProcessDefinitionName.IsSet()
}

// HasProcessDefinitionName returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessDefinitionName() bool {
	if o != nil && o.ProcessDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionName gets a reference to the given NullableString and assigns it to the ProcessDefinitionName field.
func (o *TaskQueryDto) SetProcessDefinitionName(v string) {
	o.ProcessDefinitionName.Set(&v)
}
// SetProcessDefinitionNameNil sets the value for ProcessDefinitionName to be an explicit nil
func (o *TaskQueryDto) SetProcessDefinitionNameNil() {
	o.ProcessDefinitionName.Set(nil)
}

// UnsetProcessDefinitionName ensures that no value is present for ProcessDefinitionName, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessDefinitionName() {
	o.ProcessDefinitionName.Unset()
}

// GetProcessDefinitionNameLike returns the ProcessDefinitionNameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessDefinitionNameLike() string {
	if o == nil || IsNil(o.ProcessDefinitionNameLike.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionNameLike.Get()
}

// GetProcessDefinitionNameLikeOk returns a tuple with the ProcessDefinitionNameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessDefinitionNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionNameLike.Get(), o.ProcessDefinitionNameLike.IsSet()
}

// HasProcessDefinitionNameLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessDefinitionNameLike() bool {
	if o != nil && o.ProcessDefinitionNameLike.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionNameLike gets a reference to the given NullableString and assigns it to the ProcessDefinitionNameLike field.
func (o *TaskQueryDto) SetProcessDefinitionNameLike(v string) {
	o.ProcessDefinitionNameLike.Set(&v)
}
// SetProcessDefinitionNameLikeNil sets the value for ProcessDefinitionNameLike to be an explicit nil
func (o *TaskQueryDto) SetProcessDefinitionNameLikeNil() {
	o.ProcessDefinitionNameLike.Set(nil)
}

// UnsetProcessDefinitionNameLike ensures that no value is present for ProcessDefinitionNameLike, not even an explicit nil
func (o *TaskQueryDto) UnsetProcessDefinitionNameLike() {
	o.ProcessDefinitionNameLike.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *TaskQueryDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *TaskQueryDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *TaskQueryDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *TaskQueryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *TaskQueryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetCaseInstanceBusinessKey returns the CaseInstanceBusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseInstanceBusinessKey() string {
	if o == nil || IsNil(o.CaseInstanceBusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceBusinessKey.Get()
}

// GetCaseInstanceBusinessKeyOk returns a tuple with the CaseInstanceBusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseInstanceBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceBusinessKey.Get(), o.CaseInstanceBusinessKey.IsSet()
}

// HasCaseInstanceBusinessKey returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseInstanceBusinessKey() bool {
	if o != nil && o.CaseInstanceBusinessKey.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceBusinessKey gets a reference to the given NullableString and assigns it to the CaseInstanceBusinessKey field.
func (o *TaskQueryDto) SetCaseInstanceBusinessKey(v string) {
	o.CaseInstanceBusinessKey.Set(&v)
}
// SetCaseInstanceBusinessKeyNil sets the value for CaseInstanceBusinessKey to be an explicit nil
func (o *TaskQueryDto) SetCaseInstanceBusinessKeyNil() {
	o.CaseInstanceBusinessKey.Set(nil)
}

// UnsetCaseInstanceBusinessKey ensures that no value is present for CaseInstanceBusinessKey, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseInstanceBusinessKey() {
	o.CaseInstanceBusinessKey.Unset()
}

// GetCaseInstanceBusinessKeyLike returns the CaseInstanceBusinessKeyLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseInstanceBusinessKeyLike() string {
	if o == nil || IsNil(o.CaseInstanceBusinessKeyLike.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceBusinessKeyLike.Get()
}

// GetCaseInstanceBusinessKeyLikeOk returns a tuple with the CaseInstanceBusinessKeyLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseInstanceBusinessKeyLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceBusinessKeyLike.Get(), o.CaseInstanceBusinessKeyLike.IsSet()
}

// HasCaseInstanceBusinessKeyLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseInstanceBusinessKeyLike() bool {
	if o != nil && o.CaseInstanceBusinessKeyLike.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceBusinessKeyLike gets a reference to the given NullableString and assigns it to the CaseInstanceBusinessKeyLike field.
func (o *TaskQueryDto) SetCaseInstanceBusinessKeyLike(v string) {
	o.CaseInstanceBusinessKeyLike.Set(&v)
}
// SetCaseInstanceBusinessKeyLikeNil sets the value for CaseInstanceBusinessKeyLike to be an explicit nil
func (o *TaskQueryDto) SetCaseInstanceBusinessKeyLikeNil() {
	o.CaseInstanceBusinessKeyLike.Set(nil)
}

// UnsetCaseInstanceBusinessKeyLike ensures that no value is present for CaseInstanceBusinessKeyLike, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseInstanceBusinessKeyLike() {
	o.CaseInstanceBusinessKeyLike.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *TaskQueryDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *TaskQueryDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseDefinitionKey returns the CaseDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseDefinitionKey() string {
	if o == nil || IsNil(o.CaseDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionKey.Get()
}

// GetCaseDefinitionKeyOk returns a tuple with the CaseDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionKey.Get(), o.CaseDefinitionKey.IsSet()
}

// HasCaseDefinitionKey returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseDefinitionKey() bool {
	if o != nil && o.CaseDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionKey gets a reference to the given NullableString and assigns it to the CaseDefinitionKey field.
func (o *TaskQueryDto) SetCaseDefinitionKey(v string) {
	o.CaseDefinitionKey.Set(&v)
}
// SetCaseDefinitionKeyNil sets the value for CaseDefinitionKey to be an explicit nil
func (o *TaskQueryDto) SetCaseDefinitionKeyNil() {
	o.CaseDefinitionKey.Set(nil)
}

// UnsetCaseDefinitionKey ensures that no value is present for CaseDefinitionKey, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseDefinitionKey() {
	o.CaseDefinitionKey.Unset()
}

// GetCaseDefinitionName returns the CaseDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseDefinitionName() string {
	if o == nil || IsNil(o.CaseDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionName.Get()
}

// GetCaseDefinitionNameOk returns a tuple with the CaseDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionName.Get(), o.CaseDefinitionName.IsSet()
}

// HasCaseDefinitionName returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseDefinitionName() bool {
	if o != nil && o.CaseDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionName gets a reference to the given NullableString and assigns it to the CaseDefinitionName field.
func (o *TaskQueryDto) SetCaseDefinitionName(v string) {
	o.CaseDefinitionName.Set(&v)
}
// SetCaseDefinitionNameNil sets the value for CaseDefinitionName to be an explicit nil
func (o *TaskQueryDto) SetCaseDefinitionNameNil() {
	o.CaseDefinitionName.Set(nil)
}

// UnsetCaseDefinitionName ensures that no value is present for CaseDefinitionName, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseDefinitionName() {
	o.CaseDefinitionName.Unset()
}

// GetCaseDefinitionNameLike returns the CaseDefinitionNameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseDefinitionNameLike() string {
	if o == nil || IsNil(o.CaseDefinitionNameLike.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionNameLike.Get()
}

// GetCaseDefinitionNameLikeOk returns a tuple with the CaseDefinitionNameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseDefinitionNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionNameLike.Get(), o.CaseDefinitionNameLike.IsSet()
}

// HasCaseDefinitionNameLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseDefinitionNameLike() bool {
	if o != nil && o.CaseDefinitionNameLike.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionNameLike gets a reference to the given NullableString and assigns it to the CaseDefinitionNameLike field.
func (o *TaskQueryDto) SetCaseDefinitionNameLike(v string) {
	o.CaseDefinitionNameLike.Set(&v)
}
// SetCaseDefinitionNameLikeNil sets the value for CaseDefinitionNameLike to be an explicit nil
func (o *TaskQueryDto) SetCaseDefinitionNameLikeNil() {
	o.CaseDefinitionNameLike.Set(nil)
}

// UnsetCaseDefinitionNameLike ensures that no value is present for CaseDefinitionNameLike, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseDefinitionNameLike() {
	o.CaseDefinitionNameLike.Unset()
}

// GetCaseExecutionId returns the CaseExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseExecutionId() string {
	if o == nil || IsNil(o.CaseExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseExecutionId.Get()
}

// GetCaseExecutionIdOk returns a tuple with the CaseExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseExecutionId.Get(), o.CaseExecutionId.IsSet()
}

// HasCaseExecutionId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseExecutionId() bool {
	if o != nil && o.CaseExecutionId.IsSet() {
		return true
	}

	return false
}

// SetCaseExecutionId gets a reference to the given NullableString and assigns it to the CaseExecutionId field.
func (o *TaskQueryDto) SetCaseExecutionId(v string) {
	o.CaseExecutionId.Set(&v)
}
// SetCaseExecutionIdNil sets the value for CaseExecutionId to be an explicit nil
func (o *TaskQueryDto) SetCaseExecutionIdNil() {
	o.CaseExecutionId.Set(nil)
}

// UnsetCaseExecutionId ensures that no value is present for CaseExecutionId, not even an explicit nil
func (o *TaskQueryDto) UnsetCaseExecutionId() {
	o.CaseExecutionId.Unset()
}

// GetActivityInstanceIdIn returns the ActivityInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetActivityInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActivityInstanceIdIn
}

// GetActivityInstanceIdInOk returns a tuple with the ActivityInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetActivityInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActivityInstanceIdIn) {
		return nil, false
	}
	return o.ActivityInstanceIdIn, true
}

// HasActivityInstanceIdIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasActivityInstanceIdIn() bool {
	if o != nil && !IsNil(o.ActivityInstanceIdIn) {
		return true
	}

	return false
}

// SetActivityInstanceIdIn gets a reference to the given []string and assigns it to the ActivityInstanceIdIn field.
func (o *TaskQueryDto) SetActivityInstanceIdIn(v []string) {
	o.ActivityInstanceIdIn = v
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *TaskQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *TaskQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *TaskQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *TaskQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssignee() string {
	if o == nil || IsNil(o.Assignee.Get()) {
		var ret string
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableString and assigns it to the Assignee field.
func (o *TaskQueryDto) SetAssignee(v string) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *TaskQueryDto) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *TaskQueryDto) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetAssigneeExpression returns the AssigneeExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssigneeExpression() string {
	if o == nil || IsNil(o.AssigneeExpression.Get()) {
		var ret string
		return ret
	}
	return *o.AssigneeExpression.Get()
}

// GetAssigneeExpressionOk returns a tuple with the AssigneeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssigneeExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssigneeExpression.Get(), o.AssigneeExpression.IsSet()
}

// HasAssigneeExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssigneeExpression() bool {
	if o != nil && o.AssigneeExpression.IsSet() {
		return true
	}

	return false
}

// SetAssigneeExpression gets a reference to the given NullableString and assigns it to the AssigneeExpression field.
func (o *TaskQueryDto) SetAssigneeExpression(v string) {
	o.AssigneeExpression.Set(&v)
}
// SetAssigneeExpressionNil sets the value for AssigneeExpression to be an explicit nil
func (o *TaskQueryDto) SetAssigneeExpressionNil() {
	o.AssigneeExpression.Set(nil)
}

// UnsetAssigneeExpression ensures that no value is present for AssigneeExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetAssigneeExpression() {
	o.AssigneeExpression.Unset()
}

// GetAssigneeLike returns the AssigneeLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssigneeLike() string {
	if o == nil || IsNil(o.AssigneeLike.Get()) {
		var ret string
		return ret
	}
	return *o.AssigneeLike.Get()
}

// GetAssigneeLikeOk returns a tuple with the AssigneeLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssigneeLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssigneeLike.Get(), o.AssigneeLike.IsSet()
}

// HasAssigneeLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssigneeLike() bool {
	if o != nil && o.AssigneeLike.IsSet() {
		return true
	}

	return false
}

// SetAssigneeLike gets a reference to the given NullableString and assigns it to the AssigneeLike field.
func (o *TaskQueryDto) SetAssigneeLike(v string) {
	o.AssigneeLike.Set(&v)
}
// SetAssigneeLikeNil sets the value for AssigneeLike to be an explicit nil
func (o *TaskQueryDto) SetAssigneeLikeNil() {
	o.AssigneeLike.Set(nil)
}

// UnsetAssigneeLike ensures that no value is present for AssigneeLike, not even an explicit nil
func (o *TaskQueryDto) UnsetAssigneeLike() {
	o.AssigneeLike.Unset()
}

// GetAssigneeLikeExpression returns the AssigneeLikeExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssigneeLikeExpression() string {
	if o == nil || IsNil(o.AssigneeLikeExpression.Get()) {
		var ret string
		return ret
	}
	return *o.AssigneeLikeExpression.Get()
}

// GetAssigneeLikeExpressionOk returns a tuple with the AssigneeLikeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssigneeLikeExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssigneeLikeExpression.Get(), o.AssigneeLikeExpression.IsSet()
}

// HasAssigneeLikeExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssigneeLikeExpression() bool {
	if o != nil && o.AssigneeLikeExpression.IsSet() {
		return true
	}

	return false
}

// SetAssigneeLikeExpression gets a reference to the given NullableString and assigns it to the AssigneeLikeExpression field.
func (o *TaskQueryDto) SetAssigneeLikeExpression(v string) {
	o.AssigneeLikeExpression.Set(&v)
}
// SetAssigneeLikeExpressionNil sets the value for AssigneeLikeExpression to be an explicit nil
func (o *TaskQueryDto) SetAssigneeLikeExpressionNil() {
	o.AssigneeLikeExpression.Set(nil)
}

// UnsetAssigneeLikeExpression ensures that no value is present for AssigneeLikeExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetAssigneeLikeExpression() {
	o.AssigneeLikeExpression.Unset()
}

// GetAssigneeIn returns the AssigneeIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssigneeIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AssigneeIn
}

// GetAssigneeInOk returns a tuple with the AssigneeIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssigneeInOk() ([]string, bool) {
	if o == nil || IsNil(o.AssigneeIn) {
		return nil, false
	}
	return o.AssigneeIn, true
}

// HasAssigneeIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssigneeIn() bool {
	if o != nil && !IsNil(o.AssigneeIn) {
		return true
	}

	return false
}

// SetAssigneeIn gets a reference to the given []string and assigns it to the AssigneeIn field.
func (o *TaskQueryDto) SetAssigneeIn(v []string) {
	o.AssigneeIn = v
}

// GetAssigneeNotIn returns the AssigneeNotIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssigneeNotIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AssigneeNotIn
}

// GetAssigneeNotInOk returns a tuple with the AssigneeNotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssigneeNotInOk() ([]string, bool) {
	if o == nil || IsNil(o.AssigneeNotIn) {
		return nil, false
	}
	return o.AssigneeNotIn, true
}

// HasAssigneeNotIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssigneeNotIn() bool {
	if o != nil && !IsNil(o.AssigneeNotIn) {
		return true
	}

	return false
}

// SetAssigneeNotIn gets a reference to the given []string and assigns it to the AssigneeNotIn field.
func (o *TaskQueryDto) SetAssigneeNotIn(v []string) {
	o.AssigneeNotIn = v
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *TaskQueryDto) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *TaskQueryDto) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *TaskQueryDto) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *TaskQueryDto) UnsetOwner() {
	o.Owner.Unset()
}

// GetOwnerExpression returns the OwnerExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetOwnerExpression() string {
	if o == nil || IsNil(o.OwnerExpression.Get()) {
		var ret string
		return ret
	}
	return *o.OwnerExpression.Get()
}

// GetOwnerExpressionOk returns a tuple with the OwnerExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetOwnerExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerExpression.Get(), o.OwnerExpression.IsSet()
}

// HasOwnerExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasOwnerExpression() bool {
	if o != nil && o.OwnerExpression.IsSet() {
		return true
	}

	return false
}

// SetOwnerExpression gets a reference to the given NullableString and assigns it to the OwnerExpression field.
func (o *TaskQueryDto) SetOwnerExpression(v string) {
	o.OwnerExpression.Set(&v)
}
// SetOwnerExpressionNil sets the value for OwnerExpression to be an explicit nil
func (o *TaskQueryDto) SetOwnerExpressionNil() {
	o.OwnerExpression.Set(nil)
}

// UnsetOwnerExpression ensures that no value is present for OwnerExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetOwnerExpression() {
	o.OwnerExpression.Unset()
}

// GetCandidateGroup returns the CandidateGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCandidateGroup() string {
	if o == nil || IsNil(o.CandidateGroup.Get()) {
		var ret string
		return ret
	}
	return *o.CandidateGroup.Get()
}

// GetCandidateGroupOk returns a tuple with the CandidateGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCandidateGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CandidateGroup.Get(), o.CandidateGroup.IsSet()
}

// HasCandidateGroup returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCandidateGroup() bool {
	if o != nil && o.CandidateGroup.IsSet() {
		return true
	}

	return false
}

// SetCandidateGroup gets a reference to the given NullableString and assigns it to the CandidateGroup field.
func (o *TaskQueryDto) SetCandidateGroup(v string) {
	o.CandidateGroup.Set(&v)
}
// SetCandidateGroupNil sets the value for CandidateGroup to be an explicit nil
func (o *TaskQueryDto) SetCandidateGroupNil() {
	o.CandidateGroup.Set(nil)
}

// UnsetCandidateGroup ensures that no value is present for CandidateGroup, not even an explicit nil
func (o *TaskQueryDto) UnsetCandidateGroup() {
	o.CandidateGroup.Unset()
}

// GetCandidateGroupExpression returns the CandidateGroupExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCandidateGroupExpression() string {
	if o == nil || IsNil(o.CandidateGroupExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CandidateGroupExpression.Get()
}

// GetCandidateGroupExpressionOk returns a tuple with the CandidateGroupExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCandidateGroupExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CandidateGroupExpression.Get(), o.CandidateGroupExpression.IsSet()
}

// HasCandidateGroupExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCandidateGroupExpression() bool {
	if o != nil && o.CandidateGroupExpression.IsSet() {
		return true
	}

	return false
}

// SetCandidateGroupExpression gets a reference to the given NullableString and assigns it to the CandidateGroupExpression field.
func (o *TaskQueryDto) SetCandidateGroupExpression(v string) {
	o.CandidateGroupExpression.Set(&v)
}
// SetCandidateGroupExpressionNil sets the value for CandidateGroupExpression to be an explicit nil
func (o *TaskQueryDto) SetCandidateGroupExpressionNil() {
	o.CandidateGroupExpression.Set(nil)
}

// UnsetCandidateGroupExpression ensures that no value is present for CandidateGroupExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetCandidateGroupExpression() {
	o.CandidateGroupExpression.Unset()
}

// GetCandidateUser returns the CandidateUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCandidateUser() string {
	if o == nil || IsNil(o.CandidateUser.Get()) {
		var ret string
		return ret
	}
	return *o.CandidateUser.Get()
}

// GetCandidateUserOk returns a tuple with the CandidateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCandidateUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CandidateUser.Get(), o.CandidateUser.IsSet()
}

// HasCandidateUser returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCandidateUser() bool {
	if o != nil && o.CandidateUser.IsSet() {
		return true
	}

	return false
}

// SetCandidateUser gets a reference to the given NullableString and assigns it to the CandidateUser field.
func (o *TaskQueryDto) SetCandidateUser(v string) {
	o.CandidateUser.Set(&v)
}
// SetCandidateUserNil sets the value for CandidateUser to be an explicit nil
func (o *TaskQueryDto) SetCandidateUserNil() {
	o.CandidateUser.Set(nil)
}

// UnsetCandidateUser ensures that no value is present for CandidateUser, not even an explicit nil
func (o *TaskQueryDto) UnsetCandidateUser() {
	o.CandidateUser.Unset()
}

// GetCandidateUserExpression returns the CandidateUserExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCandidateUserExpression() string {
	if o == nil || IsNil(o.CandidateUserExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CandidateUserExpression.Get()
}

// GetCandidateUserExpressionOk returns a tuple with the CandidateUserExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCandidateUserExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CandidateUserExpression.Get(), o.CandidateUserExpression.IsSet()
}

// HasCandidateUserExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCandidateUserExpression() bool {
	if o != nil && o.CandidateUserExpression.IsSet() {
		return true
	}

	return false
}

// SetCandidateUserExpression gets a reference to the given NullableString and assigns it to the CandidateUserExpression field.
func (o *TaskQueryDto) SetCandidateUserExpression(v string) {
	o.CandidateUserExpression.Set(&v)
}
// SetCandidateUserExpressionNil sets the value for CandidateUserExpression to be an explicit nil
func (o *TaskQueryDto) SetCandidateUserExpressionNil() {
	o.CandidateUserExpression.Set(nil)
}

// UnsetCandidateUserExpression ensures that no value is present for CandidateUserExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetCandidateUserExpression() {
	o.CandidateUserExpression.Unset()
}

// GetIncludeAssignedTasks returns the IncludeAssignedTasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetIncludeAssignedTasks() bool {
	if o == nil || IsNil(o.IncludeAssignedTasks.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAssignedTasks.Get()
}

// GetIncludeAssignedTasksOk returns a tuple with the IncludeAssignedTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetIncludeAssignedTasksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAssignedTasks.Get(), o.IncludeAssignedTasks.IsSet()
}

// HasIncludeAssignedTasks returns a boolean if a field has been set.
func (o *TaskQueryDto) HasIncludeAssignedTasks() bool {
	if o != nil && o.IncludeAssignedTasks.IsSet() {
		return true
	}

	return false
}

// SetIncludeAssignedTasks gets a reference to the given NullableBool and assigns it to the IncludeAssignedTasks field.
func (o *TaskQueryDto) SetIncludeAssignedTasks(v bool) {
	o.IncludeAssignedTasks.Set(&v)
}
// SetIncludeAssignedTasksNil sets the value for IncludeAssignedTasks to be an explicit nil
func (o *TaskQueryDto) SetIncludeAssignedTasksNil() {
	o.IncludeAssignedTasks.Set(nil)
}

// UnsetIncludeAssignedTasks ensures that no value is present for IncludeAssignedTasks, not even an explicit nil
func (o *TaskQueryDto) UnsetIncludeAssignedTasks() {
	o.IncludeAssignedTasks.Unset()
}

// GetInvolvedUser returns the InvolvedUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetInvolvedUser() string {
	if o == nil || IsNil(o.InvolvedUser.Get()) {
		var ret string
		return ret
	}
	return *o.InvolvedUser.Get()
}

// GetInvolvedUserOk returns a tuple with the InvolvedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetInvolvedUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvolvedUser.Get(), o.InvolvedUser.IsSet()
}

// HasInvolvedUser returns a boolean if a field has been set.
func (o *TaskQueryDto) HasInvolvedUser() bool {
	if o != nil && o.InvolvedUser.IsSet() {
		return true
	}

	return false
}

// SetInvolvedUser gets a reference to the given NullableString and assigns it to the InvolvedUser field.
func (o *TaskQueryDto) SetInvolvedUser(v string) {
	o.InvolvedUser.Set(&v)
}
// SetInvolvedUserNil sets the value for InvolvedUser to be an explicit nil
func (o *TaskQueryDto) SetInvolvedUserNil() {
	o.InvolvedUser.Set(nil)
}

// UnsetInvolvedUser ensures that no value is present for InvolvedUser, not even an explicit nil
func (o *TaskQueryDto) UnsetInvolvedUser() {
	o.InvolvedUser.Unset()
}

// GetInvolvedUserExpression returns the InvolvedUserExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetInvolvedUserExpression() string {
	if o == nil || IsNil(o.InvolvedUserExpression.Get()) {
		var ret string
		return ret
	}
	return *o.InvolvedUserExpression.Get()
}

// GetInvolvedUserExpressionOk returns a tuple with the InvolvedUserExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetInvolvedUserExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvolvedUserExpression.Get(), o.InvolvedUserExpression.IsSet()
}

// HasInvolvedUserExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasInvolvedUserExpression() bool {
	if o != nil && o.InvolvedUserExpression.IsSet() {
		return true
	}

	return false
}

// SetInvolvedUserExpression gets a reference to the given NullableString and assigns it to the InvolvedUserExpression field.
func (o *TaskQueryDto) SetInvolvedUserExpression(v string) {
	o.InvolvedUserExpression.Set(&v)
}
// SetInvolvedUserExpressionNil sets the value for InvolvedUserExpression to be an explicit nil
func (o *TaskQueryDto) SetInvolvedUserExpressionNil() {
	o.InvolvedUserExpression.Set(nil)
}

// UnsetInvolvedUserExpression ensures that no value is present for InvolvedUserExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetInvolvedUserExpression() {
	o.InvolvedUserExpression.Unset()
}

// GetAssigned returns the Assigned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetAssigned() bool {
	if o == nil || IsNil(o.Assigned.Get()) {
		var ret bool
		return ret
	}
	return *o.Assigned.Get()
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetAssignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assigned.Get(), o.Assigned.IsSet()
}

// HasAssigned returns a boolean if a field has been set.
func (o *TaskQueryDto) HasAssigned() bool {
	if o != nil && o.Assigned.IsSet() {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given NullableBool and assigns it to the Assigned field.
func (o *TaskQueryDto) SetAssigned(v bool) {
	o.Assigned.Set(&v)
}
// SetAssignedNil sets the value for Assigned to be an explicit nil
func (o *TaskQueryDto) SetAssignedNil() {
	o.Assigned.Set(nil)
}

// UnsetAssigned ensures that no value is present for Assigned, not even an explicit nil
func (o *TaskQueryDto) UnsetAssigned() {
	o.Assigned.Unset()
}

// GetUnassigned returns the Unassigned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetUnassigned() bool {
	if o == nil || IsNil(o.Unassigned.Get()) {
		var ret bool
		return ret
	}
	return *o.Unassigned.Get()
}

// GetUnassignedOk returns a tuple with the Unassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetUnassignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unassigned.Get(), o.Unassigned.IsSet()
}

// HasUnassigned returns a boolean if a field has been set.
func (o *TaskQueryDto) HasUnassigned() bool {
	if o != nil && o.Unassigned.IsSet() {
		return true
	}

	return false
}

// SetUnassigned gets a reference to the given NullableBool and assigns it to the Unassigned field.
func (o *TaskQueryDto) SetUnassigned(v bool) {
	o.Unassigned.Set(&v)
}
// SetUnassignedNil sets the value for Unassigned to be an explicit nil
func (o *TaskQueryDto) SetUnassignedNil() {
	o.Unassigned.Set(nil)
}

// UnsetUnassigned ensures that no value is present for Unassigned, not even an explicit nil
func (o *TaskQueryDto) UnsetUnassigned() {
	o.Unassigned.Unset()
}

// GetTaskDefinitionKey returns the TaskDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTaskDefinitionKey() string {
	if o == nil || IsNil(o.TaskDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDefinitionKey.Get()
}

// GetTaskDefinitionKeyOk returns a tuple with the TaskDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTaskDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDefinitionKey.Get(), o.TaskDefinitionKey.IsSet()
}

// HasTaskDefinitionKey returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTaskDefinitionKey() bool {
	if o != nil && o.TaskDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetTaskDefinitionKey gets a reference to the given NullableString and assigns it to the TaskDefinitionKey field.
func (o *TaskQueryDto) SetTaskDefinitionKey(v string) {
	o.TaskDefinitionKey.Set(&v)
}
// SetTaskDefinitionKeyNil sets the value for TaskDefinitionKey to be an explicit nil
func (o *TaskQueryDto) SetTaskDefinitionKeyNil() {
	o.TaskDefinitionKey.Set(nil)
}

// UnsetTaskDefinitionKey ensures that no value is present for TaskDefinitionKey, not even an explicit nil
func (o *TaskQueryDto) UnsetTaskDefinitionKey() {
	o.TaskDefinitionKey.Unset()
}

// GetTaskDefinitionKeyIn returns the TaskDefinitionKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTaskDefinitionKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TaskDefinitionKeyIn
}

// GetTaskDefinitionKeyInOk returns a tuple with the TaskDefinitionKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTaskDefinitionKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.TaskDefinitionKeyIn) {
		return nil, false
	}
	return o.TaskDefinitionKeyIn, true
}

// HasTaskDefinitionKeyIn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTaskDefinitionKeyIn() bool {
	if o != nil && !IsNil(o.TaskDefinitionKeyIn) {
		return true
	}

	return false
}

// SetTaskDefinitionKeyIn gets a reference to the given []string and assigns it to the TaskDefinitionKeyIn field.
func (o *TaskQueryDto) SetTaskDefinitionKeyIn(v []string) {
	o.TaskDefinitionKeyIn = v
}

// GetTaskDefinitionKeyLike returns the TaskDefinitionKeyLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTaskDefinitionKeyLike() string {
	if o == nil || IsNil(o.TaskDefinitionKeyLike.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDefinitionKeyLike.Get()
}

// GetTaskDefinitionKeyLikeOk returns a tuple with the TaskDefinitionKeyLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTaskDefinitionKeyLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDefinitionKeyLike.Get(), o.TaskDefinitionKeyLike.IsSet()
}

// HasTaskDefinitionKeyLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTaskDefinitionKeyLike() bool {
	if o != nil && o.TaskDefinitionKeyLike.IsSet() {
		return true
	}

	return false
}

// SetTaskDefinitionKeyLike gets a reference to the given NullableString and assigns it to the TaskDefinitionKeyLike field.
func (o *TaskQueryDto) SetTaskDefinitionKeyLike(v string) {
	o.TaskDefinitionKeyLike.Set(&v)
}
// SetTaskDefinitionKeyLikeNil sets the value for TaskDefinitionKeyLike to be an explicit nil
func (o *TaskQueryDto) SetTaskDefinitionKeyLikeNil() {
	o.TaskDefinitionKeyLike.Set(nil)
}

// UnsetTaskDefinitionKeyLike ensures that no value is present for TaskDefinitionKeyLike, not even an explicit nil
func (o *TaskQueryDto) UnsetTaskDefinitionKeyLike() {
	o.TaskDefinitionKeyLike.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TaskQueryDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TaskQueryDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TaskQueryDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TaskQueryDto) UnsetName() {
	o.Name.Unset()
}

// GetNameNotEqual returns the NameNotEqual field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetNameNotEqual() string {
	if o == nil || IsNil(o.NameNotEqual.Get()) {
		var ret string
		return ret
	}
	return *o.NameNotEqual.Get()
}

// GetNameNotEqualOk returns a tuple with the NameNotEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetNameNotEqualOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameNotEqual.Get(), o.NameNotEqual.IsSet()
}

// HasNameNotEqual returns a boolean if a field has been set.
func (o *TaskQueryDto) HasNameNotEqual() bool {
	if o != nil && o.NameNotEqual.IsSet() {
		return true
	}

	return false
}

// SetNameNotEqual gets a reference to the given NullableString and assigns it to the NameNotEqual field.
func (o *TaskQueryDto) SetNameNotEqual(v string) {
	o.NameNotEqual.Set(&v)
}
// SetNameNotEqualNil sets the value for NameNotEqual to be an explicit nil
func (o *TaskQueryDto) SetNameNotEqualNil() {
	o.NameNotEqual.Set(nil)
}

// UnsetNameNotEqual ensures that no value is present for NameNotEqual, not even an explicit nil
func (o *TaskQueryDto) UnsetNameNotEqual() {
	o.NameNotEqual.Unset()
}

// GetNameLike returns the NameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetNameLike() string {
	if o == nil || IsNil(o.NameLike.Get()) {
		var ret string
		return ret
	}
	return *o.NameLike.Get()
}

// GetNameLikeOk returns a tuple with the NameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameLike.Get(), o.NameLike.IsSet()
}

// HasNameLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasNameLike() bool {
	if o != nil && o.NameLike.IsSet() {
		return true
	}

	return false
}

// SetNameLike gets a reference to the given NullableString and assigns it to the NameLike field.
func (o *TaskQueryDto) SetNameLike(v string) {
	o.NameLike.Set(&v)
}
// SetNameLikeNil sets the value for NameLike to be an explicit nil
func (o *TaskQueryDto) SetNameLikeNil() {
	o.NameLike.Set(nil)
}

// UnsetNameLike ensures that no value is present for NameLike, not even an explicit nil
func (o *TaskQueryDto) UnsetNameLike() {
	o.NameLike.Unset()
}

// GetNameNotLike returns the NameNotLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetNameNotLike() string {
	if o == nil || IsNil(o.NameNotLike.Get()) {
		var ret string
		return ret
	}
	return *o.NameNotLike.Get()
}

// GetNameNotLikeOk returns a tuple with the NameNotLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetNameNotLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameNotLike.Get(), o.NameNotLike.IsSet()
}

// HasNameNotLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasNameNotLike() bool {
	if o != nil && o.NameNotLike.IsSet() {
		return true
	}

	return false
}

// SetNameNotLike gets a reference to the given NullableString and assigns it to the NameNotLike field.
func (o *TaskQueryDto) SetNameNotLike(v string) {
	o.NameNotLike.Set(&v)
}
// SetNameNotLikeNil sets the value for NameNotLike to be an explicit nil
func (o *TaskQueryDto) SetNameNotLikeNil() {
	o.NameNotLike.Set(nil)
}

// UnsetNameNotLike ensures that no value is present for NameNotLike, not even an explicit nil
func (o *TaskQueryDto) UnsetNameNotLike() {
	o.NameNotLike.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TaskQueryDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TaskQueryDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TaskQueryDto) UnsetDescription() {
	o.Description.Unset()
}

// GetDescriptionLike returns the DescriptionLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDescriptionLike() string {
	if o == nil || IsNil(o.DescriptionLike.Get()) {
		var ret string
		return ret
	}
	return *o.DescriptionLike.Get()
}

// GetDescriptionLikeOk returns a tuple with the DescriptionLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDescriptionLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DescriptionLike.Get(), o.DescriptionLike.IsSet()
}

// HasDescriptionLike returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDescriptionLike() bool {
	if o != nil && o.DescriptionLike.IsSet() {
		return true
	}

	return false
}

// SetDescriptionLike gets a reference to the given NullableString and assigns it to the DescriptionLike field.
func (o *TaskQueryDto) SetDescriptionLike(v string) {
	o.DescriptionLike.Set(&v)
}
// SetDescriptionLikeNil sets the value for DescriptionLike to be an explicit nil
func (o *TaskQueryDto) SetDescriptionLikeNil() {
	o.DescriptionLike.Set(nil)
}

// UnsetDescriptionLike ensures that no value is present for DescriptionLike, not even an explicit nil
func (o *TaskQueryDto) UnsetDescriptionLike() {
	o.DescriptionLike.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetPriority() int32 {
	if o == nil || IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *TaskQueryDto) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *TaskQueryDto) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *TaskQueryDto) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *TaskQueryDto) UnsetPriority() {
	o.Priority.Unset()
}

// GetMaxPriority returns the MaxPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetMaxPriority() int32 {
	if o == nil || IsNil(o.MaxPriority.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxPriority.Get()
}

// GetMaxPriorityOk returns a tuple with the MaxPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetMaxPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxPriority.Get(), o.MaxPriority.IsSet()
}

// HasMaxPriority returns a boolean if a field has been set.
func (o *TaskQueryDto) HasMaxPriority() bool {
	if o != nil && o.MaxPriority.IsSet() {
		return true
	}

	return false
}

// SetMaxPriority gets a reference to the given NullableInt32 and assigns it to the MaxPriority field.
func (o *TaskQueryDto) SetMaxPriority(v int32) {
	o.MaxPriority.Set(&v)
}
// SetMaxPriorityNil sets the value for MaxPriority to be an explicit nil
func (o *TaskQueryDto) SetMaxPriorityNil() {
	o.MaxPriority.Set(nil)
}

// UnsetMaxPriority ensures that no value is present for MaxPriority, not even an explicit nil
func (o *TaskQueryDto) UnsetMaxPriority() {
	o.MaxPriority.Unset()
}

// GetMinPriority returns the MinPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetMinPriority() int32 {
	if o == nil || IsNil(o.MinPriority.Get()) {
		var ret int32
		return ret
	}
	return *o.MinPriority.Get()
}

// GetMinPriorityOk returns a tuple with the MinPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetMinPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinPriority.Get(), o.MinPriority.IsSet()
}

// HasMinPriority returns a boolean if a field has been set.
func (o *TaskQueryDto) HasMinPriority() bool {
	if o != nil && o.MinPriority.IsSet() {
		return true
	}

	return false
}

// SetMinPriority gets a reference to the given NullableInt32 and assigns it to the MinPriority field.
func (o *TaskQueryDto) SetMinPriority(v int32) {
	o.MinPriority.Set(&v)
}
// SetMinPriorityNil sets the value for MinPriority to be an explicit nil
func (o *TaskQueryDto) SetMinPriorityNil() {
	o.MinPriority.Set(nil)
}

// UnsetMinPriority ensures that no value is present for MinPriority, not even an explicit nil
func (o *TaskQueryDto) UnsetMinPriority() {
	o.MinPriority.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *TaskQueryDto) SetDueDate(v time.Time) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *TaskQueryDto) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *TaskQueryDto) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetDueDateExpression returns the DueDateExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDueDateExpression() string {
	if o == nil || IsNil(o.DueDateExpression.Get()) {
		var ret string
		return ret
	}
	return *o.DueDateExpression.Get()
}

// GetDueDateExpressionOk returns a tuple with the DueDateExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDueDateExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDateExpression.Get(), o.DueDateExpression.IsSet()
}

// HasDueDateExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDueDateExpression() bool {
	if o != nil && o.DueDateExpression.IsSet() {
		return true
	}

	return false
}

// SetDueDateExpression gets a reference to the given NullableString and assigns it to the DueDateExpression field.
func (o *TaskQueryDto) SetDueDateExpression(v string) {
	o.DueDateExpression.Set(&v)
}
// SetDueDateExpressionNil sets the value for DueDateExpression to be an explicit nil
func (o *TaskQueryDto) SetDueDateExpressionNil() {
	o.DueDateExpression.Set(nil)
}

// UnsetDueDateExpression ensures that no value is present for DueDateExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetDueDateExpression() {
	o.DueDateExpression.Unset()
}

// GetDueAfter returns the DueAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDueAfter() time.Time {
	if o == nil || IsNil(o.DueAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueAfter.Get()
}

// GetDueAfterOk returns a tuple with the DueAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDueAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueAfter.Get(), o.DueAfter.IsSet()
}

// HasDueAfter returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDueAfter() bool {
	if o != nil && o.DueAfter.IsSet() {
		return true
	}

	return false
}

// SetDueAfter gets a reference to the given NullableTime and assigns it to the DueAfter field.
func (o *TaskQueryDto) SetDueAfter(v time.Time) {
	o.DueAfter.Set(&v)
}
// SetDueAfterNil sets the value for DueAfter to be an explicit nil
func (o *TaskQueryDto) SetDueAfterNil() {
	o.DueAfter.Set(nil)
}

// UnsetDueAfter ensures that no value is present for DueAfter, not even an explicit nil
func (o *TaskQueryDto) UnsetDueAfter() {
	o.DueAfter.Unset()
}

// GetDueAfterExpression returns the DueAfterExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDueAfterExpression() string {
	if o == nil || IsNil(o.DueAfterExpression.Get()) {
		var ret string
		return ret
	}
	return *o.DueAfterExpression.Get()
}

// GetDueAfterExpressionOk returns a tuple with the DueAfterExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDueAfterExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueAfterExpression.Get(), o.DueAfterExpression.IsSet()
}

// HasDueAfterExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDueAfterExpression() bool {
	if o != nil && o.DueAfterExpression.IsSet() {
		return true
	}

	return false
}

// SetDueAfterExpression gets a reference to the given NullableString and assigns it to the DueAfterExpression field.
func (o *TaskQueryDto) SetDueAfterExpression(v string) {
	o.DueAfterExpression.Set(&v)
}
// SetDueAfterExpressionNil sets the value for DueAfterExpression to be an explicit nil
func (o *TaskQueryDto) SetDueAfterExpressionNil() {
	o.DueAfterExpression.Set(nil)
}

// UnsetDueAfterExpression ensures that no value is present for DueAfterExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetDueAfterExpression() {
	o.DueAfterExpression.Unset()
}

// GetDueBefore returns the DueBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDueBefore() time.Time {
	if o == nil || IsNil(o.DueBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueBefore.Get()
}

// GetDueBeforeOk returns a tuple with the DueBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDueBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueBefore.Get(), o.DueBefore.IsSet()
}

// HasDueBefore returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDueBefore() bool {
	if o != nil && o.DueBefore.IsSet() {
		return true
	}

	return false
}

// SetDueBefore gets a reference to the given NullableTime and assigns it to the DueBefore field.
func (o *TaskQueryDto) SetDueBefore(v time.Time) {
	o.DueBefore.Set(&v)
}
// SetDueBeforeNil sets the value for DueBefore to be an explicit nil
func (o *TaskQueryDto) SetDueBeforeNil() {
	o.DueBefore.Set(nil)
}

// UnsetDueBefore ensures that no value is present for DueBefore, not even an explicit nil
func (o *TaskQueryDto) UnsetDueBefore() {
	o.DueBefore.Unset()
}

// GetDueBeforeExpression returns the DueBeforeExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDueBeforeExpression() string {
	if o == nil || IsNil(o.DueBeforeExpression.Get()) {
		var ret string
		return ret
	}
	return *o.DueBeforeExpression.Get()
}

// GetDueBeforeExpressionOk returns a tuple with the DueBeforeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDueBeforeExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueBeforeExpression.Get(), o.DueBeforeExpression.IsSet()
}

// HasDueBeforeExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDueBeforeExpression() bool {
	if o != nil && o.DueBeforeExpression.IsSet() {
		return true
	}

	return false
}

// SetDueBeforeExpression gets a reference to the given NullableString and assigns it to the DueBeforeExpression field.
func (o *TaskQueryDto) SetDueBeforeExpression(v string) {
	o.DueBeforeExpression.Set(&v)
}
// SetDueBeforeExpressionNil sets the value for DueBeforeExpression to be an explicit nil
func (o *TaskQueryDto) SetDueBeforeExpressionNil() {
	o.DueBeforeExpression.Set(nil)
}

// UnsetDueBeforeExpression ensures that no value is present for DueBeforeExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetDueBeforeExpression() {
	o.DueBeforeExpression.Unset()
}

// GetWithoutDueDate returns the WithoutDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetWithoutDueDate() bool {
	if o == nil || IsNil(o.WithoutDueDate.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutDueDate.Get()
}

// GetWithoutDueDateOk returns a tuple with the WithoutDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetWithoutDueDateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutDueDate.Get(), o.WithoutDueDate.IsSet()
}

// HasWithoutDueDate returns a boolean if a field has been set.
func (o *TaskQueryDto) HasWithoutDueDate() bool {
	if o != nil && o.WithoutDueDate.IsSet() {
		return true
	}

	return false
}

// SetWithoutDueDate gets a reference to the given NullableBool and assigns it to the WithoutDueDate field.
func (o *TaskQueryDto) SetWithoutDueDate(v bool) {
	o.WithoutDueDate.Set(&v)
}
// SetWithoutDueDateNil sets the value for WithoutDueDate to be an explicit nil
func (o *TaskQueryDto) SetWithoutDueDateNil() {
	o.WithoutDueDate.Set(nil)
}

// UnsetWithoutDueDate ensures that no value is present for WithoutDueDate, not even an explicit nil
func (o *TaskQueryDto) UnsetWithoutDueDate() {
	o.WithoutDueDate.Unset()
}

// GetFollowUpDate returns the FollowUpDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpDate() time.Time {
	if o == nil || IsNil(o.FollowUpDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FollowUpDate.Get()
}

// GetFollowUpDateOk returns a tuple with the FollowUpDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpDate.Get(), o.FollowUpDate.IsSet()
}

// HasFollowUpDate returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpDate() bool {
	if o != nil && o.FollowUpDate.IsSet() {
		return true
	}

	return false
}

// SetFollowUpDate gets a reference to the given NullableTime and assigns it to the FollowUpDate field.
func (o *TaskQueryDto) SetFollowUpDate(v time.Time) {
	o.FollowUpDate.Set(&v)
}
// SetFollowUpDateNil sets the value for FollowUpDate to be an explicit nil
func (o *TaskQueryDto) SetFollowUpDateNil() {
	o.FollowUpDate.Set(nil)
}

// UnsetFollowUpDate ensures that no value is present for FollowUpDate, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpDate() {
	o.FollowUpDate.Unset()
}

// GetFollowUpDateExpression returns the FollowUpDateExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpDateExpression() string {
	if o == nil || IsNil(o.FollowUpDateExpression.Get()) {
		var ret string
		return ret
	}
	return *o.FollowUpDateExpression.Get()
}

// GetFollowUpDateExpressionOk returns a tuple with the FollowUpDateExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpDateExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpDateExpression.Get(), o.FollowUpDateExpression.IsSet()
}

// HasFollowUpDateExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpDateExpression() bool {
	if o != nil && o.FollowUpDateExpression.IsSet() {
		return true
	}

	return false
}

// SetFollowUpDateExpression gets a reference to the given NullableString and assigns it to the FollowUpDateExpression field.
func (o *TaskQueryDto) SetFollowUpDateExpression(v string) {
	o.FollowUpDateExpression.Set(&v)
}
// SetFollowUpDateExpressionNil sets the value for FollowUpDateExpression to be an explicit nil
func (o *TaskQueryDto) SetFollowUpDateExpressionNil() {
	o.FollowUpDateExpression.Set(nil)
}

// UnsetFollowUpDateExpression ensures that no value is present for FollowUpDateExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpDateExpression() {
	o.FollowUpDateExpression.Unset()
}

// GetFollowUpAfter returns the FollowUpAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpAfter() time.Time {
	if o == nil || IsNil(o.FollowUpAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FollowUpAfter.Get()
}

// GetFollowUpAfterOk returns a tuple with the FollowUpAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpAfter.Get(), o.FollowUpAfter.IsSet()
}

// HasFollowUpAfter returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpAfter() bool {
	if o != nil && o.FollowUpAfter.IsSet() {
		return true
	}

	return false
}

// SetFollowUpAfter gets a reference to the given NullableTime and assigns it to the FollowUpAfter field.
func (o *TaskQueryDto) SetFollowUpAfter(v time.Time) {
	o.FollowUpAfter.Set(&v)
}
// SetFollowUpAfterNil sets the value for FollowUpAfter to be an explicit nil
func (o *TaskQueryDto) SetFollowUpAfterNil() {
	o.FollowUpAfter.Set(nil)
}

// UnsetFollowUpAfter ensures that no value is present for FollowUpAfter, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpAfter() {
	o.FollowUpAfter.Unset()
}

// GetFollowUpAfterExpression returns the FollowUpAfterExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpAfterExpression() string {
	if o == nil || IsNil(o.FollowUpAfterExpression.Get()) {
		var ret string
		return ret
	}
	return *o.FollowUpAfterExpression.Get()
}

// GetFollowUpAfterExpressionOk returns a tuple with the FollowUpAfterExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpAfterExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpAfterExpression.Get(), o.FollowUpAfterExpression.IsSet()
}

// HasFollowUpAfterExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpAfterExpression() bool {
	if o != nil && o.FollowUpAfterExpression.IsSet() {
		return true
	}

	return false
}

// SetFollowUpAfterExpression gets a reference to the given NullableString and assigns it to the FollowUpAfterExpression field.
func (o *TaskQueryDto) SetFollowUpAfterExpression(v string) {
	o.FollowUpAfterExpression.Set(&v)
}
// SetFollowUpAfterExpressionNil sets the value for FollowUpAfterExpression to be an explicit nil
func (o *TaskQueryDto) SetFollowUpAfterExpressionNil() {
	o.FollowUpAfterExpression.Set(nil)
}

// UnsetFollowUpAfterExpression ensures that no value is present for FollowUpAfterExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpAfterExpression() {
	o.FollowUpAfterExpression.Unset()
}

// GetFollowUpBefore returns the FollowUpBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpBefore() string {
	if o == nil || IsNil(o.FollowUpBefore.Get()) {
		var ret string
		return ret
	}
	return *o.FollowUpBefore.Get()
}

// GetFollowUpBeforeOk returns a tuple with the FollowUpBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpBefore.Get(), o.FollowUpBefore.IsSet()
}

// HasFollowUpBefore returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpBefore() bool {
	if o != nil && o.FollowUpBefore.IsSet() {
		return true
	}

	return false
}

// SetFollowUpBefore gets a reference to the given NullableString and assigns it to the FollowUpBefore field.
func (o *TaskQueryDto) SetFollowUpBefore(v string) {
	o.FollowUpBefore.Set(&v)
}
// SetFollowUpBeforeNil sets the value for FollowUpBefore to be an explicit nil
func (o *TaskQueryDto) SetFollowUpBeforeNil() {
	o.FollowUpBefore.Set(nil)
}

// UnsetFollowUpBefore ensures that no value is present for FollowUpBefore, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpBefore() {
	o.FollowUpBefore.Unset()
}

// GetFollowUpBeforeExpression returns the FollowUpBeforeExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpBeforeExpression() string {
	if o == nil || IsNil(o.FollowUpBeforeExpression.Get()) {
		var ret string
		return ret
	}
	return *o.FollowUpBeforeExpression.Get()
}

// GetFollowUpBeforeExpressionOk returns a tuple with the FollowUpBeforeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpBeforeExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpBeforeExpression.Get(), o.FollowUpBeforeExpression.IsSet()
}

// HasFollowUpBeforeExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpBeforeExpression() bool {
	if o != nil && o.FollowUpBeforeExpression.IsSet() {
		return true
	}

	return false
}

// SetFollowUpBeforeExpression gets a reference to the given NullableString and assigns it to the FollowUpBeforeExpression field.
func (o *TaskQueryDto) SetFollowUpBeforeExpression(v string) {
	o.FollowUpBeforeExpression.Set(&v)
}
// SetFollowUpBeforeExpressionNil sets the value for FollowUpBeforeExpression to be an explicit nil
func (o *TaskQueryDto) SetFollowUpBeforeExpressionNil() {
	o.FollowUpBeforeExpression.Set(nil)
}

// UnsetFollowUpBeforeExpression ensures that no value is present for FollowUpBeforeExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpBeforeExpression() {
	o.FollowUpBeforeExpression.Unset()
}

// GetFollowUpBeforeOrNotExistent returns the FollowUpBeforeOrNotExistent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpBeforeOrNotExistent() time.Time {
	if o == nil || IsNil(o.FollowUpBeforeOrNotExistent.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FollowUpBeforeOrNotExistent.Get()
}

// GetFollowUpBeforeOrNotExistentOk returns a tuple with the FollowUpBeforeOrNotExistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpBeforeOrNotExistentOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpBeforeOrNotExistent.Get(), o.FollowUpBeforeOrNotExistent.IsSet()
}

// HasFollowUpBeforeOrNotExistent returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpBeforeOrNotExistent() bool {
	if o != nil && o.FollowUpBeforeOrNotExistent.IsSet() {
		return true
	}

	return false
}

// SetFollowUpBeforeOrNotExistent gets a reference to the given NullableTime and assigns it to the FollowUpBeforeOrNotExistent field.
func (o *TaskQueryDto) SetFollowUpBeforeOrNotExistent(v time.Time) {
	o.FollowUpBeforeOrNotExistent.Set(&v)
}
// SetFollowUpBeforeOrNotExistentNil sets the value for FollowUpBeforeOrNotExistent to be an explicit nil
func (o *TaskQueryDto) SetFollowUpBeforeOrNotExistentNil() {
	o.FollowUpBeforeOrNotExistent.Set(nil)
}

// UnsetFollowUpBeforeOrNotExistent ensures that no value is present for FollowUpBeforeOrNotExistent, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpBeforeOrNotExistent() {
	o.FollowUpBeforeOrNotExistent.Unset()
}

// GetFollowUpBeforeOrNotExistentExpression returns the FollowUpBeforeOrNotExistentExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetFollowUpBeforeOrNotExistentExpression() string {
	if o == nil || IsNil(o.FollowUpBeforeOrNotExistentExpression.Get()) {
		var ret string
		return ret
	}
	return *o.FollowUpBeforeOrNotExistentExpression.Get()
}

// GetFollowUpBeforeOrNotExistentExpressionOk returns a tuple with the FollowUpBeforeOrNotExistentExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetFollowUpBeforeOrNotExistentExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUpBeforeOrNotExistentExpression.Get(), o.FollowUpBeforeOrNotExistentExpression.IsSet()
}

// HasFollowUpBeforeOrNotExistentExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasFollowUpBeforeOrNotExistentExpression() bool {
	if o != nil && o.FollowUpBeforeOrNotExistentExpression.IsSet() {
		return true
	}

	return false
}

// SetFollowUpBeforeOrNotExistentExpression gets a reference to the given NullableString and assigns it to the FollowUpBeforeOrNotExistentExpression field.
func (o *TaskQueryDto) SetFollowUpBeforeOrNotExistentExpression(v string) {
	o.FollowUpBeforeOrNotExistentExpression.Set(&v)
}
// SetFollowUpBeforeOrNotExistentExpressionNil sets the value for FollowUpBeforeOrNotExistentExpression to be an explicit nil
func (o *TaskQueryDto) SetFollowUpBeforeOrNotExistentExpressionNil() {
	o.FollowUpBeforeOrNotExistentExpression.Set(nil)
}

// UnsetFollowUpBeforeOrNotExistentExpression ensures that no value is present for FollowUpBeforeOrNotExistentExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetFollowUpBeforeOrNotExistentExpression() {
	o.FollowUpBeforeOrNotExistentExpression.Unset()
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCreatedOn() time.Time {
	if o == nil || IsNil(o.CreatedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn.Get()
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedOn.Get(), o.CreatedOn.IsSet()
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCreatedOn() bool {
	if o != nil && o.CreatedOn.IsSet() {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given NullableTime and assigns it to the CreatedOn field.
func (o *TaskQueryDto) SetCreatedOn(v time.Time) {
	o.CreatedOn.Set(&v)
}
// SetCreatedOnNil sets the value for CreatedOn to be an explicit nil
func (o *TaskQueryDto) SetCreatedOnNil() {
	o.CreatedOn.Set(nil)
}

// UnsetCreatedOn ensures that no value is present for CreatedOn, not even an explicit nil
func (o *TaskQueryDto) UnsetCreatedOn() {
	o.CreatedOn.Unset()
}

// GetCreatedOnExpression returns the CreatedOnExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCreatedOnExpression() string {
	if o == nil || IsNil(o.CreatedOnExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedOnExpression.Get()
}

// GetCreatedOnExpressionOk returns a tuple with the CreatedOnExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCreatedOnExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedOnExpression.Get(), o.CreatedOnExpression.IsSet()
}

// HasCreatedOnExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCreatedOnExpression() bool {
	if o != nil && o.CreatedOnExpression.IsSet() {
		return true
	}

	return false
}

// SetCreatedOnExpression gets a reference to the given NullableString and assigns it to the CreatedOnExpression field.
func (o *TaskQueryDto) SetCreatedOnExpression(v string) {
	o.CreatedOnExpression.Set(&v)
}
// SetCreatedOnExpressionNil sets the value for CreatedOnExpression to be an explicit nil
func (o *TaskQueryDto) SetCreatedOnExpressionNil() {
	o.CreatedOnExpression.Set(nil)
}

// UnsetCreatedOnExpression ensures that no value is present for CreatedOnExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetCreatedOnExpression() {
	o.CreatedOnExpression.Unset()
}

// GetCreatedAfter returns the CreatedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCreatedAfter() time.Time {
	if o == nil || IsNil(o.CreatedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAfter.Get()
}

// GetCreatedAfterOk returns a tuple with the CreatedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCreatedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAfter.Get(), o.CreatedAfter.IsSet()
}

// HasCreatedAfter returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCreatedAfter() bool {
	if o != nil && o.CreatedAfter.IsSet() {
		return true
	}

	return false
}

// SetCreatedAfter gets a reference to the given NullableTime and assigns it to the CreatedAfter field.
func (o *TaskQueryDto) SetCreatedAfter(v time.Time) {
	o.CreatedAfter.Set(&v)
}
// SetCreatedAfterNil sets the value for CreatedAfter to be an explicit nil
func (o *TaskQueryDto) SetCreatedAfterNil() {
	o.CreatedAfter.Set(nil)
}

// UnsetCreatedAfter ensures that no value is present for CreatedAfter, not even an explicit nil
func (o *TaskQueryDto) UnsetCreatedAfter() {
	o.CreatedAfter.Unset()
}

// GetCreatedAfterExpression returns the CreatedAfterExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCreatedAfterExpression() string {
	if o == nil || IsNil(o.CreatedAfterExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAfterExpression.Get()
}

// GetCreatedAfterExpressionOk returns a tuple with the CreatedAfterExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCreatedAfterExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAfterExpression.Get(), o.CreatedAfterExpression.IsSet()
}

// HasCreatedAfterExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCreatedAfterExpression() bool {
	if o != nil && o.CreatedAfterExpression.IsSet() {
		return true
	}

	return false
}

// SetCreatedAfterExpression gets a reference to the given NullableString and assigns it to the CreatedAfterExpression field.
func (o *TaskQueryDto) SetCreatedAfterExpression(v string) {
	o.CreatedAfterExpression.Set(&v)
}
// SetCreatedAfterExpressionNil sets the value for CreatedAfterExpression to be an explicit nil
func (o *TaskQueryDto) SetCreatedAfterExpressionNil() {
	o.CreatedAfterExpression.Set(nil)
}

// UnsetCreatedAfterExpression ensures that no value is present for CreatedAfterExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetCreatedAfterExpression() {
	o.CreatedAfterExpression.Unset()
}

// GetCreatedBefore returns the CreatedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCreatedBefore() time.Time {
	if o == nil || IsNil(o.CreatedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedBefore.Get()
}

// GetCreatedBeforeOk returns a tuple with the CreatedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCreatedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBefore.Get(), o.CreatedBefore.IsSet()
}

// HasCreatedBefore returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCreatedBefore() bool {
	if o != nil && o.CreatedBefore.IsSet() {
		return true
	}

	return false
}

// SetCreatedBefore gets a reference to the given NullableTime and assigns it to the CreatedBefore field.
func (o *TaskQueryDto) SetCreatedBefore(v time.Time) {
	o.CreatedBefore.Set(&v)
}
// SetCreatedBeforeNil sets the value for CreatedBefore to be an explicit nil
func (o *TaskQueryDto) SetCreatedBeforeNil() {
	o.CreatedBefore.Set(nil)
}

// UnsetCreatedBefore ensures that no value is present for CreatedBefore, not even an explicit nil
func (o *TaskQueryDto) UnsetCreatedBefore() {
	o.CreatedBefore.Unset()
}

// GetCreatedBeforeExpression returns the CreatedBeforeExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCreatedBeforeExpression() string {
	if o == nil || IsNil(o.CreatedBeforeExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBeforeExpression.Get()
}

// GetCreatedBeforeExpressionOk returns a tuple with the CreatedBeforeExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCreatedBeforeExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBeforeExpression.Get(), o.CreatedBeforeExpression.IsSet()
}

// HasCreatedBeforeExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCreatedBeforeExpression() bool {
	if o != nil && o.CreatedBeforeExpression.IsSet() {
		return true
	}

	return false
}

// SetCreatedBeforeExpression gets a reference to the given NullableString and assigns it to the CreatedBeforeExpression field.
func (o *TaskQueryDto) SetCreatedBeforeExpression(v string) {
	o.CreatedBeforeExpression.Set(&v)
}
// SetCreatedBeforeExpressionNil sets the value for CreatedBeforeExpression to be an explicit nil
func (o *TaskQueryDto) SetCreatedBeforeExpressionNil() {
	o.CreatedBeforeExpression.Set(nil)
}

// UnsetCreatedBeforeExpression ensures that no value is present for CreatedBeforeExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetCreatedBeforeExpression() {
	o.CreatedBeforeExpression.Unset()
}

// GetUpdatedAfter returns the UpdatedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetUpdatedAfter() time.Time {
	if o == nil || IsNil(o.UpdatedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAfter.Get()
}

// GetUpdatedAfterOk returns a tuple with the UpdatedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetUpdatedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAfter.Get(), o.UpdatedAfter.IsSet()
}

// HasUpdatedAfter returns a boolean if a field has been set.
func (o *TaskQueryDto) HasUpdatedAfter() bool {
	if o != nil && o.UpdatedAfter.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAfter gets a reference to the given NullableTime and assigns it to the UpdatedAfter field.
func (o *TaskQueryDto) SetUpdatedAfter(v time.Time) {
	o.UpdatedAfter.Set(&v)
}
// SetUpdatedAfterNil sets the value for UpdatedAfter to be an explicit nil
func (o *TaskQueryDto) SetUpdatedAfterNil() {
	o.UpdatedAfter.Set(nil)
}

// UnsetUpdatedAfter ensures that no value is present for UpdatedAfter, not even an explicit nil
func (o *TaskQueryDto) UnsetUpdatedAfter() {
	o.UpdatedAfter.Unset()
}

// GetUpdatedAfterExpression returns the UpdatedAfterExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetUpdatedAfterExpression() string {
	if o == nil || IsNil(o.UpdatedAfterExpression.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedAfterExpression.Get()
}

// GetUpdatedAfterExpressionOk returns a tuple with the UpdatedAfterExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetUpdatedAfterExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAfterExpression.Get(), o.UpdatedAfterExpression.IsSet()
}

// HasUpdatedAfterExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasUpdatedAfterExpression() bool {
	if o != nil && o.UpdatedAfterExpression.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAfterExpression gets a reference to the given NullableString and assigns it to the UpdatedAfterExpression field.
func (o *TaskQueryDto) SetUpdatedAfterExpression(v string) {
	o.UpdatedAfterExpression.Set(&v)
}
// SetUpdatedAfterExpressionNil sets the value for UpdatedAfterExpression to be an explicit nil
func (o *TaskQueryDto) SetUpdatedAfterExpressionNil() {
	o.UpdatedAfterExpression.Set(nil)
}

// UnsetUpdatedAfterExpression ensures that no value is present for UpdatedAfterExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetUpdatedAfterExpression() {
	o.UpdatedAfterExpression.Unset()
}

// GetDelegationState returns the DelegationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetDelegationState() string {
	if o == nil || IsNil(o.DelegationState.Get()) {
		var ret string
		return ret
	}
	return *o.DelegationState.Get()
}

// GetDelegationStateOk returns a tuple with the DelegationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetDelegationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegationState.Get(), o.DelegationState.IsSet()
}

// HasDelegationState returns a boolean if a field has been set.
func (o *TaskQueryDto) HasDelegationState() bool {
	if o != nil && o.DelegationState.IsSet() {
		return true
	}

	return false
}

// SetDelegationState gets a reference to the given NullableString and assigns it to the DelegationState field.
func (o *TaskQueryDto) SetDelegationState(v string) {
	o.DelegationState.Set(&v)
}
// SetDelegationStateNil sets the value for DelegationState to be an explicit nil
func (o *TaskQueryDto) SetDelegationStateNil() {
	o.DelegationState.Set(nil)
}

// UnsetDelegationState ensures that no value is present for DelegationState, not even an explicit nil
func (o *TaskQueryDto) UnsetDelegationState() {
	o.DelegationState.Unset()
}

// GetCandidateGroups returns the CandidateGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCandidateGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CandidateGroups
}

// GetCandidateGroupsOk returns a tuple with the CandidateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCandidateGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.CandidateGroups) {
		return nil, false
	}
	return o.CandidateGroups, true
}

// HasCandidateGroups returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCandidateGroups() bool {
	if o != nil && !IsNil(o.CandidateGroups) {
		return true
	}

	return false
}

// SetCandidateGroups gets a reference to the given []string and assigns it to the CandidateGroups field.
func (o *TaskQueryDto) SetCandidateGroups(v []string) {
	o.CandidateGroups = v
}

// GetCandidateGroupsExpression returns the CandidateGroupsExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCandidateGroupsExpression() string {
	if o == nil || IsNil(o.CandidateGroupsExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CandidateGroupsExpression.Get()
}

// GetCandidateGroupsExpressionOk returns a tuple with the CandidateGroupsExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCandidateGroupsExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CandidateGroupsExpression.Get(), o.CandidateGroupsExpression.IsSet()
}

// HasCandidateGroupsExpression returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCandidateGroupsExpression() bool {
	if o != nil && o.CandidateGroupsExpression.IsSet() {
		return true
	}

	return false
}

// SetCandidateGroupsExpression gets a reference to the given NullableString and assigns it to the CandidateGroupsExpression field.
func (o *TaskQueryDto) SetCandidateGroupsExpression(v string) {
	o.CandidateGroupsExpression.Set(&v)
}
// SetCandidateGroupsExpressionNil sets the value for CandidateGroupsExpression to be an explicit nil
func (o *TaskQueryDto) SetCandidateGroupsExpressionNil() {
	o.CandidateGroupsExpression.Set(nil)
}

// UnsetCandidateGroupsExpression ensures that no value is present for CandidateGroupsExpression, not even an explicit nil
func (o *TaskQueryDto) UnsetCandidateGroupsExpression() {
	o.CandidateGroupsExpression.Unset()
}

// GetWithCandidateGroups returns the WithCandidateGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetWithCandidateGroups() bool {
	if o == nil || IsNil(o.WithCandidateGroups.Get()) {
		var ret bool
		return ret
	}
	return *o.WithCandidateGroups.Get()
}

// GetWithCandidateGroupsOk returns a tuple with the WithCandidateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetWithCandidateGroupsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithCandidateGroups.Get(), o.WithCandidateGroups.IsSet()
}

// HasWithCandidateGroups returns a boolean if a field has been set.
func (o *TaskQueryDto) HasWithCandidateGroups() bool {
	if o != nil && o.WithCandidateGroups.IsSet() {
		return true
	}

	return false
}

// SetWithCandidateGroups gets a reference to the given NullableBool and assigns it to the WithCandidateGroups field.
func (o *TaskQueryDto) SetWithCandidateGroups(v bool) {
	o.WithCandidateGroups.Set(&v)
}
// SetWithCandidateGroupsNil sets the value for WithCandidateGroups to be an explicit nil
func (o *TaskQueryDto) SetWithCandidateGroupsNil() {
	o.WithCandidateGroups.Set(nil)
}

// UnsetWithCandidateGroups ensures that no value is present for WithCandidateGroups, not even an explicit nil
func (o *TaskQueryDto) UnsetWithCandidateGroups() {
	o.WithCandidateGroups.Unset()
}

// GetWithoutCandidateGroups returns the WithoutCandidateGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetWithoutCandidateGroups() bool {
	if o == nil || IsNil(o.WithoutCandidateGroups.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutCandidateGroups.Get()
}

// GetWithoutCandidateGroupsOk returns a tuple with the WithoutCandidateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetWithoutCandidateGroupsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutCandidateGroups.Get(), o.WithoutCandidateGroups.IsSet()
}

// HasWithoutCandidateGroups returns a boolean if a field has been set.
func (o *TaskQueryDto) HasWithoutCandidateGroups() bool {
	if o != nil && o.WithoutCandidateGroups.IsSet() {
		return true
	}

	return false
}

// SetWithoutCandidateGroups gets a reference to the given NullableBool and assigns it to the WithoutCandidateGroups field.
func (o *TaskQueryDto) SetWithoutCandidateGroups(v bool) {
	o.WithoutCandidateGroups.Set(&v)
}
// SetWithoutCandidateGroupsNil sets the value for WithoutCandidateGroups to be an explicit nil
func (o *TaskQueryDto) SetWithoutCandidateGroupsNil() {
	o.WithoutCandidateGroups.Set(nil)
}

// UnsetWithoutCandidateGroups ensures that no value is present for WithoutCandidateGroups, not even an explicit nil
func (o *TaskQueryDto) UnsetWithoutCandidateGroups() {
	o.WithoutCandidateGroups.Unset()
}

// GetWithCandidateUsers returns the WithCandidateUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetWithCandidateUsers() bool {
	if o == nil || IsNil(o.WithCandidateUsers.Get()) {
		var ret bool
		return ret
	}
	return *o.WithCandidateUsers.Get()
}

// GetWithCandidateUsersOk returns a tuple with the WithCandidateUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetWithCandidateUsersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithCandidateUsers.Get(), o.WithCandidateUsers.IsSet()
}

// HasWithCandidateUsers returns a boolean if a field has been set.
func (o *TaskQueryDto) HasWithCandidateUsers() bool {
	if o != nil && o.WithCandidateUsers.IsSet() {
		return true
	}

	return false
}

// SetWithCandidateUsers gets a reference to the given NullableBool and assigns it to the WithCandidateUsers field.
func (o *TaskQueryDto) SetWithCandidateUsers(v bool) {
	o.WithCandidateUsers.Set(&v)
}
// SetWithCandidateUsersNil sets the value for WithCandidateUsers to be an explicit nil
func (o *TaskQueryDto) SetWithCandidateUsersNil() {
	o.WithCandidateUsers.Set(nil)
}

// UnsetWithCandidateUsers ensures that no value is present for WithCandidateUsers, not even an explicit nil
func (o *TaskQueryDto) UnsetWithCandidateUsers() {
	o.WithCandidateUsers.Unset()
}

// GetWithoutCandidateUsers returns the WithoutCandidateUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetWithoutCandidateUsers() bool {
	if o == nil || IsNil(o.WithoutCandidateUsers.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutCandidateUsers.Get()
}

// GetWithoutCandidateUsersOk returns a tuple with the WithoutCandidateUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetWithoutCandidateUsersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutCandidateUsers.Get(), o.WithoutCandidateUsers.IsSet()
}

// HasWithoutCandidateUsers returns a boolean if a field has been set.
func (o *TaskQueryDto) HasWithoutCandidateUsers() bool {
	if o != nil && o.WithoutCandidateUsers.IsSet() {
		return true
	}

	return false
}

// SetWithoutCandidateUsers gets a reference to the given NullableBool and assigns it to the WithoutCandidateUsers field.
func (o *TaskQueryDto) SetWithoutCandidateUsers(v bool) {
	o.WithoutCandidateUsers.Set(&v)
}
// SetWithoutCandidateUsersNil sets the value for WithoutCandidateUsers to be an explicit nil
func (o *TaskQueryDto) SetWithoutCandidateUsersNil() {
	o.WithoutCandidateUsers.Set(nil)
}

// UnsetWithoutCandidateUsers ensures that no value is present for WithoutCandidateUsers, not even an explicit nil
func (o *TaskQueryDto) UnsetWithoutCandidateUsers() {
	o.WithoutCandidateUsers.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *TaskQueryDto) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *TaskQueryDto) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *TaskQueryDto) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *TaskQueryDto) UnsetActive() {
	o.Active.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *TaskQueryDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *TaskQueryDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *TaskQueryDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *TaskQueryDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetTaskVariables returns the TaskVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetTaskVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.TaskVariables
}

// GetTaskVariablesOk returns a tuple with the TaskVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetTaskVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.TaskVariables) {
		return nil, false
	}
	return o.TaskVariables, true
}

// HasTaskVariables returns a boolean if a field has been set.
func (o *TaskQueryDto) HasTaskVariables() bool {
	if o != nil && !IsNil(o.TaskVariables) {
		return true
	}

	return false
}

// SetTaskVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the TaskVariables field.
func (o *TaskQueryDto) SetTaskVariables(v []VariableQueryParameterDto) {
	o.TaskVariables = v
}

// GetProcessVariables returns the ProcessVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetProcessVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.ProcessVariables
}

// GetProcessVariablesOk returns a tuple with the ProcessVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetProcessVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.ProcessVariables) {
		return nil, false
	}
	return o.ProcessVariables, true
}

// HasProcessVariables returns a boolean if a field has been set.
func (o *TaskQueryDto) HasProcessVariables() bool {
	if o != nil && !IsNil(o.ProcessVariables) {
		return true
	}

	return false
}

// SetProcessVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the ProcessVariables field.
func (o *TaskQueryDto) SetProcessVariables(v []VariableQueryParameterDto) {
	o.ProcessVariables = v
}

// GetCaseInstanceVariables returns the CaseInstanceVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetCaseInstanceVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.CaseInstanceVariables
}

// GetCaseInstanceVariablesOk returns a tuple with the CaseInstanceVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetCaseInstanceVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.CaseInstanceVariables) {
		return nil, false
	}
	return o.CaseInstanceVariables, true
}

// HasCaseInstanceVariables returns a boolean if a field has been set.
func (o *TaskQueryDto) HasCaseInstanceVariables() bool {
	if o != nil && !IsNil(o.CaseInstanceVariables) {
		return true
	}

	return false
}

// SetCaseInstanceVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the CaseInstanceVariables field.
func (o *TaskQueryDto) SetCaseInstanceVariables(v []VariableQueryParameterDto) {
	o.CaseInstanceVariables = v
}

// GetVariableNamesIgnoreCase returns the VariableNamesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetVariableNamesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableNamesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableNamesIgnoreCase.Get()
}

// GetVariableNamesIgnoreCaseOk returns a tuple with the VariableNamesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetVariableNamesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNamesIgnoreCase.Get(), o.VariableNamesIgnoreCase.IsSet()
}

// HasVariableNamesIgnoreCase returns a boolean if a field has been set.
func (o *TaskQueryDto) HasVariableNamesIgnoreCase() bool {
	if o != nil && o.VariableNamesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableNamesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableNamesIgnoreCase field.
func (o *TaskQueryDto) SetVariableNamesIgnoreCase(v bool) {
	o.VariableNamesIgnoreCase.Set(&v)
}
// SetVariableNamesIgnoreCaseNil sets the value for VariableNamesIgnoreCase to be an explicit nil
func (o *TaskQueryDto) SetVariableNamesIgnoreCaseNil() {
	o.VariableNamesIgnoreCase.Set(nil)
}

// UnsetVariableNamesIgnoreCase ensures that no value is present for VariableNamesIgnoreCase, not even an explicit nil
func (o *TaskQueryDto) UnsetVariableNamesIgnoreCase() {
	o.VariableNamesIgnoreCase.Unset()
}

// GetVariableValuesIgnoreCase returns the VariableValuesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetVariableValuesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableValuesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableValuesIgnoreCase.Get()
}

// GetVariableValuesIgnoreCaseOk returns a tuple with the VariableValuesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetVariableValuesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValuesIgnoreCase.Get(), o.VariableValuesIgnoreCase.IsSet()
}

// HasVariableValuesIgnoreCase returns a boolean if a field has been set.
func (o *TaskQueryDto) HasVariableValuesIgnoreCase() bool {
	if o != nil && o.VariableValuesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableValuesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableValuesIgnoreCase field.
func (o *TaskQueryDto) SetVariableValuesIgnoreCase(v bool) {
	o.VariableValuesIgnoreCase.Set(&v)
}
// SetVariableValuesIgnoreCaseNil sets the value for VariableValuesIgnoreCase to be an explicit nil
func (o *TaskQueryDto) SetVariableValuesIgnoreCaseNil() {
	o.VariableValuesIgnoreCase.Set(nil)
}

// UnsetVariableValuesIgnoreCase ensures that no value is present for VariableValuesIgnoreCase, not even an explicit nil
func (o *TaskQueryDto) UnsetVariableValuesIgnoreCase() {
	o.VariableValuesIgnoreCase.Unset()
}

// GetParentTaskId returns the ParentTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetParentTaskId() string {
	if o == nil || IsNil(o.ParentTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentTaskId.Get()
}

// GetParentTaskIdOk returns a tuple with the ParentTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetParentTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTaskId.Get(), o.ParentTaskId.IsSet()
}

// HasParentTaskId returns a boolean if a field has been set.
func (o *TaskQueryDto) HasParentTaskId() bool {
	if o != nil && o.ParentTaskId.IsSet() {
		return true
	}

	return false
}

// SetParentTaskId gets a reference to the given NullableString and assigns it to the ParentTaskId field.
func (o *TaskQueryDto) SetParentTaskId(v string) {
	o.ParentTaskId.Set(&v)
}
// SetParentTaskIdNil sets the value for ParentTaskId to be an explicit nil
func (o *TaskQueryDto) SetParentTaskIdNil() {
	o.ParentTaskId.Set(nil)
}

// UnsetParentTaskId ensures that no value is present for ParentTaskId, not even an explicit nil
func (o *TaskQueryDto) UnsetParentTaskId() {
	o.ParentTaskId.Unset()
}

// GetOrQueries returns the OrQueries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetOrQueries() []TaskQueryDto {
	if o == nil {
		var ret []TaskQueryDto
		return ret
	}
	return o.OrQueries
}

// GetOrQueriesOk returns a tuple with the OrQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetOrQueriesOk() ([]TaskQueryDto, bool) {
	if o == nil || IsNil(o.OrQueries) {
		return nil, false
	}
	return o.OrQueries, true
}

// HasOrQueries returns a boolean if a field has been set.
func (o *TaskQueryDto) HasOrQueries() bool {
	if o != nil && !IsNil(o.OrQueries) {
		return true
	}

	return false
}

// SetOrQueries gets a reference to the given []TaskQueryDto and assigns it to the OrQueries field.
func (o *TaskQueryDto) SetOrQueries(v []TaskQueryDto) {
	o.OrQueries = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskQueryDto) GetSorting() []TaskQueryDtoSortingInner {
	if o == nil {
		var ret []TaskQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskQueryDto) GetSortingOk() ([]TaskQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *TaskQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []TaskQueryDtoSortingInner and assigns it to the Sorting field.
func (o *TaskQueryDto) SetSorting(v []TaskQueryDtoSortingInner) {
	o.Sorting = v
}

func (o TaskQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.TaskIdIn != nil {
		toSerialize["taskIdIn"] = o.TaskIdIn
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessInstanceIdIn != nil {
		toSerialize["processInstanceIdIn"] = o.ProcessInstanceIdIn
	}
	if o.ProcessInstanceBusinessKey.IsSet() {
		toSerialize["processInstanceBusinessKey"] = o.ProcessInstanceBusinessKey.Get()
	}
	if o.ProcessInstanceBusinessKeyExpression.IsSet() {
		toSerialize["processInstanceBusinessKeyExpression"] = o.ProcessInstanceBusinessKeyExpression.Get()
	}
	if o.ProcessInstanceBusinessKeyIn != nil {
		toSerialize["processInstanceBusinessKeyIn"] = o.ProcessInstanceBusinessKeyIn
	}
	if o.ProcessInstanceBusinessKeyLike.IsSet() {
		toSerialize["processInstanceBusinessKeyLike"] = o.ProcessInstanceBusinessKeyLike.Get()
	}
	if o.ProcessInstanceBusinessKeyLikeExpression.IsSet() {
		toSerialize["processInstanceBusinessKeyLikeExpression"] = o.ProcessInstanceBusinessKeyLikeExpression.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionKeyIn != nil {
		toSerialize["processDefinitionKeyIn"] = o.ProcessDefinitionKeyIn
	}
	if o.ProcessDefinitionName.IsSet() {
		toSerialize["processDefinitionName"] = o.ProcessDefinitionName.Get()
	}
	if o.ProcessDefinitionNameLike.IsSet() {
		toSerialize["processDefinitionNameLike"] = o.ProcessDefinitionNameLike.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.CaseInstanceBusinessKey.IsSet() {
		toSerialize["caseInstanceBusinessKey"] = o.CaseInstanceBusinessKey.Get()
	}
	if o.CaseInstanceBusinessKeyLike.IsSet() {
		toSerialize["caseInstanceBusinessKeyLike"] = o.CaseInstanceBusinessKeyLike.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseDefinitionKey.IsSet() {
		toSerialize["caseDefinitionKey"] = o.CaseDefinitionKey.Get()
	}
	if o.CaseDefinitionName.IsSet() {
		toSerialize["caseDefinitionName"] = o.CaseDefinitionName.Get()
	}
	if o.CaseDefinitionNameLike.IsSet() {
		toSerialize["caseDefinitionNameLike"] = o.CaseDefinitionNameLike.Get()
	}
	if o.CaseExecutionId.IsSet() {
		toSerialize["caseExecutionId"] = o.CaseExecutionId.Get()
	}
	if o.ActivityInstanceIdIn != nil {
		toSerialize["activityInstanceIdIn"] = o.ActivityInstanceIdIn
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if o.AssigneeExpression.IsSet() {
		toSerialize["assigneeExpression"] = o.AssigneeExpression.Get()
	}
	if o.AssigneeLike.IsSet() {
		toSerialize["assigneeLike"] = o.AssigneeLike.Get()
	}
	if o.AssigneeLikeExpression.IsSet() {
		toSerialize["assigneeLikeExpression"] = o.AssigneeLikeExpression.Get()
	}
	if o.AssigneeIn != nil {
		toSerialize["assigneeIn"] = o.AssigneeIn
	}
	if o.AssigneeNotIn != nil {
		toSerialize["assigneeNotIn"] = o.AssigneeNotIn
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.OwnerExpression.IsSet() {
		toSerialize["ownerExpression"] = o.OwnerExpression.Get()
	}
	if o.CandidateGroup.IsSet() {
		toSerialize["candidateGroup"] = o.CandidateGroup.Get()
	}
	if o.CandidateGroupExpression.IsSet() {
		toSerialize["candidateGroupExpression"] = o.CandidateGroupExpression.Get()
	}
	if o.CandidateUser.IsSet() {
		toSerialize["candidateUser"] = o.CandidateUser.Get()
	}
	if o.CandidateUserExpression.IsSet() {
		toSerialize["candidateUserExpression"] = o.CandidateUserExpression.Get()
	}
	if o.IncludeAssignedTasks.IsSet() {
		toSerialize["includeAssignedTasks"] = o.IncludeAssignedTasks.Get()
	}
	if o.InvolvedUser.IsSet() {
		toSerialize["involvedUser"] = o.InvolvedUser.Get()
	}
	if o.InvolvedUserExpression.IsSet() {
		toSerialize["involvedUserExpression"] = o.InvolvedUserExpression.Get()
	}
	if o.Assigned.IsSet() {
		toSerialize["assigned"] = o.Assigned.Get()
	}
	if o.Unassigned.IsSet() {
		toSerialize["unassigned"] = o.Unassigned.Get()
	}
	if o.TaskDefinitionKey.IsSet() {
		toSerialize["taskDefinitionKey"] = o.TaskDefinitionKey.Get()
	}
	if o.TaskDefinitionKeyIn != nil {
		toSerialize["taskDefinitionKeyIn"] = o.TaskDefinitionKeyIn
	}
	if o.TaskDefinitionKeyLike.IsSet() {
		toSerialize["taskDefinitionKeyLike"] = o.TaskDefinitionKeyLike.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NameNotEqual.IsSet() {
		toSerialize["nameNotEqual"] = o.NameNotEqual.Get()
	}
	if o.NameLike.IsSet() {
		toSerialize["nameLike"] = o.NameLike.Get()
	}
	if o.NameNotLike.IsSet() {
		toSerialize["nameNotLike"] = o.NameNotLike.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DescriptionLike.IsSet() {
		toSerialize["descriptionLike"] = o.DescriptionLike.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if o.MaxPriority.IsSet() {
		toSerialize["maxPriority"] = o.MaxPriority.Get()
	}
	if o.MinPriority.IsSet() {
		toSerialize["minPriority"] = o.MinPriority.Get()
	}
	if o.DueDate.IsSet() {
		toSerialize["dueDate"] = o.DueDate.Get()
	}
	if o.DueDateExpression.IsSet() {
		toSerialize["dueDateExpression"] = o.DueDateExpression.Get()
	}
	if o.DueAfter.IsSet() {
		toSerialize["dueAfter"] = o.DueAfter.Get()
	}
	if o.DueAfterExpression.IsSet() {
		toSerialize["dueAfterExpression"] = o.DueAfterExpression.Get()
	}
	if o.DueBefore.IsSet() {
		toSerialize["dueBefore"] = o.DueBefore.Get()
	}
	if o.DueBeforeExpression.IsSet() {
		toSerialize["dueBeforeExpression"] = o.DueBeforeExpression.Get()
	}
	if o.WithoutDueDate.IsSet() {
		toSerialize["withoutDueDate"] = o.WithoutDueDate.Get()
	}
	if o.FollowUpDate.IsSet() {
		toSerialize["followUpDate"] = o.FollowUpDate.Get()
	}
	if o.FollowUpDateExpression.IsSet() {
		toSerialize["followUpDateExpression"] = o.FollowUpDateExpression.Get()
	}
	if o.FollowUpAfter.IsSet() {
		toSerialize["followUpAfter"] = o.FollowUpAfter.Get()
	}
	if o.FollowUpAfterExpression.IsSet() {
		toSerialize["followUpAfterExpression"] = o.FollowUpAfterExpression.Get()
	}
	if o.FollowUpBefore.IsSet() {
		toSerialize["followUpBefore"] = o.FollowUpBefore.Get()
	}
	if o.FollowUpBeforeExpression.IsSet() {
		toSerialize["followUpBeforeExpression"] = o.FollowUpBeforeExpression.Get()
	}
	if o.FollowUpBeforeOrNotExistent.IsSet() {
		toSerialize["followUpBeforeOrNotExistent"] = o.FollowUpBeforeOrNotExistent.Get()
	}
	if o.FollowUpBeforeOrNotExistentExpression.IsSet() {
		toSerialize["followUpBeforeOrNotExistentExpression"] = o.FollowUpBeforeOrNotExistentExpression.Get()
	}
	if o.CreatedOn.IsSet() {
		toSerialize["createdOn"] = o.CreatedOn.Get()
	}
	if o.CreatedOnExpression.IsSet() {
		toSerialize["createdOnExpression"] = o.CreatedOnExpression.Get()
	}
	if o.CreatedAfter.IsSet() {
		toSerialize["createdAfter"] = o.CreatedAfter.Get()
	}
	if o.CreatedAfterExpression.IsSet() {
		toSerialize["createdAfterExpression"] = o.CreatedAfterExpression.Get()
	}
	if o.CreatedBefore.IsSet() {
		toSerialize["createdBefore"] = o.CreatedBefore.Get()
	}
	if o.CreatedBeforeExpression.IsSet() {
		toSerialize["createdBeforeExpression"] = o.CreatedBeforeExpression.Get()
	}
	if o.UpdatedAfter.IsSet() {
		toSerialize["updatedAfter"] = o.UpdatedAfter.Get()
	}
	if o.UpdatedAfterExpression.IsSet() {
		toSerialize["updatedAfterExpression"] = o.UpdatedAfterExpression.Get()
	}
	if o.DelegationState.IsSet() {
		toSerialize["delegationState"] = o.DelegationState.Get()
	}
	if o.CandidateGroups != nil {
		toSerialize["candidateGroups"] = o.CandidateGroups
	}
	if o.CandidateGroupsExpression.IsSet() {
		toSerialize["candidateGroupsExpression"] = o.CandidateGroupsExpression.Get()
	}
	if o.WithCandidateGroups.IsSet() {
		toSerialize["withCandidateGroups"] = o.WithCandidateGroups.Get()
	}
	if o.WithoutCandidateGroups.IsSet() {
		toSerialize["withoutCandidateGroups"] = o.WithoutCandidateGroups.Get()
	}
	if o.WithCandidateUsers.IsSet() {
		toSerialize["withCandidateUsers"] = o.WithCandidateUsers.Get()
	}
	if o.WithoutCandidateUsers.IsSet() {
		toSerialize["withoutCandidateUsers"] = o.WithoutCandidateUsers.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.TaskVariables != nil {
		toSerialize["taskVariables"] = o.TaskVariables
	}
	if o.ProcessVariables != nil {
		toSerialize["processVariables"] = o.ProcessVariables
	}
	if o.CaseInstanceVariables != nil {
		toSerialize["caseInstanceVariables"] = o.CaseInstanceVariables
	}
	if o.VariableNamesIgnoreCase.IsSet() {
		toSerialize["variableNamesIgnoreCase"] = o.VariableNamesIgnoreCase.Get()
	}
	if o.VariableValuesIgnoreCase.IsSet() {
		toSerialize["variableValuesIgnoreCase"] = o.VariableValuesIgnoreCase.Get()
	}
	if o.ParentTaskId.IsSet() {
		toSerialize["parentTaskId"] = o.ParentTaskId.Get()
	}
	if o.OrQueries != nil {
		toSerialize["orQueries"] = o.OrQueries
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableTaskQueryDto struct {
	value *TaskQueryDto
	isSet bool
}

func (v NullableTaskQueryDto) Get() *TaskQueryDto {
	return v.value
}

func (v *NullableTaskQueryDto) Set(val *TaskQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskQueryDto(val *TaskQueryDto) *NullableTaskQueryDto {
	return &NullableTaskQueryDto{value: val, isSet: true}
}

func (v NullableTaskQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


