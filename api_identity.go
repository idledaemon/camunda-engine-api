/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type IdentityAPI interface {

	/*
	CheckPassword Validate Password

	A password policy consists of a list of rules that new passwords must follow to be
policy compliant. A password can be checked for compliancy via this
end point. More information on password policies in Camunda can be found in the password policy
[user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/password-policy/) and in
the [security instructions](https://docs.camunda.org/manual/7.21/user-guide/security/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCheckPasswordRequest
	*/
	CheckPassword(ctx context.Context) ApiCheckPasswordRequest

	// CheckPasswordExecute executes the request
	//  @return CheckPasswordPolicyResultDto
	CheckPasswordExecute(r ApiCheckPasswordRequest) (*CheckPasswordPolicyResultDto, *http.Response, error)

	/*
	GetGroupInfo Get a User's Groups

	Gets the groups of a user by id and includes all users that share a group with the
given user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetGroupInfoRequest
	*/
	GetGroupInfo(ctx context.Context) ApiGetGroupInfoRequest

	// GetGroupInfoExecute executes the request
	//  @return IdentityServiceGroupInfoDto
	GetGroupInfoExecute(r ApiGetGroupInfoRequest) (*IdentityServiceGroupInfoDto, *http.Response, error)

	/*
	GetPasswordPolicy Get Password Policy

	A password policy consists of a list of rules that new passwords must follow to be
policy compliant. This end point returns a JSON representation of the
list of policy rules. More information on password policies in Camunda can be found in the password policy
[user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/password-policy/) and in
the [security instructions](https://docs.camunda.org/manual/7.21/user-guide/security/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetPasswordPolicyRequest
	*/
	GetPasswordPolicy(ctx context.Context) ApiGetPasswordPolicyRequest

	// GetPasswordPolicyExecute executes the request
	//  @return PasswordPolicyDto
	GetPasswordPolicyExecute(r ApiGetPasswordPolicyRequest) (*PasswordPolicyDto, *http.Response, error)

	/*
	VerifyUser Verify User

	Verifies that user credentials are valid.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiVerifyUserRequest
	*/
	VerifyUser(ctx context.Context) ApiVerifyUserRequest

	// VerifyUserExecute executes the request
	//  @return AuthenticationResult
	VerifyUserExecute(r ApiVerifyUserRequest) (*AuthenticationResult, *http.Response, error)
}

// IdentityAPIService IdentityAPI service
type IdentityAPIService service

type ApiCheckPasswordRequest struct {
	ctx context.Context
	ApiService IdentityAPI
	passwordPolicyRequestDto *PasswordPolicyRequestDto
}

func (r ApiCheckPasswordRequest) PasswordPolicyRequestDto(passwordPolicyRequestDto PasswordPolicyRequestDto) ApiCheckPasswordRequest {
	r.passwordPolicyRequestDto = &passwordPolicyRequestDto
	return r
}

func (r ApiCheckPasswordRequest) Execute() (*CheckPasswordPolicyResultDto, *http.Response, error) {
	return r.ApiService.CheckPasswordExecute(r)
}

/*
CheckPassword Validate Password

A password policy consists of a list of rules that new passwords must follow to be
policy compliant. A password can be checked for compliancy via this
end point. More information on password policies in Camunda can be found in the password policy
[user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/password-policy/) and in
the [security instructions](https://docs.camunda.org/manual/7.21/user-guide/security/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCheckPasswordRequest
*/
func (a *IdentityAPIService) CheckPassword(ctx context.Context) ApiCheckPasswordRequest {
	return ApiCheckPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckPasswordPolicyResultDto
func (a *IdentityAPIService) CheckPasswordExecute(r ApiCheckPasswordRequest) (*CheckPasswordPolicyResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckPasswordPolicyResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityAPIService.CheckPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/password-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicyRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGroupInfoRequest struct {
	ctx context.Context
	ApiService IdentityAPI
	userId *string
}

// The id of the user to get the groups for.
func (r ApiGetGroupInfoRequest) UserId(userId string) ApiGetGroupInfoRequest {
	r.userId = &userId
	return r
}

func (r ApiGetGroupInfoRequest) Execute() (*IdentityServiceGroupInfoDto, *http.Response, error) {
	return r.ApiService.GetGroupInfoExecute(r)
}

/*
GetGroupInfo Get a User's Groups

Gets the groups of a user by id and includes all users that share a group with the
given user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetGroupInfoRequest
*/
func (a *IdentityAPIService) GetGroupInfo(ctx context.Context) ApiGetGroupInfoRequest {
	return ApiGetGroupInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IdentityServiceGroupInfoDto
func (a *IdentityAPIService) GetGroupInfoExecute(r ApiGetGroupInfoRequest) (*IdentityServiceGroupInfoDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityServiceGroupInfoDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityAPIService.GetGroupInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPasswordPolicyRequest struct {
	ctx context.Context
	ApiService IdentityAPI
}

func (r ApiGetPasswordPolicyRequest) Execute() (*PasswordPolicyDto, *http.Response, error) {
	return r.ApiService.GetPasswordPolicyExecute(r)
}

/*
GetPasswordPolicy Get Password Policy

A password policy consists of a list of rules that new passwords must follow to be
policy compliant. This end point returns a JSON representation of the
list of policy rules. More information on password policies in Camunda can be found in the password policy
[user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/password-policy/) and in
the [security instructions](https://docs.camunda.org/manual/7.21/user-guide/security/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPasswordPolicyRequest
*/
func (a *IdentityAPIService) GetPasswordPolicy(ctx context.Context) ApiGetPasswordPolicyRequest {
	return ApiGetPasswordPolicyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PasswordPolicyDto
func (a *IdentityAPIService) GetPasswordPolicyExecute(r ApiGetPasswordPolicyRequest) (*PasswordPolicyDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PasswordPolicyDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityAPIService.GetPasswordPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/password-policy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVerifyUserRequest struct {
	ctx context.Context
	ApiService IdentityAPI
	basicUserCredentialsDto *BasicUserCredentialsDto
}

func (r ApiVerifyUserRequest) BasicUserCredentialsDto(basicUserCredentialsDto BasicUserCredentialsDto) ApiVerifyUserRequest {
	r.basicUserCredentialsDto = &basicUserCredentialsDto
	return r
}

func (r ApiVerifyUserRequest) Execute() (*AuthenticationResult, *http.Response, error) {
	return r.ApiService.VerifyUserExecute(r)
}

/*
VerifyUser Verify User

Verifies that user credentials are valid.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVerifyUserRequest
*/
func (a *IdentityAPIService) VerifyUser(ctx context.Context) ApiVerifyUserRequest {
	return ApiVerifyUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthenticationResult
func (a *IdentityAPIService) VerifyUserExecute(r ApiVerifyUserRequest) (*AuthenticationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityAPIService.VerifyUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.basicUserCredentialsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
