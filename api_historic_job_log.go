/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type HistoricJobLogAPI interface {

	/*
	GetHistoricJobLog Get Job Log

	Retrieves a historic job log by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the log entry.
	@return ApiGetHistoricJobLogRequest
	*/
	GetHistoricJobLog(ctx context.Context, id string) ApiGetHistoricJobLogRequest

	// GetHistoricJobLogExecute executes the request
	//  @return HistoricJobLogDto
	GetHistoricJobLogExecute(r ApiGetHistoricJobLogRequest) (*HistoricJobLogDto, *http.Response, error)

	/*
	GetHistoricJobLogs Get Job Logs

	Queries for historic job logs that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get Job Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricJobLogsRequest
	*/
	GetHistoricJobLogs(ctx context.Context) ApiGetHistoricJobLogsRequest

	// GetHistoricJobLogsExecute executes the request
	//  @return []HistoricJobLogDto
	GetHistoricJobLogsExecute(r ApiGetHistoricJobLogsRequest) ([]HistoricJobLogDto, *http.Response, error)

	/*
	GetHistoricJobLogsCount Get Job Log Count

	Queries for the number of historic job logs that fulfill the given parameters.
Takes the same parameters as the
[Get Job Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricJobLogsCountRequest
	*/
	GetHistoricJobLogsCount(ctx context.Context) ApiGetHistoricJobLogsCountRequest

	// GetHistoricJobLogsCountExecute executes the request
	//  @return CountResultDto
	GetHistoricJobLogsCountExecute(r ApiGetHistoricJobLogsCountRequest) (*CountResultDto, *http.Response, error)

	/*
	GetStacktraceHistoricJobLog Get Job Log Exception Stacktrace

	Retrieves the corresponding exception stacktrace to the passed historic job log by
id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the historic job log to get the exception stacktrace for.
	@return ApiGetStacktraceHistoricJobLogRequest
	*/
	GetStacktraceHistoricJobLog(ctx context.Context, id string) ApiGetStacktraceHistoricJobLogRequest

	// GetStacktraceHistoricJobLogExecute executes the request
	//  @return interface{}
	GetStacktraceHistoricJobLogExecute(r ApiGetStacktraceHistoricJobLogRequest) (interface{}, *http.Response, error)

	/*
	QueryHistoricJobLogs Get Job Logs (POST)

	Queries for historic job logs that fulfill the given parameters.
This method is slightly more powerful than the
[Get Job Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query/)
method because it allows filtering by historic job logs values of the
different types `String`, `Number` or `Boolean`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricJobLogsRequest
	*/
	QueryHistoricJobLogs(ctx context.Context) ApiQueryHistoricJobLogsRequest

	// QueryHistoricJobLogsExecute executes the request
	//  @return []HistoricJobLogDto
	QueryHistoricJobLogsExecute(r ApiQueryHistoricJobLogsRequest) ([]HistoricJobLogDto, *http.Response, error)

	/*
	QueryHistoricJobLogsCount Get Job Log Count (POST)

	Queries for the number of historic job logs that fulfill the given parameters.
This method takes the same message body as the
[Get Job Logs (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/post-job-log-query/)
method and therefore it is slightly more powerful than the
[Get Job Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricJobLogsCountRequest
	*/
	QueryHistoricJobLogsCount(ctx context.Context) ApiQueryHistoricJobLogsCountRequest

	// QueryHistoricJobLogsCountExecute executes the request
	//  @return CountResultDto
	QueryHistoricJobLogsCountExecute(r ApiQueryHistoricJobLogsCountRequest) (*CountResultDto, *http.Response, error)
}

// HistoricJobLogAPIService HistoricJobLogAPI service
type HistoricJobLogAPIService service

type ApiGetHistoricJobLogRequest struct {
	ctx context.Context
	ApiService HistoricJobLogAPI
	id string
}

func (r ApiGetHistoricJobLogRequest) Execute() (*HistoricJobLogDto, *http.Response, error) {
	return r.ApiService.GetHistoricJobLogExecute(r)
}

/*
GetHistoricJobLog Get Job Log

Retrieves a historic job log by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the log entry.
 @return ApiGetHistoricJobLogRequest
*/
func (a *HistoricJobLogAPIService) GetHistoricJobLog(ctx context.Context, id string) ApiGetHistoricJobLogRequest {
	return ApiGetHistoricJobLogRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistoricJobLogDto
func (a *HistoricJobLogAPIService) GetHistoricJobLogExecute(r ApiGetHistoricJobLogRequest) (*HistoricJobLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricJobLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricJobLogAPIService.GetHistoricJobLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/job-log/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricJobLogsRequest struct {
	ctx context.Context
	ApiService HistoricJobLogAPI
	logId *string
	jobId *string
	jobExceptionMessage *string
	jobDefinitionId *string
	jobDefinitionType *string
	jobDefinitionConfiguration *string
	activityIdIn *string
	failedActivityIdIn *string
	executionIdIn *string
	processInstanceId *string
	processDefinitionId *string
	processDefinitionKey *string
	deploymentId *string
	tenantIdIn *string
	withoutTenantId *bool
	hostname *string
	jobPriorityLowerThanOrEquals *int64
	jobPriorityHigherThanOrEquals *int64
	creationLog *bool
	failureLog *bool
	successLog *bool
	deletionLog *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Filter by historic job log id.
func (r ApiGetHistoricJobLogsRequest) LogId(logId string) ApiGetHistoricJobLogsRequest {
	r.logId = &logId
	return r
}

// Filter by job id.
func (r ApiGetHistoricJobLogsRequest) JobId(jobId string) ApiGetHistoricJobLogsRequest {
	r.jobId = &jobId
	return r
}

// Filter by job exception message.
func (r ApiGetHistoricJobLogsRequest) JobExceptionMessage(jobExceptionMessage string) ApiGetHistoricJobLogsRequest {
	r.jobExceptionMessage = &jobExceptionMessage
	return r
}

// Filter by job definition id.
func (r ApiGetHistoricJobLogsRequest) JobDefinitionId(jobDefinitionId string) ApiGetHistoricJobLogsRequest {
	r.jobDefinitionId = &jobDefinitionId
	return r
}

// Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
func (r ApiGetHistoricJobLogsRequest) JobDefinitionType(jobDefinitionType string) ApiGetHistoricJobLogsRequest {
	r.jobDefinitionType = &jobDefinitionType
	return r
}

// Filter by job definition configuration.
func (r ApiGetHistoricJobLogsRequest) JobDefinitionConfiguration(jobDefinitionConfiguration string) ApiGetHistoricJobLogsRequest {
	r.jobDefinitionConfiguration = &jobDefinitionConfiguration
	return r
}

// Only include historic job logs which belong to one of the passed activity ids.
func (r ApiGetHistoricJobLogsRequest) ActivityIdIn(activityIdIn string) ApiGetHistoricJobLogsRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Only include historic job logs which belong to failures of one of the passed activity ids.
func (r ApiGetHistoricJobLogsRequest) FailedActivityIdIn(failedActivityIdIn string) ApiGetHistoricJobLogsRequest {
	r.failedActivityIdIn = &failedActivityIdIn
	return r
}

// Only include historic job logs which belong to one of the passed execution ids.
func (r ApiGetHistoricJobLogsRequest) ExecutionIdIn(executionIdIn string) ApiGetHistoricJobLogsRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricJobLogsRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricJobLogsRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process definition id.
func (r ApiGetHistoricJobLogsRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricJobLogsRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by process definition key.
func (r ApiGetHistoricJobLogsRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricJobLogsRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by deployment id.
func (r ApiGetHistoricJobLogsRequest) DeploymentId(deploymentId string) ApiGetHistoricJobLogsRequest {
	r.deploymentId = &deploymentId
	return r
}

// Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
func (r ApiGetHistoricJobLogsRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricJobLogsRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricJobLogsRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Filter by hostname.
func (r ApiGetHistoricJobLogsRequest) Hostname(hostname string) ApiGetHistoricJobLogsRequest {
	r.hostname = &hostname
	return r
}

// Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricJobLogsRequest) JobPriorityLowerThanOrEquals(jobPriorityLowerThanOrEquals int64) ApiGetHistoricJobLogsRequest {
	r.jobPriorityLowerThanOrEquals = &jobPriorityLowerThanOrEquals
	return r
}

// Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricJobLogsRequest) JobPriorityHigherThanOrEquals(jobPriorityHigherThanOrEquals int64) ApiGetHistoricJobLogsRequest {
	r.jobPriorityHigherThanOrEquals = &jobPriorityHigherThanOrEquals
	return r
}

// Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsRequest) CreationLog(creationLog bool) ApiGetHistoricJobLogsRequest {
	r.creationLog = &creationLog
	return r
}

// Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsRequest) FailureLog(failureLog bool) ApiGetHistoricJobLogsRequest {
	r.failureLog = &failureLog
	return r
}

// Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsRequest) SuccessLog(successLog bool) ApiGetHistoricJobLogsRequest {
	r.successLog = &successLog
	return r
}

// Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsRequest) DeletionLog(deletionLog bool) ApiGetHistoricJobLogsRequest {
	r.deletionLog = &deletionLog
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricJobLogsRequest) SortBy(sortBy string) ApiGetHistoricJobLogsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricJobLogsRequest) SortOrder(sortOrder string) ApiGetHistoricJobLogsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricJobLogsRequest) FirstResult(firstResult int32) ApiGetHistoricJobLogsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricJobLogsRequest) MaxResults(maxResults int32) ApiGetHistoricJobLogsRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetHistoricJobLogsRequest) Execute() ([]HistoricJobLogDto, *http.Response, error) {
	return r.ApiService.GetHistoricJobLogsExecute(r)
}

/*
GetHistoricJobLogs Get Job Logs

Queries for historic job logs that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get Job Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricJobLogsRequest
*/
func (a *HistoricJobLogAPIService) GetHistoricJobLogs(ctx context.Context) ApiGetHistoricJobLogsRequest {
	return ApiGetHistoricJobLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricJobLogDto
func (a *HistoricJobLogAPIService) GetHistoricJobLogsExecute(r ApiGetHistoricJobLogsRequest) ([]HistoricJobLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricJobLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricJobLogAPIService.GetHistoricJobLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/job-log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.logId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logId", r.logId, "")
	}
	if r.jobId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobId", r.jobId, "")
	}
	if r.jobExceptionMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobExceptionMessage", r.jobExceptionMessage, "")
	}
	if r.jobDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionId", r.jobDefinitionId, "")
	}
	if r.jobDefinitionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionType", r.jobDefinitionType, "")
	}
	if r.jobDefinitionConfiguration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionConfiguration", r.jobDefinitionConfiguration, "")
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.failedActivityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failedActivityIdIn", r.failedActivityIdIn, "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionIdIn", r.executionIdIn, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.deploymentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploymentId", r.deploymentId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.jobPriorityLowerThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobPriorityLowerThanOrEquals", r.jobPriorityLowerThanOrEquals, "")
	}
	if r.jobPriorityHigherThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobPriorityHigherThanOrEquals", r.jobPriorityHigherThanOrEquals, "")
	}
	if r.creationLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creationLog", r.creationLog, "")
	}
	if r.failureLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failureLog", r.failureLog, "")
	}
	if r.successLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "successLog", r.successLog, "")
	}
	if r.deletionLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deletionLog", r.deletionLog, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricJobLogsCountRequest struct {
	ctx context.Context
	ApiService HistoricJobLogAPI
	logId *string
	jobId *string
	jobExceptionMessage *string
	jobDefinitionId *string
	jobDefinitionType *string
	jobDefinitionConfiguration *string
	activityIdIn *string
	failedActivityIdIn *string
	executionIdIn *string
	processInstanceId *string
	processDefinitionId *string
	processDefinitionKey *string
	deploymentId *string
	tenantIdIn *string
	withoutTenantId *bool
	hostname *string
	jobPriorityLowerThanOrEquals *int64
	jobPriorityHigherThanOrEquals *int64
	creationLog *bool
	failureLog *bool
	successLog *bool
	deletionLog *bool
}

// Filter by historic job log id.
func (r ApiGetHistoricJobLogsCountRequest) LogId(logId string) ApiGetHistoricJobLogsCountRequest {
	r.logId = &logId
	return r
}

// Filter by job id.
func (r ApiGetHistoricJobLogsCountRequest) JobId(jobId string) ApiGetHistoricJobLogsCountRequest {
	r.jobId = &jobId
	return r
}

// Filter by job exception message.
func (r ApiGetHistoricJobLogsCountRequest) JobExceptionMessage(jobExceptionMessage string) ApiGetHistoricJobLogsCountRequest {
	r.jobExceptionMessage = &jobExceptionMessage
	return r
}

// Filter by job definition id.
func (r ApiGetHistoricJobLogsCountRequest) JobDefinitionId(jobDefinitionId string) ApiGetHistoricJobLogsCountRequest {
	r.jobDefinitionId = &jobDefinitionId
	return r
}

// Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
func (r ApiGetHistoricJobLogsCountRequest) JobDefinitionType(jobDefinitionType string) ApiGetHistoricJobLogsCountRequest {
	r.jobDefinitionType = &jobDefinitionType
	return r
}

// Filter by job definition configuration.
func (r ApiGetHistoricJobLogsCountRequest) JobDefinitionConfiguration(jobDefinitionConfiguration string) ApiGetHistoricJobLogsCountRequest {
	r.jobDefinitionConfiguration = &jobDefinitionConfiguration
	return r
}

// Only include historic job logs which belong to one of the passed activity ids.
func (r ApiGetHistoricJobLogsCountRequest) ActivityIdIn(activityIdIn string) ApiGetHistoricJobLogsCountRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Only include historic job logs which belong to failures of one of the passed activity ids.
func (r ApiGetHistoricJobLogsCountRequest) FailedActivityIdIn(failedActivityIdIn string) ApiGetHistoricJobLogsCountRequest {
	r.failedActivityIdIn = &failedActivityIdIn
	return r
}

// Only include historic job logs which belong to one of the passed execution ids.
func (r ApiGetHistoricJobLogsCountRequest) ExecutionIdIn(executionIdIn string) ApiGetHistoricJobLogsCountRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricJobLogsCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricJobLogsCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process definition id.
func (r ApiGetHistoricJobLogsCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricJobLogsCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by process definition key.
func (r ApiGetHistoricJobLogsCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricJobLogsCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by deployment id.
func (r ApiGetHistoricJobLogsCountRequest) DeploymentId(deploymentId string) ApiGetHistoricJobLogsCountRequest {
	r.deploymentId = &deploymentId
	return r
}

// Only include historic job log entries which belong to one of the passed and comma- separated tenant ids.
func (r ApiGetHistoricJobLogsCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricJobLogsCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricJobLogsCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Filter by hostname.
func (r ApiGetHistoricJobLogsCountRequest) Hostname(hostname string) ApiGetHistoricJobLogsCountRequest {
	r.hostname = &hostname
	return r
}

// Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricJobLogsCountRequest) JobPriorityLowerThanOrEquals(jobPriorityLowerThanOrEquals int64) ApiGetHistoricJobLogsCountRequest {
	r.jobPriorityLowerThanOrEquals = &jobPriorityLowerThanOrEquals
	return r
}

// Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
func (r ApiGetHistoricJobLogsCountRequest) JobPriorityHigherThanOrEquals(jobPriorityHigherThanOrEquals int64) ApiGetHistoricJobLogsCountRequest {
	r.jobPriorityHigherThanOrEquals = &jobPriorityHigherThanOrEquals
	return r
}

// Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsCountRequest) CreationLog(creationLog bool) ApiGetHistoricJobLogsCountRequest {
	r.creationLog = &creationLog
	return r
}

// Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsCountRequest) FailureLog(failureLog bool) ApiGetHistoricJobLogsCountRequest {
	r.failureLog = &failureLog
	return r
}

// Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsCountRequest) SuccessLog(successLog bool) ApiGetHistoricJobLogsCountRequest {
	r.successLog = &successLog
	return r
}

// Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricJobLogsCountRequest) DeletionLog(deletionLog bool) ApiGetHistoricJobLogsCountRequest {
	r.deletionLog = &deletionLog
	return r
}

func (r ApiGetHistoricJobLogsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricJobLogsCountExecute(r)
}

/*
GetHistoricJobLogsCount Get Job Log Count

Queries for the number of historic job logs that fulfill the given parameters.
Takes the same parameters as the
[Get Job Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricJobLogsCountRequest
*/
func (a *HistoricJobLogAPIService) GetHistoricJobLogsCount(ctx context.Context) ApiGetHistoricJobLogsCountRequest {
	return ApiGetHistoricJobLogsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricJobLogAPIService) GetHistoricJobLogsCountExecute(r ApiGetHistoricJobLogsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricJobLogAPIService.GetHistoricJobLogsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/job-log/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.logId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logId", r.logId, "")
	}
	if r.jobId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobId", r.jobId, "")
	}
	if r.jobExceptionMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobExceptionMessage", r.jobExceptionMessage, "")
	}
	if r.jobDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionId", r.jobDefinitionId, "")
	}
	if r.jobDefinitionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionType", r.jobDefinitionType, "")
	}
	if r.jobDefinitionConfiguration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionConfiguration", r.jobDefinitionConfiguration, "")
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.failedActivityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failedActivityIdIn", r.failedActivityIdIn, "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionIdIn", r.executionIdIn, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.deploymentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploymentId", r.deploymentId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.jobPriorityLowerThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobPriorityLowerThanOrEquals", r.jobPriorityLowerThanOrEquals, "")
	}
	if r.jobPriorityHigherThanOrEquals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobPriorityHigherThanOrEquals", r.jobPriorityHigherThanOrEquals, "")
	}
	if r.creationLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creationLog", r.creationLog, "")
	}
	if r.failureLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failureLog", r.failureLog, "")
	}
	if r.successLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "successLog", r.successLog, "")
	}
	if r.deletionLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deletionLog", r.deletionLog, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStacktraceHistoricJobLogRequest struct {
	ctx context.Context
	ApiService HistoricJobLogAPI
	id string
}

func (r ApiGetStacktraceHistoricJobLogRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetStacktraceHistoricJobLogExecute(r)
}

/*
GetStacktraceHistoricJobLog Get Job Log Exception Stacktrace

Retrieves the corresponding exception stacktrace to the passed historic job log by
id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the historic job log to get the exception stacktrace for.
 @return ApiGetStacktraceHistoricJobLogRequest
*/
func (a *HistoricJobLogAPIService) GetStacktraceHistoricJobLog(ctx context.Context, id string) ApiGetStacktraceHistoricJobLogRequest {
	return ApiGetStacktraceHistoricJobLogRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return interface{}
func (a *HistoricJobLogAPIService) GetStacktraceHistoricJobLogExecute(r ApiGetStacktraceHistoricJobLogRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricJobLogAPIService.GetStacktraceHistoricJobLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/job-log/{id}/stacktrace"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricJobLogsRequest struct {
	ctx context.Context
	ApiService HistoricJobLogAPI
	firstResult *int32
	maxResults *int32
	historicJobLogQueryDto *HistoricJobLogQueryDto
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiQueryHistoricJobLogsRequest) FirstResult(firstResult int32) ApiQueryHistoricJobLogsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiQueryHistoricJobLogsRequest) MaxResults(maxResults int32) ApiQueryHistoricJobLogsRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiQueryHistoricJobLogsRequest) HistoricJobLogQueryDto(historicJobLogQueryDto HistoricJobLogQueryDto) ApiQueryHistoricJobLogsRequest {
	r.historicJobLogQueryDto = &historicJobLogQueryDto
	return r
}

func (r ApiQueryHistoricJobLogsRequest) Execute() ([]HistoricJobLogDto, *http.Response, error) {
	return r.ApiService.QueryHistoricJobLogsExecute(r)
}

/*
QueryHistoricJobLogs Get Job Logs (POST)

Queries for historic job logs that fulfill the given parameters.
This method is slightly more powerful than the
[Get Job Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query/)
method because it allows filtering by historic job logs values of the
different types `String`, `Number` or `Boolean`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricJobLogsRequest
*/
func (a *HistoricJobLogAPIService) QueryHistoricJobLogs(ctx context.Context) ApiQueryHistoricJobLogsRequest {
	return ApiQueryHistoricJobLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricJobLogDto
func (a *HistoricJobLogAPIService) QueryHistoricJobLogsExecute(r ApiQueryHistoricJobLogsRequest) ([]HistoricJobLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricJobLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricJobLogAPIService.QueryHistoricJobLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/job-log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicJobLogQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricJobLogsCountRequest struct {
	ctx context.Context
	ApiService HistoricJobLogAPI
	historicJobLogQueryDto *HistoricJobLogQueryDto
}

func (r ApiQueryHistoricJobLogsCountRequest) HistoricJobLogQueryDto(historicJobLogQueryDto HistoricJobLogQueryDto) ApiQueryHistoricJobLogsCountRequest {
	r.historicJobLogQueryDto = &historicJobLogQueryDto
	return r
}

func (r ApiQueryHistoricJobLogsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.QueryHistoricJobLogsCountExecute(r)
}

/*
QueryHistoricJobLogsCount Get Job Log Count (POST)

Queries for the number of historic job logs that fulfill the given parameters.
This method takes the same message body as the
[Get Job Logs (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/post-job-log-query/)
method and therefore it is slightly more powerful than the
[Get Job Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/job-log/get-job-log-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricJobLogsCountRequest
*/
func (a *HistoricJobLogAPIService) QueryHistoricJobLogsCount(ctx context.Context) ApiQueryHistoricJobLogsCountRequest {
	return ApiQueryHistoricJobLogsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricJobLogAPIService) QueryHistoricJobLogsCountExecute(r ApiQueryHistoricJobLogsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricJobLogAPIService.QueryHistoricJobLogsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/job-log/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicJobLogQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
