/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CompleteTaskDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteTaskDto{}

// CompleteTaskDto struct for CompleteTaskDto
type CompleteTaskDto struct {
	// A JSON object containing variable key-value pairs.
	Variables map[string]VariableValueDto `json:"variables,omitempty"`
	// Indicates whether the response should contain the process variables or not. The default is `false` with a response code of `204`. If set to `true` the response contains the process variables and has a response code of `200`. If the task is not associated with a process instance (e.g. if it's part of a case instance) no variables will be returned.
	WithVariablesInReturn NullableBool `json:"withVariablesInReturn,omitempty"`
}

// NewCompleteTaskDto instantiates a new CompleteTaskDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteTaskDto() *CompleteTaskDto {
	this := CompleteTaskDto{}
	var withVariablesInReturn bool = false
	this.WithVariablesInReturn = *NewNullableBool(&withVariablesInReturn)
	return &this
}

// NewCompleteTaskDtoWithDefaults instantiates a new CompleteTaskDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteTaskDtoWithDefaults() *CompleteTaskDto {
	this := CompleteTaskDto{}
	var withVariablesInReturn bool = false
	this.WithVariablesInReturn = *NewNullableBool(&withVariablesInReturn)
	return &this
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteTaskDto) GetVariables() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteTaskDto) GetVariablesOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return &o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *CompleteTaskDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]VariableValueDto and assigns it to the Variables field.
func (o *CompleteTaskDto) SetVariables(v map[string]VariableValueDto) {
	o.Variables = v
}

// GetWithVariablesInReturn returns the WithVariablesInReturn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteTaskDto) GetWithVariablesInReturn() bool {
	if o == nil || IsNil(o.WithVariablesInReturn.Get()) {
		var ret bool
		return ret
	}
	return *o.WithVariablesInReturn.Get()
}

// GetWithVariablesInReturnOk returns a tuple with the WithVariablesInReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteTaskDto) GetWithVariablesInReturnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithVariablesInReturn.Get(), o.WithVariablesInReturn.IsSet()
}

// HasWithVariablesInReturn returns a boolean if a field has been set.
func (o *CompleteTaskDto) HasWithVariablesInReturn() bool {
	if o != nil && o.WithVariablesInReturn.IsSet() {
		return true
	}

	return false
}

// SetWithVariablesInReturn gets a reference to the given NullableBool and assigns it to the WithVariablesInReturn field.
func (o *CompleteTaskDto) SetWithVariablesInReturn(v bool) {
	o.WithVariablesInReturn.Set(&v)
}
// SetWithVariablesInReturnNil sets the value for WithVariablesInReturn to be an explicit nil
func (o *CompleteTaskDto) SetWithVariablesInReturnNil() {
	o.WithVariablesInReturn.Set(nil)
}

// UnsetWithVariablesInReturn ensures that no value is present for WithVariablesInReturn, not even an explicit nil
func (o *CompleteTaskDto) UnsetWithVariablesInReturn() {
	o.WithVariablesInReturn.Unset()
}

func (o CompleteTaskDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteTaskDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.WithVariablesInReturn.IsSet() {
		toSerialize["withVariablesInReturn"] = o.WithVariablesInReturn.Get()
	}
	return toSerialize, nil
}

type NullableCompleteTaskDto struct {
	value *CompleteTaskDto
	isSet bool
}

func (v NullableCompleteTaskDto) Get() *CompleteTaskDto {
	return v.value
}

func (v *NullableCompleteTaskDto) Set(val *CompleteTaskDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteTaskDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteTaskDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteTaskDto(val *CompleteTaskDto) *NullableCompleteTaskDto {
	return &NullableCompleteTaskDto{value: val, isSet: true}
}

func (v NullableCompleteTaskDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteTaskDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


