/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type TelemetryAPI interface {

	/*
	ConfigureTelemetry Configure Telemetry

	Configures whether Camunda receives data collection of the process engine setup and usage.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiConfigureTelemetryRequest
	*/
	ConfigureTelemetry(ctx context.Context) ApiConfigureTelemetryRequest

	// ConfigureTelemetryExecute executes the request
	ConfigureTelemetryExecute(r ApiConfigureTelemetryRequest) (*http.Response, error)

	/*
	GetTelemetryConfiguration Fetch Telemetry Configuration

	Fetches Telemetry Configuration.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTelemetryConfigurationRequest
	*/
	GetTelemetryConfiguration(ctx context.Context) ApiGetTelemetryConfigurationRequest

	// GetTelemetryConfigurationExecute executes the request
	//  @return TelemetryConfigurationDto
	GetTelemetryConfigurationExecute(r ApiGetTelemetryConfigurationRequest) (*TelemetryConfigurationDto, *http.Response, error)

	/*
	GetTelemetryData Fetch Telemetry Data

	Fetches Telemetry Data.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTelemetryDataRequest
	*/
	GetTelemetryData(ctx context.Context) ApiGetTelemetryDataRequest

	// GetTelemetryDataExecute executes the request
	//  @return TelemetryDataDto
	GetTelemetryDataExecute(r ApiGetTelemetryDataRequest) (*TelemetryDataDto, *http.Response, error)
}

// TelemetryAPIService TelemetryAPI service
type TelemetryAPIService service

type ApiConfigureTelemetryRequest struct {
	ctx context.Context
	ApiService TelemetryAPI
	telemetryConfigurationDto *TelemetryConfigurationDto
}

func (r ApiConfigureTelemetryRequest) TelemetryConfigurationDto(telemetryConfigurationDto TelemetryConfigurationDto) ApiConfigureTelemetryRequest {
	r.telemetryConfigurationDto = &telemetryConfigurationDto
	return r
}

func (r ApiConfigureTelemetryRequest) Execute() (*http.Response, error) {
	return r.ApiService.ConfigureTelemetryExecute(r)
}

/*
ConfigureTelemetry Configure Telemetry

Configures whether Camunda receives data collection of the process engine setup and usage.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConfigureTelemetryRequest
*/
func (a *TelemetryAPIService) ConfigureTelemetry(ctx context.Context) ApiConfigureTelemetryRequest {
	return ApiConfigureTelemetryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TelemetryAPIService) ConfigureTelemetryExecute(r ApiConfigureTelemetryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TelemetryAPIService.ConfigureTelemetry")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telemetry/configuration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.telemetryConfigurationDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTelemetryConfigurationRequest struct {
	ctx context.Context
	ApiService TelemetryAPI
}

func (r ApiGetTelemetryConfigurationRequest) Execute() (*TelemetryConfigurationDto, *http.Response, error) {
	return r.ApiService.GetTelemetryConfigurationExecute(r)
}

/*
GetTelemetryConfiguration Fetch Telemetry Configuration

Fetches Telemetry Configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTelemetryConfigurationRequest
*/
func (a *TelemetryAPIService) GetTelemetryConfiguration(ctx context.Context) ApiGetTelemetryConfigurationRequest {
	return ApiGetTelemetryConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TelemetryConfigurationDto
func (a *TelemetryAPIService) GetTelemetryConfigurationExecute(r ApiGetTelemetryConfigurationRequest) (*TelemetryConfigurationDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TelemetryConfigurationDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TelemetryAPIService.GetTelemetryConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telemetry/configuration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTelemetryDataRequest struct {
	ctx context.Context
	ApiService TelemetryAPI
}

func (r ApiGetTelemetryDataRequest) Execute() (*TelemetryDataDto, *http.Response, error) {
	return r.ApiService.GetTelemetryDataExecute(r)
}

/*
GetTelemetryData Fetch Telemetry Data

Fetches Telemetry Data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTelemetryDataRequest
*/
func (a *TelemetryAPIService) GetTelemetryData(ctx context.Context) ApiGetTelemetryDataRequest {
	return ApiGetTelemetryDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TelemetryDataDto
func (a *TelemetryAPIService) GetTelemetryDataExecute(r ApiGetTelemetryDataRequest) (*TelemetryDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TelemetryDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TelemetryAPIService.GetTelemetryData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/telemetry/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
