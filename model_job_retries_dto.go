/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the JobRetriesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobRetriesDto{}

// JobRetriesDto struct for JobRetriesDto
type JobRetriesDto struct {
	// The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again. Can not be null.
	Retries NullableInt32 `json:"retries,omitempty"`
	// The due date to set for the job. A due date indicates when this job is ready for execution. Jobs with due dates in the past will be scheduled for execution.
	DueDate NullableTime `json:"dueDate,omitempty"`
}

// NewJobRetriesDto instantiates a new JobRetriesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobRetriesDto() *JobRetriesDto {
	this := JobRetriesDto{}
	return &this
}

// NewJobRetriesDtoWithDefaults instantiates a new JobRetriesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobRetriesDtoWithDefaults() *JobRetriesDto {
	this := JobRetriesDto{}
	return &this
}

// GetRetries returns the Retries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobRetriesDto) GetRetries() int32 {
	if o == nil || IsNil(o.Retries.Get()) {
		var ret int32
		return ret
	}
	return *o.Retries.Get()
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobRetriesDto) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Retries.Get(), o.Retries.IsSet()
}

// HasRetries returns a boolean if a field has been set.
func (o *JobRetriesDto) HasRetries() bool {
	if o != nil && o.Retries.IsSet() {
		return true
	}

	return false
}

// SetRetries gets a reference to the given NullableInt32 and assigns it to the Retries field.
func (o *JobRetriesDto) SetRetries(v int32) {
	o.Retries.Set(&v)
}
// SetRetriesNil sets the value for Retries to be an explicit nil
func (o *JobRetriesDto) SetRetriesNil() {
	o.Retries.Set(nil)
}

// UnsetRetries ensures that no value is present for Retries, not even an explicit nil
func (o *JobRetriesDto) UnsetRetries() {
	o.Retries.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobRetriesDto) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobRetriesDto) GetDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *JobRetriesDto) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *JobRetriesDto) SetDueDate(v time.Time) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *JobRetriesDto) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *JobRetriesDto) UnsetDueDate() {
	o.DueDate.Unset()
}

func (o JobRetriesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobRetriesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Retries.IsSet() {
		toSerialize["retries"] = o.Retries.Get()
	}
	if o.DueDate.IsSet() {
		toSerialize["dueDate"] = o.DueDate.Get()
	}
	return toSerialize, nil
}

type NullableJobRetriesDto struct {
	value *JobRetriesDto
	isSet bool
}

func (v NullableJobRetriesDto) Get() *JobRetriesDto {
	return v.value
}

func (v *NullableJobRetriesDto) Set(val *JobRetriesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRetriesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRetriesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRetriesDto(val *JobRetriesDto) *NullableJobRetriesDto {
	return &NullableJobRetriesDto{value: val, isSet: true}
}

func (v NullableJobRetriesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRetriesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


