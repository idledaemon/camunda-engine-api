/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the SetRemovalTimeToHistoricProcessInstancesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetRemovalTimeToHistoricProcessInstancesDto{}

// SetRemovalTimeToHistoricProcessInstancesDto struct for SetRemovalTimeToHistoricProcessInstancesDto
type SetRemovalTimeToHistoricProcessInstancesDto struct {
	// The date for which the instances shall be removed. Value may not be `null`.  **Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.
	AbsoluteRemovalTime NullableTime `json:"absoluteRemovalTime,omitempty"`
	// Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.  **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.
	ClearedRemovalTime NullableBool `json:"clearedRemovalTime,omitempty"`
	// The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.  **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.
	CalculatedRemovalTime NullableBool `json:"calculatedRemovalTime,omitempty"`
	// The id of the process instance.
	HistoricProcessInstanceIds []string `json:"historicProcessInstanceIds,omitempty"`
	HistoricProcessInstanceQuery *HistoricProcessInstanceQueryDto `json:"historicProcessInstanceQuery,omitempty"`
	// Sets the removal time to all historic process instances in the hierarchy. Value may only be `true`, as `false` is the default behavior.
	Hierarchical NullableBool `json:"hierarchical,omitempty"`
	// Handles removal time updates in chunks, taking into account the defined size in `removalTimeUpdateChunkSize` in the process engine configuration. The size of the  chunks can also be overridden per call with the `updateChunkSize` parameter. Enabling this option can lead to multiple executions of the resulting jobs, preventing the database transaction from timing out by limiting the number of rows to update. Value may only be `true`, as `false` is the default behavior.
	UpdateInChunks NullableBool `json:"updateInChunks,omitempty"`
	// Defines the size of the chunks in which removal time updates are processed. The value must be a positive integer between `1` and `500`. This only has an  effect if `updateInChunks` is set to `true`. If undefined, the operation uses the  `removalTimeUpdateChunkSize` defined in the process engine configuration.
	UpdateChunkSize NullableInt32 `json:"updateChunkSize,omitempty"`
}

// NewSetRemovalTimeToHistoricProcessInstancesDto instantiates a new SetRemovalTimeToHistoricProcessInstancesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetRemovalTimeToHistoricProcessInstancesDto() *SetRemovalTimeToHistoricProcessInstancesDto {
	this := SetRemovalTimeToHistoricProcessInstancesDto{}
	return &this
}

// NewSetRemovalTimeToHistoricProcessInstancesDtoWithDefaults instantiates a new SetRemovalTimeToHistoricProcessInstancesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetRemovalTimeToHistoricProcessInstancesDtoWithDefaults() *SetRemovalTimeToHistoricProcessInstancesDto {
	this := SetRemovalTimeToHistoricProcessInstancesDto{}
	return &this
}

// GetAbsoluteRemovalTime returns the AbsoluteRemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetAbsoluteRemovalTime() time.Time {
	if o == nil || IsNil(o.AbsoluteRemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AbsoluteRemovalTime.Get()
}

// GetAbsoluteRemovalTimeOk returns a tuple with the AbsoluteRemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetAbsoluteRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AbsoluteRemovalTime.Get(), o.AbsoluteRemovalTime.IsSet()
}

// HasAbsoluteRemovalTime returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasAbsoluteRemovalTime() bool {
	if o != nil && o.AbsoluteRemovalTime.IsSet() {
		return true
	}

	return false
}

// SetAbsoluteRemovalTime gets a reference to the given NullableTime and assigns it to the AbsoluteRemovalTime field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetAbsoluteRemovalTime(v time.Time) {
	o.AbsoluteRemovalTime.Set(&v)
}
// SetAbsoluteRemovalTimeNil sets the value for AbsoluteRemovalTime to be an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetAbsoluteRemovalTimeNil() {
	o.AbsoluteRemovalTime.Set(nil)
}

// UnsetAbsoluteRemovalTime ensures that no value is present for AbsoluteRemovalTime, not even an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) UnsetAbsoluteRemovalTime() {
	o.AbsoluteRemovalTime.Unset()
}

// GetClearedRemovalTime returns the ClearedRemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetClearedRemovalTime() bool {
	if o == nil || IsNil(o.ClearedRemovalTime.Get()) {
		var ret bool
		return ret
	}
	return *o.ClearedRemovalTime.Get()
}

// GetClearedRemovalTimeOk returns a tuple with the ClearedRemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetClearedRemovalTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClearedRemovalTime.Get(), o.ClearedRemovalTime.IsSet()
}

// HasClearedRemovalTime returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasClearedRemovalTime() bool {
	if o != nil && o.ClearedRemovalTime.IsSet() {
		return true
	}

	return false
}

// SetClearedRemovalTime gets a reference to the given NullableBool and assigns it to the ClearedRemovalTime field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetClearedRemovalTime(v bool) {
	o.ClearedRemovalTime.Set(&v)
}
// SetClearedRemovalTimeNil sets the value for ClearedRemovalTime to be an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetClearedRemovalTimeNil() {
	o.ClearedRemovalTime.Set(nil)
}

// UnsetClearedRemovalTime ensures that no value is present for ClearedRemovalTime, not even an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) UnsetClearedRemovalTime() {
	o.ClearedRemovalTime.Unset()
}

// GetCalculatedRemovalTime returns the CalculatedRemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetCalculatedRemovalTime() bool {
	if o == nil || IsNil(o.CalculatedRemovalTime.Get()) {
		var ret bool
		return ret
	}
	return *o.CalculatedRemovalTime.Get()
}

// GetCalculatedRemovalTimeOk returns a tuple with the CalculatedRemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetCalculatedRemovalTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedRemovalTime.Get(), o.CalculatedRemovalTime.IsSet()
}

// HasCalculatedRemovalTime returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasCalculatedRemovalTime() bool {
	if o != nil && o.CalculatedRemovalTime.IsSet() {
		return true
	}

	return false
}

// SetCalculatedRemovalTime gets a reference to the given NullableBool and assigns it to the CalculatedRemovalTime field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetCalculatedRemovalTime(v bool) {
	o.CalculatedRemovalTime.Set(&v)
}
// SetCalculatedRemovalTimeNil sets the value for CalculatedRemovalTime to be an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetCalculatedRemovalTimeNil() {
	o.CalculatedRemovalTime.Set(nil)
}

// UnsetCalculatedRemovalTime ensures that no value is present for CalculatedRemovalTime, not even an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) UnsetCalculatedRemovalTime() {
	o.CalculatedRemovalTime.Unset()
}

// GetHistoricProcessInstanceIds returns the HistoricProcessInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetHistoricProcessInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HistoricProcessInstanceIds
}

// GetHistoricProcessInstanceIdsOk returns a tuple with the HistoricProcessInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetHistoricProcessInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.HistoricProcessInstanceIds) {
		return nil, false
	}
	return o.HistoricProcessInstanceIds, true
}

// HasHistoricProcessInstanceIds returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasHistoricProcessInstanceIds() bool {
	if o != nil && !IsNil(o.HistoricProcessInstanceIds) {
		return true
	}

	return false
}

// SetHistoricProcessInstanceIds gets a reference to the given []string and assigns it to the HistoricProcessInstanceIds field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetHistoricProcessInstanceIds(v []string) {
	o.HistoricProcessInstanceIds = v
}

// GetHistoricProcessInstanceQuery returns the HistoricProcessInstanceQuery field value if set, zero value otherwise.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetHistoricProcessInstanceQuery() HistoricProcessInstanceQueryDto {
	if o == nil || IsNil(o.HistoricProcessInstanceQuery) {
		var ret HistoricProcessInstanceQueryDto
		return ret
	}
	return *o.HistoricProcessInstanceQuery
}

// GetHistoricProcessInstanceQueryOk returns a tuple with the HistoricProcessInstanceQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetHistoricProcessInstanceQueryOk() (*HistoricProcessInstanceQueryDto, bool) {
	if o == nil || IsNil(o.HistoricProcessInstanceQuery) {
		return nil, false
	}
	return o.HistoricProcessInstanceQuery, true
}

// HasHistoricProcessInstanceQuery returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasHistoricProcessInstanceQuery() bool {
	if o != nil && !IsNil(o.HistoricProcessInstanceQuery) {
		return true
	}

	return false
}

// SetHistoricProcessInstanceQuery gets a reference to the given HistoricProcessInstanceQueryDto and assigns it to the HistoricProcessInstanceQuery field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetHistoricProcessInstanceQuery(v HistoricProcessInstanceQueryDto) {
	o.HistoricProcessInstanceQuery = &v
}

// GetHierarchical returns the Hierarchical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetHierarchical() bool {
	if o == nil || IsNil(o.Hierarchical.Get()) {
		var ret bool
		return ret
	}
	return *o.Hierarchical.Get()
}

// GetHierarchicalOk returns a tuple with the Hierarchical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetHierarchicalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hierarchical.Get(), o.Hierarchical.IsSet()
}

// HasHierarchical returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasHierarchical() bool {
	if o != nil && o.Hierarchical.IsSet() {
		return true
	}

	return false
}

// SetHierarchical gets a reference to the given NullableBool and assigns it to the Hierarchical field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetHierarchical(v bool) {
	o.Hierarchical.Set(&v)
}
// SetHierarchicalNil sets the value for Hierarchical to be an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetHierarchicalNil() {
	o.Hierarchical.Set(nil)
}

// UnsetHierarchical ensures that no value is present for Hierarchical, not even an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) UnsetHierarchical() {
	o.Hierarchical.Unset()
}

// GetUpdateInChunks returns the UpdateInChunks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetUpdateInChunks() bool {
	if o == nil || IsNil(o.UpdateInChunks.Get()) {
		var ret bool
		return ret
	}
	return *o.UpdateInChunks.Get()
}

// GetUpdateInChunksOk returns a tuple with the UpdateInChunks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetUpdateInChunksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateInChunks.Get(), o.UpdateInChunks.IsSet()
}

// HasUpdateInChunks returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasUpdateInChunks() bool {
	if o != nil && o.UpdateInChunks.IsSet() {
		return true
	}

	return false
}

// SetUpdateInChunks gets a reference to the given NullableBool and assigns it to the UpdateInChunks field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetUpdateInChunks(v bool) {
	o.UpdateInChunks.Set(&v)
}
// SetUpdateInChunksNil sets the value for UpdateInChunks to be an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetUpdateInChunksNil() {
	o.UpdateInChunks.Set(nil)
}

// UnsetUpdateInChunks ensures that no value is present for UpdateInChunks, not even an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) UnsetUpdateInChunks() {
	o.UpdateInChunks.Unset()
}

// GetUpdateChunkSize returns the UpdateChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetUpdateChunkSize() int32 {
	if o == nil || IsNil(o.UpdateChunkSize.Get()) {
		var ret int32
		return ret
	}
	return *o.UpdateChunkSize.Get()
}

// GetUpdateChunkSizeOk returns a tuple with the UpdateChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricProcessInstancesDto) GetUpdateChunkSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateChunkSize.Get(), o.UpdateChunkSize.IsSet()
}

// HasUpdateChunkSize returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) HasUpdateChunkSize() bool {
	if o != nil && o.UpdateChunkSize.IsSet() {
		return true
	}

	return false
}

// SetUpdateChunkSize gets a reference to the given NullableInt32 and assigns it to the UpdateChunkSize field.
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetUpdateChunkSize(v int32) {
	o.UpdateChunkSize.Set(&v)
}
// SetUpdateChunkSizeNil sets the value for UpdateChunkSize to be an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) SetUpdateChunkSizeNil() {
	o.UpdateChunkSize.Set(nil)
}

// UnsetUpdateChunkSize ensures that no value is present for UpdateChunkSize, not even an explicit nil
func (o *SetRemovalTimeToHistoricProcessInstancesDto) UnsetUpdateChunkSize() {
	o.UpdateChunkSize.Unset()
}

func (o SetRemovalTimeToHistoricProcessInstancesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetRemovalTimeToHistoricProcessInstancesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AbsoluteRemovalTime.IsSet() {
		toSerialize["absoluteRemovalTime"] = o.AbsoluteRemovalTime.Get()
	}
	if o.ClearedRemovalTime.IsSet() {
		toSerialize["clearedRemovalTime"] = o.ClearedRemovalTime.Get()
	}
	if o.CalculatedRemovalTime.IsSet() {
		toSerialize["calculatedRemovalTime"] = o.CalculatedRemovalTime.Get()
	}
	if o.HistoricProcessInstanceIds != nil {
		toSerialize["historicProcessInstanceIds"] = o.HistoricProcessInstanceIds
	}
	if !IsNil(o.HistoricProcessInstanceQuery) {
		toSerialize["historicProcessInstanceQuery"] = o.HistoricProcessInstanceQuery
	}
	if o.Hierarchical.IsSet() {
		toSerialize["hierarchical"] = o.Hierarchical.Get()
	}
	if o.UpdateInChunks.IsSet() {
		toSerialize["updateInChunks"] = o.UpdateInChunks.Get()
	}
	if o.UpdateChunkSize.IsSet() {
		toSerialize["updateChunkSize"] = o.UpdateChunkSize.Get()
	}
	return toSerialize, nil
}

type NullableSetRemovalTimeToHistoricProcessInstancesDto struct {
	value *SetRemovalTimeToHistoricProcessInstancesDto
	isSet bool
}

func (v NullableSetRemovalTimeToHistoricProcessInstancesDto) Get() *SetRemovalTimeToHistoricProcessInstancesDto {
	return v.value
}

func (v *NullableSetRemovalTimeToHistoricProcessInstancesDto) Set(val *SetRemovalTimeToHistoricProcessInstancesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSetRemovalTimeToHistoricProcessInstancesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSetRemovalTimeToHistoricProcessInstancesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetRemovalTimeToHistoricProcessInstancesDto(val *SetRemovalTimeToHistoricProcessInstancesDto) *NullableSetRemovalTimeToHistoricProcessInstancesDto {
	return &NullableSetRemovalTimeToHistoricProcessInstancesDto{value: val, isSet: true}
}

func (v NullableSetRemovalTimeToHistoricProcessInstancesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetRemovalTimeToHistoricProcessInstancesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


