/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricDetailQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricDetailQueryDto{}

// HistoricDetailQueryDto A historic detail query which defines a group of historic details.
type HistoricDetailQueryDto struct {
	// Filter by process instance id.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Only include historic details which belong to one of the passed  process instance ids.
	ProcessInstanceIdIn []string `json:"processInstanceIdIn,omitempty"`
	// Filter by execution id.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// Filter by task id.
	TaskId NullableString `json:"taskId,omitempty"`
	// Filter by activity instance id.
	ActivityInstanceId NullableString `json:"activityInstanceId,omitempty"`
	// Filter by case instance id.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// Filter by case execution id.
	CaseExecutionId NullableString `json:"caseExecutionId,omitempty"`
	// Filter by variable instance id.
	VariableInstanceId NullableString `json:"variableInstanceId,omitempty"`
	// Only include historic details where the variable updates belong to one of the passed  list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type `serializable`.
	VariableTypeIn []string `json:"variableTypeIn,omitempty"`
	// Filter by a  list of tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include historic details that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Filter by a user operation id.
	UserOperationId NullableString `json:"userOperationId,omitempty"`
	// Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior.
	FormFields NullableBool `json:"formFields,omitempty"`
	// Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior.
	VariableUpdates NullableBool `json:"variableUpdates,omitempty"`
	// Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected. When this parameter is used together with `taskId`, this call is ignored and task details are not excluded. Value may only be `true`, as `false` is the default behavior.
	ExcludeTaskDetails NullableBool `json:"excludeTaskDetails,omitempty"`
	// Restrict to historic variable updates that contain only initial variable values. Value may only be `true`, as `false` is the default behavior.
	Initial NullableBool `json:"initial,omitempty"`
	// Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
	OccurredBefore NullableTime `json:"occurredBefore,omitempty"`
	// Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
	OccurredAfter NullableTime `json:"occurredAfter,omitempty"`
	// A JSON array of criteria to sort the result by. Each element of the array is                     a JSON object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Does not have an effect for the `count` endpoint.
	Sorting []HistoricDetailQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewHistoricDetailQueryDto instantiates a new HistoricDetailQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricDetailQueryDto() *HistoricDetailQueryDto {
	this := HistoricDetailQueryDto{}
	return &this
}

// NewHistoricDetailQueryDtoWithDefaults instantiates a new HistoricDetailQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricDetailQueryDtoWithDefaults() *HistoricDetailQueryDto {
	this := HistoricDetailQueryDto{}
	return &this
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricDetailQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricDetailQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessInstanceIdIn returns the ProcessInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetProcessInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIdIn
}

// GetProcessInstanceIdInOk returns a tuple with the ProcessInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetProcessInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIdIn) {
		return nil, false
	}
	return o.ProcessInstanceIdIn, true
}

// HasProcessInstanceIdIn returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasProcessInstanceIdIn() bool {
	if o != nil && !IsNil(o.ProcessInstanceIdIn) {
		return true
	}

	return false
}

// SetProcessInstanceIdIn gets a reference to the given []string and assigns it to the ProcessInstanceIdIn field.
func (o *HistoricDetailQueryDto) SetProcessInstanceIdIn(v []string) {
	o.ProcessInstanceIdIn = v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricDetailQueryDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricDetailQueryDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *HistoricDetailQueryDto) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *HistoricDetailQueryDto) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetActivityInstanceId returns the ActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetActivityInstanceId() string {
	if o == nil || IsNil(o.ActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityInstanceId.Get()
}

// GetActivityInstanceIdOk returns a tuple with the ActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityInstanceId.Get(), o.ActivityInstanceId.IsSet()
}

// HasActivityInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasActivityInstanceId() bool {
	if o != nil && o.ActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetActivityInstanceId gets a reference to the given NullableString and assigns it to the ActivityInstanceId field.
func (o *HistoricDetailQueryDto) SetActivityInstanceId(v string) {
	o.ActivityInstanceId.Set(&v)
}
// SetActivityInstanceIdNil sets the value for ActivityInstanceId to be an explicit nil
func (o *HistoricDetailQueryDto) SetActivityInstanceIdNil() {
	o.ActivityInstanceId.Set(nil)
}

// UnsetActivityInstanceId ensures that no value is present for ActivityInstanceId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetActivityInstanceId() {
	o.ActivityInstanceId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricDetailQueryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricDetailQueryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetCaseExecutionId returns the CaseExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetCaseExecutionId() string {
	if o == nil || IsNil(o.CaseExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseExecutionId.Get()
}

// GetCaseExecutionIdOk returns a tuple with the CaseExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetCaseExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseExecutionId.Get(), o.CaseExecutionId.IsSet()
}

// HasCaseExecutionId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasCaseExecutionId() bool {
	if o != nil && o.CaseExecutionId.IsSet() {
		return true
	}

	return false
}

// SetCaseExecutionId gets a reference to the given NullableString and assigns it to the CaseExecutionId field.
func (o *HistoricDetailQueryDto) SetCaseExecutionId(v string) {
	o.CaseExecutionId.Set(&v)
}
// SetCaseExecutionIdNil sets the value for CaseExecutionId to be an explicit nil
func (o *HistoricDetailQueryDto) SetCaseExecutionIdNil() {
	o.CaseExecutionId.Set(nil)
}

// UnsetCaseExecutionId ensures that no value is present for CaseExecutionId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetCaseExecutionId() {
	o.CaseExecutionId.Unset()
}

// GetVariableInstanceId returns the VariableInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetVariableInstanceId() string {
	if o == nil || IsNil(o.VariableInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.VariableInstanceId.Get()
}

// GetVariableInstanceIdOk returns a tuple with the VariableInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetVariableInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableInstanceId.Get(), o.VariableInstanceId.IsSet()
}

// HasVariableInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasVariableInstanceId() bool {
	if o != nil && o.VariableInstanceId.IsSet() {
		return true
	}

	return false
}

// SetVariableInstanceId gets a reference to the given NullableString and assigns it to the VariableInstanceId field.
func (o *HistoricDetailQueryDto) SetVariableInstanceId(v string) {
	o.VariableInstanceId.Set(&v)
}
// SetVariableInstanceIdNil sets the value for VariableInstanceId to be an explicit nil
func (o *HistoricDetailQueryDto) SetVariableInstanceIdNil() {
	o.VariableInstanceId.Set(nil)
}

// UnsetVariableInstanceId ensures that no value is present for VariableInstanceId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetVariableInstanceId() {
	o.VariableInstanceId.Unset()
}

// GetVariableTypeIn returns the VariableTypeIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetVariableTypeIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VariableTypeIn
}

// GetVariableTypeInOk returns a tuple with the VariableTypeIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetVariableTypeInOk() ([]string, bool) {
	if o == nil || IsNil(o.VariableTypeIn) {
		return nil, false
	}
	return o.VariableTypeIn, true
}

// HasVariableTypeIn returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasVariableTypeIn() bool {
	if o != nil && !IsNil(o.VariableTypeIn) {
		return true
	}

	return false
}

// SetVariableTypeIn gets a reference to the given []string and assigns it to the VariableTypeIn field.
func (o *HistoricDetailQueryDto) SetVariableTypeIn(v []string) {
	o.VariableTypeIn = v
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *HistoricDetailQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *HistoricDetailQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *HistoricDetailQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetUserOperationId returns the UserOperationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetUserOperationId() string {
	if o == nil || IsNil(o.UserOperationId.Get()) {
		var ret string
		return ret
	}
	return *o.UserOperationId.Get()
}

// GetUserOperationIdOk returns a tuple with the UserOperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetUserOperationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserOperationId.Get(), o.UserOperationId.IsSet()
}

// HasUserOperationId returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasUserOperationId() bool {
	if o != nil && o.UserOperationId.IsSet() {
		return true
	}

	return false
}

// SetUserOperationId gets a reference to the given NullableString and assigns it to the UserOperationId field.
func (o *HistoricDetailQueryDto) SetUserOperationId(v string) {
	o.UserOperationId.Set(&v)
}
// SetUserOperationIdNil sets the value for UserOperationId to be an explicit nil
func (o *HistoricDetailQueryDto) SetUserOperationIdNil() {
	o.UserOperationId.Set(nil)
}

// UnsetUserOperationId ensures that no value is present for UserOperationId, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetUserOperationId() {
	o.UserOperationId.Unset()
}

// GetFormFields returns the FormFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetFormFields() bool {
	if o == nil || IsNil(o.FormFields.Get()) {
		var ret bool
		return ret
	}
	return *o.FormFields.Get()
}

// GetFormFieldsOk returns a tuple with the FormFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetFormFieldsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FormFields.Get(), o.FormFields.IsSet()
}

// HasFormFields returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasFormFields() bool {
	if o != nil && o.FormFields.IsSet() {
		return true
	}

	return false
}

// SetFormFields gets a reference to the given NullableBool and assigns it to the FormFields field.
func (o *HistoricDetailQueryDto) SetFormFields(v bool) {
	o.FormFields.Set(&v)
}
// SetFormFieldsNil sets the value for FormFields to be an explicit nil
func (o *HistoricDetailQueryDto) SetFormFieldsNil() {
	o.FormFields.Set(nil)
}

// UnsetFormFields ensures that no value is present for FormFields, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetFormFields() {
	o.FormFields.Unset()
}

// GetVariableUpdates returns the VariableUpdates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetVariableUpdates() bool {
	if o == nil || IsNil(o.VariableUpdates.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableUpdates.Get()
}

// GetVariableUpdatesOk returns a tuple with the VariableUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetVariableUpdatesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableUpdates.Get(), o.VariableUpdates.IsSet()
}

// HasVariableUpdates returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasVariableUpdates() bool {
	if o != nil && o.VariableUpdates.IsSet() {
		return true
	}

	return false
}

// SetVariableUpdates gets a reference to the given NullableBool and assigns it to the VariableUpdates field.
func (o *HistoricDetailQueryDto) SetVariableUpdates(v bool) {
	o.VariableUpdates.Set(&v)
}
// SetVariableUpdatesNil sets the value for VariableUpdates to be an explicit nil
func (o *HistoricDetailQueryDto) SetVariableUpdatesNil() {
	o.VariableUpdates.Set(nil)
}

// UnsetVariableUpdates ensures that no value is present for VariableUpdates, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetVariableUpdates() {
	o.VariableUpdates.Unset()
}

// GetExcludeTaskDetails returns the ExcludeTaskDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetExcludeTaskDetails() bool {
	if o == nil || IsNil(o.ExcludeTaskDetails.Get()) {
		var ret bool
		return ret
	}
	return *o.ExcludeTaskDetails.Get()
}

// GetExcludeTaskDetailsOk returns a tuple with the ExcludeTaskDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetExcludeTaskDetailsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludeTaskDetails.Get(), o.ExcludeTaskDetails.IsSet()
}

// HasExcludeTaskDetails returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasExcludeTaskDetails() bool {
	if o != nil && o.ExcludeTaskDetails.IsSet() {
		return true
	}

	return false
}

// SetExcludeTaskDetails gets a reference to the given NullableBool and assigns it to the ExcludeTaskDetails field.
func (o *HistoricDetailQueryDto) SetExcludeTaskDetails(v bool) {
	o.ExcludeTaskDetails.Set(&v)
}
// SetExcludeTaskDetailsNil sets the value for ExcludeTaskDetails to be an explicit nil
func (o *HistoricDetailQueryDto) SetExcludeTaskDetailsNil() {
	o.ExcludeTaskDetails.Set(nil)
}

// UnsetExcludeTaskDetails ensures that no value is present for ExcludeTaskDetails, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetExcludeTaskDetails() {
	o.ExcludeTaskDetails.Unset()
}

// GetInitial returns the Initial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetInitial() bool {
	if o == nil || IsNil(o.Initial.Get()) {
		var ret bool
		return ret
	}
	return *o.Initial.Get()
}

// GetInitialOk returns a tuple with the Initial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetInitialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Initial.Get(), o.Initial.IsSet()
}

// HasInitial returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasInitial() bool {
	if o != nil && o.Initial.IsSet() {
		return true
	}

	return false
}

// SetInitial gets a reference to the given NullableBool and assigns it to the Initial field.
func (o *HistoricDetailQueryDto) SetInitial(v bool) {
	o.Initial.Set(&v)
}
// SetInitialNil sets the value for Initial to be an explicit nil
func (o *HistoricDetailQueryDto) SetInitialNil() {
	o.Initial.Set(nil)
}

// UnsetInitial ensures that no value is present for Initial, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetInitial() {
	o.Initial.Unset()
}

// GetOccurredBefore returns the OccurredBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetOccurredBefore() time.Time {
	if o == nil || IsNil(o.OccurredBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.OccurredBefore.Get()
}

// GetOccurredBeforeOk returns a tuple with the OccurredBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetOccurredBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.OccurredBefore.Get(), o.OccurredBefore.IsSet()
}

// HasOccurredBefore returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasOccurredBefore() bool {
	if o != nil && o.OccurredBefore.IsSet() {
		return true
	}

	return false
}

// SetOccurredBefore gets a reference to the given NullableTime and assigns it to the OccurredBefore field.
func (o *HistoricDetailQueryDto) SetOccurredBefore(v time.Time) {
	o.OccurredBefore.Set(&v)
}
// SetOccurredBeforeNil sets the value for OccurredBefore to be an explicit nil
func (o *HistoricDetailQueryDto) SetOccurredBeforeNil() {
	o.OccurredBefore.Set(nil)
}

// UnsetOccurredBefore ensures that no value is present for OccurredBefore, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetOccurredBefore() {
	o.OccurredBefore.Unset()
}

// GetOccurredAfter returns the OccurredAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetOccurredAfter() time.Time {
	if o == nil || IsNil(o.OccurredAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.OccurredAfter.Get()
}

// GetOccurredAfterOk returns a tuple with the OccurredAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetOccurredAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.OccurredAfter.Get(), o.OccurredAfter.IsSet()
}

// HasOccurredAfter returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasOccurredAfter() bool {
	if o != nil && o.OccurredAfter.IsSet() {
		return true
	}

	return false
}

// SetOccurredAfter gets a reference to the given NullableTime and assigns it to the OccurredAfter field.
func (o *HistoricDetailQueryDto) SetOccurredAfter(v time.Time) {
	o.OccurredAfter.Set(&v)
}
// SetOccurredAfterNil sets the value for OccurredAfter to be an explicit nil
func (o *HistoricDetailQueryDto) SetOccurredAfterNil() {
	o.OccurredAfter.Set(nil)
}

// UnsetOccurredAfter ensures that no value is present for OccurredAfter, not even an explicit nil
func (o *HistoricDetailQueryDto) UnsetOccurredAfter() {
	o.OccurredAfter.Unset()
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailQueryDto) GetSorting() []HistoricDetailQueryDtoSortingInner {
	if o == nil {
		var ret []HistoricDetailQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailQueryDto) GetSortingOk() ([]HistoricDetailQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *HistoricDetailQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []HistoricDetailQueryDtoSortingInner and assigns it to the Sorting field.
func (o *HistoricDetailQueryDto) SetSorting(v []HistoricDetailQueryDtoSortingInner) {
	o.Sorting = v
}

func (o HistoricDetailQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricDetailQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessInstanceIdIn != nil {
		toSerialize["processInstanceIdIn"] = o.ProcessInstanceIdIn
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.ActivityInstanceId.IsSet() {
		toSerialize["activityInstanceId"] = o.ActivityInstanceId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.CaseExecutionId.IsSet() {
		toSerialize["caseExecutionId"] = o.CaseExecutionId.Get()
	}
	if o.VariableInstanceId.IsSet() {
		toSerialize["variableInstanceId"] = o.VariableInstanceId.Get()
	}
	if o.VariableTypeIn != nil {
		toSerialize["variableTypeIn"] = o.VariableTypeIn
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.UserOperationId.IsSet() {
		toSerialize["userOperationId"] = o.UserOperationId.Get()
	}
	if o.FormFields.IsSet() {
		toSerialize["formFields"] = o.FormFields.Get()
	}
	if o.VariableUpdates.IsSet() {
		toSerialize["variableUpdates"] = o.VariableUpdates.Get()
	}
	if o.ExcludeTaskDetails.IsSet() {
		toSerialize["excludeTaskDetails"] = o.ExcludeTaskDetails.Get()
	}
	if o.Initial.IsSet() {
		toSerialize["initial"] = o.Initial.Get()
	}
	if o.OccurredBefore.IsSet() {
		toSerialize["occurredBefore"] = o.OccurredBefore.Get()
	}
	if o.OccurredAfter.IsSet() {
		toSerialize["occurredAfter"] = o.OccurredAfter.Get()
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableHistoricDetailQueryDto struct {
	value *HistoricDetailQueryDto
	isSet bool
}

func (v NullableHistoricDetailQueryDto) Get() *HistoricDetailQueryDto {
	return v.value
}

func (v *NullableHistoricDetailQueryDto) Set(val *HistoricDetailQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricDetailQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricDetailQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricDetailQueryDto(val *HistoricDetailQueryDto) *NullableHistoricDetailQueryDto {
	return &NullableHistoricDetailQueryDto{value: val, isSet: true}
}

func (v NullableHistoricDetailQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricDetailQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


