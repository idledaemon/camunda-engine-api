/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ProcessDefinitionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessDefinitionDto{}

// ProcessDefinitionDto struct for ProcessDefinitionDto
type ProcessDefinitionDto struct {
	// The id of the process definition
	Id NullableString `json:"id,omitempty"`
	// The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition.
	Key NullableString `json:"key,omitempty"`
	// The category of the process definition.
	Category NullableString `json:"category,omitempty"`
	// The description of the process definition.
	Description NullableString `json:"description,omitempty"`
	// The name of the process definition.
	Name NullableString `json:"name,omitempty"`
	// The version of the process definition that the engine assigned to it.
	Version NullableInt32 `json:"version,omitempty"`
	// The file name of the process definition.
	Resource NullableString `json:"resource,omitempty"`
	// The deployment id of the process definition.
	DeploymentId NullableString `json:"deploymentId,omitempty"`
	// The file name of the process definition diagram, if it exists.
	Diagram NullableString `json:"diagram,omitempty"`
	// A flag indicating whether the definition is suspended or not.
	Suspended NullableBool `json:"suspended,omitempty"`
	// The tenant id of the process definition.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The version tag of the process definition.
	VersionTag NullableString `json:"versionTag,omitempty"`
	// History time to live value of the process definition. Is used within [History cleanup](https://docs.camunda.org/manual/7.21/user-guide/process-engine/history/#history-cleanup).
	HistoryTimeToLive NullableInt32 `json:"historyTimeToLive,omitempty"`
	// A flag indicating whether the process definition is startable in Tasklist or not.
	StartableInTasklist NullableBool `json:"startableInTasklist,omitempty"`
}

// NewProcessDefinitionDto instantiates a new ProcessDefinitionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessDefinitionDto() *ProcessDefinitionDto {
	this := ProcessDefinitionDto{}
	return &this
}

// NewProcessDefinitionDtoWithDefaults instantiates a new ProcessDefinitionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessDefinitionDtoWithDefaults() *ProcessDefinitionDto {
	this := ProcessDefinitionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ProcessDefinitionDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ProcessDefinitionDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetId() {
	o.Id.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *ProcessDefinitionDto) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *ProcessDefinitionDto) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetKey() {
	o.Key.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *ProcessDefinitionDto) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *ProcessDefinitionDto) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProcessDefinitionDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProcessDefinitionDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProcessDefinitionDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ProcessDefinitionDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetName() {
	o.Name.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetVersion() int32 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *ProcessDefinitionDto) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *ProcessDefinitionDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetVersion() {
	o.Version.Unset()
}

// GetResource returns the Resource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetResource() string {
	if o == nil || IsNil(o.Resource.Get()) {
		var ret string
		return ret
	}
	return *o.Resource.Get()
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resource.Get(), o.Resource.IsSet()
}

// HasResource returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasResource() bool {
	if o != nil && o.Resource.IsSet() {
		return true
	}

	return false
}

// SetResource gets a reference to the given NullableString and assigns it to the Resource field.
func (o *ProcessDefinitionDto) SetResource(v string) {
	o.Resource.Set(&v)
}
// SetResourceNil sets the value for Resource to be an explicit nil
func (o *ProcessDefinitionDto) SetResourceNil() {
	o.Resource.Set(nil)
}

// UnsetResource ensures that no value is present for Resource, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetResource() {
	o.Resource.Unset()
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *ProcessDefinitionDto) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *ProcessDefinitionDto) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

// GetDiagram returns the Diagram field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetDiagram() string {
	if o == nil || IsNil(o.Diagram.Get()) {
		var ret string
		return ret
	}
	return *o.Diagram.Get()
}

// GetDiagramOk returns a tuple with the Diagram field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetDiagramOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Diagram.Get(), o.Diagram.IsSet()
}

// HasDiagram returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasDiagram() bool {
	if o != nil && o.Diagram.IsSet() {
		return true
	}

	return false
}

// SetDiagram gets a reference to the given NullableString and assigns it to the Diagram field.
func (o *ProcessDefinitionDto) SetDiagram(v string) {
	o.Diagram.Set(&v)
}
// SetDiagramNil sets the value for Diagram to be an explicit nil
func (o *ProcessDefinitionDto) SetDiagramNil() {
	o.Diagram.Set(nil)
}

// UnsetDiagram ensures that no value is present for Diagram, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetDiagram() {
	o.Diagram.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *ProcessDefinitionDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *ProcessDefinitionDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ProcessDefinitionDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ProcessDefinitionDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetVersionTag returns the VersionTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetVersionTag() string {
	if o == nil || IsNil(o.VersionTag.Get()) {
		var ret string
		return ret
	}
	return *o.VersionTag.Get()
}

// GetVersionTagOk returns a tuple with the VersionTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetVersionTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionTag.Get(), o.VersionTag.IsSet()
}

// HasVersionTag returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasVersionTag() bool {
	if o != nil && o.VersionTag.IsSet() {
		return true
	}

	return false
}

// SetVersionTag gets a reference to the given NullableString and assigns it to the VersionTag field.
func (o *ProcessDefinitionDto) SetVersionTag(v string) {
	o.VersionTag.Set(&v)
}
// SetVersionTagNil sets the value for VersionTag to be an explicit nil
func (o *ProcessDefinitionDto) SetVersionTagNil() {
	o.VersionTag.Set(nil)
}

// UnsetVersionTag ensures that no value is present for VersionTag, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetVersionTag() {
	o.VersionTag.Unset()
}

// GetHistoryTimeToLive returns the HistoryTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetHistoryTimeToLive() int32 {
	if o == nil || IsNil(o.HistoryTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HistoryTimeToLive.Get()
}

// GetHistoryTimeToLiveOk returns a tuple with the HistoryTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetHistoryTimeToLiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryTimeToLive.Get(), o.HistoryTimeToLive.IsSet()
}

// HasHistoryTimeToLive returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasHistoryTimeToLive() bool {
	if o != nil && o.HistoryTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHistoryTimeToLive gets a reference to the given NullableInt32 and assigns it to the HistoryTimeToLive field.
func (o *ProcessDefinitionDto) SetHistoryTimeToLive(v int32) {
	o.HistoryTimeToLive.Set(&v)
}
// SetHistoryTimeToLiveNil sets the value for HistoryTimeToLive to be an explicit nil
func (o *ProcessDefinitionDto) SetHistoryTimeToLiveNil() {
	o.HistoryTimeToLive.Set(nil)
}

// UnsetHistoryTimeToLive ensures that no value is present for HistoryTimeToLive, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetHistoryTimeToLive() {
	o.HistoryTimeToLive.Unset()
}

// GetStartableInTasklist returns the StartableInTasklist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionDto) GetStartableInTasklist() bool {
	if o == nil || IsNil(o.StartableInTasklist.Get()) {
		var ret bool
		return ret
	}
	return *o.StartableInTasklist.Get()
}

// GetStartableInTasklistOk returns a tuple with the StartableInTasklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionDto) GetStartableInTasklistOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartableInTasklist.Get(), o.StartableInTasklist.IsSet()
}

// HasStartableInTasklist returns a boolean if a field has been set.
func (o *ProcessDefinitionDto) HasStartableInTasklist() bool {
	if o != nil && o.StartableInTasklist.IsSet() {
		return true
	}

	return false
}

// SetStartableInTasklist gets a reference to the given NullableBool and assigns it to the StartableInTasklist field.
func (o *ProcessDefinitionDto) SetStartableInTasklist(v bool) {
	o.StartableInTasklist.Set(&v)
}
// SetStartableInTasklistNil sets the value for StartableInTasklist to be an explicit nil
func (o *ProcessDefinitionDto) SetStartableInTasklistNil() {
	o.StartableInTasklist.Set(nil)
}

// UnsetStartableInTasklist ensures that no value is present for StartableInTasklist, not even an explicit nil
func (o *ProcessDefinitionDto) UnsetStartableInTasklist() {
	o.StartableInTasklist.Unset()
}

func (o ProcessDefinitionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessDefinitionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Resource.IsSet() {
		toSerialize["resource"] = o.Resource.Get()
	}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	if o.Diagram.IsSet() {
		toSerialize["diagram"] = o.Diagram.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.VersionTag.IsSet() {
		toSerialize["versionTag"] = o.VersionTag.Get()
	}
	if o.HistoryTimeToLive.IsSet() {
		toSerialize["historyTimeToLive"] = o.HistoryTimeToLive.Get()
	}
	if o.StartableInTasklist.IsSet() {
		toSerialize["startableInTasklist"] = o.StartableInTasklist.Get()
	}
	return toSerialize, nil
}

type NullableProcessDefinitionDto struct {
	value *ProcessDefinitionDto
	isSet bool
}

func (v NullableProcessDefinitionDto) Get() *ProcessDefinitionDto {
	return v.value
}

func (v *NullableProcessDefinitionDto) Set(val *ProcessDefinitionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessDefinitionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessDefinitionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessDefinitionDto(val *ProcessDefinitionDto) *NullableProcessDefinitionDto {
	return &NullableProcessDefinitionDto{value: val, isSet: true}
}

func (v NullableProcessDefinitionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessDefinitionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


