/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the AuthenticationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationResult{}

// AuthenticationResult struct for AuthenticationResult
type AuthenticationResult struct {
	// An id of authenticated user.
	AuthenticatedUser NullableString `json:"authenticatedUser,omitempty"`
	// A flag indicating if user is authenticated.
	Authenticated NullableBool `json:"authenticated,omitempty"`
	// Will be null.
	Tenants []string `json:"tenants,omitempty"`
	// Will be null.
	Groups []string `json:"groups,omitempty"`
}

// NewAuthenticationResult instantiates a new AuthenticationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationResult() *AuthenticationResult {
	this := AuthenticationResult{}
	return &this
}

// NewAuthenticationResultWithDefaults instantiates a new AuthenticationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationResultWithDefaults() *AuthenticationResult {
	this := AuthenticationResult{}
	return &this
}

// GetAuthenticatedUser returns the AuthenticatedUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthenticationResult) GetAuthenticatedUser() string {
	if o == nil || IsNil(o.AuthenticatedUser.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticatedUser.Get()
}

// GetAuthenticatedUserOk returns a tuple with the AuthenticatedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticationResult) GetAuthenticatedUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticatedUser.Get(), o.AuthenticatedUser.IsSet()
}

// HasAuthenticatedUser returns a boolean if a field has been set.
func (o *AuthenticationResult) HasAuthenticatedUser() bool {
	if o != nil && o.AuthenticatedUser.IsSet() {
		return true
	}

	return false
}

// SetAuthenticatedUser gets a reference to the given NullableString and assigns it to the AuthenticatedUser field.
func (o *AuthenticationResult) SetAuthenticatedUser(v string) {
	o.AuthenticatedUser.Set(&v)
}
// SetAuthenticatedUserNil sets the value for AuthenticatedUser to be an explicit nil
func (o *AuthenticationResult) SetAuthenticatedUserNil() {
	o.AuthenticatedUser.Set(nil)
}

// UnsetAuthenticatedUser ensures that no value is present for AuthenticatedUser, not even an explicit nil
func (o *AuthenticationResult) UnsetAuthenticatedUser() {
	o.AuthenticatedUser.Unset()
}

// GetAuthenticated returns the Authenticated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthenticationResult) GetAuthenticated() bool {
	if o == nil || IsNil(o.Authenticated.Get()) {
		var ret bool
		return ret
	}
	return *o.Authenticated.Get()
}

// GetAuthenticatedOk returns a tuple with the Authenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticationResult) GetAuthenticatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authenticated.Get(), o.Authenticated.IsSet()
}

// HasAuthenticated returns a boolean if a field has been set.
func (o *AuthenticationResult) HasAuthenticated() bool {
	if o != nil && o.Authenticated.IsSet() {
		return true
	}

	return false
}

// SetAuthenticated gets a reference to the given NullableBool and assigns it to the Authenticated field.
func (o *AuthenticationResult) SetAuthenticated(v bool) {
	o.Authenticated.Set(&v)
}
// SetAuthenticatedNil sets the value for Authenticated to be an explicit nil
func (o *AuthenticationResult) SetAuthenticatedNil() {
	o.Authenticated.Set(nil)
}

// UnsetAuthenticated ensures that no value is present for Authenticated, not even an explicit nil
func (o *AuthenticationResult) UnsetAuthenticated() {
	o.Authenticated.Unset()
}

// GetTenants returns the Tenants field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthenticationResult) GetTenants() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticationResult) GetTenantsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *AuthenticationResult) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []string and assigns it to the Tenants field.
func (o *AuthenticationResult) SetTenants(v []string) {
	o.Tenants = v
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthenticationResult) GetGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticationResult) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *AuthenticationResult) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *AuthenticationResult) SetGroups(v []string) {
	o.Groups = v
}

func (o AuthenticationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthenticatedUser.IsSet() {
		toSerialize["authenticatedUser"] = o.AuthenticatedUser.Get()
	}
	if o.Authenticated.IsSet() {
		toSerialize["authenticated"] = o.Authenticated.Get()
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return toSerialize, nil
}

type NullableAuthenticationResult struct {
	value *AuthenticationResult
	isSet bool
}

func (v NullableAuthenticationResult) Get() *AuthenticationResult {
	return v.value
}

func (v *NullableAuthenticationResult) Set(val *AuthenticationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationResult(val *AuthenticationResult) *NullableAuthenticationResult {
	return &NullableAuthenticationResult{value: val, isSet: true}
}

func (v NullableAuthenticationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


