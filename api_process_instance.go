/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type ProcessInstanceAPI interface {

	/*
	CorrelateMessageAsyncOperation Correlate Message Async (POST)

	Correlates a message asynchronously to executions that are waiting for this message. 
Messages will not be correlated to process definition-level start message events to start process instances.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCorrelateMessageAsyncOperationRequest
	*/
	CorrelateMessageAsyncOperation(ctx context.Context) ApiCorrelateMessageAsyncOperationRequest

	// CorrelateMessageAsyncOperationExecute executes the request
	//  @return BatchDto
	CorrelateMessageAsyncOperationExecute(r ApiCorrelateMessageAsyncOperationRequest) (*BatchDto, *http.Response, error)

	/*
	DeleteAsyncHistoricQueryBased Delete Async Historic Query Based (POST)

	Deletes a set of process instances asynchronously (batch) based on a historic process instance query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteAsyncHistoricQueryBasedRequest
	*/
	DeleteAsyncHistoricQueryBased(ctx context.Context) ApiDeleteAsyncHistoricQueryBasedRequest

	// DeleteAsyncHistoricQueryBasedExecute executes the request
	//  @return BatchDto
	DeleteAsyncHistoricQueryBasedExecute(r ApiDeleteAsyncHistoricQueryBasedRequest) (*BatchDto, *http.Response, error)

	/*
	DeleteProcessInstance Delete

	Deletes a running process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to be deleted.
	@return ApiDeleteProcessInstanceRequest
	*/
	DeleteProcessInstance(ctx context.Context, id string) ApiDeleteProcessInstanceRequest

	// DeleteProcessInstanceExecute executes the request
	DeleteProcessInstanceExecute(r ApiDeleteProcessInstanceRequest) (*http.Response, error)

	/*
	DeleteProcessInstanceVariable Delete Process Variable

	Deletes a variable of a process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to delete the variable from.
	@param varName The name of the variable to delete.
	@return ApiDeleteProcessInstanceVariableRequest
	*/
	DeleteProcessInstanceVariable(ctx context.Context, id string, varName string) ApiDeleteProcessInstanceVariableRequest

	// DeleteProcessInstanceVariableExecute executes the request
	DeleteProcessInstanceVariableExecute(r ApiDeleteProcessInstanceVariableRequest) (*http.Response, error)

	/*
	DeleteProcessInstancesAsyncOperation Delete Async (POST)

	Deletes multiple process instances asynchronously (batch).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteProcessInstancesAsyncOperationRequest
	*/
	DeleteProcessInstancesAsyncOperation(ctx context.Context) ApiDeleteProcessInstancesAsyncOperationRequest

	// DeleteProcessInstancesAsyncOperationExecute executes the request
	//  @return BatchDto
	DeleteProcessInstancesAsyncOperationExecute(r ApiDeleteProcessInstancesAsyncOperationRequest) (*BatchDto, *http.Response, error)

	/*
	GetActivityInstanceTree Get Activity Instance

	Retrieves an Activity Instance (Tree) for a given process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance for which the activity instance should be retrieved.
	@return ApiGetActivityInstanceTreeRequest
	*/
	GetActivityInstanceTree(ctx context.Context, id string) ApiGetActivityInstanceTreeRequest

	// GetActivityInstanceTreeExecute executes the request
	//  @return ActivityInstanceDto
	GetActivityInstanceTreeExecute(r ApiGetActivityInstanceTreeRequest) (*ActivityInstanceDto, *http.Response, error)

	/*
	GetProcessInstance Get Process Instance

	Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to be retrieved.
	@return ApiGetProcessInstanceRequest
	*/
	GetProcessInstance(ctx context.Context, id string) ApiGetProcessInstanceRequest

	// GetProcessInstanceExecute executes the request
	//  @return ProcessInstanceDto
	GetProcessInstanceExecute(r ApiGetProcessInstanceRequest) (*ProcessInstanceDto, *http.Response, error)

	/*
	GetProcessInstanceComments Get Process Instance Comments

	Gets the comments for a process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to retrieve the comments for.
	@return ApiGetProcessInstanceCommentsRequest
	*/
	GetProcessInstanceComments(ctx context.Context, id string) ApiGetProcessInstanceCommentsRequest

	// GetProcessInstanceCommentsExecute executes the request
	//  @return []CommentDto
	GetProcessInstanceCommentsExecute(r ApiGetProcessInstanceCommentsRequest) ([]CommentDto, *http.Response, error)

	/*
	GetProcessInstanceVariable Get Process Variable

	Retrieves a variable of a given process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to retrieve the variable for.
	@param varName The name of the variable to retrieve.
	@return ApiGetProcessInstanceVariableRequest
	*/
	GetProcessInstanceVariable(ctx context.Context, id string, varName string) ApiGetProcessInstanceVariableRequest

	// GetProcessInstanceVariableExecute executes the request
	//  @return VariableValueDto
	GetProcessInstanceVariableExecute(r ApiGetProcessInstanceVariableRequest) (*VariableValueDto, *http.Response, error)

	/*
	GetProcessInstanceVariableBinary Get Process Variable (Binary)

	Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.
Applicable for byte array or file Process Variables.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to retrieve the variable for.
	@param varName The name of the variable to retrieve.
	@return ApiGetProcessInstanceVariableBinaryRequest
	*/
	GetProcessInstanceVariableBinary(ctx context.Context, id string, varName string) ApiGetProcessInstanceVariableBinaryRequest

	// GetProcessInstanceVariableBinaryExecute executes the request
	//  @return *os.File
	GetProcessInstanceVariableBinaryExecute(r ApiGetProcessInstanceVariableBinaryRequest) (*os.File, *http.Response, error)

	/*
	GetProcessInstanceVariables Get Process Variables

	Retrieves all variables of a given process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to retrieve the variables from.
	@return ApiGetProcessInstanceVariablesRequest
	*/
	GetProcessInstanceVariables(ctx context.Context, id string) ApiGetProcessInstanceVariablesRequest

	// GetProcessInstanceVariablesExecute executes the request
	//  @return map[string]VariableValueDto
	GetProcessInstanceVariablesExecute(r ApiGetProcessInstanceVariablesRequest) (*map[string]VariableValueDto, *http.Response, error)

	/*
	GetProcessInstances Get List

	Queries for process instances that fulfill given parameters.
Parameters may be static as well as dynamic runtime properties of process instances.
The size of the result set can be retrieved by using the Get Instance Count method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcessInstancesRequest
	*/
	GetProcessInstances(ctx context.Context) ApiGetProcessInstancesRequest

	// GetProcessInstancesExecute executes the request
	//  @return []ProcessInstanceDto
	GetProcessInstancesExecute(r ApiGetProcessInstancesRequest) ([]ProcessInstanceDto, *http.Response, error)

	/*
	GetProcessInstancesCount Get List Count

	Queries for the number of process instances that fulfill given parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcessInstancesCountRequest
	*/
	GetProcessInstancesCount(ctx context.Context) ApiGetProcessInstancesCountRequest

	// GetProcessInstancesCountExecute executes the request
	//  @return CountResultDto
	GetProcessInstancesCountExecute(r ApiGetProcessInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	ModifyProcessInstance Modify Process Instance Execution State

	Submits a list of modification instructions to change a process instance's execution state.
A modification instruction is one of the following:

* Starting execution before an activity
* Starting execution after an activity on its single outgoing sequence flow
* Starting execution on a specific sequence flow
* Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity

Instructions are executed immediately and in the order they are provided in this request's body.
Variables can be provided with every starting instruction.

The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to modify.
	@return ApiModifyProcessInstanceRequest
	*/
	ModifyProcessInstance(ctx context.Context, id string) ApiModifyProcessInstanceRequest

	// ModifyProcessInstanceExecute executes the request
	ModifyProcessInstanceExecute(r ApiModifyProcessInstanceRequest) (*http.Response, error)

	/*
	ModifyProcessInstanceAsyncOperation Modify Process Instance Execution State Async

	Submits a list of modification instructions to change a process instance's execution state async.
A modification instruction is one of the following:

* Starting execution before an activity
* Starting execution after an activity on its single outgoing sequence flow
* Starting execution on a specific sequence flow
* Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity

Instructions are executed asynchronous and in the order they are provided in this request's body.
Variables can be provided with every starting instruction.

The exact semantics of modification can be read about in the
[User guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-modification/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to modify.
	@return ApiModifyProcessInstanceAsyncOperationRequest
	*/
	ModifyProcessInstanceAsyncOperation(ctx context.Context, id string) ApiModifyProcessInstanceAsyncOperationRequest

	// ModifyProcessInstanceAsyncOperationExecute executes the request
	//  @return BatchDto
	ModifyProcessInstanceAsyncOperationExecute(r ApiModifyProcessInstanceAsyncOperationRequest) (*BatchDto, *http.Response, error)

	/*
	ModifyProcessInstanceVariables Update/Delete Process Variables

	Updates or deletes the variables of a process instance by id. Updates precede deletions.
So, if a variable is updated AND deleted, the deletion overrides the update.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to set variables for.
	@return ApiModifyProcessInstanceVariablesRequest
	*/
	ModifyProcessInstanceVariables(ctx context.Context, id string) ApiModifyProcessInstanceVariablesRequest

	// ModifyProcessInstanceVariablesExecute executes the request
	ModifyProcessInstanceVariablesExecute(r ApiModifyProcessInstanceVariablesRequest) (*http.Response, error)

	/*
	QueryProcessInstances Get List (POST)

	Queries for process instances that fulfill given parameters through a JSON object.
This method is slightly more powerful than the Get Instances method because
it allows filtering by multiple process variables of types `string`, `number` or `boolean`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryProcessInstancesRequest
	*/
	QueryProcessInstances(ctx context.Context) ApiQueryProcessInstancesRequest

	// QueryProcessInstancesExecute executes the request
	//  @return []ProcessInstanceDto
	QueryProcessInstancesExecute(r ApiQueryProcessInstancesRequest) ([]ProcessInstanceDto, *http.Response, error)

	/*
	QueryProcessInstancesCount Get List Count (POST)

	Queries for the number of process instances that fulfill the given parameters.
This method takes the same message body as the Get Instances (POST) method and
therefore it is slightly more powerful than the Get Instance Count method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryProcessInstancesCountRequest
	*/
	QueryProcessInstancesCount(ctx context.Context) ApiQueryProcessInstancesCountRequest

	// QueryProcessInstancesCountExecute executes the request
	//  @return CountResultDto
	QueryProcessInstancesCountExecute(r ApiQueryProcessInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	SetProcessInstanceVariable Update Process Variable

	Sets a variable of a given process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to set the variable for.
	@param varName The name of the variable to set.
	@return ApiSetProcessInstanceVariableRequest
	*/
	SetProcessInstanceVariable(ctx context.Context, id string, varName string) ApiSetProcessInstanceVariableRequest

	// SetProcessInstanceVariableExecute executes the request
	SetProcessInstanceVariableExecute(r ApiSetProcessInstanceVariableRequest) (*http.Response, error)

	/*
	SetProcessInstanceVariableBinary Update Process Variable (Binary)

	Sets the serialized value for a binary variable or the binary value for a file variable.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to retrieve the variable for.
	@param varName The name of the variable to retrieve.
	@return ApiSetProcessInstanceVariableBinaryRequest
	*/
	SetProcessInstanceVariableBinary(ctx context.Context, id string, varName string) ApiSetProcessInstanceVariableBinaryRequest

	// SetProcessInstanceVariableBinaryExecute executes the request
	SetProcessInstanceVariableBinaryExecute(r ApiSetProcessInstanceVariableBinaryRequest) (*http.Response, error)

	/*
	SetRetriesByProcess Set Job Retries Async (POST)

	Create a batch to set retries of jobs associated with given processes asynchronously.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetRetriesByProcessRequest
	*/
	SetRetriesByProcess(ctx context.Context) ApiSetRetriesByProcessRequest

	// SetRetriesByProcessExecute executes the request
	//  @return BatchDto
	SetRetriesByProcessExecute(r ApiSetRetriesByProcessRequest) (*BatchDto, *http.Response, error)

	/*
	SetRetriesByProcessHistoricQueryBased Set Job Retries Async Historic Query Based (POST)

	Create a batch to set retries of jobs asynchronously based on a historic process instance query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetRetriesByProcessHistoricQueryBasedRequest
	*/
	SetRetriesByProcessHistoricQueryBased(ctx context.Context) ApiSetRetriesByProcessHistoricQueryBasedRequest

	// SetRetriesByProcessHistoricQueryBasedExecute executes the request
	//  @return BatchDto
	SetRetriesByProcessHistoricQueryBasedExecute(r ApiSetRetriesByProcessHistoricQueryBasedRequest) (*BatchDto, *http.Response, error)

	/*
	SetVariablesAsyncOperation Set Variables Async (POST)

	Update or create runtime process variables in the root scope of process instances.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetVariablesAsyncOperationRequest
	*/
	SetVariablesAsyncOperation(ctx context.Context) ApiSetVariablesAsyncOperationRequest

	// SetVariablesAsyncOperationExecute executes the request
	//  @return BatchDto
	SetVariablesAsyncOperationExecute(r ApiSetVariablesAsyncOperationRequest) (*BatchDto, *http.Response, error)

	/*
	UpdateSuspensionState Activate/Suspend In Group

	Activates or suspends process instances by providing certain criteria:

# Activate/Suspend Process Instance By Process Definition Id
* `suspend`
* `processDefinitionId`

# Activate/Suspend Process Instance By Process Definition Key

* `suspend`
* `processDefinitionKey`
* `processDefinitionTenantId`
* `processDefinitionWithoutTenantId`

# Activate/Suspend Process Instance In Group
* `suspend`
* `processInstanceIds`
* `processInstanceQuery`
* `historicProcessInstanceQuery`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateSuspensionStateRequest
	*/
	UpdateSuspensionState(ctx context.Context) ApiUpdateSuspensionStateRequest

	// UpdateSuspensionStateExecute executes the request
	UpdateSuspensionStateExecute(r ApiUpdateSuspensionStateRequest) (*http.Response, error)

	/*
	UpdateSuspensionStateAsyncOperation Activate/Suspend In Batch

	Activates or suspends process instances asynchronously with a list of process instance ids,
a process instance query, and/or a historical process instance query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateSuspensionStateAsyncOperationRequest
	*/
	UpdateSuspensionStateAsyncOperation(ctx context.Context) ApiUpdateSuspensionStateAsyncOperationRequest

	// UpdateSuspensionStateAsyncOperationExecute executes the request
	//  @return BatchDto
	UpdateSuspensionStateAsyncOperationExecute(r ApiUpdateSuspensionStateAsyncOperationRequest) (*BatchDto, *http.Response, error)

	/*
	UpdateSuspensionStateById Activate/Suspend Process Instance By Id

	Activates or suspends a given process instance by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance to activate or suspend.
	@return ApiUpdateSuspensionStateByIdRequest
	*/
	UpdateSuspensionStateById(ctx context.Context, id string) ApiUpdateSuspensionStateByIdRequest

	// UpdateSuspensionStateByIdExecute executes the request
	UpdateSuspensionStateByIdExecute(r ApiUpdateSuspensionStateByIdRequest) (*http.Response, error)
}

// ProcessInstanceAPIService ProcessInstanceAPI service
type ProcessInstanceAPIService service

type ApiCorrelateMessageAsyncOperationRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	correlationMessageAsyncDto *CorrelationMessageAsyncDto
}

func (r ApiCorrelateMessageAsyncOperationRequest) CorrelationMessageAsyncDto(correlationMessageAsyncDto CorrelationMessageAsyncDto) ApiCorrelateMessageAsyncOperationRequest {
	r.correlationMessageAsyncDto = &correlationMessageAsyncDto
	return r
}

func (r ApiCorrelateMessageAsyncOperationRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.CorrelateMessageAsyncOperationExecute(r)
}

/*
CorrelateMessageAsyncOperation Correlate Message Async (POST)

Correlates a message asynchronously to executions that are waiting for this message. 
Messages will not be correlated to process definition-level start message events to start process instances.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCorrelateMessageAsyncOperationRequest
*/
func (a *ProcessInstanceAPIService) CorrelateMessageAsyncOperation(ctx context.Context) ApiCorrelateMessageAsyncOperationRequest {
	return ApiCorrelateMessageAsyncOperationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) CorrelateMessageAsyncOperationExecute(r ApiCorrelateMessageAsyncOperationRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.CorrelateMessageAsyncOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/message-async"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.correlationMessageAsyncDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v AuthorizationExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAsyncHistoricQueryBasedRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	deleteProcessInstancesDto *DeleteProcessInstancesDto
}

// **Unallowed property**: &#x60;processInstanceQuery&#x60;
func (r ApiDeleteAsyncHistoricQueryBasedRequest) DeleteProcessInstancesDto(deleteProcessInstancesDto DeleteProcessInstancesDto) ApiDeleteAsyncHistoricQueryBasedRequest {
	r.deleteProcessInstancesDto = &deleteProcessInstancesDto
	return r
}

func (r ApiDeleteAsyncHistoricQueryBasedRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.DeleteAsyncHistoricQueryBasedExecute(r)
}

/*
DeleteAsyncHistoricQueryBased Delete Async Historic Query Based (POST)

Deletes a set of process instances asynchronously (batch) based on a historic process instance query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteAsyncHistoricQueryBasedRequest
*/
func (a *ProcessInstanceAPIService) DeleteAsyncHistoricQueryBased(ctx context.Context) ApiDeleteAsyncHistoricQueryBasedRequest {
	return ApiDeleteAsyncHistoricQueryBasedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) DeleteAsyncHistoricQueryBasedExecute(r ApiDeleteAsyncHistoricQueryBasedRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.DeleteAsyncHistoricQueryBased")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/delete-historic-query-based"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteProcessInstancesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProcessInstanceRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	skipCustomListeners *bool
	skipIoMappings *bool
	skipSubprocesses *bool
	failIfNotExists *bool
}

// If set to true, the custom listeners will be skipped.
func (r ApiDeleteProcessInstanceRequest) SkipCustomListeners(skipCustomListeners bool) ApiDeleteProcessInstanceRequest {
	r.skipCustomListeners = &skipCustomListeners
	return r
}

// If set to true, the input/output mappings will be skipped.
func (r ApiDeleteProcessInstanceRequest) SkipIoMappings(skipIoMappings bool) ApiDeleteProcessInstanceRequest {
	r.skipIoMappings = &skipIoMappings
	return r
}

// If set to true, subprocesses related to deleted processes will be skipped.
func (r ApiDeleteProcessInstanceRequest) SkipSubprocesses(skipSubprocesses bool) ApiDeleteProcessInstanceRequest {
	r.skipSubprocesses = &skipSubprocesses
	return r
}

// If set to false, the request will still be successful if the process id is not found.
func (r ApiDeleteProcessInstanceRequest) FailIfNotExists(failIfNotExists bool) ApiDeleteProcessInstanceRequest {
	r.failIfNotExists = &failIfNotExists
	return r
}

func (r ApiDeleteProcessInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcessInstanceExecute(r)
}

/*
DeleteProcessInstance Delete

Deletes a running process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to be deleted.
 @return ApiDeleteProcessInstanceRequest
*/
func (a *ProcessInstanceAPIService) DeleteProcessInstance(ctx context.Context, id string) ApiDeleteProcessInstanceRequest {
	return ApiDeleteProcessInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) DeleteProcessInstanceExecute(r ApiDeleteProcessInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.DeleteProcessInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skipCustomListeners != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipCustomListeners", r.skipCustomListeners, "")
	} else {
		var defaultValue bool = false
		r.skipCustomListeners = &defaultValue
	}
	if r.skipIoMappings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipIoMappings", r.skipIoMappings, "")
	} else {
		var defaultValue bool = false
		r.skipIoMappings = &defaultValue
	}
	if r.skipSubprocesses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSubprocesses", r.skipSubprocesses, "")
	} else {
		var defaultValue bool = false
		r.skipSubprocesses = &defaultValue
	}
	if r.failIfNotExists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failIfNotExists", r.failIfNotExists, "")
	} else {
		var defaultValue bool = true
		r.failIfNotExists = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteProcessInstanceVariableRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	varName string
}

func (r ApiDeleteProcessInstanceVariableRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcessInstanceVariableExecute(r)
}

/*
DeleteProcessInstanceVariable Delete Process Variable

Deletes a variable of a process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to delete the variable from.
 @param varName The name of the variable to delete.
 @return ApiDeleteProcessInstanceVariableRequest
*/
func (a *ProcessInstanceAPIService) DeleteProcessInstanceVariable(ctx context.Context, id string, varName string) ApiDeleteProcessInstanceVariableRequest {
	return ApiDeleteProcessInstanceVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) DeleteProcessInstanceVariableExecute(r ApiDeleteProcessInstanceVariableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.DeleteProcessInstanceVariable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables/{varName}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteProcessInstancesAsyncOperationRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	deleteProcessInstancesDto *DeleteProcessInstancesDto
}

// **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
func (r ApiDeleteProcessInstancesAsyncOperationRequest) DeleteProcessInstancesDto(deleteProcessInstancesDto DeleteProcessInstancesDto) ApiDeleteProcessInstancesAsyncOperationRequest {
	r.deleteProcessInstancesDto = &deleteProcessInstancesDto
	return r
}

func (r ApiDeleteProcessInstancesAsyncOperationRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.DeleteProcessInstancesAsyncOperationExecute(r)
}

/*
DeleteProcessInstancesAsyncOperation Delete Async (POST)

Deletes multiple process instances asynchronously (batch).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteProcessInstancesAsyncOperationRequest
*/
func (a *ProcessInstanceAPIService) DeleteProcessInstancesAsyncOperation(ctx context.Context) ApiDeleteProcessInstancesAsyncOperationRequest {
	return ApiDeleteProcessInstancesAsyncOperationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) DeleteProcessInstancesAsyncOperationExecute(r ApiDeleteProcessInstancesAsyncOperationRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.DeleteProcessInstancesAsyncOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteProcessInstancesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetActivityInstanceTreeRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
}

func (r ApiGetActivityInstanceTreeRequest) Execute() (*ActivityInstanceDto, *http.Response, error) {
	return r.ApiService.GetActivityInstanceTreeExecute(r)
}

/*
GetActivityInstanceTree Get Activity Instance

Retrieves an Activity Instance (Tree) for a given process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance for which the activity instance should be retrieved.
 @return ApiGetActivityInstanceTreeRequest
*/
func (a *ProcessInstanceAPIService) GetActivityInstanceTree(ctx context.Context, id string) ApiGetActivityInstanceTreeRequest {
	return ApiGetActivityInstanceTreeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityInstanceDto
func (a *ProcessInstanceAPIService) GetActivityInstanceTreeExecute(r ApiGetActivityInstanceTreeRequest) (*ActivityInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetActivityInstanceTree")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/activity-instances"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstanceRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
}

func (r ApiGetProcessInstanceRequest) Execute() (*ProcessInstanceDto, *http.Response, error) {
	return r.ApiService.GetProcessInstanceExecute(r)
}

/*
GetProcessInstance Get Process Instance

Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to be retrieved.
 @return ApiGetProcessInstanceRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstance(ctx context.Context, id string) ApiGetProcessInstanceRequest {
	return ApiGetProcessInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProcessInstanceDto
func (a *ProcessInstanceAPIService) GetProcessInstanceExecute(r ApiGetProcessInstanceRequest) (*ProcessInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstanceCommentsRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
}

func (r ApiGetProcessInstanceCommentsRequest) Execute() ([]CommentDto, *http.Response, error) {
	return r.ApiService.GetProcessInstanceCommentsExecute(r)
}

/*
GetProcessInstanceComments Get Process Instance Comments

Gets the comments for a process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to retrieve the comments for.
 @return ApiGetProcessInstanceCommentsRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstanceComments(ctx context.Context, id string) ApiGetProcessInstanceCommentsRequest {
	return ApiGetProcessInstanceCommentsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []CommentDto
func (a *ProcessInstanceAPIService) GetProcessInstanceCommentsExecute(r ApiGetProcessInstanceCommentsRequest) ([]CommentDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CommentDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstanceComments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/comment"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstanceVariableRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	varName string
	deserializeValue *bool
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetProcessInstanceVariableRequest) DeserializeValue(deserializeValue bool) ApiGetProcessInstanceVariableRequest {
	r.deserializeValue = &deserializeValue
	return r
}

func (r ApiGetProcessInstanceVariableRequest) Execute() (*VariableValueDto, *http.Response, error) {
	return r.ApiService.GetProcessInstanceVariableExecute(r)
}

/*
GetProcessInstanceVariable Get Process Variable

Retrieves a variable of a given process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to retrieve the variable for.
 @param varName The name of the variable to retrieve.
 @return ApiGetProcessInstanceVariableRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstanceVariable(ctx context.Context, id string, varName string) ApiGetProcessInstanceVariableRequest {
	return ApiGetProcessInstanceVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
//  @return VariableValueDto
func (a *ProcessInstanceAPIService) GetProcessInstanceVariableExecute(r ApiGetProcessInstanceVariableRequest) (*VariableValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VariableValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstanceVariable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables/{varName}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deserializeValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValue", r.deserializeValue, "")
	} else {
		var defaultValue bool = true
		r.deserializeValue = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstanceVariableBinaryRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	varName string
}

func (r ApiGetProcessInstanceVariableBinaryRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetProcessInstanceVariableBinaryExecute(r)
}

/*
GetProcessInstanceVariableBinary Get Process Variable (Binary)

Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.
Applicable for byte array or file Process Variables.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to retrieve the variable for.
 @param varName The name of the variable to retrieve.
 @return ApiGetProcessInstanceVariableBinaryRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstanceVariableBinary(ctx context.Context, id string, varName string) ApiGetProcessInstanceVariableBinaryRequest {
	return ApiGetProcessInstanceVariableBinaryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ProcessInstanceAPIService) GetProcessInstanceVariableBinaryExecute(r ApiGetProcessInstanceVariableBinaryRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstanceVariableBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables/{varName}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "text/plain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstanceVariablesRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	deserializeValues *bool
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetProcessInstanceVariablesRequest) DeserializeValues(deserializeValues bool) ApiGetProcessInstanceVariablesRequest {
	r.deserializeValues = &deserializeValues
	return r
}

func (r ApiGetProcessInstanceVariablesRequest) Execute() (*map[string]VariableValueDto, *http.Response, error) {
	return r.ApiService.GetProcessInstanceVariablesExecute(r)
}

/*
GetProcessInstanceVariables Get Process Variables

Retrieves all variables of a given process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to retrieve the variables from.
 @return ApiGetProcessInstanceVariablesRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstanceVariables(ctx context.Context, id string) ApiGetProcessInstanceVariablesRequest {
	return ApiGetProcessInstanceVariablesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]VariableValueDto
func (a *ProcessInstanceAPIService) GetProcessInstanceVariablesExecute(r ApiGetProcessInstanceVariablesRequest) (*map[string]VariableValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]VariableValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstanceVariables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deserializeValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValues", r.deserializeValues, "")
	} else {
		var defaultValue bool = true
		r.deserializeValues = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstancesRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
	processInstanceIds *string
	businessKey *string
	businessKeyLike *string
	caseInstanceId *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionKeyIn *string
	processDefinitionKeyNotIn *string
	deploymentId *string
	superProcessInstance *string
	subProcessInstance *string
	superCaseInstance *string
	subCaseInstance *string
	active *bool
	suspended *bool
	withIncident *bool
	incidentId *string
	incidentType *string
	incidentMessage *string
	incidentMessageLike *string
	tenantIdIn *string
	withoutTenantId *bool
	processDefinitionWithoutTenantId *bool
	activityIdIn *string
	rootProcessInstances *bool
	leafProcessInstances *bool
	variables *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetProcessInstancesRequest) SortBy(sortBy string) ApiGetProcessInstancesRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetProcessInstancesRequest) SortOrder(sortOrder string) ApiGetProcessInstancesRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetProcessInstancesRequest) FirstResult(firstResult int32) ApiGetProcessInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetProcessInstancesRequest) MaxResults(maxResults int32) ApiGetProcessInstancesRequest {
	r.maxResults = &maxResults
	return r
}

// Filter by a comma-separated list of process instance ids.
func (r ApiGetProcessInstancesRequest) ProcessInstanceIds(processInstanceIds string) ApiGetProcessInstancesRequest {
	r.processInstanceIds = &processInstanceIds
	return r
}

// Filter by process instance business key.
func (r ApiGetProcessInstancesRequest) BusinessKey(businessKey string) ApiGetProcessInstancesRequest {
	r.businessKey = &businessKey
	return r
}

// Filter by process instance business key that the parameter is a substring of.
func (r ApiGetProcessInstancesRequest) BusinessKeyLike(businessKeyLike string) ApiGetProcessInstancesRequest {
	r.businessKeyLike = &businessKeyLike
	return r
}

// Filter by case instance id.
func (r ApiGetProcessInstancesRequest) CaseInstanceId(caseInstanceId string) ApiGetProcessInstancesRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by the deployment the id belongs to.
func (r ApiGetProcessInstancesRequest) ProcessDefinitionId(processDefinitionId string) ApiGetProcessInstancesRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by the key of the process definition the instances run on.
func (r ApiGetProcessInstancesRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetProcessInstancesRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
func (r ApiGetProcessInstancesRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetProcessInstancesRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
func (r ApiGetProcessInstancesRequest) ProcessDefinitionKeyNotIn(processDefinitionKeyNotIn string) ApiGetProcessInstancesRequest {
	r.processDefinitionKeyNotIn = &processDefinitionKeyNotIn
	return r
}

// Filter by the deployment the id belongs to.
func (r ApiGetProcessInstancesRequest) DeploymentId(deploymentId string) ApiGetProcessInstancesRequest {
	r.deploymentId = &deploymentId
	return r
}

// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
func (r ApiGetProcessInstancesRequest) SuperProcessInstance(superProcessInstance string) ApiGetProcessInstancesRequest {
	r.superProcessInstance = &superProcessInstance
	return r
}

// Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
func (r ApiGetProcessInstancesRequest) SubProcessInstance(subProcessInstance string) ApiGetProcessInstancesRequest {
	r.subProcessInstance = &subProcessInstance
	return r
}

// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
func (r ApiGetProcessInstancesRequest) SuperCaseInstance(superCaseInstance string) ApiGetProcessInstancesRequest {
	r.superCaseInstance = &superCaseInstance
	return r
}

// Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
func (r ApiGetProcessInstancesRequest) SubCaseInstance(subCaseInstance string) ApiGetProcessInstancesRequest {
	r.subCaseInstance = &subCaseInstance
	return r
}

// Only include active process instances. Value may only be true, as false is the default behavior.
func (r ApiGetProcessInstancesRequest) Active(active bool) ApiGetProcessInstancesRequest {
	r.active = &active
	return r
}

// Only include suspended process instances. Value may only be true, as false is the default behavior.
func (r ApiGetProcessInstancesRequest) Suspended(suspended bool) ApiGetProcessInstancesRequest {
	r.suspended = &suspended
	return r
}

// Filter by presence of incidents. Selects only process instances that have an incident.
func (r ApiGetProcessInstancesRequest) WithIncident(withIncident bool) ApiGetProcessInstancesRequest {
	r.withIncident = &withIncident
	return r
}

// Filter by the incident id.
func (r ApiGetProcessInstancesRequest) IncidentId(incidentId string) ApiGetProcessInstancesRequest {
	r.incidentId = &incidentId
	return r
}

// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
func (r ApiGetProcessInstancesRequest) IncidentType(incidentType string) ApiGetProcessInstancesRequest {
	r.incidentType = &incidentType
	return r
}

// Filter by the incident message. Exact match.
func (r ApiGetProcessInstancesRequest) IncidentMessage(incidentMessage string) ApiGetProcessInstancesRequest {
	r.incidentMessage = &incidentMessage
	return r
}

// Filter by the incident message that the parameter is a substring of.
func (r ApiGetProcessInstancesRequest) IncidentMessageLike(incidentMessageLike string) ApiGetProcessInstancesRequest {
	r.incidentMessageLike = &incidentMessageLike
	return r
}

// Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
func (r ApiGetProcessInstancesRequest) TenantIdIn(tenantIdIn string) ApiGetProcessInstancesRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include process instances which belong to no tenant.
func (r ApiGetProcessInstancesRequest) WithoutTenantId(withoutTenantId bool) ApiGetProcessInstancesRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include process instances which process definition has no tenant id.
func (r ApiGetProcessInstancesRequest) ProcessDefinitionWithoutTenantId(processDefinitionWithoutTenantId bool) ApiGetProcessInstancesRequest {
	r.processDefinitionWithoutTenantId = &processDefinitionWithoutTenantId
	return r
}

// Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
func (r ApiGetProcessInstancesRequest) ActivityIdIn(activityIdIn string) ApiGetProcessInstancesRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Restrict the query to all process instances that are top level process instances.
func (r ApiGetProcessInstancesRequest) RootProcessInstances(rootProcessInstances bool) ApiGetProcessInstancesRequest {
	r.rootProcessInstances = &rootProcessInstances
	return r
}

// Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances).
func (r ApiGetProcessInstancesRequest) LeafProcessInstances(leafProcessInstances bool) ApiGetProcessInstancesRequest {
	r.leafProcessInstances = &leafProcessInstances
	return r
}

// Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetProcessInstancesRequest) Variables(variables string) ApiGetProcessInstancesRequest {
	r.variables = &variables
	return r
}

// Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
func (r ApiGetProcessInstancesRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetProcessInstancesRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
func (r ApiGetProcessInstancesRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetProcessInstancesRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

func (r ApiGetProcessInstancesRequest) Execute() ([]ProcessInstanceDto, *http.Response, error) {
	return r.ApiService.GetProcessInstancesExecute(r)
}

/*
GetProcessInstances Get List

Queries for process instances that fulfill given parameters.
Parameters may be static as well as dynamic runtime properties of process instances.
The size of the result set can be retrieved by using the Get Instance Count method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcessInstancesRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstances(ctx context.Context) ApiGetProcessInstancesRequest {
	return ApiGetProcessInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProcessInstanceDto
func (a *ProcessInstanceAPIService) GetProcessInstancesExecute(r ApiGetProcessInstancesRequest) ([]ProcessInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProcessInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.processInstanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIds", r.processInstanceIds, "")
	}
	if r.businessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "businessKey", r.businessKey, "")
	}
	if r.businessKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "businessKeyLike", r.businessKeyLike, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.processDefinitionKeyNotIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyNotIn", r.processDefinitionKeyNotIn, "")
	}
	if r.deploymentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploymentId", r.deploymentId, "")
	}
	if r.superProcessInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superProcessInstance", r.superProcessInstance, "")
	}
	if r.subProcessInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subProcessInstance", r.subProcessInstance, "")
	}
	if r.superCaseInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superCaseInstance", r.superCaseInstance, "")
	}
	if r.subCaseInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subCaseInstance", r.subCaseInstance, "")
	}
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "")
	} else {
		var defaultValue bool = false
		r.active = &defaultValue
	}
	if r.suspended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suspended", r.suspended, "")
	} else {
		var defaultValue bool = false
		r.suspended = &defaultValue
	}
	if r.withIncident != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withIncident", r.withIncident, "")
	} else {
		var defaultValue bool = false
		r.withIncident = &defaultValue
	}
	if r.incidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentId", r.incidentId, "")
	}
	if r.incidentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentType", r.incidentType, "")
	}
	if r.incidentMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessage", r.incidentMessage, "")
	}
	if r.incidentMessageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessageLike", r.incidentMessageLike, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	} else {
		var defaultValue bool = false
		r.withoutTenantId = &defaultValue
	}
	if r.processDefinitionWithoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionWithoutTenantId", r.processDefinitionWithoutTenantId, "")
	} else {
		var defaultValue bool = false
		r.processDefinitionWithoutTenantId = &defaultValue
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.rootProcessInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootProcessInstances", r.rootProcessInstances, "")
	} else {
		var defaultValue bool = false
		r.rootProcessInstances = &defaultValue
	}
	if r.leafProcessInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "leafProcessInstances", r.leafProcessInstances, "")
	} else {
		var defaultValue bool = false
		r.leafProcessInstances = &defaultValue
	}
	if r.variables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variables", r.variables, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	} else {
		var defaultValue bool = false
		r.variableNamesIgnoreCase = &defaultValue
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	} else {
		var defaultValue bool = false
		r.variableValuesIgnoreCase = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcessInstancesCountRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	processInstanceIds *string
	businessKey *string
	businessKeyLike *string
	caseInstanceId *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionKeyIn *string
	processDefinitionKeyNotIn *string
	deploymentId *string
	superProcessInstance *string
	subProcessInstance *string
	superCaseInstance *string
	subCaseInstance *string
	active *bool
	suspended *bool
	withIncident *bool
	incidentId *string
	incidentType *string
	incidentMessage *string
	incidentMessageLike *string
	tenantIdIn *string
	withoutTenantId *bool
	processDefinitionWithoutTenantId *bool
	activityIdIn *string
	rootProcessInstances *bool
	leafProcessInstances *bool
	variables *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
}

// Filter by a comma-separated list of process instance ids.
func (r ApiGetProcessInstancesCountRequest) ProcessInstanceIds(processInstanceIds string) ApiGetProcessInstancesCountRequest {
	r.processInstanceIds = &processInstanceIds
	return r
}

// Filter by process instance business key.
func (r ApiGetProcessInstancesCountRequest) BusinessKey(businessKey string) ApiGetProcessInstancesCountRequest {
	r.businessKey = &businessKey
	return r
}

// Filter by process instance business key that the parameter is a substring of.
func (r ApiGetProcessInstancesCountRequest) BusinessKeyLike(businessKeyLike string) ApiGetProcessInstancesCountRequest {
	r.businessKeyLike = &businessKeyLike
	return r
}

// Filter by case instance id.
func (r ApiGetProcessInstancesCountRequest) CaseInstanceId(caseInstanceId string) ApiGetProcessInstancesCountRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by the deployment the id belongs to.
func (r ApiGetProcessInstancesCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetProcessInstancesCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by the key of the process definition the instances run on.
func (r ApiGetProcessInstancesCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetProcessInstancesCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys.
func (r ApiGetProcessInstancesCountRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetProcessInstancesCountRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys.
func (r ApiGetProcessInstancesCountRequest) ProcessDefinitionKeyNotIn(processDefinitionKeyNotIn string) ApiGetProcessInstancesCountRequest {
	r.processDefinitionKeyNotIn = &processDefinitionKeyNotIn
	return r
}

// Filter by the deployment the id belongs to.
func (r ApiGetProcessInstancesCountRequest) DeploymentId(deploymentId string) ApiGetProcessInstancesCountRequest {
	r.deploymentId = &deploymentId
	return r
}

// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
func (r ApiGetProcessInstancesCountRequest) SuperProcessInstance(superProcessInstance string) ApiGetProcessInstancesCountRequest {
	r.superProcessInstance = &superProcessInstance
	return r
}

// Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
func (r ApiGetProcessInstancesCountRequest) SubProcessInstance(subProcessInstance string) ApiGetProcessInstancesCountRequest {
	r.subProcessInstance = &subProcessInstance
	return r
}

// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
func (r ApiGetProcessInstancesCountRequest) SuperCaseInstance(superCaseInstance string) ApiGetProcessInstancesCountRequest {
	r.superCaseInstance = &superCaseInstance
	return r
}

// Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
func (r ApiGetProcessInstancesCountRequest) SubCaseInstance(subCaseInstance string) ApiGetProcessInstancesCountRequest {
	r.subCaseInstance = &subCaseInstance
	return r
}

// Only include active process instances. Value may only be true, as false is the default behavior.
func (r ApiGetProcessInstancesCountRequest) Active(active bool) ApiGetProcessInstancesCountRequest {
	r.active = &active
	return r
}

// Only include suspended process instances. Value may only be true, as false is the default behavior.
func (r ApiGetProcessInstancesCountRequest) Suspended(suspended bool) ApiGetProcessInstancesCountRequest {
	r.suspended = &suspended
	return r
}

// Filter by presence of incidents. Selects only process instances that have an incident.
func (r ApiGetProcessInstancesCountRequest) WithIncident(withIncident bool) ApiGetProcessInstancesCountRequest {
	r.withIncident = &withIncident
	return r
}

// Filter by the incident id.
func (r ApiGetProcessInstancesCountRequest) IncidentId(incidentId string) ApiGetProcessInstancesCountRequest {
	r.incidentId = &incidentId
	return r
}

// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
func (r ApiGetProcessInstancesCountRequest) IncidentType(incidentType string) ApiGetProcessInstancesCountRequest {
	r.incidentType = &incidentType
	return r
}

// Filter by the incident message. Exact match.
func (r ApiGetProcessInstancesCountRequest) IncidentMessage(incidentMessage string) ApiGetProcessInstancesCountRequest {
	r.incidentMessage = &incidentMessage
	return r
}

// Filter by the incident message that the parameter is a substring of.
func (r ApiGetProcessInstancesCountRequest) IncidentMessageLike(incidentMessageLike string) ApiGetProcessInstancesCountRequest {
	r.incidentMessageLike = &incidentMessageLike
	return r
}

// Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
func (r ApiGetProcessInstancesCountRequest) TenantIdIn(tenantIdIn string) ApiGetProcessInstancesCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include process instances which belong to no tenant.
func (r ApiGetProcessInstancesCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetProcessInstancesCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include process instances which process definition has no tenant id.
func (r ApiGetProcessInstancesCountRequest) ProcessDefinitionWithoutTenantId(processDefinitionWithoutTenantId bool) ApiGetProcessInstancesCountRequest {
	r.processDefinitionWithoutTenantId = &processDefinitionWithoutTenantId
	return r
}

// Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
func (r ApiGetProcessInstancesCountRequest) ActivityIdIn(activityIdIn string) ApiGetProcessInstancesCountRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Restrict the query to all process instances that are top level process instances.
func (r ApiGetProcessInstancesCountRequest) RootProcessInstances(rootProcessInstances bool) ApiGetProcessInstancesCountRequest {
	r.rootProcessInstances = &rootProcessInstances
	return r
}

// Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances).
func (r ApiGetProcessInstancesCountRequest) LeafProcessInstances(leafProcessInstances bool) ApiGetProcessInstancesCountRequest {
	r.leafProcessInstances = &leafProcessInstances
	return r
}

// Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetProcessInstancesCountRequest) Variables(variables string) ApiGetProcessInstancesCountRequest {
	r.variables = &variables
	return r
}

// Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
func (r ApiGetProcessInstancesCountRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetProcessInstancesCountRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
func (r ApiGetProcessInstancesCountRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetProcessInstancesCountRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

func (r ApiGetProcessInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetProcessInstancesCountExecute(r)
}

/*
GetProcessInstancesCount Get List Count

Queries for the number of process instances that fulfill given parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcessInstancesCountRequest
*/
func (a *ProcessInstanceAPIService) GetProcessInstancesCount(ctx context.Context) ApiGetProcessInstancesCountRequest {
	return ApiGetProcessInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *ProcessInstanceAPIService) GetProcessInstancesCountExecute(r ApiGetProcessInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.GetProcessInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.processInstanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIds", r.processInstanceIds, "")
	}
	if r.businessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "businessKey", r.businessKey, "")
	}
	if r.businessKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "businessKeyLike", r.businessKeyLike, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.processDefinitionKeyNotIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyNotIn", r.processDefinitionKeyNotIn, "")
	}
	if r.deploymentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploymentId", r.deploymentId, "")
	}
	if r.superProcessInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superProcessInstance", r.superProcessInstance, "")
	}
	if r.subProcessInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subProcessInstance", r.subProcessInstance, "")
	}
	if r.superCaseInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superCaseInstance", r.superCaseInstance, "")
	}
	if r.subCaseInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subCaseInstance", r.subCaseInstance, "")
	}
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "")
	} else {
		var defaultValue bool = false
		r.active = &defaultValue
	}
	if r.suspended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suspended", r.suspended, "")
	} else {
		var defaultValue bool = false
		r.suspended = &defaultValue
	}
	if r.withIncident != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withIncident", r.withIncident, "")
	} else {
		var defaultValue bool = false
		r.withIncident = &defaultValue
	}
	if r.incidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentId", r.incidentId, "")
	}
	if r.incidentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentType", r.incidentType, "")
	}
	if r.incidentMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessage", r.incidentMessage, "")
	}
	if r.incidentMessageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessageLike", r.incidentMessageLike, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	} else {
		var defaultValue bool = false
		r.withoutTenantId = &defaultValue
	}
	if r.processDefinitionWithoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionWithoutTenantId", r.processDefinitionWithoutTenantId, "")
	} else {
		var defaultValue bool = false
		r.processDefinitionWithoutTenantId = &defaultValue
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.rootProcessInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootProcessInstances", r.rootProcessInstances, "")
	} else {
		var defaultValue bool = false
		r.rootProcessInstances = &defaultValue
	}
	if r.leafProcessInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "leafProcessInstances", r.leafProcessInstances, "")
	} else {
		var defaultValue bool = false
		r.leafProcessInstances = &defaultValue
	}
	if r.variables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variables", r.variables, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	} else {
		var defaultValue bool = false
		r.variableNamesIgnoreCase = &defaultValue
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	} else {
		var defaultValue bool = false
		r.variableValuesIgnoreCase = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyProcessInstanceRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	processInstanceModificationDto *ProcessInstanceModificationDto
}

func (r ApiModifyProcessInstanceRequest) ProcessInstanceModificationDto(processInstanceModificationDto ProcessInstanceModificationDto) ApiModifyProcessInstanceRequest {
	r.processInstanceModificationDto = &processInstanceModificationDto
	return r
}

func (r ApiModifyProcessInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ModifyProcessInstanceExecute(r)
}

/*
ModifyProcessInstance Modify Process Instance Execution State

Submits a list of modification instructions to change a process instance's execution state.
A modification instruction is one of the following:

* Starting execution before an activity
* Starting execution after an activity on its single outgoing sequence flow
* Starting execution on a specific sequence flow
* Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity

Instructions are executed immediately and in the order they are provided in this request's body.
Variables can be provided with every starting instruction.

The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to modify.
 @return ApiModifyProcessInstanceRequest
*/
func (a *ProcessInstanceAPIService) ModifyProcessInstance(ctx context.Context, id string) ApiModifyProcessInstanceRequest {
	return ApiModifyProcessInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) ModifyProcessInstanceExecute(r ApiModifyProcessInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.ModifyProcessInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/modification"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processInstanceModificationDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiModifyProcessInstanceAsyncOperationRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	processInstanceModificationDto *ProcessInstanceModificationDto
}

func (r ApiModifyProcessInstanceAsyncOperationRequest) ProcessInstanceModificationDto(processInstanceModificationDto ProcessInstanceModificationDto) ApiModifyProcessInstanceAsyncOperationRequest {
	r.processInstanceModificationDto = &processInstanceModificationDto
	return r
}

func (r ApiModifyProcessInstanceAsyncOperationRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.ModifyProcessInstanceAsyncOperationExecute(r)
}

/*
ModifyProcessInstanceAsyncOperation Modify Process Instance Execution State Async

Submits a list of modification instructions to change a process instance's execution state async.
A modification instruction is one of the following:

* Starting execution before an activity
* Starting execution after an activity on its single outgoing sequence flow
* Starting execution on a specific sequence flow
* Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity

Instructions are executed asynchronous and in the order they are provided in this request's body.
Variables can be provided with every starting instruction.

The exact semantics of modification can be read about in the
[User guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-modification/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to modify.
 @return ApiModifyProcessInstanceAsyncOperationRequest
*/
func (a *ProcessInstanceAPIService) ModifyProcessInstanceAsyncOperation(ctx context.Context, id string) ApiModifyProcessInstanceAsyncOperationRequest {
	return ApiModifyProcessInstanceAsyncOperationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) ModifyProcessInstanceAsyncOperationExecute(r ApiModifyProcessInstanceAsyncOperationRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.ModifyProcessInstanceAsyncOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/modification-async"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processInstanceModificationDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v AuthorizationExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyProcessInstanceVariablesRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	patchVariablesDto *PatchVariablesDto
}

func (r ApiModifyProcessInstanceVariablesRequest) PatchVariablesDto(patchVariablesDto PatchVariablesDto) ApiModifyProcessInstanceVariablesRequest {
	r.patchVariablesDto = &patchVariablesDto
	return r
}

func (r ApiModifyProcessInstanceVariablesRequest) Execute() (*http.Response, error) {
	return r.ApiService.ModifyProcessInstanceVariablesExecute(r)
}

/*
ModifyProcessInstanceVariables Update/Delete Process Variables

Updates or deletes the variables of a process instance by id. Updates precede deletions.
So, if a variable is updated AND deleted, the deletion overrides the update.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to set variables for.
 @return ApiModifyProcessInstanceVariablesRequest
*/
func (a *ProcessInstanceAPIService) ModifyProcessInstanceVariables(ctx context.Context, id string) ApiModifyProcessInstanceVariablesRequest {
	return ApiModifyProcessInstanceVariablesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) ModifyProcessInstanceVariablesExecute(r ApiModifyProcessInstanceVariablesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.ModifyProcessInstanceVariables")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchVariablesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiQueryProcessInstancesRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	firstResult *int32
	maxResults *int32
	processInstanceQueryDto *ProcessInstanceQueryDto
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiQueryProcessInstancesRequest) FirstResult(firstResult int32) ApiQueryProcessInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiQueryProcessInstancesRequest) MaxResults(maxResults int32) ApiQueryProcessInstancesRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiQueryProcessInstancesRequest) ProcessInstanceQueryDto(processInstanceQueryDto ProcessInstanceQueryDto) ApiQueryProcessInstancesRequest {
	r.processInstanceQueryDto = &processInstanceQueryDto
	return r
}

func (r ApiQueryProcessInstancesRequest) Execute() ([]ProcessInstanceDto, *http.Response, error) {
	return r.ApiService.QueryProcessInstancesExecute(r)
}

/*
QueryProcessInstances Get List (POST)

Queries for process instances that fulfill given parameters through a JSON object.
This method is slightly more powerful than the Get Instances method because
it allows filtering by multiple process variables of types `string`, `number` or `boolean`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryProcessInstancesRequest
*/
func (a *ProcessInstanceAPIService) QueryProcessInstances(ctx context.Context) ApiQueryProcessInstancesRequest {
	return ApiQueryProcessInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProcessInstanceDto
func (a *ProcessInstanceAPIService) QueryProcessInstancesExecute(r ApiQueryProcessInstancesRequest) ([]ProcessInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProcessInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.QueryProcessInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryProcessInstancesCountRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	processInstanceQueryDto *ProcessInstanceQueryDto
}

func (r ApiQueryProcessInstancesCountRequest) ProcessInstanceQueryDto(processInstanceQueryDto ProcessInstanceQueryDto) ApiQueryProcessInstancesCountRequest {
	r.processInstanceQueryDto = &processInstanceQueryDto
	return r
}

func (r ApiQueryProcessInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.QueryProcessInstancesCountExecute(r)
}

/*
QueryProcessInstancesCount Get List Count (POST)

Queries for the number of process instances that fulfill the given parameters.
This method takes the same message body as the Get Instances (POST) method and
therefore it is slightly more powerful than the Get Instance Count method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryProcessInstancesCountRequest
*/
func (a *ProcessInstanceAPIService) QueryProcessInstancesCount(ctx context.Context) ApiQueryProcessInstancesCountRequest {
	return ApiQueryProcessInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *ProcessInstanceAPIService) QueryProcessInstancesCountExecute(r ApiQueryProcessInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.QueryProcessInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetProcessInstanceVariableRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	varName string
	variableValueDto *VariableValueDto
}

func (r ApiSetProcessInstanceVariableRequest) VariableValueDto(variableValueDto VariableValueDto) ApiSetProcessInstanceVariableRequest {
	r.variableValueDto = &variableValueDto
	return r
}

func (r ApiSetProcessInstanceVariableRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetProcessInstanceVariableExecute(r)
}

/*
SetProcessInstanceVariable Update Process Variable

Sets a variable of a given process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to set the variable for.
 @param varName The name of the variable to set.
 @return ApiSetProcessInstanceVariableRequest
*/
func (a *ProcessInstanceAPIService) SetProcessInstanceVariable(ctx context.Context, id string, varName string) ApiSetProcessInstanceVariableRequest {
	return ApiSetProcessInstanceVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) SetProcessInstanceVariableExecute(r ApiSetProcessInstanceVariableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.SetProcessInstanceVariable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables/{varName}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.variableValueDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetProcessInstanceVariableBinaryRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	varName string
	data *os.File
	valueType *string
}

// The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory.
func (r ApiSetProcessInstanceVariableBinaryRequest) Data(data *os.File) ApiSetProcessInstanceVariableBinaryRequest {
	r.data = data
	return r
}

// The name of the variable type. Either Bytes for a byte array variable or File for a file variable.
func (r ApiSetProcessInstanceVariableBinaryRequest) ValueType(valueType string) ApiSetProcessInstanceVariableBinaryRequest {
	r.valueType = &valueType
	return r
}

func (r ApiSetProcessInstanceVariableBinaryRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetProcessInstanceVariableBinaryExecute(r)
}

/*
SetProcessInstanceVariableBinary Update Process Variable (Binary)

Sets the serialized value for a binary variable or the binary value for a file variable.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to retrieve the variable for.
 @param varName The name of the variable to retrieve.
 @return ApiSetProcessInstanceVariableBinaryRequest
*/
func (a *ProcessInstanceAPIService) SetProcessInstanceVariableBinary(ctx context.Context, id string, varName string) ApiSetProcessInstanceVariableBinaryRequest {
	return ApiSetProcessInstanceVariableBinaryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) SetProcessInstanceVariableBinaryExecute(r ApiSetProcessInstanceVariableBinaryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.SetProcessInstanceVariableBinary")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/variables/{varName}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var dataLocalVarFormFileName string
	var dataLocalVarFileName     string
	var dataLocalVarFileBytes    []byte

	dataLocalVarFormFileName = "data"
	dataLocalVarFile := r.data

	if dataLocalVarFile != nil {
		fbs, _ := io.ReadAll(dataLocalVarFile)

		dataLocalVarFileBytes = fbs
		dataLocalVarFileName = dataLocalVarFile.Name()
		dataLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: dataLocalVarFileBytes, fileName: dataLocalVarFileName, formFileName: dataLocalVarFormFileName})
	}
	if r.valueType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "valueType", r.valueType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetRetriesByProcessRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	setJobRetriesByProcessDto *SetJobRetriesByProcessDto
}

// Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60;
func (r ApiSetRetriesByProcessRequest) SetJobRetriesByProcessDto(setJobRetriesByProcessDto SetJobRetriesByProcessDto) ApiSetRetriesByProcessRequest {
	r.setJobRetriesByProcessDto = &setJobRetriesByProcessDto
	return r
}

func (r ApiSetRetriesByProcessRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.SetRetriesByProcessExecute(r)
}

/*
SetRetriesByProcess Set Job Retries Async (POST)

Create a batch to set retries of jobs associated with given processes asynchronously.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetRetriesByProcessRequest
*/
func (a *ProcessInstanceAPIService) SetRetriesByProcess(ctx context.Context) ApiSetRetriesByProcessRequest {
	return ApiSetRetriesByProcessRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) SetRetriesByProcessExecute(r ApiSetRetriesByProcessRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.SetRetriesByProcess")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/job-retries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setJobRetriesByProcessDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetRetriesByProcessHistoricQueryBasedRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	setJobRetriesByProcessDto *SetJobRetriesByProcessDto
}

// Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60;
func (r ApiSetRetriesByProcessHistoricQueryBasedRequest) SetJobRetriesByProcessDto(setJobRetriesByProcessDto SetJobRetriesByProcessDto) ApiSetRetriesByProcessHistoricQueryBasedRequest {
	r.setJobRetriesByProcessDto = &setJobRetriesByProcessDto
	return r
}

func (r ApiSetRetriesByProcessHistoricQueryBasedRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.SetRetriesByProcessHistoricQueryBasedExecute(r)
}

/*
SetRetriesByProcessHistoricQueryBased Set Job Retries Async Historic Query Based (POST)

Create a batch to set retries of jobs asynchronously based on a historic process instance query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetRetriesByProcessHistoricQueryBasedRequest
*/
func (a *ProcessInstanceAPIService) SetRetriesByProcessHistoricQueryBased(ctx context.Context) ApiSetRetriesByProcessHistoricQueryBasedRequest {
	return ApiSetRetriesByProcessHistoricQueryBasedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) SetRetriesByProcessHistoricQueryBasedExecute(r ApiSetRetriesByProcessHistoricQueryBasedRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.SetRetriesByProcessHistoricQueryBased")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/job-retries-historic-query-based"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setJobRetriesByProcessDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetVariablesAsyncOperationRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	setVariablesAsyncDto *SetVariablesAsyncDto
}

func (r ApiSetVariablesAsyncOperationRequest) SetVariablesAsyncDto(setVariablesAsyncDto SetVariablesAsyncDto) ApiSetVariablesAsyncOperationRequest {
	r.setVariablesAsyncDto = &setVariablesAsyncDto
	return r
}

func (r ApiSetVariablesAsyncOperationRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.SetVariablesAsyncOperationExecute(r)
}

/*
SetVariablesAsyncOperation Set Variables Async (POST)

Update or create runtime process variables in the root scope of process instances.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetVariablesAsyncOperationRequest
*/
func (a *ProcessInstanceAPIService) SetVariablesAsyncOperation(ctx context.Context) ApiSetVariablesAsyncOperationRequest {
	return ApiSetVariablesAsyncOperationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) SetVariablesAsyncOperationExecute(r ApiSetVariablesAsyncOperationRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.SetVariablesAsyncOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/variables-async"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setVariablesAsyncDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v AuthorizationExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSuspensionStateRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	processInstanceSuspensionStateDto *ProcessInstanceSuspensionStateDto
}

func (r ApiUpdateSuspensionStateRequest) ProcessInstanceSuspensionStateDto(processInstanceSuspensionStateDto ProcessInstanceSuspensionStateDto) ApiUpdateSuspensionStateRequest {
	r.processInstanceSuspensionStateDto = &processInstanceSuspensionStateDto
	return r
}

func (r ApiUpdateSuspensionStateRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSuspensionStateExecute(r)
}

/*
UpdateSuspensionState Activate/Suspend In Group

Activates or suspends process instances by providing certain criteria:

# Activate/Suspend Process Instance By Process Definition Id
* `suspend`
* `processDefinitionId`

# Activate/Suspend Process Instance By Process Definition Key

* `suspend`
* `processDefinitionKey`
* `processDefinitionTenantId`
* `processDefinitionWithoutTenantId`

# Activate/Suspend Process Instance In Group
* `suspend`
* `processInstanceIds`
* `processInstanceQuery`
* `historicProcessInstanceQuery`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateSuspensionStateRequest
*/
func (a *ProcessInstanceAPIService) UpdateSuspensionState(ctx context.Context) ApiUpdateSuspensionStateRequest {
	return ApiUpdateSuspensionStateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) UpdateSuspensionStateExecute(r ApiUpdateSuspensionStateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.UpdateSuspensionState")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/suspended"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processInstanceSuspensionStateDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateSuspensionStateAsyncOperationRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	processInstanceSuspensionStateAsyncDto *ProcessInstanceSuspensionStateAsyncDto
}

func (r ApiUpdateSuspensionStateAsyncOperationRequest) ProcessInstanceSuspensionStateAsyncDto(processInstanceSuspensionStateAsyncDto ProcessInstanceSuspensionStateAsyncDto) ApiUpdateSuspensionStateAsyncOperationRequest {
	r.processInstanceSuspensionStateAsyncDto = &processInstanceSuspensionStateAsyncDto
	return r
}

func (r ApiUpdateSuspensionStateAsyncOperationRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.UpdateSuspensionStateAsyncOperationExecute(r)
}

/*
UpdateSuspensionStateAsyncOperation Activate/Suspend In Batch

Activates or suspends process instances asynchronously with a list of process instance ids,
a process instance query, and/or a historical process instance query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateSuspensionStateAsyncOperationRequest
*/
func (a *ProcessInstanceAPIService) UpdateSuspensionStateAsyncOperation(ctx context.Context) ApiUpdateSuspensionStateAsyncOperationRequest {
	return ApiUpdateSuspensionStateAsyncOperationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *ProcessInstanceAPIService) UpdateSuspensionStateAsyncOperationExecute(r ApiUpdateSuspensionStateAsyncOperationRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.UpdateSuspensionStateAsyncOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/suspended-async"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processInstanceSuspensionStateAsyncDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSuspensionStateByIdRequest struct {
	ctx context.Context
	ApiService ProcessInstanceAPI
	id string
	suspensionStateDto *SuspensionStateDto
}

func (r ApiUpdateSuspensionStateByIdRequest) SuspensionStateDto(suspensionStateDto SuspensionStateDto) ApiUpdateSuspensionStateByIdRequest {
	r.suspensionStateDto = &suspensionStateDto
	return r
}

func (r ApiUpdateSuspensionStateByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSuspensionStateByIdExecute(r)
}

/*
UpdateSuspensionStateById Activate/Suspend Process Instance By Id

Activates or suspends a given process instance by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance to activate or suspend.
 @return ApiUpdateSuspensionStateByIdRequest
*/
func (a *ProcessInstanceAPIService) UpdateSuspensionStateById(ctx context.Context, id string) ApiUpdateSuspensionStateByIdRequest {
	return ApiUpdateSuspensionStateByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProcessInstanceAPIService) UpdateSuspensionStateByIdExecute(r ApiUpdateSuspensionStateByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessInstanceAPIService.UpdateSuspensionStateById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/process-instance/{id}/suspended"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.suspensionStateDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
