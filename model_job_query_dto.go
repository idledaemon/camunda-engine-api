/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the JobQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobQueryDto{}

// JobQueryDto A Job instance query which defines a list of Job instances
type JobQueryDto struct {
	// Filter by job id.
	JobId NullableString `json:"jobId,omitempty"`
	// Filter by a  list of job ids.
	JobIds []string `json:"jobIds,omitempty"`
	// Only select jobs which exist for the given job definition.
	JobDefinitionId NullableString `json:"jobDefinitionId,omitempty"`
	// Only select jobs which exist for the given process instance.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Only select jobs which exist for the given  list of process instance ids.
	ProcessInstanceIds []string `json:"processInstanceIds,omitempty"`
	// Only select jobs which exist for the given execution.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// Filter by the id of the process definition the jobs run on.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Filter by the key of the process definition the jobs run on.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Only select jobs which exist for an activity with the given id.
	ActivityId NullableString `json:"activityId,omitempty"`
	// Only select jobs which have retries left. Value may only be `true`, as `false` is the default behavior.
	WithRetriesLeft NullableBool `json:"withRetriesLeft,omitempty"`
	// Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due date is in the past. Value may only be `true`, as `false` is the default behavior.
	Executable NullableBool `json:"executable,omitempty"`
	// Only select jobs that are timers. Cannot be used together with `messages`. Value may only be `true`, as `false` is the default behavior.
	Timers NullableBool `json:"timers,omitempty"`
	// Only select jobs that are messages. Cannot be used together with `timers`. Value may only be `true`, as `false` is the default behavior.
	Messages NullableBool `json:"messages,omitempty"`
	// Only select jobs where the due date is lower or higher than the given date. 
	DueDates []JobConditionQueryParameterDto `json:"dueDates,omitempty"`
	// Only select jobs created before or after the given date. 
	CreateTimes []JobConditionQueryParameterDto `json:"createTimes,omitempty"`
	// Only select jobs that failed due to an exception. Value may only be `true`, as `false` is the default behavior.
	WithException NullableBool `json:"withException,omitempty"`
	// Only select jobs that failed due to an exception with the given message.
	ExceptionMessage NullableString `json:"exceptionMessage,omitempty"`
	// Only select jobs that failed due to an exception at an activity with the given id.
	FailedActivityId NullableString `json:"failedActivityId,omitempty"`
	// Only select jobs which have no retries left. Value may only be `true`, as `false` is the default behavior.
	NoRetriesLeft NullableBool `json:"noRetriesLeft,omitempty"`
	// Only include active jobs. Value may only be `true`, as `false` is the default behavior.
	Active NullableBool `json:"active,omitempty"`
	// Only include suspended jobs. Value may only be `true`, as `false` is the default behavior.
	Suspended NullableBool `json:"suspended,omitempty"`
	// Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.
	PriorityLowerThanOrEquals NullableInt64 `json:"priorityLowerThanOrEquals,omitempty"`
	// Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.
	PriorityHigherThanOrEquals NullableInt64 `json:"priorityHigherThanOrEquals,omitempty"`
	// Only include jobs which belong to one of the passed  tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
	IncludeJobsWithoutTenantId NullableBool `json:"includeJobsWithoutTenantId,omitempty"`
	// An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Does not have an effect for the `count` endpoint.
	Sorting []JobQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewJobQueryDto instantiates a new JobQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobQueryDto() *JobQueryDto {
	this := JobQueryDto{}
	return &this
}

// NewJobQueryDtoWithDefaults instantiates a new JobQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobQueryDtoWithDefaults() *JobQueryDto {
	this := JobQueryDto{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetJobId() string {
	if o == nil || IsNil(o.JobId.Get()) {
		var ret string
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetJobIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *JobQueryDto) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableString and assigns it to the JobId field.
func (o *JobQueryDto) SetJobId(v string) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *JobQueryDto) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *JobQueryDto) UnsetJobId() {
	o.JobId.Unset()
}

// GetJobIds returns the JobIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetJobIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.JobIds
}

// GetJobIdsOk returns a tuple with the JobIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetJobIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.JobIds) {
		return nil, false
	}
	return o.JobIds, true
}

// HasJobIds returns a boolean if a field has been set.
func (o *JobQueryDto) HasJobIds() bool {
	if o != nil && !IsNil(o.JobIds) {
		return true
	}

	return false
}

// SetJobIds gets a reference to the given []string and assigns it to the JobIds field.
func (o *JobQueryDto) SetJobIds(v []string) {
	o.JobIds = v
}

// GetJobDefinitionId returns the JobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetJobDefinitionId() string {
	if o == nil || IsNil(o.JobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.JobDefinitionId.Get()
}

// GetJobDefinitionIdOk returns a tuple with the JobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDefinitionId.Get(), o.JobDefinitionId.IsSet()
}

// HasJobDefinitionId returns a boolean if a field has been set.
func (o *JobQueryDto) HasJobDefinitionId() bool {
	if o != nil && o.JobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetJobDefinitionId gets a reference to the given NullableString and assigns it to the JobDefinitionId field.
func (o *JobQueryDto) SetJobDefinitionId(v string) {
	o.JobDefinitionId.Set(&v)
}
// SetJobDefinitionIdNil sets the value for JobDefinitionId to be an explicit nil
func (o *JobQueryDto) SetJobDefinitionIdNil() {
	o.JobDefinitionId.Set(nil)
}

// UnsetJobDefinitionId ensures that no value is present for JobDefinitionId, not even an explicit nil
func (o *JobQueryDto) UnsetJobDefinitionId() {
	o.JobDefinitionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *JobQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *JobQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *JobQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *JobQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessInstanceIds returns the ProcessInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetProcessInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIds
}

// GetProcessInstanceIdsOk returns a tuple with the ProcessInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetProcessInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIds) {
		return nil, false
	}
	return o.ProcessInstanceIds, true
}

// HasProcessInstanceIds returns a boolean if a field has been set.
func (o *JobQueryDto) HasProcessInstanceIds() bool {
	if o != nil && !IsNil(o.ProcessInstanceIds) {
		return true
	}

	return false
}

// SetProcessInstanceIds gets a reference to the given []string and assigns it to the ProcessInstanceIds field.
func (o *JobQueryDto) SetProcessInstanceIds(v []string) {
	o.ProcessInstanceIds = v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *JobQueryDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *JobQueryDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *JobQueryDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *JobQueryDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *JobQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *JobQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *JobQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *JobQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *JobQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *JobQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *JobQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *JobQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *JobQueryDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *JobQueryDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *JobQueryDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *JobQueryDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetWithRetriesLeft returns the WithRetriesLeft field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetWithRetriesLeft() bool {
	if o == nil || IsNil(o.WithRetriesLeft.Get()) {
		var ret bool
		return ret
	}
	return *o.WithRetriesLeft.Get()
}

// GetWithRetriesLeftOk returns a tuple with the WithRetriesLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetWithRetriesLeftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithRetriesLeft.Get(), o.WithRetriesLeft.IsSet()
}

// HasWithRetriesLeft returns a boolean if a field has been set.
func (o *JobQueryDto) HasWithRetriesLeft() bool {
	if o != nil && o.WithRetriesLeft.IsSet() {
		return true
	}

	return false
}

// SetWithRetriesLeft gets a reference to the given NullableBool and assigns it to the WithRetriesLeft field.
func (o *JobQueryDto) SetWithRetriesLeft(v bool) {
	o.WithRetriesLeft.Set(&v)
}
// SetWithRetriesLeftNil sets the value for WithRetriesLeft to be an explicit nil
func (o *JobQueryDto) SetWithRetriesLeftNil() {
	o.WithRetriesLeft.Set(nil)
}

// UnsetWithRetriesLeft ensures that no value is present for WithRetriesLeft, not even an explicit nil
func (o *JobQueryDto) UnsetWithRetriesLeft() {
	o.WithRetriesLeft.Unset()
}

// GetExecutable returns the Executable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetExecutable() bool {
	if o == nil || IsNil(o.Executable.Get()) {
		var ret bool
		return ret
	}
	return *o.Executable.Get()
}

// GetExecutableOk returns a tuple with the Executable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetExecutableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Executable.Get(), o.Executable.IsSet()
}

// HasExecutable returns a boolean if a field has been set.
func (o *JobQueryDto) HasExecutable() bool {
	if o != nil && o.Executable.IsSet() {
		return true
	}

	return false
}

// SetExecutable gets a reference to the given NullableBool and assigns it to the Executable field.
func (o *JobQueryDto) SetExecutable(v bool) {
	o.Executable.Set(&v)
}
// SetExecutableNil sets the value for Executable to be an explicit nil
func (o *JobQueryDto) SetExecutableNil() {
	o.Executable.Set(nil)
}

// UnsetExecutable ensures that no value is present for Executable, not even an explicit nil
func (o *JobQueryDto) UnsetExecutable() {
	o.Executable.Unset()
}

// GetTimers returns the Timers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetTimers() bool {
	if o == nil || IsNil(o.Timers.Get()) {
		var ret bool
		return ret
	}
	return *o.Timers.Get()
}

// GetTimersOk returns a tuple with the Timers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetTimersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timers.Get(), o.Timers.IsSet()
}

// HasTimers returns a boolean if a field has been set.
func (o *JobQueryDto) HasTimers() bool {
	if o != nil && o.Timers.IsSet() {
		return true
	}

	return false
}

// SetTimers gets a reference to the given NullableBool and assigns it to the Timers field.
func (o *JobQueryDto) SetTimers(v bool) {
	o.Timers.Set(&v)
}
// SetTimersNil sets the value for Timers to be an explicit nil
func (o *JobQueryDto) SetTimersNil() {
	o.Timers.Set(nil)
}

// UnsetTimers ensures that no value is present for Timers, not even an explicit nil
func (o *JobQueryDto) UnsetTimers() {
	o.Timers.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetMessages() bool {
	if o == nil || IsNil(o.Messages.Get()) {
		var ret bool
		return ret
	}
	return *o.Messages.Get()
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetMessagesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages.Get(), o.Messages.IsSet()
}

// HasMessages returns a boolean if a field has been set.
func (o *JobQueryDto) HasMessages() bool {
	if o != nil && o.Messages.IsSet() {
		return true
	}

	return false
}

// SetMessages gets a reference to the given NullableBool and assigns it to the Messages field.
func (o *JobQueryDto) SetMessages(v bool) {
	o.Messages.Set(&v)
}
// SetMessagesNil sets the value for Messages to be an explicit nil
func (o *JobQueryDto) SetMessagesNil() {
	o.Messages.Set(nil)
}

// UnsetMessages ensures that no value is present for Messages, not even an explicit nil
func (o *JobQueryDto) UnsetMessages() {
	o.Messages.Unset()
}

// GetDueDates returns the DueDates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetDueDates() []JobConditionQueryParameterDto {
	if o == nil {
		var ret []JobConditionQueryParameterDto
		return ret
	}
	return o.DueDates
}

// GetDueDatesOk returns a tuple with the DueDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetDueDatesOk() ([]JobConditionQueryParameterDto, bool) {
	if o == nil || IsNil(o.DueDates) {
		return nil, false
	}
	return o.DueDates, true
}

// HasDueDates returns a boolean if a field has been set.
func (o *JobQueryDto) HasDueDates() bool {
	if o != nil && !IsNil(o.DueDates) {
		return true
	}

	return false
}

// SetDueDates gets a reference to the given []JobConditionQueryParameterDto and assigns it to the DueDates field.
func (o *JobQueryDto) SetDueDates(v []JobConditionQueryParameterDto) {
	o.DueDates = v
}

// GetCreateTimes returns the CreateTimes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetCreateTimes() []JobConditionQueryParameterDto {
	if o == nil {
		var ret []JobConditionQueryParameterDto
		return ret
	}
	return o.CreateTimes
}

// GetCreateTimesOk returns a tuple with the CreateTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetCreateTimesOk() ([]JobConditionQueryParameterDto, bool) {
	if o == nil || IsNil(o.CreateTimes) {
		return nil, false
	}
	return o.CreateTimes, true
}

// HasCreateTimes returns a boolean if a field has been set.
func (o *JobQueryDto) HasCreateTimes() bool {
	if o != nil && !IsNil(o.CreateTimes) {
		return true
	}

	return false
}

// SetCreateTimes gets a reference to the given []JobConditionQueryParameterDto and assigns it to the CreateTimes field.
func (o *JobQueryDto) SetCreateTimes(v []JobConditionQueryParameterDto) {
	o.CreateTimes = v
}

// GetWithException returns the WithException field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetWithException() bool {
	if o == nil || IsNil(o.WithException.Get()) {
		var ret bool
		return ret
	}
	return *o.WithException.Get()
}

// GetWithExceptionOk returns a tuple with the WithException field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetWithExceptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithException.Get(), o.WithException.IsSet()
}

// HasWithException returns a boolean if a field has been set.
func (o *JobQueryDto) HasWithException() bool {
	if o != nil && o.WithException.IsSet() {
		return true
	}

	return false
}

// SetWithException gets a reference to the given NullableBool and assigns it to the WithException field.
func (o *JobQueryDto) SetWithException(v bool) {
	o.WithException.Set(&v)
}
// SetWithExceptionNil sets the value for WithException to be an explicit nil
func (o *JobQueryDto) SetWithExceptionNil() {
	o.WithException.Set(nil)
}

// UnsetWithException ensures that no value is present for WithException, not even an explicit nil
func (o *JobQueryDto) UnsetWithException() {
	o.WithException.Unset()
}

// GetExceptionMessage returns the ExceptionMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetExceptionMessage() string {
	if o == nil || IsNil(o.ExceptionMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ExceptionMessage.Get()
}

// GetExceptionMessageOk returns a tuple with the ExceptionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetExceptionMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExceptionMessage.Get(), o.ExceptionMessage.IsSet()
}

// HasExceptionMessage returns a boolean if a field has been set.
func (o *JobQueryDto) HasExceptionMessage() bool {
	if o != nil && o.ExceptionMessage.IsSet() {
		return true
	}

	return false
}

// SetExceptionMessage gets a reference to the given NullableString and assigns it to the ExceptionMessage field.
func (o *JobQueryDto) SetExceptionMessage(v string) {
	o.ExceptionMessage.Set(&v)
}
// SetExceptionMessageNil sets the value for ExceptionMessage to be an explicit nil
func (o *JobQueryDto) SetExceptionMessageNil() {
	o.ExceptionMessage.Set(nil)
}

// UnsetExceptionMessage ensures that no value is present for ExceptionMessage, not even an explicit nil
func (o *JobQueryDto) UnsetExceptionMessage() {
	o.ExceptionMessage.Unset()
}

// GetFailedActivityId returns the FailedActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetFailedActivityId() string {
	if o == nil || IsNil(o.FailedActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.FailedActivityId.Get()
}

// GetFailedActivityIdOk returns a tuple with the FailedActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetFailedActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedActivityId.Get(), o.FailedActivityId.IsSet()
}

// HasFailedActivityId returns a boolean if a field has been set.
func (o *JobQueryDto) HasFailedActivityId() bool {
	if o != nil && o.FailedActivityId.IsSet() {
		return true
	}

	return false
}

// SetFailedActivityId gets a reference to the given NullableString and assigns it to the FailedActivityId field.
func (o *JobQueryDto) SetFailedActivityId(v string) {
	o.FailedActivityId.Set(&v)
}
// SetFailedActivityIdNil sets the value for FailedActivityId to be an explicit nil
func (o *JobQueryDto) SetFailedActivityIdNil() {
	o.FailedActivityId.Set(nil)
}

// UnsetFailedActivityId ensures that no value is present for FailedActivityId, not even an explicit nil
func (o *JobQueryDto) UnsetFailedActivityId() {
	o.FailedActivityId.Unset()
}

// GetNoRetriesLeft returns the NoRetriesLeft field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetNoRetriesLeft() bool {
	if o == nil || IsNil(o.NoRetriesLeft.Get()) {
		var ret bool
		return ret
	}
	return *o.NoRetriesLeft.Get()
}

// GetNoRetriesLeftOk returns a tuple with the NoRetriesLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetNoRetriesLeftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoRetriesLeft.Get(), o.NoRetriesLeft.IsSet()
}

// HasNoRetriesLeft returns a boolean if a field has been set.
func (o *JobQueryDto) HasNoRetriesLeft() bool {
	if o != nil && o.NoRetriesLeft.IsSet() {
		return true
	}

	return false
}

// SetNoRetriesLeft gets a reference to the given NullableBool and assigns it to the NoRetriesLeft field.
func (o *JobQueryDto) SetNoRetriesLeft(v bool) {
	o.NoRetriesLeft.Set(&v)
}
// SetNoRetriesLeftNil sets the value for NoRetriesLeft to be an explicit nil
func (o *JobQueryDto) SetNoRetriesLeftNil() {
	o.NoRetriesLeft.Set(nil)
}

// UnsetNoRetriesLeft ensures that no value is present for NoRetriesLeft, not even an explicit nil
func (o *JobQueryDto) UnsetNoRetriesLeft() {
	o.NoRetriesLeft.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *JobQueryDto) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *JobQueryDto) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *JobQueryDto) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *JobQueryDto) UnsetActive() {
	o.Active.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *JobQueryDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *JobQueryDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *JobQueryDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *JobQueryDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetPriorityLowerThanOrEquals returns the PriorityLowerThanOrEquals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetPriorityLowerThanOrEquals() int64 {
	if o == nil || IsNil(o.PriorityLowerThanOrEquals.Get()) {
		var ret int64
		return ret
	}
	return *o.PriorityLowerThanOrEquals.Get()
}

// GetPriorityLowerThanOrEqualsOk returns a tuple with the PriorityLowerThanOrEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetPriorityLowerThanOrEqualsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriorityLowerThanOrEquals.Get(), o.PriorityLowerThanOrEquals.IsSet()
}

// HasPriorityLowerThanOrEquals returns a boolean if a field has been set.
func (o *JobQueryDto) HasPriorityLowerThanOrEquals() bool {
	if o != nil && o.PriorityLowerThanOrEquals.IsSet() {
		return true
	}

	return false
}

// SetPriorityLowerThanOrEquals gets a reference to the given NullableInt64 and assigns it to the PriorityLowerThanOrEquals field.
func (o *JobQueryDto) SetPriorityLowerThanOrEquals(v int64) {
	o.PriorityLowerThanOrEquals.Set(&v)
}
// SetPriorityLowerThanOrEqualsNil sets the value for PriorityLowerThanOrEquals to be an explicit nil
func (o *JobQueryDto) SetPriorityLowerThanOrEqualsNil() {
	o.PriorityLowerThanOrEquals.Set(nil)
}

// UnsetPriorityLowerThanOrEquals ensures that no value is present for PriorityLowerThanOrEquals, not even an explicit nil
func (o *JobQueryDto) UnsetPriorityLowerThanOrEquals() {
	o.PriorityLowerThanOrEquals.Unset()
}

// GetPriorityHigherThanOrEquals returns the PriorityHigherThanOrEquals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetPriorityHigherThanOrEquals() int64 {
	if o == nil || IsNil(o.PriorityHigherThanOrEquals.Get()) {
		var ret int64
		return ret
	}
	return *o.PriorityHigherThanOrEquals.Get()
}

// GetPriorityHigherThanOrEqualsOk returns a tuple with the PriorityHigherThanOrEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetPriorityHigherThanOrEqualsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriorityHigherThanOrEquals.Get(), o.PriorityHigherThanOrEquals.IsSet()
}

// HasPriorityHigherThanOrEquals returns a boolean if a field has been set.
func (o *JobQueryDto) HasPriorityHigherThanOrEquals() bool {
	if o != nil && o.PriorityHigherThanOrEquals.IsSet() {
		return true
	}

	return false
}

// SetPriorityHigherThanOrEquals gets a reference to the given NullableInt64 and assigns it to the PriorityHigherThanOrEquals field.
func (o *JobQueryDto) SetPriorityHigherThanOrEquals(v int64) {
	o.PriorityHigherThanOrEquals.Set(&v)
}
// SetPriorityHigherThanOrEqualsNil sets the value for PriorityHigherThanOrEquals to be an explicit nil
func (o *JobQueryDto) SetPriorityHigherThanOrEqualsNil() {
	o.PriorityHigherThanOrEquals.Set(nil)
}

// UnsetPriorityHigherThanOrEquals ensures that no value is present for PriorityHigherThanOrEquals, not even an explicit nil
func (o *JobQueryDto) UnsetPriorityHigherThanOrEquals() {
	o.PriorityHigherThanOrEquals.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *JobQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *JobQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *JobQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *JobQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *JobQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *JobQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetIncludeJobsWithoutTenantId returns the IncludeJobsWithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetIncludeJobsWithoutTenantId() bool {
	if o == nil || IsNil(o.IncludeJobsWithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeJobsWithoutTenantId.Get()
}

// GetIncludeJobsWithoutTenantIdOk returns a tuple with the IncludeJobsWithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetIncludeJobsWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeJobsWithoutTenantId.Get(), o.IncludeJobsWithoutTenantId.IsSet()
}

// HasIncludeJobsWithoutTenantId returns a boolean if a field has been set.
func (o *JobQueryDto) HasIncludeJobsWithoutTenantId() bool {
	if o != nil && o.IncludeJobsWithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetIncludeJobsWithoutTenantId gets a reference to the given NullableBool and assigns it to the IncludeJobsWithoutTenantId field.
func (o *JobQueryDto) SetIncludeJobsWithoutTenantId(v bool) {
	o.IncludeJobsWithoutTenantId.Set(&v)
}
// SetIncludeJobsWithoutTenantIdNil sets the value for IncludeJobsWithoutTenantId to be an explicit nil
func (o *JobQueryDto) SetIncludeJobsWithoutTenantIdNil() {
	o.IncludeJobsWithoutTenantId.Set(nil)
}

// UnsetIncludeJobsWithoutTenantId ensures that no value is present for IncludeJobsWithoutTenantId, not even an explicit nil
func (o *JobQueryDto) UnsetIncludeJobsWithoutTenantId() {
	o.IncludeJobsWithoutTenantId.Unset()
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobQueryDto) GetSorting() []JobQueryDtoSortingInner {
	if o == nil {
		var ret []JobQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobQueryDto) GetSortingOk() ([]JobQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *JobQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []JobQueryDtoSortingInner and assigns it to the Sorting field.
func (o *JobQueryDto) SetSorting(v []JobQueryDtoSortingInner) {
	o.Sorting = v
}

func (o JobQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.JobIds != nil {
		toSerialize["jobIds"] = o.JobIds
	}
	if o.JobDefinitionId.IsSet() {
		toSerialize["jobDefinitionId"] = o.JobDefinitionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessInstanceIds != nil {
		toSerialize["processInstanceIds"] = o.ProcessInstanceIds
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.WithRetriesLeft.IsSet() {
		toSerialize["withRetriesLeft"] = o.WithRetriesLeft.Get()
	}
	if o.Executable.IsSet() {
		toSerialize["executable"] = o.Executable.Get()
	}
	if o.Timers.IsSet() {
		toSerialize["timers"] = o.Timers.Get()
	}
	if o.Messages.IsSet() {
		toSerialize["messages"] = o.Messages.Get()
	}
	if o.DueDates != nil {
		toSerialize["dueDates"] = o.DueDates
	}
	if o.CreateTimes != nil {
		toSerialize["createTimes"] = o.CreateTimes
	}
	if o.WithException.IsSet() {
		toSerialize["withException"] = o.WithException.Get()
	}
	if o.ExceptionMessage.IsSet() {
		toSerialize["exceptionMessage"] = o.ExceptionMessage.Get()
	}
	if o.FailedActivityId.IsSet() {
		toSerialize["failedActivityId"] = o.FailedActivityId.Get()
	}
	if o.NoRetriesLeft.IsSet() {
		toSerialize["noRetriesLeft"] = o.NoRetriesLeft.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.PriorityLowerThanOrEquals.IsSet() {
		toSerialize["priorityLowerThanOrEquals"] = o.PriorityLowerThanOrEquals.Get()
	}
	if o.PriorityHigherThanOrEquals.IsSet() {
		toSerialize["priorityHigherThanOrEquals"] = o.PriorityHigherThanOrEquals.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.IncludeJobsWithoutTenantId.IsSet() {
		toSerialize["includeJobsWithoutTenantId"] = o.IncludeJobsWithoutTenantId.Get()
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableJobQueryDto struct {
	value *JobQueryDto
	isSet bool
}

func (v NullableJobQueryDto) Get() *JobQueryDto {
	return v.value
}

func (v *NullableJobQueryDto) Set(val *JobQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobQueryDto(val *JobQueryDto) *NullableJobQueryDto {
	return &NullableJobQueryDto{value: val, isSet: true}
}

func (v NullableJobQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


