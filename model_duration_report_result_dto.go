/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the DurationReportResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DurationReportResultDto{}

// DurationReportResultDto struct for DurationReportResultDto
type DurationReportResultDto struct {
	// Specifies a timespan within a year. **Note:** The period must be interpreted in conjunction with the returned `periodUnit`.
	Period NullableInt32 `json:"period,omitempty"`
	// The unit of the given period. Possible values are `MONTH` and `QUARTER`.
	PeriodUnit NullableString `json:"periodUnit,omitempty"`
	// The smallest duration in milliseconds of all completed process instances which were started in the given period.
	Minimum NullableInt64 `json:"minimum,omitempty"`
	// The greatest duration in milliseconds of all completed process instances which were started in the given period.
	Maximum NullableInt64 `json:"maximum,omitempty"`
	// The average duration in milliseconds of all completed process instances which were started in the given period.
	Average NullableInt64 `json:"average,omitempty"`
}

// NewDurationReportResultDto instantiates a new DurationReportResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDurationReportResultDto() *DurationReportResultDto {
	this := DurationReportResultDto{}
	return &this
}

// NewDurationReportResultDtoWithDefaults instantiates a new DurationReportResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDurationReportResultDtoWithDefaults() *DurationReportResultDto {
	this := DurationReportResultDto{}
	return &this
}

// GetPeriod returns the Period field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DurationReportResultDto) GetPeriod() int32 {
	if o == nil || IsNil(o.Period.Get()) {
		var ret int32
		return ret
	}
	return *o.Period.Get()
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DurationReportResultDto) GetPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Period.Get(), o.Period.IsSet()
}

// HasPeriod returns a boolean if a field has been set.
func (o *DurationReportResultDto) HasPeriod() bool {
	if o != nil && o.Period.IsSet() {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given NullableInt32 and assigns it to the Period field.
func (o *DurationReportResultDto) SetPeriod(v int32) {
	o.Period.Set(&v)
}
// SetPeriodNil sets the value for Period to be an explicit nil
func (o *DurationReportResultDto) SetPeriodNil() {
	o.Period.Set(nil)
}

// UnsetPeriod ensures that no value is present for Period, not even an explicit nil
func (o *DurationReportResultDto) UnsetPeriod() {
	o.Period.Unset()
}

// GetPeriodUnit returns the PeriodUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DurationReportResultDto) GetPeriodUnit() string {
	if o == nil || IsNil(o.PeriodUnit.Get()) {
		var ret string
		return ret
	}
	return *o.PeriodUnit.Get()
}

// GetPeriodUnitOk returns a tuple with the PeriodUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DurationReportResultDto) GetPeriodUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PeriodUnit.Get(), o.PeriodUnit.IsSet()
}

// HasPeriodUnit returns a boolean if a field has been set.
func (o *DurationReportResultDto) HasPeriodUnit() bool {
	if o != nil && o.PeriodUnit.IsSet() {
		return true
	}

	return false
}

// SetPeriodUnit gets a reference to the given NullableString and assigns it to the PeriodUnit field.
func (o *DurationReportResultDto) SetPeriodUnit(v string) {
	o.PeriodUnit.Set(&v)
}
// SetPeriodUnitNil sets the value for PeriodUnit to be an explicit nil
func (o *DurationReportResultDto) SetPeriodUnitNil() {
	o.PeriodUnit.Set(nil)
}

// UnsetPeriodUnit ensures that no value is present for PeriodUnit, not even an explicit nil
func (o *DurationReportResultDto) UnsetPeriodUnit() {
	o.PeriodUnit.Unset()
}

// GetMinimum returns the Minimum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DurationReportResultDto) GetMinimum() int64 {
	if o == nil || IsNil(o.Minimum.Get()) {
		var ret int64
		return ret
	}
	return *o.Minimum.Get()
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DurationReportResultDto) GetMinimumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Minimum.Get(), o.Minimum.IsSet()
}

// HasMinimum returns a boolean if a field has been set.
func (o *DurationReportResultDto) HasMinimum() bool {
	if o != nil && o.Minimum.IsSet() {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given NullableInt64 and assigns it to the Minimum field.
func (o *DurationReportResultDto) SetMinimum(v int64) {
	o.Minimum.Set(&v)
}
// SetMinimumNil sets the value for Minimum to be an explicit nil
func (o *DurationReportResultDto) SetMinimumNil() {
	o.Minimum.Set(nil)
}

// UnsetMinimum ensures that no value is present for Minimum, not even an explicit nil
func (o *DurationReportResultDto) UnsetMinimum() {
	o.Minimum.Unset()
}

// GetMaximum returns the Maximum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DurationReportResultDto) GetMaximum() int64 {
	if o == nil || IsNil(o.Maximum.Get()) {
		var ret int64
		return ret
	}
	return *o.Maximum.Get()
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DurationReportResultDto) GetMaximumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Maximum.Get(), o.Maximum.IsSet()
}

// HasMaximum returns a boolean if a field has been set.
func (o *DurationReportResultDto) HasMaximum() bool {
	if o != nil && o.Maximum.IsSet() {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given NullableInt64 and assigns it to the Maximum field.
func (o *DurationReportResultDto) SetMaximum(v int64) {
	o.Maximum.Set(&v)
}
// SetMaximumNil sets the value for Maximum to be an explicit nil
func (o *DurationReportResultDto) SetMaximumNil() {
	o.Maximum.Set(nil)
}

// UnsetMaximum ensures that no value is present for Maximum, not even an explicit nil
func (o *DurationReportResultDto) UnsetMaximum() {
	o.Maximum.Unset()
}

// GetAverage returns the Average field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DurationReportResultDto) GetAverage() int64 {
	if o == nil || IsNil(o.Average.Get()) {
		var ret int64
		return ret
	}
	return *o.Average.Get()
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DurationReportResultDto) GetAverageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Average.Get(), o.Average.IsSet()
}

// HasAverage returns a boolean if a field has been set.
func (o *DurationReportResultDto) HasAverage() bool {
	if o != nil && o.Average.IsSet() {
		return true
	}

	return false
}

// SetAverage gets a reference to the given NullableInt64 and assigns it to the Average field.
func (o *DurationReportResultDto) SetAverage(v int64) {
	o.Average.Set(&v)
}
// SetAverageNil sets the value for Average to be an explicit nil
func (o *DurationReportResultDto) SetAverageNil() {
	o.Average.Set(nil)
}

// UnsetAverage ensures that no value is present for Average, not even an explicit nil
func (o *DurationReportResultDto) UnsetAverage() {
	o.Average.Unset()
}

func (o DurationReportResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DurationReportResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Period.IsSet() {
		toSerialize["period"] = o.Period.Get()
	}
	if o.PeriodUnit.IsSet() {
		toSerialize["periodUnit"] = o.PeriodUnit.Get()
	}
	if o.Minimum.IsSet() {
		toSerialize["minimum"] = o.Minimum.Get()
	}
	if o.Maximum.IsSet() {
		toSerialize["maximum"] = o.Maximum.Get()
	}
	if o.Average.IsSet() {
		toSerialize["average"] = o.Average.Get()
	}
	return toSerialize, nil
}

type NullableDurationReportResultDto struct {
	value *DurationReportResultDto
	isSet bool
}

func (v NullableDurationReportResultDto) Get() *DurationReportResultDto {
	return v.value
}

func (v *NullableDurationReportResultDto) Set(val *DurationReportResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationReportResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationReportResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationReportResultDto(val *DurationReportResultDto) *NullableDurationReportResultDto {
	return &NullableDurationReportResultDto{value: val, isSet: true}
}

func (v NullableDurationReportResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationReportResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


