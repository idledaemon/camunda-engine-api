/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ProcessInstanceModificationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessInstanceModificationDto{}

// ProcessInstanceModificationDto struct for ProcessInstanceModificationDto
type ProcessInstanceModificationDto struct {
	// Skip execution listener invocation for activities that are started or ended as part of this request.
	SkipCustomListeners NullableBool `json:"skipCustomListeners,omitempty"`
	// Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started or ended as part of this request.
	SkipIoMappings NullableBool `json:"skipIoMappings,omitempty"`
	// JSON array of modification instructions. The instructions are executed in the order they are in.
	Instructions []ProcessInstanceModificationInstructionDto `json:"instructions,omitempty"`
	// An arbitrary text annotation set by a user for auditing reasons.
	Annotation NullableString `json:"annotation,omitempty"`
}

// NewProcessInstanceModificationDto instantiates a new ProcessInstanceModificationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessInstanceModificationDto() *ProcessInstanceModificationDto {
	this := ProcessInstanceModificationDto{}
	return &this
}

// NewProcessInstanceModificationDtoWithDefaults instantiates a new ProcessInstanceModificationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessInstanceModificationDtoWithDefaults() *ProcessInstanceModificationDto {
	this := ProcessInstanceModificationDto{}
	return &this
}

// GetSkipCustomListeners returns the SkipCustomListeners field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationDto) GetSkipCustomListeners() bool {
	if o == nil || IsNil(o.SkipCustomListeners.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipCustomListeners.Get()
}

// GetSkipCustomListenersOk returns a tuple with the SkipCustomListeners field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationDto) GetSkipCustomListenersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipCustomListeners.Get(), o.SkipCustomListeners.IsSet()
}

// HasSkipCustomListeners returns a boolean if a field has been set.
func (o *ProcessInstanceModificationDto) HasSkipCustomListeners() bool {
	if o != nil && o.SkipCustomListeners.IsSet() {
		return true
	}

	return false
}

// SetSkipCustomListeners gets a reference to the given NullableBool and assigns it to the SkipCustomListeners field.
func (o *ProcessInstanceModificationDto) SetSkipCustomListeners(v bool) {
	o.SkipCustomListeners.Set(&v)
}
// SetSkipCustomListenersNil sets the value for SkipCustomListeners to be an explicit nil
func (o *ProcessInstanceModificationDto) SetSkipCustomListenersNil() {
	o.SkipCustomListeners.Set(nil)
}

// UnsetSkipCustomListeners ensures that no value is present for SkipCustomListeners, not even an explicit nil
func (o *ProcessInstanceModificationDto) UnsetSkipCustomListeners() {
	o.SkipCustomListeners.Unset()
}

// GetSkipIoMappings returns the SkipIoMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationDto) GetSkipIoMappings() bool {
	if o == nil || IsNil(o.SkipIoMappings.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipIoMappings.Get()
}

// GetSkipIoMappingsOk returns a tuple with the SkipIoMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationDto) GetSkipIoMappingsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipIoMappings.Get(), o.SkipIoMappings.IsSet()
}

// HasSkipIoMappings returns a boolean if a field has been set.
func (o *ProcessInstanceModificationDto) HasSkipIoMappings() bool {
	if o != nil && o.SkipIoMappings.IsSet() {
		return true
	}

	return false
}

// SetSkipIoMappings gets a reference to the given NullableBool and assigns it to the SkipIoMappings field.
func (o *ProcessInstanceModificationDto) SetSkipIoMappings(v bool) {
	o.SkipIoMappings.Set(&v)
}
// SetSkipIoMappingsNil sets the value for SkipIoMappings to be an explicit nil
func (o *ProcessInstanceModificationDto) SetSkipIoMappingsNil() {
	o.SkipIoMappings.Set(nil)
}

// UnsetSkipIoMappings ensures that no value is present for SkipIoMappings, not even an explicit nil
func (o *ProcessInstanceModificationDto) UnsetSkipIoMappings() {
	o.SkipIoMappings.Unset()
}

// GetInstructions returns the Instructions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationDto) GetInstructions() []ProcessInstanceModificationInstructionDto {
	if o == nil {
		var ret []ProcessInstanceModificationInstructionDto
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationDto) GetInstructionsOk() ([]ProcessInstanceModificationInstructionDto, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *ProcessInstanceModificationDto) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []ProcessInstanceModificationInstructionDto and assigns it to the Instructions field.
func (o *ProcessInstanceModificationDto) SetInstructions(v []ProcessInstanceModificationInstructionDto) {
	o.Instructions = v
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationDto) GetAnnotation() string {
	if o == nil || IsNil(o.Annotation.Get()) {
		var ret string
		return ret
	}
	return *o.Annotation.Get()
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationDto) GetAnnotationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Annotation.Get(), o.Annotation.IsSet()
}

// HasAnnotation returns a boolean if a field has been set.
func (o *ProcessInstanceModificationDto) HasAnnotation() bool {
	if o != nil && o.Annotation.IsSet() {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given NullableString and assigns it to the Annotation field.
func (o *ProcessInstanceModificationDto) SetAnnotation(v string) {
	o.Annotation.Set(&v)
}
// SetAnnotationNil sets the value for Annotation to be an explicit nil
func (o *ProcessInstanceModificationDto) SetAnnotationNil() {
	o.Annotation.Set(nil)
}

// UnsetAnnotation ensures that no value is present for Annotation, not even an explicit nil
func (o *ProcessInstanceModificationDto) UnsetAnnotation() {
	o.Annotation.Unset()
}

func (o ProcessInstanceModificationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessInstanceModificationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SkipCustomListeners.IsSet() {
		toSerialize["skipCustomListeners"] = o.SkipCustomListeners.Get()
	}
	if o.SkipIoMappings.IsSet() {
		toSerialize["skipIoMappings"] = o.SkipIoMappings.Get()
	}
	if o.Instructions != nil {
		toSerialize["instructions"] = o.Instructions
	}
	if o.Annotation.IsSet() {
		toSerialize["annotation"] = o.Annotation.Get()
	}
	return toSerialize, nil
}

type NullableProcessInstanceModificationDto struct {
	value *ProcessInstanceModificationDto
	isSet bool
}

func (v NullableProcessInstanceModificationDto) Get() *ProcessInstanceModificationDto {
	return v.value
}

func (v *NullableProcessInstanceModificationDto) Set(val *ProcessInstanceModificationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessInstanceModificationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessInstanceModificationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessInstanceModificationDto(val *ProcessInstanceModificationDto) *NullableProcessInstanceModificationDto {
	return &NullableProcessInstanceModificationDto{value: val, isSet: true}
}

func (v NullableProcessInstanceModificationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessInstanceModificationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


