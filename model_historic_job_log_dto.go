/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricJobLogDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricJobLogDto{}

// HistoricJobLogDto struct for HistoricJobLogDto
type HistoricJobLogDto struct {
	// The id of the log entry.
	Id NullableString `json:"id,omitempty"`
	// The time when the log entry has been written.
	Timestamp NullableTime `json:"timestamp,omitempty"`
	// The time after which the log entry should be removed by the History Cleanup job. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further info see the [docs](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/)
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The id of the associated job.
	JobId NullableString `json:"jobId,omitempty"`
	// The date on which the associated job is supposed to be processed.
	JobDueDate NullableTime `json:"jobDueDate,omitempty"`
	// The number of retries the associated job has left.
	JobRetries NullableInt32 `json:"jobRetries,omitempty"`
	// The execution priority the job had when the log entry was created.
	JobPriority NullableInt64 `json:"jobPriority,omitempty"`
	// The message of the exception that occurred by executing the associated job.
	JobExceptionMessage NullableString `json:"jobExceptionMessage,omitempty"`
	// The id of the activity on which the last exception occurred by executing the associated job.
	FailedActivityId NullableString `json:"failedActivityId,omitempty"`
	// The id of the job definition on which the associated job was created.
	JobDefinitionId NullableString `json:"jobDefinitionId,omitempty"`
	// The job definition type of the associated job. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types.
	JobDefinitionType NullableString `json:"jobDefinitionType,omitempty"`
	// The job definition configuration type of the associated job.
	JobDefinitionConfiguration NullableString `json:"jobDefinitionConfiguration,omitempty"`
	// The id of the activity on which the associated job was created.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The execution id on which the associated job was created.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// The id of the process instance on which the associated job was created.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the process definition which the associated job belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The key of the process definition which the associated job belongs to.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The id of the deployment which the associated job belongs to.
	DeploymentId NullableString `json:"deploymentId,omitempty"`
	// The process instance id of the root process instance that initiated the process which the associated job belongs to.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
	// The id of the tenant that this historic job log entry belongs to.
	TenantId NullableString `json:"tenantId,omitempty"`
	//  The name of the host of the Process Engine where the job of this historic job log entry was executed.
	Hostname NullableString `json:"hostname,omitempty"`
	// A flag indicating whether this log represents the creation of the associated job.
	CreationLog NullableBool `json:"creationLog,omitempty"`
	// A flag indicating whether this log represents the failed execution of the associated job.
	FailureLog NullableBool `json:"failureLog,omitempty"`
	// A flag indicating whether this log represents the successful execution of the associated job.
	SuccessLog NullableBool `json:"successLog,omitempty"`
	// A flag indicating whether this log represents the deletion of the associated job.
	DeletionLog NullableBool `json:"deletionLog,omitempty"`
}

// NewHistoricJobLogDto instantiates a new HistoricJobLogDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricJobLogDto() *HistoricJobLogDto {
	this := HistoricJobLogDto{}
	return &this
}

// NewHistoricJobLogDtoWithDefaults instantiates a new HistoricJobLogDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricJobLogDtoWithDefaults() *HistoricJobLogDto {
	this := HistoricJobLogDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricJobLogDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricJobLogDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricJobLogDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *HistoricJobLogDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *HistoricJobLogDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *HistoricJobLogDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricJobLogDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricJobLogDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricJobLogDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobId() string {
	if o == nil || IsNil(o.JobId.Get()) {
		var ret string
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableString and assigns it to the JobId field.
func (o *HistoricJobLogDto) SetJobId(v string) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *HistoricJobLogDto) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobId() {
	o.JobId.Unset()
}

// GetJobDueDate returns the JobDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobDueDate() time.Time {
	if o == nil || IsNil(o.JobDueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.JobDueDate.Get()
}

// GetJobDueDateOk returns a tuple with the JobDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDueDate.Get(), o.JobDueDate.IsSet()
}

// HasJobDueDate returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobDueDate() bool {
	if o != nil && o.JobDueDate.IsSet() {
		return true
	}

	return false
}

// SetJobDueDate gets a reference to the given NullableTime and assigns it to the JobDueDate field.
func (o *HistoricJobLogDto) SetJobDueDate(v time.Time) {
	o.JobDueDate.Set(&v)
}
// SetJobDueDateNil sets the value for JobDueDate to be an explicit nil
func (o *HistoricJobLogDto) SetJobDueDateNil() {
	o.JobDueDate.Set(nil)
}

// UnsetJobDueDate ensures that no value is present for JobDueDate, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobDueDate() {
	o.JobDueDate.Unset()
}

// GetJobRetries returns the JobRetries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobRetries() int32 {
	if o == nil || IsNil(o.JobRetries.Get()) {
		var ret int32
		return ret
	}
	return *o.JobRetries.Get()
}

// GetJobRetriesOk returns a tuple with the JobRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobRetries.Get(), o.JobRetries.IsSet()
}

// HasJobRetries returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobRetries() bool {
	if o != nil && o.JobRetries.IsSet() {
		return true
	}

	return false
}

// SetJobRetries gets a reference to the given NullableInt32 and assigns it to the JobRetries field.
func (o *HistoricJobLogDto) SetJobRetries(v int32) {
	o.JobRetries.Set(&v)
}
// SetJobRetriesNil sets the value for JobRetries to be an explicit nil
func (o *HistoricJobLogDto) SetJobRetriesNil() {
	o.JobRetries.Set(nil)
}

// UnsetJobRetries ensures that no value is present for JobRetries, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobRetries() {
	o.JobRetries.Unset()
}

// GetJobPriority returns the JobPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobPriority() int64 {
	if o == nil || IsNil(o.JobPriority.Get()) {
		var ret int64
		return ret
	}
	return *o.JobPriority.Get()
}

// GetJobPriorityOk returns a tuple with the JobPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobPriorityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobPriority.Get(), o.JobPriority.IsSet()
}

// HasJobPriority returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobPriority() bool {
	if o != nil && o.JobPriority.IsSet() {
		return true
	}

	return false
}

// SetJobPriority gets a reference to the given NullableInt64 and assigns it to the JobPriority field.
func (o *HistoricJobLogDto) SetJobPriority(v int64) {
	o.JobPriority.Set(&v)
}
// SetJobPriorityNil sets the value for JobPriority to be an explicit nil
func (o *HistoricJobLogDto) SetJobPriorityNil() {
	o.JobPriority.Set(nil)
}

// UnsetJobPriority ensures that no value is present for JobPriority, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobPriority() {
	o.JobPriority.Unset()
}

// GetJobExceptionMessage returns the JobExceptionMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobExceptionMessage() string {
	if o == nil || IsNil(o.JobExceptionMessage.Get()) {
		var ret string
		return ret
	}
	return *o.JobExceptionMessage.Get()
}

// GetJobExceptionMessageOk returns a tuple with the JobExceptionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobExceptionMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobExceptionMessage.Get(), o.JobExceptionMessage.IsSet()
}

// HasJobExceptionMessage returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobExceptionMessage() bool {
	if o != nil && o.JobExceptionMessage.IsSet() {
		return true
	}

	return false
}

// SetJobExceptionMessage gets a reference to the given NullableString and assigns it to the JobExceptionMessage field.
func (o *HistoricJobLogDto) SetJobExceptionMessage(v string) {
	o.JobExceptionMessage.Set(&v)
}
// SetJobExceptionMessageNil sets the value for JobExceptionMessage to be an explicit nil
func (o *HistoricJobLogDto) SetJobExceptionMessageNil() {
	o.JobExceptionMessage.Set(nil)
}

// UnsetJobExceptionMessage ensures that no value is present for JobExceptionMessage, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobExceptionMessage() {
	o.JobExceptionMessage.Unset()
}

// GetFailedActivityId returns the FailedActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetFailedActivityId() string {
	if o == nil || IsNil(o.FailedActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.FailedActivityId.Get()
}

// GetFailedActivityIdOk returns a tuple with the FailedActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetFailedActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedActivityId.Get(), o.FailedActivityId.IsSet()
}

// HasFailedActivityId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasFailedActivityId() bool {
	if o != nil && o.FailedActivityId.IsSet() {
		return true
	}

	return false
}

// SetFailedActivityId gets a reference to the given NullableString and assigns it to the FailedActivityId field.
func (o *HistoricJobLogDto) SetFailedActivityId(v string) {
	o.FailedActivityId.Set(&v)
}
// SetFailedActivityIdNil sets the value for FailedActivityId to be an explicit nil
func (o *HistoricJobLogDto) SetFailedActivityIdNil() {
	o.FailedActivityId.Set(nil)
}

// UnsetFailedActivityId ensures that no value is present for FailedActivityId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetFailedActivityId() {
	o.FailedActivityId.Unset()
}

// GetJobDefinitionId returns the JobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobDefinitionId() string {
	if o == nil || IsNil(o.JobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.JobDefinitionId.Get()
}

// GetJobDefinitionIdOk returns a tuple with the JobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDefinitionId.Get(), o.JobDefinitionId.IsSet()
}

// HasJobDefinitionId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobDefinitionId() bool {
	if o != nil && o.JobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetJobDefinitionId gets a reference to the given NullableString and assigns it to the JobDefinitionId field.
func (o *HistoricJobLogDto) SetJobDefinitionId(v string) {
	o.JobDefinitionId.Set(&v)
}
// SetJobDefinitionIdNil sets the value for JobDefinitionId to be an explicit nil
func (o *HistoricJobLogDto) SetJobDefinitionIdNil() {
	o.JobDefinitionId.Set(nil)
}

// UnsetJobDefinitionId ensures that no value is present for JobDefinitionId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobDefinitionId() {
	o.JobDefinitionId.Unset()
}

// GetJobDefinitionType returns the JobDefinitionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobDefinitionType() string {
	if o == nil || IsNil(o.JobDefinitionType.Get()) {
		var ret string
		return ret
	}
	return *o.JobDefinitionType.Get()
}

// GetJobDefinitionTypeOk returns a tuple with the JobDefinitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobDefinitionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDefinitionType.Get(), o.JobDefinitionType.IsSet()
}

// HasJobDefinitionType returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobDefinitionType() bool {
	if o != nil && o.JobDefinitionType.IsSet() {
		return true
	}

	return false
}

// SetJobDefinitionType gets a reference to the given NullableString and assigns it to the JobDefinitionType field.
func (o *HistoricJobLogDto) SetJobDefinitionType(v string) {
	o.JobDefinitionType.Set(&v)
}
// SetJobDefinitionTypeNil sets the value for JobDefinitionType to be an explicit nil
func (o *HistoricJobLogDto) SetJobDefinitionTypeNil() {
	o.JobDefinitionType.Set(nil)
}

// UnsetJobDefinitionType ensures that no value is present for JobDefinitionType, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobDefinitionType() {
	o.JobDefinitionType.Unset()
}

// GetJobDefinitionConfiguration returns the JobDefinitionConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetJobDefinitionConfiguration() string {
	if o == nil || IsNil(o.JobDefinitionConfiguration.Get()) {
		var ret string
		return ret
	}
	return *o.JobDefinitionConfiguration.Get()
}

// GetJobDefinitionConfigurationOk returns a tuple with the JobDefinitionConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetJobDefinitionConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDefinitionConfiguration.Get(), o.JobDefinitionConfiguration.IsSet()
}

// HasJobDefinitionConfiguration returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasJobDefinitionConfiguration() bool {
	if o != nil && o.JobDefinitionConfiguration.IsSet() {
		return true
	}

	return false
}

// SetJobDefinitionConfiguration gets a reference to the given NullableString and assigns it to the JobDefinitionConfiguration field.
func (o *HistoricJobLogDto) SetJobDefinitionConfiguration(v string) {
	o.JobDefinitionConfiguration.Set(&v)
}
// SetJobDefinitionConfigurationNil sets the value for JobDefinitionConfiguration to be an explicit nil
func (o *HistoricJobLogDto) SetJobDefinitionConfigurationNil() {
	o.JobDefinitionConfiguration.Set(nil)
}

// UnsetJobDefinitionConfiguration ensures that no value is present for JobDefinitionConfiguration, not even an explicit nil
func (o *HistoricJobLogDto) UnsetJobDefinitionConfiguration() {
	o.JobDefinitionConfiguration.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *HistoricJobLogDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *HistoricJobLogDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricJobLogDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricJobLogDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricJobLogDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricJobLogDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricJobLogDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricJobLogDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricJobLogDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricJobLogDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricJobLogDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *HistoricJobLogDto) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *HistoricJobLogDto) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricJobLogDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricJobLogDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *HistoricJobLogDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *HistoricJobLogDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *HistoricJobLogDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetHostname returns the Hostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetHostname() string {
	if o == nil || IsNil(o.Hostname.Get()) {
		var ret string
		return ret
	}
	return *o.Hostname.Get()
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hostname.Get(), o.Hostname.IsSet()
}

// HasHostname returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasHostname() bool {
	if o != nil && o.Hostname.IsSet() {
		return true
	}

	return false
}

// SetHostname gets a reference to the given NullableString and assigns it to the Hostname field.
func (o *HistoricJobLogDto) SetHostname(v string) {
	o.Hostname.Set(&v)
}
// SetHostnameNil sets the value for Hostname to be an explicit nil
func (o *HistoricJobLogDto) SetHostnameNil() {
	o.Hostname.Set(nil)
}

// UnsetHostname ensures that no value is present for Hostname, not even an explicit nil
func (o *HistoricJobLogDto) UnsetHostname() {
	o.Hostname.Unset()
}

// GetCreationLog returns the CreationLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetCreationLog() bool {
	if o == nil || IsNil(o.CreationLog.Get()) {
		var ret bool
		return ret
	}
	return *o.CreationLog.Get()
}

// GetCreationLogOk returns a tuple with the CreationLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetCreationLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationLog.Get(), o.CreationLog.IsSet()
}

// HasCreationLog returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasCreationLog() bool {
	if o != nil && o.CreationLog.IsSet() {
		return true
	}

	return false
}

// SetCreationLog gets a reference to the given NullableBool and assigns it to the CreationLog field.
func (o *HistoricJobLogDto) SetCreationLog(v bool) {
	o.CreationLog.Set(&v)
}
// SetCreationLogNil sets the value for CreationLog to be an explicit nil
func (o *HistoricJobLogDto) SetCreationLogNil() {
	o.CreationLog.Set(nil)
}

// UnsetCreationLog ensures that no value is present for CreationLog, not even an explicit nil
func (o *HistoricJobLogDto) UnsetCreationLog() {
	o.CreationLog.Unset()
}

// GetFailureLog returns the FailureLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetFailureLog() bool {
	if o == nil || IsNil(o.FailureLog.Get()) {
		var ret bool
		return ret
	}
	return *o.FailureLog.Get()
}

// GetFailureLogOk returns a tuple with the FailureLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetFailureLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureLog.Get(), o.FailureLog.IsSet()
}

// HasFailureLog returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasFailureLog() bool {
	if o != nil && o.FailureLog.IsSet() {
		return true
	}

	return false
}

// SetFailureLog gets a reference to the given NullableBool and assigns it to the FailureLog field.
func (o *HistoricJobLogDto) SetFailureLog(v bool) {
	o.FailureLog.Set(&v)
}
// SetFailureLogNil sets the value for FailureLog to be an explicit nil
func (o *HistoricJobLogDto) SetFailureLogNil() {
	o.FailureLog.Set(nil)
}

// UnsetFailureLog ensures that no value is present for FailureLog, not even an explicit nil
func (o *HistoricJobLogDto) UnsetFailureLog() {
	o.FailureLog.Unset()
}

// GetSuccessLog returns the SuccessLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetSuccessLog() bool {
	if o == nil || IsNil(o.SuccessLog.Get()) {
		var ret bool
		return ret
	}
	return *o.SuccessLog.Get()
}

// GetSuccessLogOk returns a tuple with the SuccessLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetSuccessLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuccessLog.Get(), o.SuccessLog.IsSet()
}

// HasSuccessLog returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasSuccessLog() bool {
	if o != nil && o.SuccessLog.IsSet() {
		return true
	}

	return false
}

// SetSuccessLog gets a reference to the given NullableBool and assigns it to the SuccessLog field.
func (o *HistoricJobLogDto) SetSuccessLog(v bool) {
	o.SuccessLog.Set(&v)
}
// SetSuccessLogNil sets the value for SuccessLog to be an explicit nil
func (o *HistoricJobLogDto) SetSuccessLogNil() {
	o.SuccessLog.Set(nil)
}

// UnsetSuccessLog ensures that no value is present for SuccessLog, not even an explicit nil
func (o *HistoricJobLogDto) UnsetSuccessLog() {
	o.SuccessLog.Unset()
}

// GetDeletionLog returns the DeletionLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricJobLogDto) GetDeletionLog() bool {
	if o == nil || IsNil(o.DeletionLog.Get()) {
		var ret bool
		return ret
	}
	return *o.DeletionLog.Get()
}

// GetDeletionLogOk returns a tuple with the DeletionLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricJobLogDto) GetDeletionLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletionLog.Get(), o.DeletionLog.IsSet()
}

// HasDeletionLog returns a boolean if a field has been set.
func (o *HistoricJobLogDto) HasDeletionLog() bool {
	if o != nil && o.DeletionLog.IsSet() {
		return true
	}

	return false
}

// SetDeletionLog gets a reference to the given NullableBool and assigns it to the DeletionLog field.
func (o *HistoricJobLogDto) SetDeletionLog(v bool) {
	o.DeletionLog.Set(&v)
}
// SetDeletionLogNil sets the value for DeletionLog to be an explicit nil
func (o *HistoricJobLogDto) SetDeletionLogNil() {
	o.DeletionLog.Set(nil)
}

// UnsetDeletionLog ensures that no value is present for DeletionLog, not even an explicit nil
func (o *HistoricJobLogDto) UnsetDeletionLog() {
	o.DeletionLog.Unset()
}

func (o HistoricJobLogDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricJobLogDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.JobDueDate.IsSet() {
		toSerialize["jobDueDate"] = o.JobDueDate.Get()
	}
	if o.JobRetries.IsSet() {
		toSerialize["jobRetries"] = o.JobRetries.Get()
	}
	if o.JobPriority.IsSet() {
		toSerialize["jobPriority"] = o.JobPriority.Get()
	}
	if o.JobExceptionMessage.IsSet() {
		toSerialize["jobExceptionMessage"] = o.JobExceptionMessage.Get()
	}
	if o.FailedActivityId.IsSet() {
		toSerialize["failedActivityId"] = o.FailedActivityId.Get()
	}
	if o.JobDefinitionId.IsSet() {
		toSerialize["jobDefinitionId"] = o.JobDefinitionId.Get()
	}
	if o.JobDefinitionType.IsSet() {
		toSerialize["jobDefinitionType"] = o.JobDefinitionType.Get()
	}
	if o.JobDefinitionConfiguration.IsSet() {
		toSerialize["jobDefinitionConfiguration"] = o.JobDefinitionConfiguration.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Hostname.IsSet() {
		toSerialize["hostname"] = o.Hostname.Get()
	}
	if o.CreationLog.IsSet() {
		toSerialize["creationLog"] = o.CreationLog.Get()
	}
	if o.FailureLog.IsSet() {
		toSerialize["failureLog"] = o.FailureLog.Get()
	}
	if o.SuccessLog.IsSet() {
		toSerialize["successLog"] = o.SuccessLog.Get()
	}
	if o.DeletionLog.IsSet() {
		toSerialize["deletionLog"] = o.DeletionLog.Get()
	}
	return toSerialize, nil
}

type NullableHistoricJobLogDto struct {
	value *HistoricJobLogDto
	isSet bool
}

func (v NullableHistoricJobLogDto) Get() *HistoricJobLogDto {
	return v.value
}

func (v *NullableHistoricJobLogDto) Set(val *HistoricJobLogDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricJobLogDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricJobLogDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricJobLogDto(val *HistoricJobLogDto) *NullableHistoricJobLogDto {
	return &NullableHistoricJobLogDto{value: val, isSet: true}
}

func (v NullableHistoricJobLogDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricJobLogDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


