/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the UserOperationLogEntryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserOperationLogEntryDto{}

// UserOperationLogEntryDto struct for UserOperationLogEntryDto
type UserOperationLogEntryDto struct {
	// The unique identifier of this log entry.
	Id NullableString `json:"id,omitempty"`
	// The user who performed this operation.
	UserId NullableString `json:"userId,omitempty"`
	// Timestamp of this operation.
	Timestamp NullableTime `json:"timestamp,omitempty"`
	// The unique identifier of this operation. A composite operation that changes multiple properties has a common `operationId`.
	OperationId NullableString `json:"operationId,omitempty"`
	// The type of this operation, e.g., `Assign`, `Claim` and so on.
	OperationType NullableString `json:"operationType,omitempty"`
	// The type of the entity on which this operation was executed, e.g., `Task` or `Attachment`.
	EntityType NullableString `json:"entityType,omitempty"`
	// The name of the category this operation was associated with, e.g., `TaskWorker` or `Admin`.
	Category NullableString `json:"category,omitempty"`
	// An arbitrary annotation set by a user for auditing reasons.
	Annotation NullableString `json:"annotation,omitempty"`
	// The property changed by this operation.
	Property NullableString `json:"property,omitempty"`
	// The original value of the changed property.
	OrgValue NullableString `json:"orgValue,omitempty"`
	// The new value of the changed property.
	NewValue NullableString `json:"newValue,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this deployment.
	DeploymentId NullableString `json:"deploymentId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this process definition.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to process definitions with this key.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this process instance.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this execution.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this case definition.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this case instance.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this case execution.
	CaseExecutionId NullableString `json:"caseExecutionId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this task.
	TaskId NullableString `json:"taskId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this external task.
	ExternalTaskId NullableString `json:"externalTaskId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this batch.
	BatchId NullableString `json:"batchId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this job.
	JobId NullableString `json:"jobId,omitempty"`
	// If not `null`, the operation is restricted to entities in relation to this job definition.
	JobDefinitionId NullableString `json:"jobDefinitionId,omitempty"`
	// The time after which the entry should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The process instance id of the root process instance that initiated the process containing this entry.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
}

// NewUserOperationLogEntryDto instantiates a new UserOperationLogEntryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserOperationLogEntryDto() *UserOperationLogEntryDto {
	this := UserOperationLogEntryDto{}
	return &this
}

// NewUserOperationLogEntryDtoWithDefaults instantiates a new UserOperationLogEntryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserOperationLogEntryDtoWithDefaults() *UserOperationLogEntryDto {
	this := UserOperationLogEntryDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UserOperationLogEntryDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UserOperationLogEntryDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetId() {
	o.Id.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *UserOperationLogEntryDto) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *UserOperationLogEntryDto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetUserId() {
	o.UserId.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *UserOperationLogEntryDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UserOperationLogEntryDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetOperationId returns the OperationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetOperationId() string {
	if o == nil || IsNil(o.OperationId.Get()) {
		var ret string
		return ret
	}
	return *o.OperationId.Get()
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetOperationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationId.Get(), o.OperationId.IsSet()
}

// HasOperationId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasOperationId() bool {
	if o != nil && o.OperationId.IsSet() {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given NullableString and assigns it to the OperationId field.
func (o *UserOperationLogEntryDto) SetOperationId(v string) {
	o.OperationId.Set(&v)
}
// SetOperationIdNil sets the value for OperationId to be an explicit nil
func (o *UserOperationLogEntryDto) SetOperationIdNil() {
	o.OperationId.Set(nil)
}

// UnsetOperationId ensures that no value is present for OperationId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetOperationId() {
	o.OperationId.Unset()
}

// GetOperationType returns the OperationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetOperationType() string {
	if o == nil || IsNil(o.OperationType.Get()) {
		var ret string
		return ret
	}
	return *o.OperationType.Get()
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationType.Get(), o.OperationType.IsSet()
}

// HasOperationType returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasOperationType() bool {
	if o != nil && o.OperationType.IsSet() {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given NullableString and assigns it to the OperationType field.
func (o *UserOperationLogEntryDto) SetOperationType(v string) {
	o.OperationType.Set(&v)
}
// SetOperationTypeNil sets the value for OperationType to be an explicit nil
func (o *UserOperationLogEntryDto) SetOperationTypeNil() {
	o.OperationType.Set(nil)
}

// UnsetOperationType ensures that no value is present for OperationType, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetOperationType() {
	o.OperationType.Unset()
}

// GetEntityType returns the EntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetEntityType() string {
	if o == nil || IsNil(o.EntityType.Get()) {
		var ret string
		return ret
	}
	return *o.EntityType.Get()
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityType.Get(), o.EntityType.IsSet()
}

// HasEntityType returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasEntityType() bool {
	if o != nil && o.EntityType.IsSet() {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given NullableString and assigns it to the EntityType field.
func (o *UserOperationLogEntryDto) SetEntityType(v string) {
	o.EntityType.Set(&v)
}
// SetEntityTypeNil sets the value for EntityType to be an explicit nil
func (o *UserOperationLogEntryDto) SetEntityTypeNil() {
	o.EntityType.Set(nil)
}

// UnsetEntityType ensures that no value is present for EntityType, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetEntityType() {
	o.EntityType.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *UserOperationLogEntryDto) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *UserOperationLogEntryDto) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetCategory() {
	o.Category.Unset()
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetAnnotation() string {
	if o == nil || IsNil(o.Annotation.Get()) {
		var ret string
		return ret
	}
	return *o.Annotation.Get()
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetAnnotationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Annotation.Get(), o.Annotation.IsSet()
}

// HasAnnotation returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasAnnotation() bool {
	if o != nil && o.Annotation.IsSet() {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given NullableString and assigns it to the Annotation field.
func (o *UserOperationLogEntryDto) SetAnnotation(v string) {
	o.Annotation.Set(&v)
}
// SetAnnotationNil sets the value for Annotation to be an explicit nil
func (o *UserOperationLogEntryDto) SetAnnotationNil() {
	o.Annotation.Set(nil)
}

// UnsetAnnotation ensures that no value is present for Annotation, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetAnnotation() {
	o.Annotation.Unset()
}

// GetProperty returns the Property field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetProperty() string {
	if o == nil || IsNil(o.Property.Get()) {
		var ret string
		return ret
	}
	return *o.Property.Get()
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Property.Get(), o.Property.IsSet()
}

// HasProperty returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasProperty() bool {
	if o != nil && o.Property.IsSet() {
		return true
	}

	return false
}

// SetProperty gets a reference to the given NullableString and assigns it to the Property field.
func (o *UserOperationLogEntryDto) SetProperty(v string) {
	o.Property.Set(&v)
}
// SetPropertyNil sets the value for Property to be an explicit nil
func (o *UserOperationLogEntryDto) SetPropertyNil() {
	o.Property.Set(nil)
}

// UnsetProperty ensures that no value is present for Property, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetProperty() {
	o.Property.Unset()
}

// GetOrgValue returns the OrgValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetOrgValue() string {
	if o == nil || IsNil(o.OrgValue.Get()) {
		var ret string
		return ret
	}
	return *o.OrgValue.Get()
}

// GetOrgValueOk returns a tuple with the OrgValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetOrgValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrgValue.Get(), o.OrgValue.IsSet()
}

// HasOrgValue returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasOrgValue() bool {
	if o != nil && o.OrgValue.IsSet() {
		return true
	}

	return false
}

// SetOrgValue gets a reference to the given NullableString and assigns it to the OrgValue field.
func (o *UserOperationLogEntryDto) SetOrgValue(v string) {
	o.OrgValue.Set(&v)
}
// SetOrgValueNil sets the value for OrgValue to be an explicit nil
func (o *UserOperationLogEntryDto) SetOrgValueNil() {
	o.OrgValue.Set(nil)
}

// UnsetOrgValue ensures that no value is present for OrgValue, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetOrgValue() {
	o.OrgValue.Unset()
}

// GetNewValue returns the NewValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetNewValue() string {
	if o == nil || IsNil(o.NewValue.Get()) {
		var ret string
		return ret
	}
	return *o.NewValue.Get()
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetNewValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewValue.Get(), o.NewValue.IsSet()
}

// HasNewValue returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasNewValue() bool {
	if o != nil && o.NewValue.IsSet() {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given NullableString and assigns it to the NewValue field.
func (o *UserOperationLogEntryDto) SetNewValue(v string) {
	o.NewValue.Set(&v)
}
// SetNewValueNil sets the value for NewValue to be an explicit nil
func (o *UserOperationLogEntryDto) SetNewValueNil() {
	o.NewValue.Set(nil)
}

// UnsetNewValue ensures that no value is present for NewValue, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetNewValue() {
	o.NewValue.Unset()
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *UserOperationLogEntryDto) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *UserOperationLogEntryDto) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *UserOperationLogEntryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *UserOperationLogEntryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *UserOperationLogEntryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *UserOperationLogEntryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *UserOperationLogEntryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *UserOperationLogEntryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *UserOperationLogEntryDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *UserOperationLogEntryDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *UserOperationLogEntryDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *UserOperationLogEntryDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *UserOperationLogEntryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *UserOperationLogEntryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetCaseExecutionId returns the CaseExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetCaseExecutionId() string {
	if o == nil || IsNil(o.CaseExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseExecutionId.Get()
}

// GetCaseExecutionIdOk returns a tuple with the CaseExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetCaseExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseExecutionId.Get(), o.CaseExecutionId.IsSet()
}

// HasCaseExecutionId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasCaseExecutionId() bool {
	if o != nil && o.CaseExecutionId.IsSet() {
		return true
	}

	return false
}

// SetCaseExecutionId gets a reference to the given NullableString and assigns it to the CaseExecutionId field.
func (o *UserOperationLogEntryDto) SetCaseExecutionId(v string) {
	o.CaseExecutionId.Set(&v)
}
// SetCaseExecutionIdNil sets the value for CaseExecutionId to be an explicit nil
func (o *UserOperationLogEntryDto) SetCaseExecutionIdNil() {
	o.CaseExecutionId.Set(nil)
}

// UnsetCaseExecutionId ensures that no value is present for CaseExecutionId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetCaseExecutionId() {
	o.CaseExecutionId.Unset()
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *UserOperationLogEntryDto) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *UserOperationLogEntryDto) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetExternalTaskId returns the ExternalTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetExternalTaskId() string {
	if o == nil || IsNil(o.ExternalTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalTaskId.Get()
}

// GetExternalTaskIdOk returns a tuple with the ExternalTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetExternalTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalTaskId.Get(), o.ExternalTaskId.IsSet()
}

// HasExternalTaskId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasExternalTaskId() bool {
	if o != nil && o.ExternalTaskId.IsSet() {
		return true
	}

	return false
}

// SetExternalTaskId gets a reference to the given NullableString and assigns it to the ExternalTaskId field.
func (o *UserOperationLogEntryDto) SetExternalTaskId(v string) {
	o.ExternalTaskId.Set(&v)
}
// SetExternalTaskIdNil sets the value for ExternalTaskId to be an explicit nil
func (o *UserOperationLogEntryDto) SetExternalTaskIdNil() {
	o.ExternalTaskId.Set(nil)
}

// UnsetExternalTaskId ensures that no value is present for ExternalTaskId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetExternalTaskId() {
	o.ExternalTaskId.Unset()
}

// GetBatchId returns the BatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetBatchId() string {
	if o == nil || IsNil(o.BatchId.Get()) {
		var ret string
		return ret
	}
	return *o.BatchId.Get()
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchId.Get(), o.BatchId.IsSet()
}

// HasBatchId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasBatchId() bool {
	if o != nil && o.BatchId.IsSet() {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given NullableString and assigns it to the BatchId field.
func (o *UserOperationLogEntryDto) SetBatchId(v string) {
	o.BatchId.Set(&v)
}
// SetBatchIdNil sets the value for BatchId to be an explicit nil
func (o *UserOperationLogEntryDto) SetBatchIdNil() {
	o.BatchId.Set(nil)
}

// UnsetBatchId ensures that no value is present for BatchId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetBatchId() {
	o.BatchId.Unset()
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetJobId() string {
	if o == nil || IsNil(o.JobId.Get()) {
		var ret string
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetJobIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableString and assigns it to the JobId field.
func (o *UserOperationLogEntryDto) SetJobId(v string) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *UserOperationLogEntryDto) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetJobId() {
	o.JobId.Unset()
}

// GetJobDefinitionId returns the JobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetJobDefinitionId() string {
	if o == nil || IsNil(o.JobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.JobDefinitionId.Get()
}

// GetJobDefinitionIdOk returns a tuple with the JobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDefinitionId.Get(), o.JobDefinitionId.IsSet()
}

// HasJobDefinitionId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasJobDefinitionId() bool {
	if o != nil && o.JobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetJobDefinitionId gets a reference to the given NullableString and assigns it to the JobDefinitionId field.
func (o *UserOperationLogEntryDto) SetJobDefinitionId(v string) {
	o.JobDefinitionId.Set(&v)
}
// SetJobDefinitionIdNil sets the value for JobDefinitionId to be an explicit nil
func (o *UserOperationLogEntryDto) SetJobDefinitionIdNil() {
	o.JobDefinitionId.Set(nil)
}

// UnsetJobDefinitionId ensures that no value is present for JobDefinitionId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetJobDefinitionId() {
	o.JobDefinitionId.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *UserOperationLogEntryDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *UserOperationLogEntryDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOperationLogEntryDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOperationLogEntryDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *UserOperationLogEntryDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *UserOperationLogEntryDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *UserOperationLogEntryDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *UserOperationLogEntryDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

func (o UserOperationLogEntryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserOperationLogEntryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.OperationId.IsSet() {
		toSerialize["operationId"] = o.OperationId.Get()
	}
	if o.OperationType.IsSet() {
		toSerialize["operationType"] = o.OperationType.Get()
	}
	if o.EntityType.IsSet() {
		toSerialize["entityType"] = o.EntityType.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Annotation.IsSet() {
		toSerialize["annotation"] = o.Annotation.Get()
	}
	if o.Property.IsSet() {
		toSerialize["property"] = o.Property.Get()
	}
	if o.OrgValue.IsSet() {
		toSerialize["orgValue"] = o.OrgValue.Get()
	}
	if o.NewValue.IsSet() {
		toSerialize["newValue"] = o.NewValue.Get()
	}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.CaseExecutionId.IsSet() {
		toSerialize["caseExecutionId"] = o.CaseExecutionId.Get()
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.ExternalTaskId.IsSet() {
		toSerialize["externalTaskId"] = o.ExternalTaskId.Get()
	}
	if o.BatchId.IsSet() {
		toSerialize["batchId"] = o.BatchId.Get()
	}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.JobDefinitionId.IsSet() {
		toSerialize["jobDefinitionId"] = o.JobDefinitionId.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	return toSerialize, nil
}

type NullableUserOperationLogEntryDto struct {
	value *UserOperationLogEntryDto
	isSet bool
}

func (v NullableUserOperationLogEntryDto) Get() *UserOperationLogEntryDto {
	return v.value
}

func (v *NullableUserOperationLogEntryDto) Set(val *UserOperationLogEntryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOperationLogEntryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOperationLogEntryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOperationLogEntryDto(val *UserOperationLogEntryDto) *NullableUserOperationLogEntryDto {
	return &NullableUserOperationLogEntryDto{value: val, isSet: true}
}

func (v NullableUserOperationLogEntryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOperationLogEntryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


