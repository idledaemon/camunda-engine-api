/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


type HistoricTaskInstanceAPI interface {

	/*
	GetHistoricTaskInstanceReport Get Task Report (Historic)

	Retrieves a report of completed tasks. When the report type is set to `count`, the
report contains a list of completed task counts where an entry contains the task name, the
definition key of the task, the process definition id, the process definition key, the process
definition name and the count of how many tasks were completed for the specified key in a given
period. When the report type is set to `duration`, the report contains a minimum, maximum and
average duration value of all completed task instances in a given period.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricTaskInstanceReportRequest
	*/
	GetHistoricTaskInstanceReport(ctx context.Context) ApiGetHistoricTaskInstanceReportRequest

	// GetHistoricTaskInstanceReportExecute executes the request
	//  @return []HistoricTaskInstanceReportResultDto
	GetHistoricTaskInstanceReportExecute(r ApiGetHistoricTaskInstanceReportRequest) ([]HistoricTaskInstanceReportResultDto, *http.Response, error)

	/*
	GetHistoricTaskInstances Get Tasks (Historic)

	Queries for historic tasks that fulfill the given parameters. The size of the result
set can be retrieved by using the
[Get Task Count](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricTaskInstancesRequest
	*/
	GetHistoricTaskInstances(ctx context.Context) ApiGetHistoricTaskInstancesRequest

	// GetHistoricTaskInstancesExecute executes the request
	//  @return []HistoricTaskInstanceDto
	GetHistoricTaskInstancesExecute(r ApiGetHistoricTaskInstancesRequest) ([]HistoricTaskInstanceDto, *http.Response, error)

	/*
	GetHistoricTaskInstancesCount Get Task Count

	Queries for the number of historic tasks that fulfill the given parameters.
Takes the same parameters as the
[Get Tasks (Historic)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricTaskInstancesCountRequest
	*/
	GetHistoricTaskInstancesCount(ctx context.Context) ApiGetHistoricTaskInstancesCountRequest

	// GetHistoricTaskInstancesCountExecute executes the request
	//  @return CountResultDto
	GetHistoricTaskInstancesCountExecute(r ApiGetHistoricTaskInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	QueryHistoricTaskInstances Get Tasks (Historic) (POST)

	Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful
than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query/) method because
it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.
The size of the result set can be retrieved by using the
[Get Task Count (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/post-task-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricTaskInstancesRequest
	*/
	QueryHistoricTaskInstances(ctx context.Context) ApiQueryHistoricTaskInstancesRequest

	// QueryHistoricTaskInstancesExecute executes the request
	//  @return []HistoricTaskInstanceDto
	QueryHistoricTaskInstancesExecute(r ApiQueryHistoricTaskInstancesRequest) ([]HistoricTaskInstanceDto, *http.Response, error)

	/*
	QueryHistoricTaskInstancesCount Get Task Count (POST)

	Queries for the number of historic tasks that fulfill the given parameters. Takes the
same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query/)
method. Corresponds to the size of the result set of the
[Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/post-task-query/)
method and takes the same parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricTaskInstancesCountRequest
	*/
	QueryHistoricTaskInstancesCount(ctx context.Context) ApiQueryHistoricTaskInstancesCountRequest

	// QueryHistoricTaskInstancesCountExecute executes the request
	//  @return CountResultDto
	QueryHistoricTaskInstancesCountExecute(r ApiQueryHistoricTaskInstancesCountRequest) (*CountResultDto, *http.Response, error)
}

// HistoricTaskInstanceAPIService HistoricTaskInstanceAPI service
type HistoricTaskInstanceAPIService service

type ApiGetHistoricTaskInstanceReportRequest struct {
	ctx context.Context
	ApiService HistoricTaskInstanceAPI
	reportType *string
	periodUnit *string
	completedBefore *time.Time
	completedAfter *time.Time
	groupBy *string
}

// **Mandatory.** Specifies the kind of the report to execute. To retrieve a report about the duration of process instances the value must be set to &#x60;duration&#x60;. For a report of the completed tasks in a specific timespan the value must be set to &#x60;count&#x60;.
func (r ApiGetHistoricTaskInstanceReportRequest) ReportType(reportType string) ApiGetHistoricTaskInstanceReportRequest {
	r.reportType = &reportType
	return r
}

// When the report type is set to &#x60;duration&#x60;, this parameter is **mandatory**. Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
func (r ApiGetHistoricTaskInstanceReportRequest) PeriodUnit(periodUnit string) ApiGetHistoricTaskInstanceReportRequest {
	r.periodUnit = &periodUnit
	return r
}

// Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstanceReportRequest) CompletedBefore(completedBefore time.Time) ApiGetHistoricTaskInstanceReportRequest {
	r.completedBefore = &completedBefore
	return r
}

// Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstanceReportRequest) CompletedAfter(completedAfter time.Time) ApiGetHistoricTaskInstanceReportRequest {
	r.completedAfter = &completedAfter
	return r
}

// When the report type is set to &#x60;count&#x60;, this parameter is **mandatory**. Groups the tasks report by a given criterion. Valid values are &#x60;taskName&#x60; and &#x60;processDefinition&#x60;.
func (r ApiGetHistoricTaskInstanceReportRequest) GroupBy(groupBy string) ApiGetHistoricTaskInstanceReportRequest {
	r.groupBy = &groupBy
	return r
}

func (r ApiGetHistoricTaskInstanceReportRequest) Execute() ([]HistoricTaskInstanceReportResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricTaskInstanceReportExecute(r)
}

/*
GetHistoricTaskInstanceReport Get Task Report (Historic)

Retrieves a report of completed tasks. When the report type is set to `count`, the
report contains a list of completed task counts where an entry contains the task name, the
definition key of the task, the process definition id, the process definition key, the process
definition name and the count of how many tasks were completed for the specified key in a given
period. When the report type is set to `duration`, the report contains a minimum, maximum and
average duration value of all completed task instances in a given period.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricTaskInstanceReportRequest
*/
func (a *HistoricTaskInstanceAPIService) GetHistoricTaskInstanceReport(ctx context.Context) ApiGetHistoricTaskInstanceReportRequest {
	return ApiGetHistoricTaskInstanceReportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricTaskInstanceReportResultDto
func (a *HistoricTaskInstanceAPIService) GetHistoricTaskInstanceReportExecute(r ApiGetHistoricTaskInstanceReportRequest) ([]HistoricTaskInstanceReportResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricTaskInstanceReportResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricTaskInstanceAPIService.GetHistoricTaskInstanceReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/task/report"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.reportType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reportType", r.reportType, "")
	}
	if r.periodUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "periodUnit", r.periodUnit, "")
	}
	if r.completedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedBefore", r.completedBefore, "")
	}
	if r.completedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completedAfter", r.completedAfter, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricTaskInstancesRequest struct {
	ctx context.Context
	ApiService HistoricTaskInstanceAPI
	taskId *string
	taskParentTaskId *string
	processInstanceId *string
	processInstanceBusinessKey *string
	processInstanceBusinessKeyIn *string
	processInstanceBusinessKeyLike *string
	executionId *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionName *string
	caseInstanceId *string
	caseExecutionId *string
	caseDefinitionId *string
	caseDefinitionKey *string
	caseDefinitionName *string
	activityInstanceIdIn *string
	taskName *string
	taskNameLike *string
	taskDescription *string
	taskDescriptionLike *string
	taskDefinitionKey *string
	taskDefinitionKeyIn *string
	taskDeleteReason *string
	taskDeleteReasonLike *string
	taskAssignee *string
	taskAssigneeLike *string
	taskOwner *string
	taskOwnerLike *string
	taskPriority *int32
	assigned *bool
	unassigned *bool
	finished *bool
	unfinished *bool
	processFinished *bool
	processUnfinished *bool
	taskDueDate *time.Time
	taskDueDateBefore *time.Time
	taskDueDateAfter *time.Time
	withoutTaskDueDate *bool
	taskFollowUpDate *time.Time
	taskFollowUpDateBefore *time.Time
	taskFollowUpDateAfter *time.Time
	startedBefore *time.Time
	startedAfter *time.Time
	finishedBefore *time.Time
	finishedAfter *time.Time
	tenantIdIn *string
	withoutTenantId *bool
	taskVariables *string
	processVariables *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
	taskInvolvedUser *string
	taskInvolvedGroup *string
	taskHadCandidateUser *string
	taskHadCandidateGroup *string
	withCandidateGroups *bool
	withoutCandidateGroups *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Filter by task id.
func (r ApiGetHistoricTaskInstancesRequest) TaskId(taskId string) ApiGetHistoricTaskInstancesRequest {
	r.taskId = &taskId
	return r
}

// Filter by parent task id.
func (r ApiGetHistoricTaskInstancesRequest) TaskParentTaskId(taskParentTaskId string) ApiGetHistoricTaskInstancesRequest {
	r.taskParentTaskId = &taskParentTaskId
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricTaskInstancesRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricTaskInstancesRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process instance business key.
func (r ApiGetHistoricTaskInstancesRequest) ProcessInstanceBusinessKey(processInstanceBusinessKey string) ApiGetHistoricTaskInstancesRequest {
	r.processInstanceBusinessKey = &processInstanceBusinessKey
	return r
}

// Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
func (r ApiGetHistoricTaskInstancesRequest) ProcessInstanceBusinessKeyIn(processInstanceBusinessKeyIn string) ApiGetHistoricTaskInstancesRequest {
	r.processInstanceBusinessKeyIn = &processInstanceBusinessKeyIn
	return r
}

// Filter by  process instance business key that has the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesRequest) ProcessInstanceBusinessKeyLike(processInstanceBusinessKeyLike string) ApiGetHistoricTaskInstancesRequest {
	r.processInstanceBusinessKeyLike = &processInstanceBusinessKeyLike
	return r
}

// Filter by the id of the execution that executed the task.
func (r ApiGetHistoricTaskInstancesRequest) ExecutionId(executionId string) ApiGetHistoricTaskInstancesRequest {
	r.executionId = &executionId
	return r
}

// Filter by process definition id.
func (r ApiGetHistoricTaskInstancesRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricTaskInstancesRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Restrict to tasks that belong to a process definition with the given key.
func (r ApiGetHistoricTaskInstancesRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricTaskInstancesRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Restrict to tasks that belong to a process definition with the given name.
func (r ApiGetHistoricTaskInstancesRequest) ProcessDefinitionName(processDefinitionName string) ApiGetHistoricTaskInstancesRequest {
	r.processDefinitionName = &processDefinitionName
	return r
}

// Filter by case instance id.
func (r ApiGetHistoricTaskInstancesRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricTaskInstancesRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by the id of the case execution that executed the task.
func (r ApiGetHistoricTaskInstancesRequest) CaseExecutionId(caseExecutionId string) ApiGetHistoricTaskInstancesRequest {
	r.caseExecutionId = &caseExecutionId
	return r
}

// Filter by case definition id.
func (r ApiGetHistoricTaskInstancesRequest) CaseDefinitionId(caseDefinitionId string) ApiGetHistoricTaskInstancesRequest {
	r.caseDefinitionId = &caseDefinitionId
	return r
}

// Restrict to tasks that belong to a case definition with the given key.
func (r ApiGetHistoricTaskInstancesRequest) CaseDefinitionKey(caseDefinitionKey string) ApiGetHistoricTaskInstancesRequest {
	r.caseDefinitionKey = &caseDefinitionKey
	return r
}

// Restrict to tasks that belong to a case definition with the given name.
func (r ApiGetHistoricTaskInstancesRequest) CaseDefinitionName(caseDefinitionName string) ApiGetHistoricTaskInstancesRequest {
	r.caseDefinitionName = &caseDefinitionName
	return r
}

// Only include tasks which belong to one of the passed comma-separated activity instance ids.
func (r ApiGetHistoricTaskInstancesRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetHistoricTaskInstancesRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Restrict to tasks that have the given name.
func (r ApiGetHistoricTaskInstancesRequest) TaskName(taskName string) ApiGetHistoricTaskInstancesRequest {
	r.taskName = &taskName
	return r
}

// Restrict to tasks that have a name with the given parameter value as substring.
func (r ApiGetHistoricTaskInstancesRequest) TaskNameLike(taskNameLike string) ApiGetHistoricTaskInstancesRequest {
	r.taskNameLike = &taskNameLike
	return r
}

// Restrict to tasks that have the given description.
func (r ApiGetHistoricTaskInstancesRequest) TaskDescription(taskDescription string) ApiGetHistoricTaskInstancesRequest {
	r.taskDescription = &taskDescription
	return r
}

// Restrict to tasks that have a description that has the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesRequest) TaskDescriptionLike(taskDescriptionLike string) ApiGetHistoricTaskInstancesRequest {
	r.taskDescriptionLike = &taskDescriptionLike
	return r
}

// Restrict to tasks that have the given key.
func (r ApiGetHistoricTaskInstancesRequest) TaskDefinitionKey(taskDefinitionKey string) ApiGetHistoricTaskInstancesRequest {
	r.taskDefinitionKey = &taskDefinitionKey
	return r
}

// Restrict to tasks that have one of the passed comma-separated task definition keys.
func (r ApiGetHistoricTaskInstancesRequest) TaskDefinitionKeyIn(taskDefinitionKeyIn string) ApiGetHistoricTaskInstancesRequest {
	r.taskDefinitionKeyIn = &taskDefinitionKeyIn
	return r
}

// Restrict to tasks that have the given delete reason.
func (r ApiGetHistoricTaskInstancesRequest) TaskDeleteReason(taskDeleteReason string) ApiGetHistoricTaskInstancesRequest {
	r.taskDeleteReason = &taskDeleteReason
	return r
}

// Restrict to tasks that have a delete reason that has the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesRequest) TaskDeleteReasonLike(taskDeleteReasonLike string) ApiGetHistoricTaskInstancesRequest {
	r.taskDeleteReasonLike = &taskDeleteReasonLike
	return r
}

// Restrict to tasks that the given user is assigned to.
func (r ApiGetHistoricTaskInstancesRequest) TaskAssignee(taskAssignee string) ApiGetHistoricTaskInstancesRequest {
	r.taskAssignee = &taskAssignee
	return r
}

// Restrict to tasks that are assigned to users with the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesRequest) TaskAssigneeLike(taskAssigneeLike string) ApiGetHistoricTaskInstancesRequest {
	r.taskAssigneeLike = &taskAssigneeLike
	return r
}

// Restrict to tasks that the given user owns.
func (r ApiGetHistoricTaskInstancesRequest) TaskOwner(taskOwner string) ApiGetHistoricTaskInstancesRequest {
	r.taskOwner = &taskOwner
	return r
}

// Restrict to tasks that are owned by users with the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesRequest) TaskOwnerLike(taskOwnerLike string) ApiGetHistoricTaskInstancesRequest {
	r.taskOwnerLike = &taskOwnerLike
	return r
}

// Restrict to tasks that have the given priority.
func (r ApiGetHistoricTaskInstancesRequest) TaskPriority(taskPriority int32) ApiGetHistoricTaskInstancesRequest {
	r.taskPriority = &taskPriority
	return r
}

// If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
func (r ApiGetHistoricTaskInstancesRequest) Assigned(assigned bool) ApiGetHistoricTaskInstancesRequest {
	r.assigned = &assigned
	return r
}

// If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
func (r ApiGetHistoricTaskInstancesRequest) Unassigned(unassigned bool) ApiGetHistoricTaskInstancesRequest {
	r.unassigned = &unassigned
	return r
}

// Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) Finished(finished bool) ApiGetHistoricTaskInstancesRequest {
	r.finished = &finished
	return r
}

// Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) Unfinished(unfinished bool) ApiGetHistoricTaskInstancesRequest {
	r.unfinished = &unfinished
	return r
}

// Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) ProcessFinished(processFinished bool) ApiGetHistoricTaskInstancesRequest {
	r.processFinished = &processFinished
	return r
}

// Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) ProcessUnfinished(processUnfinished bool) ApiGetHistoricTaskInstancesRequest {
	r.processUnfinished = &processUnfinished
	return r
}

// Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) TaskDueDate(taskDueDate time.Time) ApiGetHistoricTaskInstancesRequest {
	r.taskDueDate = &taskDueDate
	return r
}

// Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) TaskDueDateBefore(taskDueDateBefore time.Time) ApiGetHistoricTaskInstancesRequest {
	r.taskDueDateBefore = &taskDueDateBefore
	return r
}

// Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) TaskDueDateAfter(taskDueDateAfter time.Time) ApiGetHistoricTaskInstancesRequest {
	r.taskDueDateAfter = &taskDueDateAfter
	return r
}

// Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) WithoutTaskDueDate(withoutTaskDueDate bool) ApiGetHistoricTaskInstancesRequest {
	r.withoutTaskDueDate = &withoutTaskDueDate
	return r
}

// Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) TaskFollowUpDate(taskFollowUpDate time.Time) ApiGetHistoricTaskInstancesRequest {
	r.taskFollowUpDate = &taskFollowUpDate
	return r
}

// Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) TaskFollowUpDateBefore(taskFollowUpDateBefore time.Time) ApiGetHistoricTaskInstancesRequest {
	r.taskFollowUpDateBefore = &taskFollowUpDateBefore
	return r
}

// Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) TaskFollowUpDateAfter(taskFollowUpDateAfter time.Time) ApiGetHistoricTaskInstancesRequest {
	r.taskFollowUpDateAfter = &taskFollowUpDateAfter
	return r
}

// Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) StartedBefore(startedBefore time.Time) ApiGetHistoricTaskInstancesRequest {
	r.startedBefore = &startedBefore
	return r
}

// Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) StartedAfter(startedAfter time.Time) ApiGetHistoricTaskInstancesRequest {
	r.startedAfter = &startedAfter
	return r
}

// Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) FinishedBefore(finishedBefore time.Time) ApiGetHistoricTaskInstancesRequest {
	r.finishedBefore = &finishedBefore
	return r
}

// Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesRequest) FinishedAfter(finishedAfter time.Time) ApiGetHistoricTaskInstancesRequest {
	r.finishedAfter = &finishedAfter
	return r
}

// Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.
func (r ApiGetHistoricTaskInstancesRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricTaskInstancesRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricTaskInstancesRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetHistoricTaskInstancesRequest) TaskVariables(taskVariables string) ApiGetHistoricTaskInstancesRequest {
	r.taskVariables = &taskVariables
	return r
}

// Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetHistoricTaskInstancesRequest) ProcessVariables(processVariables string) ApiGetHistoricTaskInstancesRequest {
	r.processVariables = &processVariables
	return r
}

// Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
func (r ApiGetHistoricTaskInstancesRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetHistoricTaskInstancesRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
func (r ApiGetHistoricTaskInstancesRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetHistoricTaskInstancesRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

// Restrict to tasks with a historic identity link to the given user.
func (r ApiGetHistoricTaskInstancesRequest) TaskInvolvedUser(taskInvolvedUser string) ApiGetHistoricTaskInstancesRequest {
	r.taskInvolvedUser = &taskInvolvedUser
	return r
}

// Restrict to tasks with a historic identity link to the given group.
func (r ApiGetHistoricTaskInstancesRequest) TaskInvolvedGroup(taskInvolvedGroup string) ApiGetHistoricTaskInstancesRequest {
	r.taskInvolvedGroup = &taskInvolvedGroup
	return r
}

// Restrict to tasks with a historic identity link to the given candidate user.
func (r ApiGetHistoricTaskInstancesRequest) TaskHadCandidateUser(taskHadCandidateUser string) ApiGetHistoricTaskInstancesRequest {
	r.taskHadCandidateUser = &taskHadCandidateUser
	return r
}

// Restrict to tasks with a historic identity link to the given candidate group.
func (r ApiGetHistoricTaskInstancesRequest) TaskHadCandidateGroup(taskHadCandidateGroup string) ApiGetHistoricTaskInstancesRequest {
	r.taskHadCandidateGroup = &taskHadCandidateGroup
	return r
}

// Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) WithCandidateGroups(withCandidateGroups bool) ApiGetHistoricTaskInstancesRequest {
	r.withCandidateGroups = &withCandidateGroups
	return r
}

// Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesRequest) WithoutCandidateGroups(withoutCandidateGroups bool) ApiGetHistoricTaskInstancesRequest {
	r.withoutCandidateGroups = &withoutCandidateGroups
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricTaskInstancesRequest) SortBy(sortBy string) ApiGetHistoricTaskInstancesRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricTaskInstancesRequest) SortOrder(sortOrder string) ApiGetHistoricTaskInstancesRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricTaskInstancesRequest) FirstResult(firstResult int32) ApiGetHistoricTaskInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricTaskInstancesRequest) MaxResults(maxResults int32) ApiGetHistoricTaskInstancesRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetHistoricTaskInstancesRequest) Execute() ([]HistoricTaskInstanceDto, *http.Response, error) {
	return r.ApiService.GetHistoricTaskInstancesExecute(r)
}

/*
GetHistoricTaskInstances Get Tasks (Historic)

Queries for historic tasks that fulfill the given parameters. The size of the result
set can be retrieved by using the
[Get Task Count](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricTaskInstancesRequest
*/
func (a *HistoricTaskInstanceAPIService) GetHistoricTaskInstances(ctx context.Context) ApiGetHistoricTaskInstancesRequest {
	return ApiGetHistoricTaskInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricTaskInstanceDto
func (a *HistoricTaskInstanceAPIService) GetHistoricTaskInstancesExecute(r ApiGetHistoricTaskInstancesRequest) ([]HistoricTaskInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricTaskInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricTaskInstanceAPIService.GetHistoricTaskInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.taskParentTaskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskParentTaskId", r.taskParentTaskId, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processInstanceBusinessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKey", r.processInstanceBusinessKey, "")
	}
	if r.processInstanceBusinessKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyIn", r.processInstanceBusinessKeyIn, "")
	}
	if r.processInstanceBusinessKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyLike", r.processInstanceBusinessKeyLike, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionName", r.processDefinitionName, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.caseExecutionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseExecutionId", r.caseExecutionId, "")
	}
	if r.caseDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionId", r.caseDefinitionId, "")
	}
	if r.caseDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionKey", r.caseDefinitionKey, "")
	}
	if r.caseDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionName", r.caseDefinitionName, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.taskName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskName", r.taskName, "")
	}
	if r.taskNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskNameLike", r.taskNameLike, "")
	}
	if r.taskDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDescription", r.taskDescription, "")
	}
	if r.taskDescriptionLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDescriptionLike", r.taskDescriptionLike, "")
	}
	if r.taskDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDefinitionKey", r.taskDefinitionKey, "")
	}
	if r.taskDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDefinitionKeyIn", r.taskDefinitionKeyIn, "")
	}
	if r.taskDeleteReason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDeleteReason", r.taskDeleteReason, "")
	}
	if r.taskDeleteReasonLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDeleteReasonLike", r.taskDeleteReasonLike, "")
	}
	if r.taskAssignee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskAssignee", r.taskAssignee, "")
	}
	if r.taskAssigneeLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskAssigneeLike", r.taskAssigneeLike, "")
	}
	if r.taskOwner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskOwner", r.taskOwner, "")
	}
	if r.taskOwnerLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskOwnerLike", r.taskOwnerLike, "")
	}
	if r.taskPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskPriority", r.taskPriority, "")
	}
	if r.assigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned", r.assigned, "")
	}
	if r.unassigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unassigned", r.unassigned, "")
	}
	if r.finished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finished", r.finished, "")
	}
	if r.unfinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unfinished", r.unfinished, "")
	}
	if r.processFinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processFinished", r.processFinished, "")
	}
	if r.processUnfinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processUnfinished", r.processUnfinished, "")
	}
	if r.taskDueDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDueDate", r.taskDueDate, "")
	}
	if r.taskDueDateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDueDateBefore", r.taskDueDateBefore, "")
	}
	if r.taskDueDateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDueDateAfter", r.taskDueDateAfter, "")
	}
	if r.withoutTaskDueDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTaskDueDate", r.withoutTaskDueDate, "")
	}
	if r.taskFollowUpDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskFollowUpDate", r.taskFollowUpDate, "")
	}
	if r.taskFollowUpDateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskFollowUpDateBefore", r.taskFollowUpDateBefore, "")
	}
	if r.taskFollowUpDateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskFollowUpDateAfter", r.taskFollowUpDateAfter, "")
	}
	if r.startedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBefore", r.startedBefore, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	if r.finishedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedBefore", r.finishedBefore, "")
	}
	if r.finishedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedAfter", r.finishedAfter, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.taskVariables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskVariables", r.taskVariables, "")
	}
	if r.processVariables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processVariables", r.processVariables, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	}
	if r.taskInvolvedUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskInvolvedUser", r.taskInvolvedUser, "")
	}
	if r.taskInvolvedGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskInvolvedGroup", r.taskInvolvedGroup, "")
	}
	if r.taskHadCandidateUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskHadCandidateUser", r.taskHadCandidateUser, "")
	}
	if r.taskHadCandidateGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskHadCandidateGroup", r.taskHadCandidateGroup, "")
	}
	if r.withCandidateGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withCandidateGroups", r.withCandidateGroups, "")
	}
	if r.withoutCandidateGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutCandidateGroups", r.withoutCandidateGroups, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricTaskInstancesCountRequest struct {
	ctx context.Context
	ApiService HistoricTaskInstanceAPI
	taskId *string
	taskParentTaskId *string
	processInstanceId *string
	processInstanceBusinessKey *string
	processInstanceBusinessKeyIn *string
	processInstanceBusinessKeyLike *string
	executionId *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionName *string
	caseInstanceId *string
	caseExecutionId *string
	caseDefinitionId *string
	caseDefinitionKey *string
	caseDefinitionName *string
	activityInstanceIdIn *string
	taskName *string
	taskNameLike *string
	taskDescription *string
	taskDescriptionLike *string
	taskDefinitionKey *string
	taskDefinitionKeyIn *string
	taskDeleteReason *string
	taskDeleteReasonLike *string
	taskAssignee *string
	taskAssigneeLike *string
	taskOwner *string
	taskOwnerLike *string
	taskPriority *int32
	assigned *bool
	unassigned *bool
	finished *bool
	unfinished *bool
	processFinished *bool
	processUnfinished *bool
	taskDueDate *time.Time
	taskDueDateBefore *time.Time
	taskDueDateAfter *time.Time
	withoutTaskDueDate *bool
	taskFollowUpDate *time.Time
	taskFollowUpDateBefore *time.Time
	taskFollowUpDateAfter *time.Time
	startedBefore *time.Time
	startedAfter *time.Time
	finishedBefore *time.Time
	finishedAfter *time.Time
	tenantIdIn *string
	withoutTenantId *bool
	taskVariables *string
	processVariables *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
	taskInvolvedUser *string
	taskInvolvedGroup *string
	taskHadCandidateUser *string
	taskHadCandidateGroup *string
	withCandidateGroups *bool
	withoutCandidateGroups *bool
}

// Filter by task id.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskId(taskId string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskId = &taskId
	return r
}

// Filter by parent task id.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskParentTaskId(taskParentTaskId string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskParentTaskId = &taskParentTaskId
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricTaskInstancesCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process instance business key.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessInstanceBusinessKey(processInstanceBusinessKey string) ApiGetHistoricTaskInstancesCountRequest {
	r.processInstanceBusinessKey = &processInstanceBusinessKey
	return r
}

// Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessInstanceBusinessKeyIn(processInstanceBusinessKeyIn string) ApiGetHistoricTaskInstancesCountRequest {
	r.processInstanceBusinessKeyIn = &processInstanceBusinessKeyIn
	return r
}

// Filter by  process instance business key that has the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessInstanceBusinessKeyLike(processInstanceBusinessKeyLike string) ApiGetHistoricTaskInstancesCountRequest {
	r.processInstanceBusinessKeyLike = &processInstanceBusinessKeyLike
	return r
}

// Filter by the id of the execution that executed the task.
func (r ApiGetHistoricTaskInstancesCountRequest) ExecutionId(executionId string) ApiGetHistoricTaskInstancesCountRequest {
	r.executionId = &executionId
	return r
}

// Filter by process definition id.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricTaskInstancesCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Restrict to tasks that belong to a process definition with the given key.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricTaskInstancesCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Restrict to tasks that belong to a process definition with the given name.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessDefinitionName(processDefinitionName string) ApiGetHistoricTaskInstancesCountRequest {
	r.processDefinitionName = &processDefinitionName
	return r
}

// Filter by case instance id.
func (r ApiGetHistoricTaskInstancesCountRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricTaskInstancesCountRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by the id of the case execution that executed the task.
func (r ApiGetHistoricTaskInstancesCountRequest) CaseExecutionId(caseExecutionId string) ApiGetHistoricTaskInstancesCountRequest {
	r.caseExecutionId = &caseExecutionId
	return r
}

// Filter by case definition id.
func (r ApiGetHistoricTaskInstancesCountRequest) CaseDefinitionId(caseDefinitionId string) ApiGetHistoricTaskInstancesCountRequest {
	r.caseDefinitionId = &caseDefinitionId
	return r
}

// Restrict to tasks that belong to a case definition with the given key.
func (r ApiGetHistoricTaskInstancesCountRequest) CaseDefinitionKey(caseDefinitionKey string) ApiGetHistoricTaskInstancesCountRequest {
	r.caseDefinitionKey = &caseDefinitionKey
	return r
}

// Restrict to tasks that belong to a case definition with the given name.
func (r ApiGetHistoricTaskInstancesCountRequest) CaseDefinitionName(caseDefinitionName string) ApiGetHistoricTaskInstancesCountRequest {
	r.caseDefinitionName = &caseDefinitionName
	return r
}

// Only include tasks which belong to one of the passed comma-separated activity instance ids.
func (r ApiGetHistoricTaskInstancesCountRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetHistoricTaskInstancesCountRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Restrict to tasks that have the given name.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskName(taskName string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskName = &taskName
	return r
}

// Restrict to tasks that have a name with the given parameter value as substring.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskNameLike(taskNameLike string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskNameLike = &taskNameLike
	return r
}

// Restrict to tasks that have the given description.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDescription(taskDescription string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDescription = &taskDescription
	return r
}

// Restrict to tasks that have a description that has the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDescriptionLike(taskDescriptionLike string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDescriptionLike = &taskDescriptionLike
	return r
}

// Restrict to tasks that have the given key.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDefinitionKey(taskDefinitionKey string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDefinitionKey = &taskDefinitionKey
	return r
}

// Restrict to tasks that have one of the passed comma-separated task definition keys.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDefinitionKeyIn(taskDefinitionKeyIn string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDefinitionKeyIn = &taskDefinitionKeyIn
	return r
}

// Restrict to tasks that have the given delete reason.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDeleteReason(taskDeleteReason string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDeleteReason = &taskDeleteReason
	return r
}

// Restrict to tasks that have a delete reason that has the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDeleteReasonLike(taskDeleteReasonLike string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDeleteReasonLike = &taskDeleteReasonLike
	return r
}

// Restrict to tasks that the given user is assigned to.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskAssignee(taskAssignee string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskAssignee = &taskAssignee
	return r
}

// Restrict to tasks that are assigned to users with the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskAssigneeLike(taskAssigneeLike string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskAssigneeLike = &taskAssigneeLike
	return r
}

// Restrict to tasks that the given user owns.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskOwner(taskOwner string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskOwner = &taskOwner
	return r
}

// Restrict to tasks that are owned by users with the parameter value as a substring.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskOwnerLike(taskOwnerLike string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskOwnerLike = &taskOwnerLike
	return r
}

// Restrict to tasks that have the given priority.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskPriority(taskPriority int32) ApiGetHistoricTaskInstancesCountRequest {
	r.taskPriority = &taskPriority
	return r
}

// If set to &#x60;true&#x60;, restricts the query to all tasks that are assigned.
func (r ApiGetHistoricTaskInstancesCountRequest) Assigned(assigned bool) ApiGetHistoricTaskInstancesCountRequest {
	r.assigned = &assigned
	return r
}

// If set to &#x60;true&#x60;, restricts the query to all tasks that are unassigned.
func (r ApiGetHistoricTaskInstancesCountRequest) Unassigned(unassigned bool) ApiGetHistoricTaskInstancesCountRequest {
	r.unassigned = &unassigned
	return r
}

// Only include finished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) Finished(finished bool) ApiGetHistoricTaskInstancesCountRequest {
	r.finished = &finished
	return r
}

// Only include unfinished tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) Unfinished(unfinished bool) ApiGetHistoricTaskInstancesCountRequest {
	r.unfinished = &unfinished
	return r
}

// Only include tasks of finished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessFinished(processFinished bool) ApiGetHistoricTaskInstancesCountRequest {
	r.processFinished = &processFinished
	return r
}

// Only include tasks of unfinished processes. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessUnfinished(processUnfinished bool) ApiGetHistoricTaskInstancesCountRequest {
	r.processUnfinished = &processUnfinished
	return r
}

// Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDueDate(taskDueDate time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDueDate = &taskDueDate
	return r
}

// Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDueDateBefore(taskDueDateBefore time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDueDateBefore = &taskDueDateBefore
	return r
}

// Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskDueDateAfter(taskDueDateAfter time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.taskDueDateAfter = &taskDueDateAfter
	return r
}

// Only include tasks which have no due date. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) WithoutTaskDueDate(withoutTaskDueDate bool) ApiGetHistoricTaskInstancesCountRequest {
	r.withoutTaskDueDate = &withoutTaskDueDate
	return r
}

// Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskFollowUpDate(taskFollowUpDate time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.taskFollowUpDate = &taskFollowUpDate
	return r
}

// Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskFollowUpDateBefore(taskFollowUpDateBefore time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.taskFollowUpDateBefore = &taskFollowUpDateBefore
	return r
}

// Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskFollowUpDateAfter(taskFollowUpDateAfter time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.taskFollowUpDateAfter = &taskFollowUpDateAfter
	return r
}

// Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) StartedBefore(startedBefore time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.startedBefore = &startedBefore
	return r
}

// Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) StartedAfter(startedAfter time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.startedAfter = &startedAfter
	return r
}

// Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) FinishedBefore(finishedBefore time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.finishedBefore = &finishedBefore
	return r
}

// Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricTaskInstancesCountRequest) FinishedAfter(finishedAfter time.Time) ApiGetHistoricTaskInstancesCountRequest {
	r.finishedAfter = &finishedAfter
	return r
}

// Filter by a comma-separated list of tenant ids. A task instance must have one of the given tenant ids.
func (r ApiGetHistoricTaskInstancesCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricTaskInstancesCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic task instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricTaskInstancesCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskVariables(taskVariables string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskVariables = &taskVariables
	return r
}

// Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.   Valid operator values are: * &#x60;eq&#x60; - equal to; * &#x60;neq&#x60; - not equal to; * &#x60;gt&#x60; - greater than; * &#x60;gteq&#x60; - greater than or equal to; * &#x60;lt&#x60; - lower than; * &#x60;lteq&#x60; - lower than or equal to; * &#x60;like&#x60;; * &#x60;notLike&#x60;.  &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetHistoricTaskInstancesCountRequest) ProcessVariables(processVariables string) ApiGetHistoricTaskInstancesCountRequest {
	r.processVariables = &processVariables
	return r
}

// Match the variable name provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
func (r ApiGetHistoricTaskInstancesCountRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetHistoricTaskInstancesCountRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match the variable value provided in &#x60;taskVariables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
func (r ApiGetHistoricTaskInstancesCountRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetHistoricTaskInstancesCountRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

// Restrict to tasks with a historic identity link to the given user.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskInvolvedUser(taskInvolvedUser string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskInvolvedUser = &taskInvolvedUser
	return r
}

// Restrict to tasks with a historic identity link to the given group.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskInvolvedGroup(taskInvolvedGroup string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskInvolvedGroup = &taskInvolvedGroup
	return r
}

// Restrict to tasks with a historic identity link to the given candidate user.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskHadCandidateUser(taskHadCandidateUser string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskHadCandidateUser = &taskHadCandidateUser
	return r
}

// Restrict to tasks with a historic identity link to the given candidate group.
func (r ApiGetHistoricTaskInstancesCountRequest) TaskHadCandidateGroup(taskHadCandidateGroup string) ApiGetHistoricTaskInstancesCountRequest {
	r.taskHadCandidateGroup = &taskHadCandidateGroup
	return r
}

// Only include tasks which have a candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) WithCandidateGroups(withCandidateGroups bool) ApiGetHistoricTaskInstancesCountRequest {
	r.withCandidateGroups = &withCandidateGroups
	return r
}

// Only include tasks which have no candidate group. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricTaskInstancesCountRequest) WithoutCandidateGroups(withoutCandidateGroups bool) ApiGetHistoricTaskInstancesCountRequest {
	r.withoutCandidateGroups = &withoutCandidateGroups
	return r
}

func (r ApiGetHistoricTaskInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricTaskInstancesCountExecute(r)
}

/*
GetHistoricTaskInstancesCount Get Task Count

Queries for the number of historic tasks that fulfill the given parameters.
Takes the same parameters as the
[Get Tasks (Historic)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricTaskInstancesCountRequest
*/
func (a *HistoricTaskInstanceAPIService) GetHistoricTaskInstancesCount(ctx context.Context) ApiGetHistoricTaskInstancesCountRequest {
	return ApiGetHistoricTaskInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricTaskInstanceAPIService) GetHistoricTaskInstancesCountExecute(r ApiGetHistoricTaskInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricTaskInstanceAPIService.GetHistoricTaskInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/task/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.taskParentTaskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskParentTaskId", r.taskParentTaskId, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processInstanceBusinessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKey", r.processInstanceBusinessKey, "")
	}
	if r.processInstanceBusinessKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyIn", r.processInstanceBusinessKeyIn, "")
	}
	if r.processInstanceBusinessKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyLike", r.processInstanceBusinessKeyLike, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionName", r.processDefinitionName, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.caseExecutionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseExecutionId", r.caseExecutionId, "")
	}
	if r.caseDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionId", r.caseDefinitionId, "")
	}
	if r.caseDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionKey", r.caseDefinitionKey, "")
	}
	if r.caseDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionName", r.caseDefinitionName, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.taskName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskName", r.taskName, "")
	}
	if r.taskNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskNameLike", r.taskNameLike, "")
	}
	if r.taskDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDescription", r.taskDescription, "")
	}
	if r.taskDescriptionLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDescriptionLike", r.taskDescriptionLike, "")
	}
	if r.taskDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDefinitionKey", r.taskDefinitionKey, "")
	}
	if r.taskDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDefinitionKeyIn", r.taskDefinitionKeyIn, "")
	}
	if r.taskDeleteReason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDeleteReason", r.taskDeleteReason, "")
	}
	if r.taskDeleteReasonLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDeleteReasonLike", r.taskDeleteReasonLike, "")
	}
	if r.taskAssignee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskAssignee", r.taskAssignee, "")
	}
	if r.taskAssigneeLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskAssigneeLike", r.taskAssigneeLike, "")
	}
	if r.taskOwner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskOwner", r.taskOwner, "")
	}
	if r.taskOwnerLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskOwnerLike", r.taskOwnerLike, "")
	}
	if r.taskPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskPriority", r.taskPriority, "")
	}
	if r.assigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned", r.assigned, "")
	}
	if r.unassigned != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unassigned", r.unassigned, "")
	}
	if r.finished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finished", r.finished, "")
	}
	if r.unfinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unfinished", r.unfinished, "")
	}
	if r.processFinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processFinished", r.processFinished, "")
	}
	if r.processUnfinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processUnfinished", r.processUnfinished, "")
	}
	if r.taskDueDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDueDate", r.taskDueDate, "")
	}
	if r.taskDueDateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDueDateBefore", r.taskDueDateBefore, "")
	}
	if r.taskDueDateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDueDateAfter", r.taskDueDateAfter, "")
	}
	if r.withoutTaskDueDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTaskDueDate", r.withoutTaskDueDate, "")
	}
	if r.taskFollowUpDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskFollowUpDate", r.taskFollowUpDate, "")
	}
	if r.taskFollowUpDateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskFollowUpDateBefore", r.taskFollowUpDateBefore, "")
	}
	if r.taskFollowUpDateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskFollowUpDateAfter", r.taskFollowUpDateAfter, "")
	}
	if r.startedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBefore", r.startedBefore, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	if r.finishedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedBefore", r.finishedBefore, "")
	}
	if r.finishedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedAfter", r.finishedAfter, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.taskVariables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskVariables", r.taskVariables, "")
	}
	if r.processVariables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processVariables", r.processVariables, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	}
	if r.taskInvolvedUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskInvolvedUser", r.taskInvolvedUser, "")
	}
	if r.taskInvolvedGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskInvolvedGroup", r.taskInvolvedGroup, "")
	}
	if r.taskHadCandidateUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskHadCandidateUser", r.taskHadCandidateUser, "")
	}
	if r.taskHadCandidateGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskHadCandidateGroup", r.taskHadCandidateGroup, "")
	}
	if r.withCandidateGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withCandidateGroups", r.withCandidateGroups, "")
	}
	if r.withoutCandidateGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutCandidateGroups", r.withoutCandidateGroups, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricTaskInstancesRequest struct {
	ctx context.Context
	ApiService HistoricTaskInstanceAPI
	firstResult *int32
	maxResults *int32
	historicTaskInstanceQueryDto *HistoricTaskInstanceQueryDto
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiQueryHistoricTaskInstancesRequest) FirstResult(firstResult int32) ApiQueryHistoricTaskInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiQueryHistoricTaskInstancesRequest) MaxResults(maxResults int32) ApiQueryHistoricTaskInstancesRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiQueryHistoricTaskInstancesRequest) HistoricTaskInstanceQueryDto(historicTaskInstanceQueryDto HistoricTaskInstanceQueryDto) ApiQueryHistoricTaskInstancesRequest {
	r.historicTaskInstanceQueryDto = &historicTaskInstanceQueryDto
	return r
}

func (r ApiQueryHistoricTaskInstancesRequest) Execute() ([]HistoricTaskInstanceDto, *http.Response, error) {
	return r.ApiService.QueryHistoricTaskInstancesExecute(r)
}

/*
QueryHistoricTaskInstances Get Tasks (Historic) (POST)

Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful
than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query/) method because
it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.
The size of the result set can be retrieved by using the
[Get Task Count (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/post-task-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricTaskInstancesRequest
*/
func (a *HistoricTaskInstanceAPIService) QueryHistoricTaskInstances(ctx context.Context) ApiQueryHistoricTaskInstancesRequest {
	return ApiQueryHistoricTaskInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricTaskInstanceDto
func (a *HistoricTaskInstanceAPIService) QueryHistoricTaskInstancesExecute(r ApiQueryHistoricTaskInstancesRequest) ([]HistoricTaskInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricTaskInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricTaskInstanceAPIService.QueryHistoricTaskInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicTaskInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricTaskInstancesCountRequest struct {
	ctx context.Context
	ApiService HistoricTaskInstanceAPI
	historicTaskInstanceQueryDto *HistoricTaskInstanceQueryDto
}

func (r ApiQueryHistoricTaskInstancesCountRequest) HistoricTaskInstanceQueryDto(historicTaskInstanceQueryDto HistoricTaskInstanceQueryDto) ApiQueryHistoricTaskInstancesCountRequest {
	r.historicTaskInstanceQueryDto = &historicTaskInstanceQueryDto
	return r
}

func (r ApiQueryHistoricTaskInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.QueryHistoricTaskInstancesCountExecute(r)
}

/*
QueryHistoricTaskInstancesCount Get Task Count (POST)

Queries for the number of historic tasks that fulfill the given parameters. Takes the
same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/get-task-query/)
method. Corresponds to the size of the result set of the
[Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/task/post-task-query/)
method and takes the same parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricTaskInstancesCountRequest
*/
func (a *HistoricTaskInstanceAPIService) QueryHistoricTaskInstancesCount(ctx context.Context) ApiQueryHistoricTaskInstancesCountRequest {
	return ApiQueryHistoricTaskInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricTaskInstanceAPIService) QueryHistoricTaskInstancesCountExecute(r ApiQueryHistoricTaskInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricTaskInstanceAPIService.QueryHistoricTaskInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/task/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicTaskInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
