/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the AbstractVendorVersionInformationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractVendorVersionInformationDto{}

// AbstractVendorVersionInformationDto struct for AbstractVendorVersionInformationDto
type AbstractVendorVersionInformationDto struct {
	// Information about the vendor.
	Vendor NullableString `json:"vendor,omitempty"`
	// Information about the version.
	Version NullableString `json:"version,omitempty"`
}

// NewAbstractVendorVersionInformationDto instantiates a new AbstractVendorVersionInformationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractVendorVersionInformationDto() *AbstractVendorVersionInformationDto {
	this := AbstractVendorVersionInformationDto{}
	return &this
}

// NewAbstractVendorVersionInformationDtoWithDefaults instantiates a new AbstractVendorVersionInformationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractVendorVersionInformationDtoWithDefaults() *AbstractVendorVersionInformationDto {
	this := AbstractVendorVersionInformationDto{}
	return &this
}

// GetVendor returns the Vendor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbstractVendorVersionInformationDto) GetVendor() string {
	if o == nil || IsNil(o.Vendor.Get()) {
		var ret string
		return ret
	}
	return *o.Vendor.Get()
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbstractVendorVersionInformationDto) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vendor.Get(), o.Vendor.IsSet()
}

// HasVendor returns a boolean if a field has been set.
func (o *AbstractVendorVersionInformationDto) HasVendor() bool {
	if o != nil && o.Vendor.IsSet() {
		return true
	}

	return false
}

// SetVendor gets a reference to the given NullableString and assigns it to the Vendor field.
func (o *AbstractVendorVersionInformationDto) SetVendor(v string) {
	o.Vendor.Set(&v)
}
// SetVendorNil sets the value for Vendor to be an explicit nil
func (o *AbstractVendorVersionInformationDto) SetVendorNil() {
	o.Vendor.Set(nil)
}

// UnsetVendor ensures that no value is present for Vendor, not even an explicit nil
func (o *AbstractVendorVersionInformationDto) UnsetVendor() {
	o.Vendor.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AbstractVendorVersionInformationDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AbstractVendorVersionInformationDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *AbstractVendorVersionInformationDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *AbstractVendorVersionInformationDto) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *AbstractVendorVersionInformationDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *AbstractVendorVersionInformationDto) UnsetVersion() {
	o.Version.Unset()
}

func (o AbstractVendorVersionInformationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractVendorVersionInformationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Vendor.IsSet() {
		toSerialize["vendor"] = o.Vendor.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

type NullableAbstractVendorVersionInformationDto struct {
	value *AbstractVendorVersionInformationDto
	isSet bool
}

func (v NullableAbstractVendorVersionInformationDto) Get() *AbstractVendorVersionInformationDto {
	return v.value
}

func (v *NullableAbstractVendorVersionInformationDto) Set(val *AbstractVendorVersionInformationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractVendorVersionInformationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractVendorVersionInformationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractVendorVersionInformationDto(val *AbstractVendorVersionInformationDto) *NullableAbstractVendorVersionInformationDto {
	return &NullableAbstractVendorVersionInformationDto{value: val, isSet: true}
}

func (v NullableAbstractVendorVersionInformationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractVendorVersionInformationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


