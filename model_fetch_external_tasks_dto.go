/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FetchExternalTasksDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchExternalTasksDto{}

// FetchExternalTasksDto struct for FetchExternalTasksDto
type FetchExternalTasksDto struct {
	// **Mandatory.** The id of the worker on which behalf tasks are fetched. The returned tasks are locked for that worker and can only be completed when providing the same worker id.
	WorkerId string `json:"workerId"`
	// **Mandatory.** The maximum number of tasks to return.
	MaxTasks NullableInt32 `json:"maxTasks"`
	// A `boolean` value, which indicates whether the task should be fetched based on its priority or arbitrarily.
	UsePriority NullableBool `json:"usePriority,omitempty"`
	// The [Long Polling](https://docs.camunda.org/manual/7.21/user-guide/process-engine/external-tasks/#long-polling-to-fetch-and-lock-external-tasks) timeout in milliseconds.  **Note:** The value cannot be set larger than 1.800.000 milliseconds (corresponds to 30 minutes).
	AsyncResponseTimeout NullableInt64 `json:"asyncResponseTimeout,omitempty"`
	// A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be arbitrarily distributed among these topics. Each topic object has the following properties:
	Topics []FetchExternalTaskTopicDto `json:"topics,omitempty"`
	// Apply sorting of the result
	Sorting []FetchExternalTasksDtoSortingInner `json:"sorting,omitempty"`
}

type _FetchExternalTasksDto FetchExternalTasksDto

// NewFetchExternalTasksDto instantiates a new FetchExternalTasksDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchExternalTasksDto(workerId string, maxTasks NullableInt32) *FetchExternalTasksDto {
	this := FetchExternalTasksDto{}
	this.WorkerId = workerId
	this.MaxTasks = maxTasks
	return &this
}

// NewFetchExternalTasksDtoWithDefaults instantiates a new FetchExternalTasksDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchExternalTasksDtoWithDefaults() *FetchExternalTasksDto {
	this := FetchExternalTasksDto{}
	return &this
}

// GetWorkerId returns the WorkerId field value
func (o *FetchExternalTasksDto) GetWorkerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value
// and a boolean to check if the value has been set.
func (o *FetchExternalTasksDto) GetWorkerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkerId, true
}

// SetWorkerId sets field value
func (o *FetchExternalTasksDto) SetWorkerId(v string) {
	o.WorkerId = v
}

// GetMaxTasks returns the MaxTasks field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *FetchExternalTasksDto) GetMaxTasks() int32 {
	if o == nil || o.MaxTasks.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MaxTasks.Get()
}

// GetMaxTasksOk returns a tuple with the MaxTasks field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchExternalTasksDto) GetMaxTasksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxTasks.Get(), o.MaxTasks.IsSet()
}

// SetMaxTasks sets field value
func (o *FetchExternalTasksDto) SetMaxTasks(v int32) {
	o.MaxTasks.Set(&v)
}

// GetUsePriority returns the UsePriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FetchExternalTasksDto) GetUsePriority() bool {
	if o == nil || IsNil(o.UsePriority.Get()) {
		var ret bool
		return ret
	}
	return *o.UsePriority.Get()
}

// GetUsePriorityOk returns a tuple with the UsePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchExternalTasksDto) GetUsePriorityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsePriority.Get(), o.UsePriority.IsSet()
}

// HasUsePriority returns a boolean if a field has been set.
func (o *FetchExternalTasksDto) HasUsePriority() bool {
	if o != nil && o.UsePriority.IsSet() {
		return true
	}

	return false
}

// SetUsePriority gets a reference to the given NullableBool and assigns it to the UsePriority field.
func (o *FetchExternalTasksDto) SetUsePriority(v bool) {
	o.UsePriority.Set(&v)
}
// SetUsePriorityNil sets the value for UsePriority to be an explicit nil
func (o *FetchExternalTasksDto) SetUsePriorityNil() {
	o.UsePriority.Set(nil)
}

// UnsetUsePriority ensures that no value is present for UsePriority, not even an explicit nil
func (o *FetchExternalTasksDto) UnsetUsePriority() {
	o.UsePriority.Unset()
}

// GetAsyncResponseTimeout returns the AsyncResponseTimeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FetchExternalTasksDto) GetAsyncResponseTimeout() int64 {
	if o == nil || IsNil(o.AsyncResponseTimeout.Get()) {
		var ret int64
		return ret
	}
	return *o.AsyncResponseTimeout.Get()
}

// GetAsyncResponseTimeoutOk returns a tuple with the AsyncResponseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchExternalTasksDto) GetAsyncResponseTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AsyncResponseTimeout.Get(), o.AsyncResponseTimeout.IsSet()
}

// HasAsyncResponseTimeout returns a boolean if a field has been set.
func (o *FetchExternalTasksDto) HasAsyncResponseTimeout() bool {
	if o != nil && o.AsyncResponseTimeout.IsSet() {
		return true
	}

	return false
}

// SetAsyncResponseTimeout gets a reference to the given NullableInt64 and assigns it to the AsyncResponseTimeout field.
func (o *FetchExternalTasksDto) SetAsyncResponseTimeout(v int64) {
	o.AsyncResponseTimeout.Set(&v)
}
// SetAsyncResponseTimeoutNil sets the value for AsyncResponseTimeout to be an explicit nil
func (o *FetchExternalTasksDto) SetAsyncResponseTimeoutNil() {
	o.AsyncResponseTimeout.Set(nil)
}

// UnsetAsyncResponseTimeout ensures that no value is present for AsyncResponseTimeout, not even an explicit nil
func (o *FetchExternalTasksDto) UnsetAsyncResponseTimeout() {
	o.AsyncResponseTimeout.Unset()
}

// GetTopics returns the Topics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FetchExternalTasksDto) GetTopics() []FetchExternalTaskTopicDto {
	if o == nil {
		var ret []FetchExternalTaskTopicDto
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchExternalTasksDto) GetTopicsOk() ([]FetchExternalTaskTopicDto, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *FetchExternalTasksDto) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []FetchExternalTaskTopicDto and assigns it to the Topics field.
func (o *FetchExternalTasksDto) SetTopics(v []FetchExternalTaskTopicDto) {
	o.Topics = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FetchExternalTasksDto) GetSorting() []FetchExternalTasksDtoSortingInner {
	if o == nil {
		var ret []FetchExternalTasksDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchExternalTasksDto) GetSortingOk() ([]FetchExternalTasksDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *FetchExternalTasksDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []FetchExternalTasksDtoSortingInner and assigns it to the Sorting field.
func (o *FetchExternalTasksDto) SetSorting(v []FetchExternalTasksDtoSortingInner) {
	o.Sorting = v
}

func (o FetchExternalTasksDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchExternalTasksDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workerId"] = o.WorkerId
	toSerialize["maxTasks"] = o.MaxTasks.Get()
	if o.UsePriority.IsSet() {
		toSerialize["usePriority"] = o.UsePriority.Get()
	}
	if o.AsyncResponseTimeout.IsSet() {
		toSerialize["asyncResponseTimeout"] = o.AsyncResponseTimeout.Get()
	}
	if o.Topics != nil {
		toSerialize["topics"] = o.Topics
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

func (o *FetchExternalTasksDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workerId",
		"maxTasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFetchExternalTasksDto := _FetchExternalTasksDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchExternalTasksDto)

	if err != nil {
		return err
	}

	*o = FetchExternalTasksDto(varFetchExternalTasksDto)

	return err
}

type NullableFetchExternalTasksDto struct {
	value *FetchExternalTasksDto
	isSet bool
}

func (v NullableFetchExternalTasksDto) Get() *FetchExternalTasksDto {
	return v.value
}

func (v *NullableFetchExternalTasksDto) Set(val *FetchExternalTasksDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchExternalTasksDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchExternalTasksDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchExternalTasksDto(val *FetchExternalTasksDto) *NullableFetchExternalTasksDto {
	return &NullableFetchExternalTasksDto{value: val, isSet: true}
}

func (v NullableFetchExternalTasksDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchExternalTasksDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


