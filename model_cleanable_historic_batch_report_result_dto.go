/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CleanableHistoricBatchReportResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CleanableHistoricBatchReportResultDto{}

// CleanableHistoricBatchReportResultDto struct for CleanableHistoricBatchReportResultDto
type CleanableHistoricBatchReportResultDto struct {
	// The type of the batch operation.
	BatchType NullableString `json:"batchType,omitempty"`
	// The history time to live of the batch operation.
	HistoryTimeToLive NullableInt32 `json:"historyTimeToLive,omitempty"`
	// The count of the finished batch operations.
	FinishedBatchesCount NullableInt64 `json:"finishedBatchesCount,omitempty"`
	// The count of the cleanable historic batch operations, referring to history time to live.
	CleanableBatchesCount NullableInt64 `json:"cleanableBatchesCount,omitempty"`
}

// NewCleanableHistoricBatchReportResultDto instantiates a new CleanableHistoricBatchReportResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCleanableHistoricBatchReportResultDto() *CleanableHistoricBatchReportResultDto {
	this := CleanableHistoricBatchReportResultDto{}
	return &this
}

// NewCleanableHistoricBatchReportResultDtoWithDefaults instantiates a new CleanableHistoricBatchReportResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanableHistoricBatchReportResultDtoWithDefaults() *CleanableHistoricBatchReportResultDto {
	this := CleanableHistoricBatchReportResultDto{}
	return &this
}

// GetBatchType returns the BatchType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricBatchReportResultDto) GetBatchType() string {
	if o == nil || IsNil(o.BatchType.Get()) {
		var ret string
		return ret
	}
	return *o.BatchType.Get()
}

// GetBatchTypeOk returns a tuple with the BatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricBatchReportResultDto) GetBatchTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchType.Get(), o.BatchType.IsSet()
}

// HasBatchType returns a boolean if a field has been set.
func (o *CleanableHistoricBatchReportResultDto) HasBatchType() bool {
	if o != nil && o.BatchType.IsSet() {
		return true
	}

	return false
}

// SetBatchType gets a reference to the given NullableString and assigns it to the BatchType field.
func (o *CleanableHistoricBatchReportResultDto) SetBatchType(v string) {
	o.BatchType.Set(&v)
}
// SetBatchTypeNil sets the value for BatchType to be an explicit nil
func (o *CleanableHistoricBatchReportResultDto) SetBatchTypeNil() {
	o.BatchType.Set(nil)
}

// UnsetBatchType ensures that no value is present for BatchType, not even an explicit nil
func (o *CleanableHistoricBatchReportResultDto) UnsetBatchType() {
	o.BatchType.Unset()
}

// GetHistoryTimeToLive returns the HistoryTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricBatchReportResultDto) GetHistoryTimeToLive() int32 {
	if o == nil || IsNil(o.HistoryTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HistoryTimeToLive.Get()
}

// GetHistoryTimeToLiveOk returns a tuple with the HistoryTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricBatchReportResultDto) GetHistoryTimeToLiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryTimeToLive.Get(), o.HistoryTimeToLive.IsSet()
}

// HasHistoryTimeToLive returns a boolean if a field has been set.
func (o *CleanableHistoricBatchReportResultDto) HasHistoryTimeToLive() bool {
	if o != nil && o.HistoryTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHistoryTimeToLive gets a reference to the given NullableInt32 and assigns it to the HistoryTimeToLive field.
func (o *CleanableHistoricBatchReportResultDto) SetHistoryTimeToLive(v int32) {
	o.HistoryTimeToLive.Set(&v)
}
// SetHistoryTimeToLiveNil sets the value for HistoryTimeToLive to be an explicit nil
func (o *CleanableHistoricBatchReportResultDto) SetHistoryTimeToLiveNil() {
	o.HistoryTimeToLive.Set(nil)
}

// UnsetHistoryTimeToLive ensures that no value is present for HistoryTimeToLive, not even an explicit nil
func (o *CleanableHistoricBatchReportResultDto) UnsetHistoryTimeToLive() {
	o.HistoryTimeToLive.Unset()
}

// GetFinishedBatchesCount returns the FinishedBatchesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricBatchReportResultDto) GetFinishedBatchesCount() int64 {
	if o == nil || IsNil(o.FinishedBatchesCount.Get()) {
		var ret int64
		return ret
	}
	return *o.FinishedBatchesCount.Get()
}

// GetFinishedBatchesCountOk returns a tuple with the FinishedBatchesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricBatchReportResultDto) GetFinishedBatchesCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedBatchesCount.Get(), o.FinishedBatchesCount.IsSet()
}

// HasFinishedBatchesCount returns a boolean if a field has been set.
func (o *CleanableHistoricBatchReportResultDto) HasFinishedBatchesCount() bool {
	if o != nil && o.FinishedBatchesCount.IsSet() {
		return true
	}

	return false
}

// SetFinishedBatchesCount gets a reference to the given NullableInt64 and assigns it to the FinishedBatchesCount field.
func (o *CleanableHistoricBatchReportResultDto) SetFinishedBatchesCount(v int64) {
	o.FinishedBatchesCount.Set(&v)
}
// SetFinishedBatchesCountNil sets the value for FinishedBatchesCount to be an explicit nil
func (o *CleanableHistoricBatchReportResultDto) SetFinishedBatchesCountNil() {
	o.FinishedBatchesCount.Set(nil)
}

// UnsetFinishedBatchesCount ensures that no value is present for FinishedBatchesCount, not even an explicit nil
func (o *CleanableHistoricBatchReportResultDto) UnsetFinishedBatchesCount() {
	o.FinishedBatchesCount.Unset()
}

// GetCleanableBatchesCount returns the CleanableBatchesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricBatchReportResultDto) GetCleanableBatchesCount() int64 {
	if o == nil || IsNil(o.CleanableBatchesCount.Get()) {
		var ret int64
		return ret
	}
	return *o.CleanableBatchesCount.Get()
}

// GetCleanableBatchesCountOk returns a tuple with the CleanableBatchesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricBatchReportResultDto) GetCleanableBatchesCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CleanableBatchesCount.Get(), o.CleanableBatchesCount.IsSet()
}

// HasCleanableBatchesCount returns a boolean if a field has been set.
func (o *CleanableHistoricBatchReportResultDto) HasCleanableBatchesCount() bool {
	if o != nil && o.CleanableBatchesCount.IsSet() {
		return true
	}

	return false
}

// SetCleanableBatchesCount gets a reference to the given NullableInt64 and assigns it to the CleanableBatchesCount field.
func (o *CleanableHistoricBatchReportResultDto) SetCleanableBatchesCount(v int64) {
	o.CleanableBatchesCount.Set(&v)
}
// SetCleanableBatchesCountNil sets the value for CleanableBatchesCount to be an explicit nil
func (o *CleanableHistoricBatchReportResultDto) SetCleanableBatchesCountNil() {
	o.CleanableBatchesCount.Set(nil)
}

// UnsetCleanableBatchesCount ensures that no value is present for CleanableBatchesCount, not even an explicit nil
func (o *CleanableHistoricBatchReportResultDto) UnsetCleanableBatchesCount() {
	o.CleanableBatchesCount.Unset()
}

func (o CleanableHistoricBatchReportResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanableHistoricBatchReportResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BatchType.IsSet() {
		toSerialize["batchType"] = o.BatchType.Get()
	}
	if o.HistoryTimeToLive.IsSet() {
		toSerialize["historyTimeToLive"] = o.HistoryTimeToLive.Get()
	}
	if o.FinishedBatchesCount.IsSet() {
		toSerialize["finishedBatchesCount"] = o.FinishedBatchesCount.Get()
	}
	if o.CleanableBatchesCount.IsSet() {
		toSerialize["cleanableBatchesCount"] = o.CleanableBatchesCount.Get()
	}
	return toSerialize, nil
}

type NullableCleanableHistoricBatchReportResultDto struct {
	value *CleanableHistoricBatchReportResultDto
	isSet bool
}

func (v NullableCleanableHistoricBatchReportResultDto) Get() *CleanableHistoricBatchReportResultDto {
	return v.value
}

func (v *NullableCleanableHistoricBatchReportResultDto) Set(val *CleanableHistoricBatchReportResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCleanableHistoricBatchReportResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanableHistoricBatchReportResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanableHistoricBatchReportResultDto(val *CleanableHistoricBatchReportResultDto) *NullableCleanableHistoricBatchReportResultDto {
	return &NullableCleanableHistoricBatchReportResultDto{value: val, isSet: true}
}

func (v NullableCleanableHistoricBatchReportResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanableHistoricBatchReportResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


