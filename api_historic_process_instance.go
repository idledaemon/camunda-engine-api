/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type HistoricProcessInstanceAPI interface {

	/*
	DeleteHistoricProcessInstance Delete

	Deletes a process instance from the history by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the historic process instance to be deleted.
	@return ApiDeleteHistoricProcessInstanceRequest
	*/
	DeleteHistoricProcessInstance(ctx context.Context, id string) ApiDeleteHistoricProcessInstanceRequest

	// DeleteHistoricProcessInstanceExecute executes the request
	DeleteHistoricProcessInstanceExecute(r ApiDeleteHistoricProcessInstanceRequest) (*http.Response, error)

	/*
	DeleteHistoricProcessInstancesAsync Delete Async (POST)

	Delete multiple historic process instances asynchronously (batch).
At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
If both are provided then all instances matching query criterion and instances from the list will be deleted.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteHistoricProcessInstancesAsyncRequest
	*/
	DeleteHistoricProcessInstancesAsync(ctx context.Context) ApiDeleteHistoricProcessInstancesAsyncRequest

	// DeleteHistoricProcessInstancesAsyncExecute executes the request
	//  @return BatchDto
	DeleteHistoricProcessInstancesAsyncExecute(r ApiDeleteHistoricProcessInstancesAsyncRequest) (*BatchDto, *http.Response, error)

	/*
	DeleteHistoricVariableInstancesOfHistoricProcessInstance Delete Variable Instances

	Deletes all variables of a process instance from the history by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the process instance for which all historic variables are to be deleted.
	@return ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest
	*/
	DeleteHistoricVariableInstancesOfHistoricProcessInstance(ctx context.Context, id string) ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest

	// DeleteHistoricVariableInstancesOfHistoricProcessInstanceExecute executes the request
	DeleteHistoricVariableInstancesOfHistoricProcessInstanceExecute(r ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest) (*http.Response, error)

	/*
	GetHistoricProcessInstance Get

	Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the historic process instance to be retrieved.
	@return ApiGetHistoricProcessInstanceRequest
	*/
	GetHistoricProcessInstance(ctx context.Context, id string) ApiGetHistoricProcessInstanceRequest

	// GetHistoricProcessInstanceExecute executes the request
	//  @return HistoricProcessInstanceDto
	GetHistoricProcessInstanceExecute(r ApiGetHistoricProcessInstanceRequest) (*HistoricProcessInstanceDto, *http.Response, error)

	/*
	GetHistoricProcessInstanceDurationReport Get Duration Report

	Retrieves a report about the duration of completed process instances, grouped by a period.
These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.

**Note:** This only includes historic data.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricProcessInstanceDurationReportRequest
	*/
	GetHistoricProcessInstanceDurationReport(ctx context.Context) ApiGetHistoricProcessInstanceDurationReportRequest

	// GetHistoricProcessInstanceDurationReportExecute executes the request
	//  @return []DurationReportResultDto
	GetHistoricProcessInstanceDurationReportExecute(r ApiGetHistoricProcessInstanceDurationReportRequest) ([]DurationReportResultDto, *http.Response, error)

	/*
	GetHistoricProcessInstances Get List

	Queries for historic process instances that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get Process Instance Count](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query-count/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricProcessInstancesRequest
	*/
	GetHistoricProcessInstances(ctx context.Context) ApiGetHistoricProcessInstancesRequest

	// GetHistoricProcessInstancesExecute executes the request
	//  @return []HistoricProcessInstanceDto
	GetHistoricProcessInstancesExecute(r ApiGetHistoricProcessInstancesRequest) ([]HistoricProcessInstanceDto, *http.Response, error)

	/*
	GetHistoricProcessInstancesCount Get List Count

	Queries for the number of historic process instances that fulfill the given parameters.
Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricProcessInstancesCountRequest
	*/
	GetHistoricProcessInstancesCount(ctx context.Context) ApiGetHistoricProcessInstancesCountRequest

	// GetHistoricProcessInstancesCountExecute executes the request
	//  @return CountResultDto
	GetHistoricProcessInstancesCountExecute(r ApiGetHistoricProcessInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	QueryHistoricProcessInstances Get List (POST)

	Queries for historic process instances that fulfill the given parameters.
This method is slightly more powerful than the
[Get Process Instance](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query/)
because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricProcessInstancesRequest
	*/
	QueryHistoricProcessInstances(ctx context.Context) ApiQueryHistoricProcessInstancesRequest

	// QueryHistoricProcessInstancesExecute executes the request
	//  @return []HistoricProcessInstanceDto
	QueryHistoricProcessInstancesExecute(r ApiQueryHistoricProcessInstancesRequest) ([]HistoricProcessInstanceDto, *http.Response, error)

	/*
	QueryHistoricProcessInstancesCount Get List Count (POST)

	Queries for the number of historic process instances that fulfill the given parameters.
This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query/) method and
therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/post-process-instance-query-count/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricProcessInstancesCountRequest
	*/
	QueryHistoricProcessInstancesCount(ctx context.Context) ApiQueryHistoricProcessInstancesCountRequest

	// QueryHistoricProcessInstancesCountExecute executes the request
	//  @return CountResultDto
	QueryHistoricProcessInstancesCountExecute(r ApiQueryHistoricProcessInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	SetRemovalTimeAsync Set Removal Time Async (POST)

	Sets the removal time to multiple historic process instances asynchronously (batch).

At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetRemovalTimeAsyncRequest
	*/
	SetRemovalTimeAsync(ctx context.Context) ApiSetRemovalTimeAsyncRequest

	// SetRemovalTimeAsyncExecute executes the request
	//  @return BatchDto
	SetRemovalTimeAsyncExecute(r ApiSetRemovalTimeAsyncRequest) (*BatchDto, *http.Response, error)
}

// HistoricProcessInstanceAPIService HistoricProcessInstanceAPI service
type HistoricProcessInstanceAPIService service

type ApiDeleteHistoricProcessInstanceRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	id string
	failIfNotExists *bool
}

// If set to &#x60;false&#x60;, the request will still be successful if the process id is not found.
func (r ApiDeleteHistoricProcessInstanceRequest) FailIfNotExists(failIfNotExists bool) ApiDeleteHistoricProcessInstanceRequest {
	r.failIfNotExists = &failIfNotExists
	return r
}

func (r ApiDeleteHistoricProcessInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteHistoricProcessInstanceExecute(r)
}

/*
DeleteHistoricProcessInstance Delete

Deletes a process instance from the history by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the historic process instance to be deleted.
 @return ApiDeleteHistoricProcessInstanceRequest
*/
func (a *HistoricProcessInstanceAPIService) DeleteHistoricProcessInstance(ctx context.Context, id string) ApiDeleteHistoricProcessInstanceRequest {
	return ApiDeleteHistoricProcessInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *HistoricProcessInstanceAPIService) DeleteHistoricProcessInstanceExecute(r ApiDeleteHistoricProcessInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.DeleteHistoricProcessInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.failIfNotExists != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failIfNotExists", r.failIfNotExists, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteHistoricProcessInstancesAsyncRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	deleteHistoricProcessInstancesDto *DeleteHistoricProcessInstancesDto
}

func (r ApiDeleteHistoricProcessInstancesAsyncRequest) DeleteHistoricProcessInstancesDto(deleteHistoricProcessInstancesDto DeleteHistoricProcessInstancesDto) ApiDeleteHistoricProcessInstancesAsyncRequest {
	r.deleteHistoricProcessInstancesDto = &deleteHistoricProcessInstancesDto
	return r
}

func (r ApiDeleteHistoricProcessInstancesAsyncRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.DeleteHistoricProcessInstancesAsyncExecute(r)
}

/*
DeleteHistoricProcessInstancesAsync Delete Async (POST)

Delete multiple historic process instances asynchronously (batch).
At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
If both are provided then all instances matching query criterion and instances from the list will be deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteHistoricProcessInstancesAsyncRequest
*/
func (a *HistoricProcessInstanceAPIService) DeleteHistoricProcessInstancesAsync(ctx context.Context) ApiDeleteHistoricProcessInstancesAsyncRequest {
	return ApiDeleteHistoricProcessInstancesAsyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *HistoricProcessInstanceAPIService) DeleteHistoricProcessInstancesAsyncExecute(r ApiDeleteHistoricProcessInstancesAsyncRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.DeleteHistoricProcessInstancesAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteHistoricProcessInstancesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	id string
}

func (r ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteHistoricVariableInstancesOfHistoricProcessInstanceExecute(r)
}

/*
DeleteHistoricVariableInstancesOfHistoricProcessInstance Delete Variable Instances

Deletes all variables of a process instance from the history by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the process instance for which all historic variables are to be deleted.
 @return ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest
*/
func (a *HistoricProcessInstanceAPIService) DeleteHistoricVariableInstancesOfHistoricProcessInstance(ctx context.Context, id string) ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest {
	return ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *HistoricProcessInstanceAPIService) DeleteHistoricVariableInstancesOfHistoricProcessInstanceExecute(r ApiDeleteHistoricVariableInstancesOfHistoricProcessInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.DeleteHistoricVariableInstancesOfHistoricProcessInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/{id}/variable-instances"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetHistoricProcessInstanceRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	id string
}

func (r ApiGetHistoricProcessInstanceRequest) Execute() (*HistoricProcessInstanceDto, *http.Response, error) {
	return r.ApiService.GetHistoricProcessInstanceExecute(r)
}

/*
GetHistoricProcessInstance Get

Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the historic process instance to be retrieved.
 @return ApiGetHistoricProcessInstanceRequest
*/
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstance(ctx context.Context, id string) ApiGetHistoricProcessInstanceRequest {
	return ApiGetHistoricProcessInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistoricProcessInstanceDto
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstanceExecute(r ApiGetHistoricProcessInstanceRequest) (*HistoricProcessInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricProcessInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.GetHistoricProcessInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricProcessInstanceDurationReportRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	reportType *string
	periodUnit *string
	processDefinitionIdIn *string
	processDefinitionKeyIn *string
	startedBefore *time.Time
	startedAfter *time.Time
}

// **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;.
func (r ApiGetHistoricProcessInstanceDurationReportRequest) ReportType(reportType string) ApiGetHistoricProcessInstanceDurationReportRequest {
	r.reportType = &reportType
	return r
}

// **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;.
func (r ApiGetHistoricProcessInstanceDurationReportRequest) PeriodUnit(periodUnit string) ApiGetHistoricProcessInstanceDurationReportRequest {
	r.periodUnit = &periodUnit
	return r
}

// Filter by process definition ids. Must be a comma-separated list of process definition ids.
func (r ApiGetHistoricProcessInstanceDurationReportRequest) ProcessDefinitionIdIn(processDefinitionIdIn string) ApiGetHistoricProcessInstanceDurationReportRequest {
	r.processDefinitionIdIn = &processDefinitionIdIn
	return r
}

// Filter by process definition keys. Must be a comma-separated list of process definition keys.
func (r ApiGetHistoricProcessInstanceDurationReportRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetHistoricProcessInstanceDurationReportRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstanceDurationReportRequest) StartedBefore(startedBefore time.Time) ApiGetHistoricProcessInstanceDurationReportRequest {
	r.startedBefore = &startedBefore
	return r
}

// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstanceDurationReportRequest) StartedAfter(startedAfter time.Time) ApiGetHistoricProcessInstanceDurationReportRequest {
	r.startedAfter = &startedAfter
	return r
}

func (r ApiGetHistoricProcessInstanceDurationReportRequest) Execute() ([]DurationReportResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricProcessInstanceDurationReportExecute(r)
}

/*
GetHistoricProcessInstanceDurationReport Get Duration Report

Retrieves a report about the duration of completed process instances, grouped by a period.
These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.

**Note:** This only includes historic data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricProcessInstanceDurationReportRequest
*/
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstanceDurationReport(ctx context.Context) ApiGetHistoricProcessInstanceDurationReportRequest {
	return ApiGetHistoricProcessInstanceDurationReportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DurationReportResultDto
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstanceDurationReportExecute(r ApiGetHistoricProcessInstanceDurationReportRequest) ([]DurationReportResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DurationReportResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.GetHistoricProcessInstanceDurationReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/report"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportType == nil {
		return localVarReturnValue, nil, reportError("reportType is required and must be specified")
	}
	if r.periodUnit == nil {
		return localVarReturnValue, nil, reportError("periodUnit is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "reportType", r.reportType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "periodUnit", r.periodUnit, "")
	if r.processDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionIdIn", r.processDefinitionIdIn, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.startedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBefore", r.startedBefore, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/csv", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricProcessInstancesRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
	processInstanceId *string
	processInstanceIds *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionKeyIn *string
	processDefinitionName *string
	processDefinitionNameLike *string
	processDefinitionKeyNotIn *string
	processInstanceBusinessKey *string
	processInstanceBusinessKeyIn *string
	processInstanceBusinessKeyLike *string
	rootProcessInstances *bool
	finished *bool
	unfinished *bool
	withIncidents *bool
	withRootIncidents *bool
	incidentType *string
	incidentStatus *string
	incidentMessage *string
	incidentMessageLike *string
	startedBefore *time.Time
	startedAfter *time.Time
	finishedBefore *time.Time
	finishedAfter *time.Time
	executedActivityAfter *time.Time
	executedActivityBefore *time.Time
	executedJobAfter *time.Time
	executedJobBefore *time.Time
	startedBy *string
	superProcessInstanceId *string
	subProcessInstanceId *string
	superCaseInstanceId *string
	subCaseInstanceId *string
	caseInstanceId *string
	tenantIdIn *string
	withoutTenantId *bool
	executedActivityIdIn *string
	activeActivityIdIn *string
	active *bool
	suspended *bool
	completed *bool
	externallyTerminated *bool
	internallyTerminated *bool
	variables *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricProcessInstancesRequest) SortBy(sortBy string) ApiGetHistoricProcessInstancesRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricProcessInstancesRequest) SortOrder(sortOrder string) ApiGetHistoricProcessInstancesRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricProcessInstancesRequest) FirstResult(firstResult int32) ApiGetHistoricProcessInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricProcessInstancesRequest) MaxResults(maxResults int32) ApiGetHistoricProcessInstancesRequest {
	r.maxResults = &maxResults
	return r
}

// Filter by process instance id.
func (r ApiGetHistoricProcessInstancesRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricProcessInstancesRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ProcessInstanceIds(processInstanceIds string) ApiGetHistoricProcessInstancesRequest {
	r.processInstanceIds = &processInstanceIds
	return r
}

// Filter by the process definition the instances run on.
func (r ApiGetHistoricProcessInstancesRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricProcessInstancesRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by the key of the process definition the instances run on.
func (r ApiGetHistoricProcessInstancesRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricProcessInstancesRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetHistoricProcessInstancesRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Filter by the name of the process definition the instances run on.
func (r ApiGetHistoricProcessInstancesRequest) ProcessDefinitionName(processDefinitionName string) ApiGetHistoricProcessInstancesRequest {
	r.processDefinitionName = &processDefinitionName
	return r
}

// Filter by process definition names that the parameter is a substring of.
func (r ApiGetHistoricProcessInstancesRequest) ProcessDefinitionNameLike(processDefinitionNameLike string) ApiGetHistoricProcessInstancesRequest {
	r.processDefinitionNameLike = &processDefinitionNameLike
	return r
}

// Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ProcessDefinitionKeyNotIn(processDefinitionKeyNotIn string) ApiGetHistoricProcessInstancesRequest {
	r.processDefinitionKeyNotIn = &processDefinitionKeyNotIn
	return r
}

// Filter by process instance business key.
func (r ApiGetHistoricProcessInstancesRequest) ProcessInstanceBusinessKey(processInstanceBusinessKey string) ApiGetHistoricProcessInstancesRequest {
	r.processInstanceBusinessKey = &processInstanceBusinessKey
	return r
}

// Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesRequest) ProcessInstanceBusinessKeyIn(processInstanceBusinessKeyIn string) ApiGetHistoricProcessInstancesRequest {
	r.processInstanceBusinessKeyIn = &processInstanceBusinessKeyIn
	return r
}

// Filter by process instance business key that the parameter is a substring of.
func (r ApiGetHistoricProcessInstancesRequest) ProcessInstanceBusinessKeyLike(processInstanceBusinessKeyLike string) ApiGetHistoricProcessInstancesRequest {
	r.processInstanceBusinessKeyLike = &processInstanceBusinessKeyLike
	return r
}

// Restrict the query to all process instances that are top level process instances.
func (r ApiGetHistoricProcessInstancesRequest) RootProcessInstances(rootProcessInstances bool) ApiGetHistoricProcessInstancesRequest {
	r.rootProcessInstances = &rootProcessInstances
	return r
}

// Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesRequest) Finished(finished bool) ApiGetHistoricProcessInstancesRequest {
	r.finished = &finished
	return r
}

// Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesRequest) Unfinished(unfinished bool) ApiGetHistoricProcessInstancesRequest {
	r.unfinished = &unfinished
	return r
}

// Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesRequest) WithIncidents(withIncidents bool) ApiGetHistoricProcessInstancesRequest {
	r.withIncidents = &withIncidents
	return r
}

// Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesRequest) WithRootIncidents(withRootIncidents bool) ApiGetHistoricProcessInstancesRequest {
	r.withRootIncidents = &withRootIncidents
	return r
}

// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
func (r ApiGetHistoricProcessInstancesRequest) IncidentType(incidentType string) ApiGetHistoricProcessInstancesRequest {
	r.incidentType = &incidentType
	return r
}

// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
func (r ApiGetHistoricProcessInstancesRequest) IncidentStatus(incidentStatus string) ApiGetHistoricProcessInstancesRequest {
	r.incidentStatus = &incidentStatus
	return r
}

// Filter by the incident message. Exact match.
func (r ApiGetHistoricProcessInstancesRequest) IncidentMessage(incidentMessage string) ApiGetHistoricProcessInstancesRequest {
	r.incidentMessage = &incidentMessage
	return r
}

// Filter by the incident message that the parameter is a substring of.
func (r ApiGetHistoricProcessInstancesRequest) IncidentMessageLike(incidentMessageLike string) ApiGetHistoricProcessInstancesRequest {
	r.incidentMessageLike = &incidentMessageLike
	return r
}

// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) StartedBefore(startedBefore time.Time) ApiGetHistoricProcessInstancesRequest {
	r.startedBefore = &startedBefore
	return r
}

// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) StartedAfter(startedAfter time.Time) ApiGetHistoricProcessInstancesRequest {
	r.startedAfter = &startedAfter
	return r
}

// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) FinishedBefore(finishedBefore time.Time) ApiGetHistoricProcessInstancesRequest {
	r.finishedBefore = &finishedBefore
	return r
}

// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) FinishedAfter(finishedAfter time.Time) ApiGetHistoricProcessInstancesRequest {
	r.finishedAfter = &finishedAfter
	return r
}

// Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ExecutedActivityAfter(executedActivityAfter time.Time) ApiGetHistoricProcessInstancesRequest {
	r.executedActivityAfter = &executedActivityAfter
	return r
}

// Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ExecutedActivityBefore(executedActivityBefore time.Time) ApiGetHistoricProcessInstancesRequest {
	r.executedActivityBefore = &executedActivityBefore
	return r
}

// Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ExecutedJobAfter(executedJobAfter time.Time) ApiGetHistoricProcessInstancesRequest {
	r.executedJobAfter = &executedJobAfter
	return r
}

// Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesRequest) ExecutedJobBefore(executedJobBefore time.Time) ApiGetHistoricProcessInstancesRequest {
	r.executedJobBefore = &executedJobBefore
	return r
}

// Only include process instances that were started by the given user.
func (r ApiGetHistoricProcessInstancesRequest) StartedBy(startedBy string) ApiGetHistoricProcessInstancesRequest {
	r.startedBy = &startedBy
	return r
}

// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
func (r ApiGetHistoricProcessInstancesRequest) SuperProcessInstanceId(superProcessInstanceId string) ApiGetHistoricProcessInstancesRequest {
	r.superProcessInstanceId = &superProcessInstanceId
	return r
}

// Restrict query to one process instance that has a sub process instance with the given id.
func (r ApiGetHistoricProcessInstancesRequest) SubProcessInstanceId(subProcessInstanceId string) ApiGetHistoricProcessInstancesRequest {
	r.subProcessInstanceId = &subProcessInstanceId
	return r
}

// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
func (r ApiGetHistoricProcessInstancesRequest) SuperCaseInstanceId(superCaseInstanceId string) ApiGetHistoricProcessInstancesRequest {
	r.superCaseInstanceId = &superCaseInstanceId
	return r
}

// Restrict query to one process instance that has a sub case instance with the given id.
func (r ApiGetHistoricProcessInstancesRequest) SubCaseInstanceId(subCaseInstanceId string) ApiGetHistoricProcessInstancesRequest {
	r.subCaseInstanceId = &subCaseInstanceId
	return r
}

// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
func (r ApiGetHistoricProcessInstancesRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricProcessInstancesRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricProcessInstancesRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricProcessInstancesRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesRequest) ExecutedActivityIdIn(executedActivityIdIn string) ApiGetHistoricProcessInstancesRequest {
	r.executedActivityIdIn = &executedActivityIdIn
	return r
}

// Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesRequest) ActiveActivityIdIn(activeActivityIdIn string) ApiGetHistoricProcessInstancesRequest {
	r.activeActivityIdIn = &activeActivityIdIn
	return r
}

// Restrict to instances that are active.
func (r ApiGetHistoricProcessInstancesRequest) Active(active bool) ApiGetHistoricProcessInstancesRequest {
	r.active = &active
	return r
}

// Restrict to instances that are suspended.
func (r ApiGetHistoricProcessInstancesRequest) Suspended(suspended bool) ApiGetHistoricProcessInstancesRequest {
	r.suspended = &suspended
	return r
}

// Restrict to instances that are completed.
func (r ApiGetHistoricProcessInstancesRequest) Completed(completed bool) ApiGetHistoricProcessInstancesRequest {
	r.completed = &completed
	return r
}

// Restrict to instances that are externallyTerminated.
func (r ApiGetHistoricProcessInstancesRequest) ExternallyTerminated(externallyTerminated bool) ApiGetHistoricProcessInstancesRequest {
	r.externallyTerminated = &externallyTerminated
	return r
}

// Restrict to instances that are internallyTerminated.
func (r ApiGetHistoricProcessInstancesRequest) InternallyTerminated(internallyTerminated bool) ApiGetHistoricProcessInstancesRequest {
	r.internallyTerminated = &internallyTerminated
	return r
}

// Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
func (r ApiGetHistoricProcessInstancesRequest) Variables(variables string) ApiGetHistoricProcessInstancesRequest {
	r.variables = &variables
	return r
}

// Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
func (r ApiGetHistoricProcessInstancesRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetHistoricProcessInstancesRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
func (r ApiGetHistoricProcessInstancesRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetHistoricProcessInstancesRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

func (r ApiGetHistoricProcessInstancesRequest) Execute() ([]HistoricProcessInstanceDto, *http.Response, error) {
	return r.ApiService.GetHistoricProcessInstancesExecute(r)
}

/*
GetHistoricProcessInstances Get List

Queries for historic process instances that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get Process Instance Count](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query-count/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricProcessInstancesRequest
*/
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstances(ctx context.Context) ApiGetHistoricProcessInstancesRequest {
	return ApiGetHistoricProcessInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricProcessInstanceDto
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstancesExecute(r ApiGetHistoricProcessInstancesRequest) ([]HistoricProcessInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricProcessInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.GetHistoricProcessInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processInstanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIds", r.processInstanceIds, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.processDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionName", r.processDefinitionName, "")
	}
	if r.processDefinitionNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionNameLike", r.processDefinitionNameLike, "")
	}
	if r.processDefinitionKeyNotIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyNotIn", r.processDefinitionKeyNotIn, "")
	}
	if r.processInstanceBusinessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKey", r.processInstanceBusinessKey, "")
	}
	if r.processInstanceBusinessKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyIn", r.processInstanceBusinessKeyIn, "")
	}
	if r.processInstanceBusinessKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyLike", r.processInstanceBusinessKeyLike, "")
	}
	if r.rootProcessInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootProcessInstances", r.rootProcessInstances, "")
	}
	if r.finished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finished", r.finished, "")
	}
	if r.unfinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unfinished", r.unfinished, "")
	}
	if r.withIncidents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withIncidents", r.withIncidents, "")
	}
	if r.withRootIncidents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withRootIncidents", r.withRootIncidents, "")
	}
	if r.incidentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentType", r.incidentType, "")
	}
	if r.incidentStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentStatus", r.incidentStatus, "")
	}
	if r.incidentMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessage", r.incidentMessage, "")
	}
	if r.incidentMessageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessageLike", r.incidentMessageLike, "")
	}
	if r.startedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBefore", r.startedBefore, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	if r.finishedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedBefore", r.finishedBefore, "")
	}
	if r.finishedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedAfter", r.finishedAfter, "")
	}
	if r.executedActivityAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedActivityAfter", r.executedActivityAfter, "")
	}
	if r.executedActivityBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedActivityBefore", r.executedActivityBefore, "")
	}
	if r.executedJobAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedJobAfter", r.executedJobAfter, "")
	}
	if r.executedJobBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedJobBefore", r.executedJobBefore, "")
	}
	if r.startedBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBy", r.startedBy, "")
	}
	if r.superProcessInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superProcessInstanceId", r.superProcessInstanceId, "")
	}
	if r.subProcessInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subProcessInstanceId", r.subProcessInstanceId, "")
	}
	if r.superCaseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superCaseInstanceId", r.superCaseInstanceId, "")
	}
	if r.subCaseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subCaseInstanceId", r.subCaseInstanceId, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.executedActivityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedActivityIdIn", r.executedActivityIdIn, "")
	}
	if r.activeActivityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activeActivityIdIn", r.activeActivityIdIn, "")
	}
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "")
	}
	if r.suspended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suspended", r.suspended, "")
	}
	if r.completed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completed", r.completed, "")
	}
	if r.externallyTerminated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externallyTerminated", r.externallyTerminated, "")
	}
	if r.internallyTerminated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "internallyTerminated", r.internallyTerminated, "")
	}
	if r.variables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variables", r.variables, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricProcessInstancesCountRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	processInstanceId *string
	processInstanceIds *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionKeyIn *string
	processDefinitionName *string
	processDefinitionNameLike *string
	processDefinitionKeyNotIn *string
	processInstanceBusinessKey *string
	processInstanceBusinessKeyIn *string
	processInstanceBusinessKeyLike *string
	rootProcessInstances *bool
	finished *bool
	unfinished *bool
	withIncidents *bool
	withRootIncidents *bool
	incidentType *string
	incidentStatus *string
	incidentMessage *string
	incidentMessageLike *string
	startedBefore *time.Time
	startedAfter *time.Time
	finishedBefore *time.Time
	finishedAfter *time.Time
	executedActivityAfter *time.Time
	executedActivityBefore *time.Time
	executedJobAfter *time.Time
	executedJobBefore *time.Time
	startedBy *string
	superProcessInstanceId *string
	subProcessInstanceId *string
	superCaseInstanceId *string
	subCaseInstanceId *string
	caseInstanceId *string
	tenantIdIn *string
	withoutTenantId *bool
	executedActivityIdIn *string
	activeActivityIdIn *string
	active *bool
	suspended *bool
	completed *bool
	externallyTerminated *bool
	internallyTerminated *bool
	variables *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
}

// Filter by process instance id.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricProcessInstancesCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessInstanceIds(processInstanceIds string) ApiGetHistoricProcessInstancesCountRequest {
	r.processInstanceIds = &processInstanceIds
	return r
}

// Filter by the process definition the instances run on.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricProcessInstancesCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by the key of the process definition the instances run on.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricProcessInstancesCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetHistoricProcessInstancesCountRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Filter by the name of the process definition the instances run on.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessDefinitionName(processDefinitionName string) ApiGetHistoricProcessInstancesCountRequest {
	r.processDefinitionName = &processDefinitionName
	return r
}

// Filter by process definition names that the parameter is a substring of.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessDefinitionNameLike(processDefinitionNameLike string) ApiGetHistoricProcessInstancesCountRequest {
	r.processDefinitionNameLike = &processDefinitionNameLike
	return r
}

// Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessDefinitionKeyNotIn(processDefinitionKeyNotIn string) ApiGetHistoricProcessInstancesCountRequest {
	r.processDefinitionKeyNotIn = &processDefinitionKeyNotIn
	return r
}

// Filter by process instance business key.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessInstanceBusinessKey(processInstanceBusinessKey string) ApiGetHistoricProcessInstancesCountRequest {
	r.processInstanceBusinessKey = &processInstanceBusinessKey
	return r
}

// Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessInstanceBusinessKeyIn(processInstanceBusinessKeyIn string) ApiGetHistoricProcessInstancesCountRequest {
	r.processInstanceBusinessKeyIn = &processInstanceBusinessKeyIn
	return r
}

// Filter by process instance business key that the parameter is a substring of.
func (r ApiGetHistoricProcessInstancesCountRequest) ProcessInstanceBusinessKeyLike(processInstanceBusinessKeyLike string) ApiGetHistoricProcessInstancesCountRequest {
	r.processInstanceBusinessKeyLike = &processInstanceBusinessKeyLike
	return r
}

// Restrict the query to all process instances that are top level process instances.
func (r ApiGetHistoricProcessInstancesCountRequest) RootProcessInstances(rootProcessInstances bool) ApiGetHistoricProcessInstancesCountRequest {
	r.rootProcessInstances = &rootProcessInstances
	return r
}

// Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesCountRequest) Finished(finished bool) ApiGetHistoricProcessInstancesCountRequest {
	r.finished = &finished
	return r
}

// Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesCountRequest) Unfinished(unfinished bool) ApiGetHistoricProcessInstancesCountRequest {
	r.unfinished = &unfinished
	return r
}

// Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesCountRequest) WithIncidents(withIncidents bool) ApiGetHistoricProcessInstancesCountRequest {
	r.withIncidents = &withIncidents
	return r
}

// Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesCountRequest) WithRootIncidents(withRootIncidents bool) ApiGetHistoricProcessInstancesCountRequest {
	r.withRootIncidents = &withRootIncidents
	return r
}

// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
func (r ApiGetHistoricProcessInstancesCountRequest) IncidentType(incidentType string) ApiGetHistoricProcessInstancesCountRequest {
	r.incidentType = &incidentType
	return r
}

// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
func (r ApiGetHistoricProcessInstancesCountRequest) IncidentStatus(incidentStatus string) ApiGetHistoricProcessInstancesCountRequest {
	r.incidentStatus = &incidentStatus
	return r
}

// Filter by the incident message. Exact match.
func (r ApiGetHistoricProcessInstancesCountRequest) IncidentMessage(incidentMessage string) ApiGetHistoricProcessInstancesCountRequest {
	r.incidentMessage = &incidentMessage
	return r
}

// Filter by the incident message that the parameter is a substring of.
func (r ApiGetHistoricProcessInstancesCountRequest) IncidentMessageLike(incidentMessageLike string) ApiGetHistoricProcessInstancesCountRequest {
	r.incidentMessageLike = &incidentMessageLike
	return r
}

// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) StartedBefore(startedBefore time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.startedBefore = &startedBefore
	return r
}

// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) StartedAfter(startedAfter time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.startedAfter = &startedAfter
	return r
}

// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) FinishedBefore(finishedBefore time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.finishedBefore = &finishedBefore
	return r
}

// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) FinishedAfter(finishedAfter time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.finishedAfter = &finishedAfter
	return r
}

// Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ExecutedActivityAfter(executedActivityAfter time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.executedActivityAfter = &executedActivityAfter
	return r
}

// Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ExecutedActivityBefore(executedActivityBefore time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.executedActivityBefore = &executedActivityBefore
	return r
}

// Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ExecutedJobAfter(executedJobAfter time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.executedJobAfter = &executedJobAfter
	return r
}

// Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricProcessInstancesCountRequest) ExecutedJobBefore(executedJobBefore time.Time) ApiGetHistoricProcessInstancesCountRequest {
	r.executedJobBefore = &executedJobBefore
	return r
}

// Only include process instances that were started by the given user.
func (r ApiGetHistoricProcessInstancesCountRequest) StartedBy(startedBy string) ApiGetHistoricProcessInstancesCountRequest {
	r.startedBy = &startedBy
	return r
}

// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
func (r ApiGetHistoricProcessInstancesCountRequest) SuperProcessInstanceId(superProcessInstanceId string) ApiGetHistoricProcessInstancesCountRequest {
	r.superProcessInstanceId = &superProcessInstanceId
	return r
}

// Restrict query to one process instance that has a sub process instance with the given id.
func (r ApiGetHistoricProcessInstancesCountRequest) SubProcessInstanceId(subProcessInstanceId string) ApiGetHistoricProcessInstancesCountRequest {
	r.subProcessInstanceId = &subProcessInstanceId
	return r
}

// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
func (r ApiGetHistoricProcessInstancesCountRequest) SuperCaseInstanceId(superCaseInstanceId string) ApiGetHistoricProcessInstancesCountRequest {
	r.superCaseInstanceId = &superCaseInstanceId
	return r
}

// Restrict query to one process instance that has a sub case instance with the given id.
func (r ApiGetHistoricProcessInstancesCountRequest) SubCaseInstanceId(subCaseInstanceId string) ApiGetHistoricProcessInstancesCountRequest {
	r.subCaseInstanceId = &subCaseInstanceId
	return r
}

// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
func (r ApiGetHistoricProcessInstancesCountRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricProcessInstancesCountRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricProcessInstancesCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricProcessInstancesCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricProcessInstancesCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesCountRequest) ExecutedActivityIdIn(executedActivityIdIn string) ApiGetHistoricProcessInstancesCountRequest {
	r.executedActivityIdIn = &executedActivityIdIn
	return r
}

// Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60;
func (r ApiGetHistoricProcessInstancesCountRequest) ActiveActivityIdIn(activeActivityIdIn string) ApiGetHistoricProcessInstancesCountRequest {
	r.activeActivityIdIn = &activeActivityIdIn
	return r
}

// Restrict to instances that are active.
func (r ApiGetHistoricProcessInstancesCountRequest) Active(active bool) ApiGetHistoricProcessInstancesCountRequest {
	r.active = &active
	return r
}

// Restrict to instances that are suspended.
func (r ApiGetHistoricProcessInstancesCountRequest) Suspended(suspended bool) ApiGetHistoricProcessInstancesCountRequest {
	r.suspended = &suspended
	return r
}

// Restrict to instances that are completed.
func (r ApiGetHistoricProcessInstancesCountRequest) Completed(completed bool) ApiGetHistoricProcessInstancesCountRequest {
	r.completed = &completed
	return r
}

// Restrict to instances that are externallyTerminated.
func (r ApiGetHistoricProcessInstancesCountRequest) ExternallyTerminated(externallyTerminated bool) ApiGetHistoricProcessInstancesCountRequest {
	r.externallyTerminated = &externallyTerminated
	return r
}

// Restrict to instances that are internallyTerminated.
func (r ApiGetHistoricProcessInstancesCountRequest) InternallyTerminated(internallyTerminated bool) ApiGetHistoricProcessInstancesCountRequest {
	r.internallyTerminated = &internallyTerminated
	return r
}

// Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. 
func (r ApiGetHistoricProcessInstancesCountRequest) Variables(variables string) ApiGetHistoricProcessInstancesCountRequest {
	r.variables = &variables
	return r
}

// Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal.
func (r ApiGetHistoricProcessInstancesCountRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetHistoricProcessInstancesCountRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal.
func (r ApiGetHistoricProcessInstancesCountRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetHistoricProcessInstancesCountRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

func (r ApiGetHistoricProcessInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricProcessInstancesCountExecute(r)
}

/*
GetHistoricProcessInstancesCount Get List Count

Queries for the number of historic process instances that fulfill the given parameters.
Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricProcessInstancesCountRequest
*/
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstancesCount(ctx context.Context) ApiGetHistoricProcessInstancesCountRequest {
	return ApiGetHistoricProcessInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricProcessInstanceAPIService) GetHistoricProcessInstancesCountExecute(r ApiGetHistoricProcessInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.GetHistoricProcessInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processInstanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIds", r.processInstanceIds, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.processDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionName", r.processDefinitionName, "")
	}
	if r.processDefinitionNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionNameLike", r.processDefinitionNameLike, "")
	}
	if r.processDefinitionKeyNotIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyNotIn", r.processDefinitionKeyNotIn, "")
	}
	if r.processInstanceBusinessKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKey", r.processInstanceBusinessKey, "")
	}
	if r.processInstanceBusinessKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyIn", r.processInstanceBusinessKeyIn, "")
	}
	if r.processInstanceBusinessKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceBusinessKeyLike", r.processInstanceBusinessKeyLike, "")
	}
	if r.rootProcessInstances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootProcessInstances", r.rootProcessInstances, "")
	}
	if r.finished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finished", r.finished, "")
	}
	if r.unfinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unfinished", r.unfinished, "")
	}
	if r.withIncidents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withIncidents", r.withIncidents, "")
	}
	if r.withRootIncidents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withRootIncidents", r.withRootIncidents, "")
	}
	if r.incidentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentType", r.incidentType, "")
	}
	if r.incidentStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentStatus", r.incidentStatus, "")
	}
	if r.incidentMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessage", r.incidentMessage, "")
	}
	if r.incidentMessageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessageLike", r.incidentMessageLike, "")
	}
	if r.startedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBefore", r.startedBefore, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	if r.finishedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedBefore", r.finishedBefore, "")
	}
	if r.finishedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "finishedAfter", r.finishedAfter, "")
	}
	if r.executedActivityAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedActivityAfter", r.executedActivityAfter, "")
	}
	if r.executedActivityBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedActivityBefore", r.executedActivityBefore, "")
	}
	if r.executedJobAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedJobAfter", r.executedJobAfter, "")
	}
	if r.executedJobBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedJobBefore", r.executedJobBefore, "")
	}
	if r.startedBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedBy", r.startedBy, "")
	}
	if r.superProcessInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superProcessInstanceId", r.superProcessInstanceId, "")
	}
	if r.subProcessInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subProcessInstanceId", r.subProcessInstanceId, "")
	}
	if r.superCaseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superCaseInstanceId", r.superCaseInstanceId, "")
	}
	if r.subCaseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subCaseInstanceId", r.subCaseInstanceId, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.executedActivityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executedActivityIdIn", r.executedActivityIdIn, "")
	}
	if r.activeActivityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activeActivityIdIn", r.activeActivityIdIn, "")
	}
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "")
	}
	if r.suspended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suspended", r.suspended, "")
	}
	if r.completed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completed", r.completed, "")
	}
	if r.externallyTerminated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externallyTerminated", r.externallyTerminated, "")
	}
	if r.internallyTerminated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "internallyTerminated", r.internallyTerminated, "")
	}
	if r.variables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variables", r.variables, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricProcessInstancesRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	firstResult *int32
	maxResults *int32
	historicProcessInstanceQueryDto *HistoricProcessInstanceQueryDto
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiQueryHistoricProcessInstancesRequest) FirstResult(firstResult int32) ApiQueryHistoricProcessInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiQueryHistoricProcessInstancesRequest) MaxResults(maxResults int32) ApiQueryHistoricProcessInstancesRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiQueryHistoricProcessInstancesRequest) HistoricProcessInstanceQueryDto(historicProcessInstanceQueryDto HistoricProcessInstanceQueryDto) ApiQueryHistoricProcessInstancesRequest {
	r.historicProcessInstanceQueryDto = &historicProcessInstanceQueryDto
	return r
}

func (r ApiQueryHistoricProcessInstancesRequest) Execute() ([]HistoricProcessInstanceDto, *http.Response, error) {
	return r.ApiService.QueryHistoricProcessInstancesExecute(r)
}

/*
QueryHistoricProcessInstances Get List (POST)

Queries for historic process instances that fulfill the given parameters.
This method is slightly more powerful than the
[Get Process Instance](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query/)
because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricProcessInstancesRequest
*/
func (a *HistoricProcessInstanceAPIService) QueryHistoricProcessInstances(ctx context.Context) ApiQueryHistoricProcessInstancesRequest {
	return ApiQueryHistoricProcessInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricProcessInstanceDto
func (a *HistoricProcessInstanceAPIService) QueryHistoricProcessInstancesExecute(r ApiQueryHistoricProcessInstancesRequest) ([]HistoricProcessInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricProcessInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.QueryHistoricProcessInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicProcessInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricProcessInstancesCountRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	historicProcessInstanceQueryDto *HistoricProcessInstanceQueryDto
}

func (r ApiQueryHistoricProcessInstancesCountRequest) HistoricProcessInstanceQueryDto(historicProcessInstanceQueryDto HistoricProcessInstanceQueryDto) ApiQueryHistoricProcessInstancesCountRequest {
	r.historicProcessInstanceQueryDto = &historicProcessInstanceQueryDto
	return r
}

func (r ApiQueryHistoricProcessInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.QueryHistoricProcessInstancesCountExecute(r)
}

/*
QueryHistoricProcessInstancesCount Get List Count (POST)

Queries for the number of historic process instances that fulfill the given parameters.
This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/get-process-instance-query/) method and
therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.21/reference/rest/history/process-instance/post-process-instance-query-count/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricProcessInstancesCountRequest
*/
func (a *HistoricProcessInstanceAPIService) QueryHistoricProcessInstancesCount(ctx context.Context) ApiQueryHistoricProcessInstancesCountRequest {
	return ApiQueryHistoricProcessInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricProcessInstanceAPIService) QueryHistoricProcessInstancesCountExecute(r ApiQueryHistoricProcessInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.QueryHistoricProcessInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicProcessInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetRemovalTimeAsyncRequest struct {
	ctx context.Context
	ApiService HistoricProcessInstanceAPI
	setRemovalTimeToHistoricProcessInstancesDto *SetRemovalTimeToHistoricProcessInstancesDto
}

func (r ApiSetRemovalTimeAsyncRequest) SetRemovalTimeToHistoricProcessInstancesDto(setRemovalTimeToHistoricProcessInstancesDto SetRemovalTimeToHistoricProcessInstancesDto) ApiSetRemovalTimeAsyncRequest {
	r.setRemovalTimeToHistoricProcessInstancesDto = &setRemovalTimeToHistoricProcessInstancesDto
	return r
}

func (r ApiSetRemovalTimeAsyncRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.SetRemovalTimeAsyncExecute(r)
}

/*
SetRemovalTimeAsync Set Removal Time Async (POST)

Sets the removal time to multiple historic process instances asynchronously (batch).

At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetRemovalTimeAsyncRequest
*/
func (a *HistoricProcessInstanceAPIService) SetRemovalTimeAsync(ctx context.Context) ApiSetRemovalTimeAsyncRequest {
	return ApiSetRemovalTimeAsyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *HistoricProcessInstanceAPIService) SetRemovalTimeAsyncExecute(r ApiSetRemovalTimeAsyncRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricProcessInstanceAPIService.SetRemovalTimeAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/process-instance/set-removal-time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setRemovalTimeToHistoricProcessInstancesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
