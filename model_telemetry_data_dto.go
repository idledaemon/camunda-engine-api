/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the TelemetryDataDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryDataDto{}

// TelemetryDataDto struct for TelemetryDataDto
type TelemetryDataDto struct {
	// An id which is unique for each installation of Camunda. It is stored once per database so all engines connected to the same database will have the same installation ID. The ID is used to identify a single installation of Camunda Platform.
	Installation NullableString `json:"installation,omitempty"`
	Product *TelemetryProductDto `json:"product,omitempty"`
}

// NewTelemetryDataDto instantiates a new TelemetryDataDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryDataDto() *TelemetryDataDto {
	this := TelemetryDataDto{}
	return &this
}

// NewTelemetryDataDtoWithDefaults instantiates a new TelemetryDataDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryDataDtoWithDefaults() *TelemetryDataDto {
	this := TelemetryDataDto{}
	return &this
}

// GetInstallation returns the Installation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryDataDto) GetInstallation() string {
	if o == nil || IsNil(o.Installation.Get()) {
		var ret string
		return ret
	}
	return *o.Installation.Get()
}

// GetInstallationOk returns a tuple with the Installation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryDataDto) GetInstallationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Installation.Get(), o.Installation.IsSet()
}

// HasInstallation returns a boolean if a field has been set.
func (o *TelemetryDataDto) HasInstallation() bool {
	if o != nil && o.Installation.IsSet() {
		return true
	}

	return false
}

// SetInstallation gets a reference to the given NullableString and assigns it to the Installation field.
func (o *TelemetryDataDto) SetInstallation(v string) {
	o.Installation.Set(&v)
}
// SetInstallationNil sets the value for Installation to be an explicit nil
func (o *TelemetryDataDto) SetInstallationNil() {
	o.Installation.Set(nil)
}

// UnsetInstallation ensures that no value is present for Installation, not even an explicit nil
func (o *TelemetryDataDto) UnsetInstallation() {
	o.Installation.Unset()
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *TelemetryDataDto) GetProduct() TelemetryProductDto {
	if o == nil || IsNil(o.Product) {
		var ret TelemetryProductDto
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryDataDto) GetProductOk() (*TelemetryProductDto, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *TelemetryDataDto) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given TelemetryProductDto and assigns it to the Product field.
func (o *TelemetryDataDto) SetProduct(v TelemetryProductDto) {
	o.Product = &v
}

func (o TelemetryDataDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryDataDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Installation.IsSet() {
		toSerialize["installation"] = o.Installation.Get()
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableTelemetryDataDto struct {
	value *TelemetryDataDto
	isSet bool
}

func (v NullableTelemetryDataDto) Get() *TelemetryDataDto {
	return v.value
}

func (v *NullableTelemetryDataDto) Set(val *TelemetryDataDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryDataDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryDataDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryDataDto(val *TelemetryDataDto) *NullableTelemetryDataDto {
	return &NullableTelemetryDataDto{value: val, isSet: true}
}

func (v NullableTelemetryDataDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryDataDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


