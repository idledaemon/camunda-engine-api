/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the SetRemovalTimeToHistoricDecisionInstancesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetRemovalTimeToHistoricDecisionInstancesDto{}

// SetRemovalTimeToHistoricDecisionInstancesDto struct for SetRemovalTimeToHistoricDecisionInstancesDto
type SetRemovalTimeToHistoricDecisionInstancesDto struct {
	// The date for which the instances shall be removed. Value may not be `null`.  **Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.
	AbsoluteRemovalTime NullableTime `json:"absoluteRemovalTime,omitempty"`
	// Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.  **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.
	ClearedRemovalTime NullableBool `json:"clearedRemovalTime,omitempty"`
	// The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.  **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.
	CalculatedRemovalTime NullableBool `json:"calculatedRemovalTime,omitempty"`
	// Sets the removal time to all historic decision instances in the hierarchy. Value may only be `true`, as `false` is the default behavior.
	Hierarchical NullableBool `json:"hierarchical,omitempty"`
	HistoricDecisionInstanceQuery *HistoricDecisionInstanceQueryDto `json:"historicDecisionInstanceQuery,omitempty"`
	// The ids of the historic decision instances to set the removal time for.
	HistoricDecisionInstanceIds []string `json:"historicDecisionInstanceIds,omitempty"`
}

// NewSetRemovalTimeToHistoricDecisionInstancesDto instantiates a new SetRemovalTimeToHistoricDecisionInstancesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetRemovalTimeToHistoricDecisionInstancesDto() *SetRemovalTimeToHistoricDecisionInstancesDto {
	this := SetRemovalTimeToHistoricDecisionInstancesDto{}
	return &this
}

// NewSetRemovalTimeToHistoricDecisionInstancesDtoWithDefaults instantiates a new SetRemovalTimeToHistoricDecisionInstancesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetRemovalTimeToHistoricDecisionInstancesDtoWithDefaults() *SetRemovalTimeToHistoricDecisionInstancesDto {
	this := SetRemovalTimeToHistoricDecisionInstancesDto{}
	return &this
}

// GetAbsoluteRemovalTime returns the AbsoluteRemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetAbsoluteRemovalTime() time.Time {
	if o == nil || IsNil(o.AbsoluteRemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AbsoluteRemovalTime.Get()
}

// GetAbsoluteRemovalTimeOk returns a tuple with the AbsoluteRemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetAbsoluteRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AbsoluteRemovalTime.Get(), o.AbsoluteRemovalTime.IsSet()
}

// HasAbsoluteRemovalTime returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) HasAbsoluteRemovalTime() bool {
	if o != nil && o.AbsoluteRemovalTime.IsSet() {
		return true
	}

	return false
}

// SetAbsoluteRemovalTime gets a reference to the given NullableTime and assigns it to the AbsoluteRemovalTime field.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetAbsoluteRemovalTime(v time.Time) {
	o.AbsoluteRemovalTime.Set(&v)
}
// SetAbsoluteRemovalTimeNil sets the value for AbsoluteRemovalTime to be an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetAbsoluteRemovalTimeNil() {
	o.AbsoluteRemovalTime.Set(nil)
}

// UnsetAbsoluteRemovalTime ensures that no value is present for AbsoluteRemovalTime, not even an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) UnsetAbsoluteRemovalTime() {
	o.AbsoluteRemovalTime.Unset()
}

// GetClearedRemovalTime returns the ClearedRemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetClearedRemovalTime() bool {
	if o == nil || IsNil(o.ClearedRemovalTime.Get()) {
		var ret bool
		return ret
	}
	return *o.ClearedRemovalTime.Get()
}

// GetClearedRemovalTimeOk returns a tuple with the ClearedRemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetClearedRemovalTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClearedRemovalTime.Get(), o.ClearedRemovalTime.IsSet()
}

// HasClearedRemovalTime returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) HasClearedRemovalTime() bool {
	if o != nil && o.ClearedRemovalTime.IsSet() {
		return true
	}

	return false
}

// SetClearedRemovalTime gets a reference to the given NullableBool and assigns it to the ClearedRemovalTime field.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetClearedRemovalTime(v bool) {
	o.ClearedRemovalTime.Set(&v)
}
// SetClearedRemovalTimeNil sets the value for ClearedRemovalTime to be an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetClearedRemovalTimeNil() {
	o.ClearedRemovalTime.Set(nil)
}

// UnsetClearedRemovalTime ensures that no value is present for ClearedRemovalTime, not even an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) UnsetClearedRemovalTime() {
	o.ClearedRemovalTime.Unset()
}

// GetCalculatedRemovalTime returns the CalculatedRemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetCalculatedRemovalTime() bool {
	if o == nil || IsNil(o.CalculatedRemovalTime.Get()) {
		var ret bool
		return ret
	}
	return *o.CalculatedRemovalTime.Get()
}

// GetCalculatedRemovalTimeOk returns a tuple with the CalculatedRemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetCalculatedRemovalTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedRemovalTime.Get(), o.CalculatedRemovalTime.IsSet()
}

// HasCalculatedRemovalTime returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) HasCalculatedRemovalTime() bool {
	if o != nil && o.CalculatedRemovalTime.IsSet() {
		return true
	}

	return false
}

// SetCalculatedRemovalTime gets a reference to the given NullableBool and assigns it to the CalculatedRemovalTime field.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetCalculatedRemovalTime(v bool) {
	o.CalculatedRemovalTime.Set(&v)
}
// SetCalculatedRemovalTimeNil sets the value for CalculatedRemovalTime to be an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetCalculatedRemovalTimeNil() {
	o.CalculatedRemovalTime.Set(nil)
}

// UnsetCalculatedRemovalTime ensures that no value is present for CalculatedRemovalTime, not even an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) UnsetCalculatedRemovalTime() {
	o.CalculatedRemovalTime.Unset()
}

// GetHierarchical returns the Hierarchical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetHierarchical() bool {
	if o == nil || IsNil(o.Hierarchical.Get()) {
		var ret bool
		return ret
	}
	return *o.Hierarchical.Get()
}

// GetHierarchicalOk returns a tuple with the Hierarchical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetHierarchicalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hierarchical.Get(), o.Hierarchical.IsSet()
}

// HasHierarchical returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) HasHierarchical() bool {
	if o != nil && o.Hierarchical.IsSet() {
		return true
	}

	return false
}

// SetHierarchical gets a reference to the given NullableBool and assigns it to the Hierarchical field.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetHierarchical(v bool) {
	o.Hierarchical.Set(&v)
}
// SetHierarchicalNil sets the value for Hierarchical to be an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetHierarchicalNil() {
	o.Hierarchical.Set(nil)
}

// UnsetHierarchical ensures that no value is present for Hierarchical, not even an explicit nil
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) UnsetHierarchical() {
	o.Hierarchical.Unset()
}

// GetHistoricDecisionInstanceQuery returns the HistoricDecisionInstanceQuery field value if set, zero value otherwise.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetHistoricDecisionInstanceQuery() HistoricDecisionInstanceQueryDto {
	if o == nil || IsNil(o.HistoricDecisionInstanceQuery) {
		var ret HistoricDecisionInstanceQueryDto
		return ret
	}
	return *o.HistoricDecisionInstanceQuery
}

// GetHistoricDecisionInstanceQueryOk returns a tuple with the HistoricDecisionInstanceQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetHistoricDecisionInstanceQueryOk() (*HistoricDecisionInstanceQueryDto, bool) {
	if o == nil || IsNil(o.HistoricDecisionInstanceQuery) {
		return nil, false
	}
	return o.HistoricDecisionInstanceQuery, true
}

// HasHistoricDecisionInstanceQuery returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) HasHistoricDecisionInstanceQuery() bool {
	if o != nil && !IsNil(o.HistoricDecisionInstanceQuery) {
		return true
	}

	return false
}

// SetHistoricDecisionInstanceQuery gets a reference to the given HistoricDecisionInstanceQueryDto and assigns it to the HistoricDecisionInstanceQuery field.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetHistoricDecisionInstanceQuery(v HistoricDecisionInstanceQueryDto) {
	o.HistoricDecisionInstanceQuery = &v
}

// GetHistoricDecisionInstanceIds returns the HistoricDecisionInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetHistoricDecisionInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HistoricDecisionInstanceIds
}

// GetHistoricDecisionInstanceIdsOk returns a tuple with the HistoricDecisionInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) GetHistoricDecisionInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.HistoricDecisionInstanceIds) {
		return nil, false
	}
	return o.HistoricDecisionInstanceIds, true
}

// HasHistoricDecisionInstanceIds returns a boolean if a field has been set.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) HasHistoricDecisionInstanceIds() bool {
	if o != nil && !IsNil(o.HistoricDecisionInstanceIds) {
		return true
	}

	return false
}

// SetHistoricDecisionInstanceIds gets a reference to the given []string and assigns it to the HistoricDecisionInstanceIds field.
func (o *SetRemovalTimeToHistoricDecisionInstancesDto) SetHistoricDecisionInstanceIds(v []string) {
	o.HistoricDecisionInstanceIds = v
}

func (o SetRemovalTimeToHistoricDecisionInstancesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetRemovalTimeToHistoricDecisionInstancesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AbsoluteRemovalTime.IsSet() {
		toSerialize["absoluteRemovalTime"] = o.AbsoluteRemovalTime.Get()
	}
	if o.ClearedRemovalTime.IsSet() {
		toSerialize["clearedRemovalTime"] = o.ClearedRemovalTime.Get()
	}
	if o.CalculatedRemovalTime.IsSet() {
		toSerialize["calculatedRemovalTime"] = o.CalculatedRemovalTime.Get()
	}
	if o.Hierarchical.IsSet() {
		toSerialize["hierarchical"] = o.Hierarchical.Get()
	}
	if !IsNil(o.HistoricDecisionInstanceQuery) {
		toSerialize["historicDecisionInstanceQuery"] = o.HistoricDecisionInstanceQuery
	}
	if o.HistoricDecisionInstanceIds != nil {
		toSerialize["historicDecisionInstanceIds"] = o.HistoricDecisionInstanceIds
	}
	return toSerialize, nil
}

type NullableSetRemovalTimeToHistoricDecisionInstancesDto struct {
	value *SetRemovalTimeToHistoricDecisionInstancesDto
	isSet bool
}

func (v NullableSetRemovalTimeToHistoricDecisionInstancesDto) Get() *SetRemovalTimeToHistoricDecisionInstancesDto {
	return v.value
}

func (v *NullableSetRemovalTimeToHistoricDecisionInstancesDto) Set(val *SetRemovalTimeToHistoricDecisionInstancesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSetRemovalTimeToHistoricDecisionInstancesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSetRemovalTimeToHistoricDecisionInstancesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetRemovalTimeToHistoricDecisionInstancesDto(val *SetRemovalTimeToHistoricDecisionInstancesDto) *NullableSetRemovalTimeToHistoricDecisionInstancesDto {
	return &NullableSetRemovalTimeToHistoricDecisionInstancesDto{value: val, isSet: true}
}

func (v NullableSetRemovalTimeToHistoricDecisionInstancesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetRemovalTimeToHistoricDecisionInstancesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


