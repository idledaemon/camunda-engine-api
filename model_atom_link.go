/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the AtomLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AtomLink{}

// AtomLink struct for AtomLink
type AtomLink struct {
	// The relation of the link to the object that belongs to.
	Rel NullableString `json:"rel,omitempty"`
	// The url of the link.
	Href NullableString `json:"href,omitempty"`
	// The http method.
	Method NullableString `json:"method,omitempty"`
}

// NewAtomLink instantiates a new AtomLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtomLink() *AtomLink {
	this := AtomLink{}
	return &this
}

// NewAtomLinkWithDefaults instantiates a new AtomLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtomLinkWithDefaults() *AtomLink {
	this := AtomLink{}
	return &this
}

// GetRel returns the Rel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AtomLink) GetRel() string {
	if o == nil || IsNil(o.Rel.Get()) {
		var ret string
		return ret
	}
	return *o.Rel.Get()
}

// GetRelOk returns a tuple with the Rel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AtomLink) GetRelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rel.Get(), o.Rel.IsSet()
}

// HasRel returns a boolean if a field has been set.
func (o *AtomLink) HasRel() bool {
	if o != nil && o.Rel.IsSet() {
		return true
	}

	return false
}

// SetRel gets a reference to the given NullableString and assigns it to the Rel field.
func (o *AtomLink) SetRel(v string) {
	o.Rel.Set(&v)
}
// SetRelNil sets the value for Rel to be an explicit nil
func (o *AtomLink) SetRelNil() {
	o.Rel.Set(nil)
}

// UnsetRel ensures that no value is present for Rel, not even an explicit nil
func (o *AtomLink) UnsetRel() {
	o.Rel.Unset()
}

// GetHref returns the Href field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AtomLink) GetHref() string {
	if o == nil || IsNil(o.Href.Get()) {
		var ret string
		return ret
	}
	return *o.Href.Get()
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AtomLink) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Href.Get(), o.Href.IsSet()
}

// HasHref returns a boolean if a field has been set.
func (o *AtomLink) HasHref() bool {
	if o != nil && o.Href.IsSet() {
		return true
	}

	return false
}

// SetHref gets a reference to the given NullableString and assigns it to the Href field.
func (o *AtomLink) SetHref(v string) {
	o.Href.Set(&v)
}
// SetHrefNil sets the value for Href to be an explicit nil
func (o *AtomLink) SetHrefNil() {
	o.Href.Set(nil)
}

// UnsetHref ensures that no value is present for Href, not even an explicit nil
func (o *AtomLink) UnsetHref() {
	o.Href.Unset()
}

// GetMethod returns the Method field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AtomLink) GetMethod() string {
	if o == nil || IsNil(o.Method.Get()) {
		var ret string
		return ret
	}
	return *o.Method.Get()
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AtomLink) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Method.Get(), o.Method.IsSet()
}

// HasMethod returns a boolean if a field has been set.
func (o *AtomLink) HasMethod() bool {
	if o != nil && o.Method.IsSet() {
		return true
	}

	return false
}

// SetMethod gets a reference to the given NullableString and assigns it to the Method field.
func (o *AtomLink) SetMethod(v string) {
	o.Method.Set(&v)
}
// SetMethodNil sets the value for Method to be an explicit nil
func (o *AtomLink) SetMethodNil() {
	o.Method.Set(nil)
}

// UnsetMethod ensures that no value is present for Method, not even an explicit nil
func (o *AtomLink) UnsetMethod() {
	o.Method.Unset()
}

func (o AtomLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AtomLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rel.IsSet() {
		toSerialize["rel"] = o.Rel.Get()
	}
	if o.Href.IsSet() {
		toSerialize["href"] = o.Href.Get()
	}
	if o.Method.IsSet() {
		toSerialize["method"] = o.Method.Get()
	}
	return toSerialize, nil
}

type NullableAtomLink struct {
	value *AtomLink
	isSet bool
}

func (v NullableAtomLink) Get() *AtomLink {
	return v.value
}

func (v *NullableAtomLink) Set(val *AtomLink) {
	v.value = val
	v.isSet = true
}

func (v NullableAtomLink) IsSet() bool {
	return v.isSet
}

func (v *NullableAtomLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtomLink(val *AtomLink) *NullableAtomLink {
	return &NullableAtomLink{value: val, isSet: true}
}

func (v NullableAtomLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtomLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


