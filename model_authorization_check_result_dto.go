/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the AuthorizationCheckResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationCheckResultDto{}

// AuthorizationCheckResultDto struct for AuthorizationCheckResultDto
type AuthorizationCheckResultDto struct {
	// Name of the permission which was checked.
	PermissionName NullableString `json:"permissionName,omitempty"`
	// The name of the resource for which the permission check was performed.
	ResourceName NullableString `json:"resourceName,omitempty"`
	// The id of the resource for which the permission check was performed.
	ResourceId NullableString `json:"resourceId,omitempty"`
	// Returns true or false depending on whether the user is authorized or not.
	Authorized NullableBool `json:"authorized,omitempty"`
}

// NewAuthorizationCheckResultDto instantiates a new AuthorizationCheckResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationCheckResultDto() *AuthorizationCheckResultDto {
	this := AuthorizationCheckResultDto{}
	return &this
}

// NewAuthorizationCheckResultDtoWithDefaults instantiates a new AuthorizationCheckResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationCheckResultDtoWithDefaults() *AuthorizationCheckResultDto {
	this := AuthorizationCheckResultDto{}
	return &this
}

// GetPermissionName returns the PermissionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizationCheckResultDto) GetPermissionName() string {
	if o == nil || IsNil(o.PermissionName.Get()) {
		var ret string
		return ret
	}
	return *o.PermissionName.Get()
}

// GetPermissionNameOk returns a tuple with the PermissionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizationCheckResultDto) GetPermissionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermissionName.Get(), o.PermissionName.IsSet()
}

// HasPermissionName returns a boolean if a field has been set.
func (o *AuthorizationCheckResultDto) HasPermissionName() bool {
	if o != nil && o.PermissionName.IsSet() {
		return true
	}

	return false
}

// SetPermissionName gets a reference to the given NullableString and assigns it to the PermissionName field.
func (o *AuthorizationCheckResultDto) SetPermissionName(v string) {
	o.PermissionName.Set(&v)
}
// SetPermissionNameNil sets the value for PermissionName to be an explicit nil
func (o *AuthorizationCheckResultDto) SetPermissionNameNil() {
	o.PermissionName.Set(nil)
}

// UnsetPermissionName ensures that no value is present for PermissionName, not even an explicit nil
func (o *AuthorizationCheckResultDto) UnsetPermissionName() {
	o.PermissionName.Unset()
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizationCheckResultDto) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizationCheckResultDto) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *AuthorizationCheckResultDto) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *AuthorizationCheckResultDto) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *AuthorizationCheckResultDto) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *AuthorizationCheckResultDto) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizationCheckResultDto) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizationCheckResultDto) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// HasResourceId returns a boolean if a field has been set.
func (o *AuthorizationCheckResultDto) HasResourceId() bool {
	if o != nil && o.ResourceId.IsSet() {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given NullableString and assigns it to the ResourceId field.
func (o *AuthorizationCheckResultDto) SetResourceId(v string) {
	o.ResourceId.Set(&v)
}
// SetResourceIdNil sets the value for ResourceId to be an explicit nil
func (o *AuthorizationCheckResultDto) SetResourceIdNil() {
	o.ResourceId.Set(nil)
}

// UnsetResourceId ensures that no value is present for ResourceId, not even an explicit nil
func (o *AuthorizationCheckResultDto) UnsetResourceId() {
	o.ResourceId.Unset()
}

// GetAuthorized returns the Authorized field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizationCheckResultDto) GetAuthorized() bool {
	if o == nil || IsNil(o.Authorized.Get()) {
		var ret bool
		return ret
	}
	return *o.Authorized.Get()
}

// GetAuthorizedOk returns a tuple with the Authorized field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizationCheckResultDto) GetAuthorizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authorized.Get(), o.Authorized.IsSet()
}

// HasAuthorized returns a boolean if a field has been set.
func (o *AuthorizationCheckResultDto) HasAuthorized() bool {
	if o != nil && o.Authorized.IsSet() {
		return true
	}

	return false
}

// SetAuthorized gets a reference to the given NullableBool and assigns it to the Authorized field.
func (o *AuthorizationCheckResultDto) SetAuthorized(v bool) {
	o.Authorized.Set(&v)
}
// SetAuthorizedNil sets the value for Authorized to be an explicit nil
func (o *AuthorizationCheckResultDto) SetAuthorizedNil() {
	o.Authorized.Set(nil)
}

// UnsetAuthorized ensures that no value is present for Authorized, not even an explicit nil
func (o *AuthorizationCheckResultDto) UnsetAuthorized() {
	o.Authorized.Unset()
}

func (o AuthorizationCheckResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationCheckResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PermissionName.IsSet() {
		toSerialize["permissionName"] = o.PermissionName.Get()
	}
	if o.ResourceName.IsSet() {
		toSerialize["resourceName"] = o.ResourceName.Get()
	}
	if o.ResourceId.IsSet() {
		toSerialize["resourceId"] = o.ResourceId.Get()
	}
	if o.Authorized.IsSet() {
		toSerialize["authorized"] = o.Authorized.Get()
	}
	return toSerialize, nil
}

type NullableAuthorizationCheckResultDto struct {
	value *AuthorizationCheckResultDto
	isSet bool
}

func (v NullableAuthorizationCheckResultDto) Get() *AuthorizationCheckResultDto {
	return v.value
}

func (v *NullableAuthorizationCheckResultDto) Set(val *AuthorizationCheckResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationCheckResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationCheckResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationCheckResultDto(val *AuthorizationCheckResultDto) *NullableAuthorizationCheckResultDto {
	return &NullableAuthorizationCheckResultDto{value: val, isSet: true}
}

func (v NullableAuthorizationCheckResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationCheckResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


