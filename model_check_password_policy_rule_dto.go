/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CheckPasswordPolicyRuleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckPasswordPolicyRuleDto{}

// CheckPasswordPolicyRuleDto struct for CheckPasswordPolicyRuleDto
type CheckPasswordPolicyRuleDto struct {
	// A placeholder string that contains the name of a password policy rule.
	Placeholder NullableString `json:"placeholder,omitempty"`
	// A map that describes the characteristics of a password policy rule, such as the minimum number of digits.
	Parameter *map[string]string `json:"parameter,omitempty"`
	// `true` if the password is compliant with this rule, otherwise `false`.
	Valid NullableBool `json:"valid,omitempty"`
}

// NewCheckPasswordPolicyRuleDto instantiates a new CheckPasswordPolicyRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckPasswordPolicyRuleDto() *CheckPasswordPolicyRuleDto {
	this := CheckPasswordPolicyRuleDto{}
	return &this
}

// NewCheckPasswordPolicyRuleDtoWithDefaults instantiates a new CheckPasswordPolicyRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckPasswordPolicyRuleDtoWithDefaults() *CheckPasswordPolicyRuleDto {
	this := CheckPasswordPolicyRuleDto{}
	return &this
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckPasswordPolicyRuleDto) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder.Get()) {
		var ret string
		return ret
	}
	return *o.Placeholder.Get()
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckPasswordPolicyRuleDto) GetPlaceholderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Placeholder.Get(), o.Placeholder.IsSet()
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *CheckPasswordPolicyRuleDto) HasPlaceholder() bool {
	if o != nil && o.Placeholder.IsSet() {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given NullableString and assigns it to the Placeholder field.
func (o *CheckPasswordPolicyRuleDto) SetPlaceholder(v string) {
	o.Placeholder.Set(&v)
}
// SetPlaceholderNil sets the value for Placeholder to be an explicit nil
func (o *CheckPasswordPolicyRuleDto) SetPlaceholderNil() {
	o.Placeholder.Set(nil)
}

// UnsetPlaceholder ensures that no value is present for Placeholder, not even an explicit nil
func (o *CheckPasswordPolicyRuleDto) UnsetPlaceholder() {
	o.Placeholder.Unset()
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *CheckPasswordPolicyRuleDto) GetParameter() map[string]string {
	if o == nil || IsNil(o.Parameter) {
		var ret map[string]string
		return ret
	}
	return *o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckPasswordPolicyRuleDto) GetParameterOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *CheckPasswordPolicyRuleDto) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given map[string]string and assigns it to the Parameter field.
func (o *CheckPasswordPolicyRuleDto) SetParameter(v map[string]string) {
	o.Parameter = &v
}

// GetValid returns the Valid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckPasswordPolicyRuleDto) GetValid() bool {
	if o == nil || IsNil(o.Valid.Get()) {
		var ret bool
		return ret
	}
	return *o.Valid.Get()
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckPasswordPolicyRuleDto) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Valid.Get(), o.Valid.IsSet()
}

// HasValid returns a boolean if a field has been set.
func (o *CheckPasswordPolicyRuleDto) HasValid() bool {
	if o != nil && o.Valid.IsSet() {
		return true
	}

	return false
}

// SetValid gets a reference to the given NullableBool and assigns it to the Valid field.
func (o *CheckPasswordPolicyRuleDto) SetValid(v bool) {
	o.Valid.Set(&v)
}
// SetValidNil sets the value for Valid to be an explicit nil
func (o *CheckPasswordPolicyRuleDto) SetValidNil() {
	o.Valid.Set(nil)
}

// UnsetValid ensures that no value is present for Valid, not even an explicit nil
func (o *CheckPasswordPolicyRuleDto) UnsetValid() {
	o.Valid.Unset()
}

func (o CheckPasswordPolicyRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckPasswordPolicyRuleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Placeholder.IsSet() {
		toSerialize["placeholder"] = o.Placeholder.Get()
	}
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	if o.Valid.IsSet() {
		toSerialize["valid"] = o.Valid.Get()
	}
	return toSerialize, nil
}

type NullableCheckPasswordPolicyRuleDto struct {
	value *CheckPasswordPolicyRuleDto
	isSet bool
}

func (v NullableCheckPasswordPolicyRuleDto) Get() *CheckPasswordPolicyRuleDto {
	return v.value
}

func (v *NullableCheckPasswordPolicyRuleDto) Set(val *CheckPasswordPolicyRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckPasswordPolicyRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckPasswordPolicyRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckPasswordPolicyRuleDto(val *CheckPasswordPolicyRuleDto) *NullableCheckPasswordPolicyRuleDto {
	return &NullableCheckPasswordPolicyRuleDto{value: val, isSet: true}
}

func (v NullableCheckPasswordPolicyRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckPasswordPolicyRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


