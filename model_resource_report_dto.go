/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ResourceReportDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceReportDto{}

// ResourceReportDto struct for ResourceReportDto
type ResourceReportDto struct {
	// A list of errors occurred during parsing.
	Errors []ProblemDto `json:"errors,omitempty"`
	// A list of warnings occurred during parsing.
	Warnings []ProblemDto `json:"warnings,omitempty"`
}

// NewResourceReportDto instantiates a new ResourceReportDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReportDto() *ResourceReportDto {
	this := ResourceReportDto{}
	return &this
}

// NewResourceReportDtoWithDefaults instantiates a new ResourceReportDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReportDtoWithDefaults() *ResourceReportDto {
	this := ResourceReportDto{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReportDto) GetErrors() []ProblemDto {
	if o == nil {
		var ret []ProblemDto
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReportDto) GetErrorsOk() ([]ProblemDto, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ResourceReportDto) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ProblemDto and assigns it to the Errors field.
func (o *ResourceReportDto) SetErrors(v []ProblemDto) {
	o.Errors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReportDto) GetWarnings() []ProblemDto {
	if o == nil {
		var ret []ProblemDto
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReportDto) GetWarningsOk() ([]ProblemDto, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ResourceReportDto) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []ProblemDto and assigns it to the Warnings field.
func (o *ResourceReportDto) SetWarnings(v []ProblemDto) {
	o.Warnings = v
}

func (o ResourceReportDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReportDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableResourceReportDto struct {
	value *ResourceReportDto
	isSet bool
}

func (v NullableResourceReportDto) Get() *ResourceReportDto {
	return v.value
}

func (v *NullableResourceReportDto) Set(val *ResourceReportDto) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReportDto) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReportDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReportDto(val *ResourceReportDto) *NullableResourceReportDto {
	return &NullableResourceReportDto{value: val, isSet: true}
}

func (v NullableResourceReportDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReportDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


