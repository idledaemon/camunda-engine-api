/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type VariableInstanceAPI interface {

	/*
	GetVariableInstance Get Variable Instance

	Retrieves a variable by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the variable instance.
	@return ApiGetVariableInstanceRequest
	*/
	GetVariableInstance(ctx context.Context, id string) ApiGetVariableInstanceRequest

	// GetVariableInstanceExecute executes the request
	//  @return VariableInstanceDto
	GetVariableInstanceExecute(r ApiGetVariableInstanceRequest) (*VariableInstanceDto, *http.Response, error)

	/*
	GetVariableInstanceBinary Get Variable Instance (Binary)

	Retrieves the content of a variable by id. Applicable for byte array and file
variables.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the variable instance.
	@return ApiGetVariableInstanceBinaryRequest
	*/
	GetVariableInstanceBinary(ctx context.Context, id string) ApiGetVariableInstanceBinaryRequest

	// GetVariableInstanceBinaryExecute executes the request
	//  @return *os.File
	GetVariableInstanceBinaryExecute(r ApiGetVariableInstanceBinaryRequest) (*os.File, *http.Response, error)

	/*
	GetVariableInstances Get Variable Instances

	Query for variable instances that fulfill given parameters. Parameters may be the
properties of variable instances, such as the name or type. The size
of the result set can be retrieved by using the [Get Variable Instance
Count](https://docs.camunda.org/manual/7.21/reference/rest/variable-instance/get-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetVariableInstancesRequest
	*/
	GetVariableInstances(ctx context.Context) ApiGetVariableInstancesRequest

	// GetVariableInstancesExecute executes the request
	//  @return []VariableInstanceDto
	GetVariableInstancesExecute(r ApiGetVariableInstancesRequest) ([]VariableInstanceDto, *http.Response, error)

	/*
	GetVariableInstancesCount Get Variable Instance Count

	Query for the number of variable instances that fulfill given parameters. Takes the
same parameters as the [Get Variable
Instances](https://docs.camunda.org/manual/7.21/reference/rest/variable-instance/get-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetVariableInstancesCountRequest
	*/
	GetVariableInstancesCount(ctx context.Context) ApiGetVariableInstancesCountRequest

	// GetVariableInstancesCountExecute executes the request
	//  @return CountResultDto
	GetVariableInstancesCountExecute(r ApiGetVariableInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	QueryVariableInstances Get Variable Instances (POST)

	Query for variable instances that fulfill given parameters through a JSON object.
This method is slightly more powerful than the
[Get Variable Instances](https://docs.camunda.org/manual/7.21/reference/rest/variable-
instance/get-query/) method because it allows filtering by multiple
variable instances of types `String`, `Number` or `Boolean`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryVariableInstancesRequest
	*/
	QueryVariableInstances(ctx context.Context) ApiQueryVariableInstancesRequest

	// QueryVariableInstancesExecute executes the request
	//  @return []VariableInstanceDto
	QueryVariableInstancesExecute(r ApiQueryVariableInstancesRequest) ([]VariableInstanceDto, *http.Response, error)

	/*
	QueryVariableInstancesCount Get Variable Instance Count (POST)

	Query for the number of variable instances that fulfill given parameters. This
method takes the same message body as the
[Get Variable Instances POST](https://docs.camunda.org/manual/7.21/reference/rest/variable-
instance/post-query/) method and therefore it is slightly more
powerful than the [Get Variable Instance
Count](https://docs.camunda.org/manual/7.21/reference/rest/variable-instance/get-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryVariableInstancesCountRequest
	*/
	QueryVariableInstancesCount(ctx context.Context) ApiQueryVariableInstancesCountRequest

	// QueryVariableInstancesCountExecute executes the request
	//  @return CountResultDto
	QueryVariableInstancesCountExecute(r ApiQueryVariableInstancesCountRequest) (*CountResultDto, *http.Response, error)
}

// VariableInstanceAPIService VariableInstanceAPI service
type VariableInstanceAPIService service

type ApiGetVariableInstanceRequest struct {
	ctx context.Context
	ApiService VariableInstanceAPI
	id string
	deserializeValue *bool
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:**  While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetVariableInstanceRequest) DeserializeValue(deserializeValue bool) ApiGetVariableInstanceRequest {
	r.deserializeValue = &deserializeValue
	return r
}

func (r ApiGetVariableInstanceRequest) Execute() (*VariableInstanceDto, *http.Response, error) {
	return r.ApiService.GetVariableInstanceExecute(r)
}

/*
GetVariableInstance Get Variable Instance

Retrieves a variable by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the variable instance.
 @return ApiGetVariableInstanceRequest
*/
func (a *VariableInstanceAPIService) GetVariableInstance(ctx context.Context, id string) ApiGetVariableInstanceRequest {
	return ApiGetVariableInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VariableInstanceDto
func (a *VariableInstanceAPIService) GetVariableInstanceExecute(r ApiGetVariableInstanceRequest) (*VariableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VariableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariableInstanceAPIService.GetVariableInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variable-instance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deserializeValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValue", r.deserializeValue, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVariableInstanceBinaryRequest struct {
	ctx context.Context
	ApiService VariableInstanceAPI
	id string
}

func (r ApiGetVariableInstanceBinaryRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetVariableInstanceBinaryExecute(r)
}

/*
GetVariableInstanceBinary Get Variable Instance (Binary)

Retrieves the content of a variable by id. Applicable for byte array and file
variables.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the variable instance.
 @return ApiGetVariableInstanceBinaryRequest
*/
func (a *VariableInstanceAPIService) GetVariableInstanceBinary(ctx context.Context, id string) ApiGetVariableInstanceBinaryRequest {
	return ApiGetVariableInstanceBinaryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VariableInstanceAPIService) GetVariableInstanceBinaryExecute(r ApiGetVariableInstanceBinaryRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariableInstanceAPIService.GetVariableInstanceBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variable-instance/{id}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "*/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVariableInstancesRequest struct {
	ctx context.Context
	ApiService VariableInstanceAPI
	variableName *string
	variableNameLike *string
	processInstanceIdIn *string
	executionIdIn *string
	caseInstanceIdIn *string
	caseExecutionIdIn *string
	taskIdIn *string
	batchIdIn *string
	activityInstanceIdIn *string
	tenantIdIn *string
	variableValues *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
	variableScopeIdIn *string
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
	deserializeValues *bool
}

// Filter by variable instance name.
func (r ApiGetVariableInstancesRequest) VariableName(variableName string) ApiGetVariableInstancesRequest {
	r.variableName = &variableName
	return r
}

// Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
func (r ApiGetVariableInstancesRequest) VariableNameLike(variableNameLike string) ApiGetVariableInstancesRequest {
	r.variableNameLike = &variableNameLike
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated process instance ids.
func (r ApiGetVariableInstancesRequest) ProcessInstanceIdIn(processInstanceIdIn string) ApiGetVariableInstancesRequest {
	r.processInstanceIdIn = &processInstanceIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated execution ids.
func (r ApiGetVariableInstancesRequest) ExecutionIdIn(executionIdIn string) ApiGetVariableInstancesRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated case instance ids.
func (r ApiGetVariableInstancesRequest) CaseInstanceIdIn(caseInstanceIdIn string) ApiGetVariableInstancesRequest {
	r.caseInstanceIdIn = &caseInstanceIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated case execution ids.
func (r ApiGetVariableInstancesRequest) CaseExecutionIdIn(caseExecutionIdIn string) ApiGetVariableInstancesRequest {
	r.caseExecutionIdIn = &caseExecutionIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated task ids.
func (r ApiGetVariableInstancesRequest) TaskIdIn(taskIdIn string) ApiGetVariableInstancesRequest {
	r.taskIdIn = &taskIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated batch ids.
func (r ApiGetVariableInstancesRequest) BatchIdIn(batchIdIn string) ApiGetVariableInstancesRequest {
	r.batchIdIn = &batchIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
func (r ApiGetVariableInstancesRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetVariableInstancesRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated tenant ids.
func (r ApiGetVariableInstancesRequest) TenantIdIn(tenantIdIn string) ApiGetVariableInstancesRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetVariableInstancesRequest) VariableValues(variableValues string) ApiGetVariableInstancesRequest {
	r.variableValues = &variableValues
	return r
}

// Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
func (r ApiGetVariableInstancesRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetVariableInstancesRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
func (r ApiGetVariableInstancesRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetVariableInstancesRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

// Only include variable instances which belong to one of passed scope ids.
func (r ApiGetVariableInstancesRequest) VariableScopeIdIn(variableScopeIdIn string) ApiGetVariableInstancesRequest {
	r.variableScopeIdIn = &variableScopeIdIn
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetVariableInstancesRequest) SortBy(sortBy string) ApiGetVariableInstancesRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetVariableInstancesRequest) SortOrder(sortOrder string) ApiGetVariableInstancesRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetVariableInstancesRequest) FirstResult(firstResult int32) ApiGetVariableInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetVariableInstancesRequest) MaxResults(maxResults int32) ApiGetVariableInstancesRequest {
	r.maxResults = &maxResults
	return r
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetVariableInstancesRequest) DeserializeValues(deserializeValues bool) ApiGetVariableInstancesRequest {
	r.deserializeValues = &deserializeValues
	return r
}

func (r ApiGetVariableInstancesRequest) Execute() ([]VariableInstanceDto, *http.Response, error) {
	return r.ApiService.GetVariableInstancesExecute(r)
}

/*
GetVariableInstances Get Variable Instances

Query for variable instances that fulfill given parameters. Parameters may be the
properties of variable instances, such as the name or type. The size
of the result set can be retrieved by using the [Get Variable Instance
Count](https://docs.camunda.org/manual/7.21/reference/rest/variable-instance/get-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetVariableInstancesRequest
*/
func (a *VariableInstanceAPIService) GetVariableInstances(ctx context.Context) ApiGetVariableInstancesRequest {
	return ApiGetVariableInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VariableInstanceDto
func (a *VariableInstanceAPIService) GetVariableInstancesExecute(r ApiGetVariableInstancesRequest) ([]VariableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VariableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariableInstanceAPIService.GetVariableInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variable-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.variableName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableName", r.variableName, "")
	}
	if r.variableNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNameLike", r.variableNameLike, "")
	}
	if r.processInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIdIn", r.processInstanceIdIn, "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionIdIn", r.executionIdIn, "")
	}
	if r.caseInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceIdIn", r.caseInstanceIdIn, "")
	}
	if r.caseExecutionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseExecutionIdIn", r.caseExecutionIdIn, "")
	}
	if r.taskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskIdIn", r.taskIdIn, "")
	}
	if r.batchIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIn", r.batchIdIn, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.variableValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValues", r.variableValues, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	}
	if r.variableScopeIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableScopeIdIn", r.variableScopeIdIn, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.deserializeValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValues", r.deserializeValues, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVariableInstancesCountRequest struct {
	ctx context.Context
	ApiService VariableInstanceAPI
	variableName *string
	variableNameLike *string
	processInstanceIdIn *string
	executionIdIn *string
	caseInstanceIdIn *string
	caseExecutionIdIn *string
	taskIdIn *string
	batchIdIn *string
	activityInstanceIdIn *string
	tenantIdIn *string
	variableValues *string
	variableNamesIgnoreCase *bool
	variableValuesIgnoreCase *bool
	variableScopeIdIn *string
}

// Filter by variable instance name.
func (r ApiGetVariableInstancesCountRequest) VariableName(variableName string) ApiGetVariableInstancesCountRequest {
	r.variableName = &variableName
	return r
}

// Filter by the variable instance name. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
func (r ApiGetVariableInstancesCountRequest) VariableNameLike(variableNameLike string) ApiGetVariableInstancesCountRequest {
	r.variableNameLike = &variableNameLike
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated process instance ids.
func (r ApiGetVariableInstancesCountRequest) ProcessInstanceIdIn(processInstanceIdIn string) ApiGetVariableInstancesCountRequest {
	r.processInstanceIdIn = &processInstanceIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated execution ids.
func (r ApiGetVariableInstancesCountRequest) ExecutionIdIn(executionIdIn string) ApiGetVariableInstancesCountRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated case instance ids.
func (r ApiGetVariableInstancesCountRequest) CaseInstanceIdIn(caseInstanceIdIn string) ApiGetVariableInstancesCountRequest {
	r.caseInstanceIdIn = &caseInstanceIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated case execution ids.
func (r ApiGetVariableInstancesCountRequest) CaseExecutionIdIn(caseExecutionIdIn string) ApiGetVariableInstancesCountRequest {
	r.caseExecutionIdIn = &caseExecutionIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated task ids.
func (r ApiGetVariableInstancesCountRequest) TaskIdIn(taskIdIn string) ApiGetVariableInstancesCountRequest {
	r.taskIdIn = &taskIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated batch ids.
func (r ApiGetVariableInstancesCountRequest) BatchIdIn(batchIdIn string) ApiGetVariableInstancesCountRequest {
	r.batchIdIn = &batchIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
func (r ApiGetVariableInstancesCountRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetVariableInstancesCountRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Only include variable instances which belong to one of the passed and comma-separated tenant ids.
func (r ApiGetVariableInstancesCountRequest) TenantIdIn(tenantIdIn string) ApiGetVariableInstancesCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
func (r ApiGetVariableInstancesCountRequest) VariableValues(variableValues string) ApiGetVariableInstancesCountRequest {
	r.variableValues = &variableValues
	return r
}

// Match all variable names provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
func (r ApiGetVariableInstancesCountRequest) VariableNamesIgnoreCase(variableNamesIgnoreCase bool) ApiGetVariableInstancesCountRequest {
	r.variableNamesIgnoreCase = &variableNamesIgnoreCase
	return r
}

// Match all variable values provided in &#x60;variableValues&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
func (r ApiGetVariableInstancesCountRequest) VariableValuesIgnoreCase(variableValuesIgnoreCase bool) ApiGetVariableInstancesCountRequest {
	r.variableValuesIgnoreCase = &variableValuesIgnoreCase
	return r
}

// Only include variable instances which belong to one of passed scope ids.
func (r ApiGetVariableInstancesCountRequest) VariableScopeIdIn(variableScopeIdIn string) ApiGetVariableInstancesCountRequest {
	r.variableScopeIdIn = &variableScopeIdIn
	return r
}

func (r ApiGetVariableInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetVariableInstancesCountExecute(r)
}

/*
GetVariableInstancesCount Get Variable Instance Count

Query for the number of variable instances that fulfill given parameters. Takes the
same parameters as the [Get Variable
Instances](https://docs.camunda.org/manual/7.21/reference/rest/variable-instance/get-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetVariableInstancesCountRequest
*/
func (a *VariableInstanceAPIService) GetVariableInstancesCount(ctx context.Context) ApiGetVariableInstancesCountRequest {
	return ApiGetVariableInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *VariableInstanceAPIService) GetVariableInstancesCountExecute(r ApiGetVariableInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariableInstanceAPIService.GetVariableInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variable-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.variableName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableName", r.variableName, "")
	}
	if r.variableNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNameLike", r.variableNameLike, "")
	}
	if r.processInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIdIn", r.processInstanceIdIn, "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionIdIn", r.executionIdIn, "")
	}
	if r.caseInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceIdIn", r.caseInstanceIdIn, "")
	}
	if r.caseExecutionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseExecutionIdIn", r.caseExecutionIdIn, "")
	}
	if r.taskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskIdIn", r.taskIdIn, "")
	}
	if r.batchIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdIn", r.batchIdIn, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.variableValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValues", r.variableValues, "")
	}
	if r.variableNamesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableNamesIgnoreCase", r.variableNamesIgnoreCase, "")
	}
	if r.variableValuesIgnoreCase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableValuesIgnoreCase", r.variableValuesIgnoreCase, "")
	}
	if r.variableScopeIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableScopeIdIn", r.variableScopeIdIn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryVariableInstancesRequest struct {
	ctx context.Context
	ApiService VariableInstanceAPI
	firstResult *int32
	maxResults *int32
	deserializeValues *bool
	variableInstanceQueryDto *VariableInstanceQueryDto
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiQueryVariableInstancesRequest) FirstResult(firstResult int32) ApiQueryVariableInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiQueryVariableInstancesRequest) MaxResults(maxResults int32) ApiQueryVariableInstancesRequest {
	r.maxResults = &maxResults
	return r
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiQueryVariableInstancesRequest) DeserializeValues(deserializeValues bool) ApiQueryVariableInstancesRequest {
	r.deserializeValues = &deserializeValues
	return r
}

func (r ApiQueryVariableInstancesRequest) VariableInstanceQueryDto(variableInstanceQueryDto VariableInstanceQueryDto) ApiQueryVariableInstancesRequest {
	r.variableInstanceQueryDto = &variableInstanceQueryDto
	return r
}

func (r ApiQueryVariableInstancesRequest) Execute() ([]VariableInstanceDto, *http.Response, error) {
	return r.ApiService.QueryVariableInstancesExecute(r)
}

/*
QueryVariableInstances Get Variable Instances (POST)

Query for variable instances that fulfill given parameters through a JSON object.
This method is slightly more powerful than the
[Get Variable Instances](https://docs.camunda.org/manual/7.21/reference/rest/variable-
instance/get-query/) method because it allows filtering by multiple
variable instances of types `String`, `Number` or `Boolean`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryVariableInstancesRequest
*/
func (a *VariableInstanceAPIService) QueryVariableInstances(ctx context.Context) ApiQueryVariableInstancesRequest {
	return ApiQueryVariableInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VariableInstanceDto
func (a *VariableInstanceAPIService) QueryVariableInstancesExecute(r ApiQueryVariableInstancesRequest) ([]VariableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VariableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariableInstanceAPIService.QueryVariableInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variable-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.deserializeValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValues", r.deserializeValues, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.variableInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryVariableInstancesCountRequest struct {
	ctx context.Context
	ApiService VariableInstanceAPI
	variableInstanceQueryDto *VariableInstanceQueryDto
}

func (r ApiQueryVariableInstancesCountRequest) VariableInstanceQueryDto(variableInstanceQueryDto VariableInstanceQueryDto) ApiQueryVariableInstancesCountRequest {
	r.variableInstanceQueryDto = &variableInstanceQueryDto
	return r
}

func (r ApiQueryVariableInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.QueryVariableInstancesCountExecute(r)
}

/*
QueryVariableInstancesCount Get Variable Instance Count (POST)

Query for the number of variable instances that fulfill given parameters. This
method takes the same message body as the
[Get Variable Instances POST](https://docs.camunda.org/manual/7.21/reference/rest/variable-
instance/post-query/) method and therefore it is slightly more
powerful than the [Get Variable Instance
Count](https://docs.camunda.org/manual/7.21/reference/rest/variable-instance/get-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryVariableInstancesCountRequest
*/
func (a *VariableInstanceAPIService) QueryVariableInstancesCount(ctx context.Context) ApiQueryVariableInstancesCountRequest {
	return ApiQueryVariableInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *VariableInstanceAPIService) QueryVariableInstancesCountExecute(r ApiQueryVariableInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariableInstanceAPIService.QueryVariableInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variable-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.variableInstanceQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
