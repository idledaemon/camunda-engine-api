/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the FormDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormDto{}

// FormDto struct for FormDto
type FormDto struct {
	// The form key.
	Key NullableString `json:"key,omitempty"`
	CamundaFormRef *CamundaFormRef `json:"camundaFormRef,omitempty"`
	// The context path of the process application. If the task (or the process definition) does not belong to a process application deployment or a process definition at all, this property is not set.
	ContextPath NullableString `json:"contextPath,omitempty"`
}

// NewFormDto instantiates a new FormDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormDto() *FormDto {
	this := FormDto{}
	return &this
}

// NewFormDtoWithDefaults instantiates a new FormDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormDtoWithDefaults() *FormDto {
	this := FormDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormDto) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *FormDto) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *FormDto) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *FormDto) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *FormDto) UnsetKey() {
	o.Key.Unset()
}

// GetCamundaFormRef returns the CamundaFormRef field value if set, zero value otherwise.
func (o *FormDto) GetCamundaFormRef() CamundaFormRef {
	if o == nil || IsNil(o.CamundaFormRef) {
		var ret CamundaFormRef
		return ret
	}
	return *o.CamundaFormRef
}

// GetCamundaFormRefOk returns a tuple with the CamundaFormRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDto) GetCamundaFormRefOk() (*CamundaFormRef, bool) {
	if o == nil || IsNil(o.CamundaFormRef) {
		return nil, false
	}
	return o.CamundaFormRef, true
}

// HasCamundaFormRef returns a boolean if a field has been set.
func (o *FormDto) HasCamundaFormRef() bool {
	if o != nil && !IsNil(o.CamundaFormRef) {
		return true
	}

	return false
}

// SetCamundaFormRef gets a reference to the given CamundaFormRef and assigns it to the CamundaFormRef field.
func (o *FormDto) SetCamundaFormRef(v CamundaFormRef) {
	o.CamundaFormRef = &v
}

// GetContextPath returns the ContextPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormDto) GetContextPath() string {
	if o == nil || IsNil(o.ContextPath.Get()) {
		var ret string
		return ret
	}
	return *o.ContextPath.Get()
}

// GetContextPathOk returns a tuple with the ContextPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormDto) GetContextPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContextPath.Get(), o.ContextPath.IsSet()
}

// HasContextPath returns a boolean if a field has been set.
func (o *FormDto) HasContextPath() bool {
	if o != nil && o.ContextPath.IsSet() {
		return true
	}

	return false
}

// SetContextPath gets a reference to the given NullableString and assigns it to the ContextPath field.
func (o *FormDto) SetContextPath(v string) {
	o.ContextPath.Set(&v)
}
// SetContextPathNil sets the value for ContextPath to be an explicit nil
func (o *FormDto) SetContextPathNil() {
	o.ContextPath.Set(nil)
}

// UnsetContextPath ensures that no value is present for ContextPath, not even an explicit nil
func (o *FormDto) UnsetContextPath() {
	o.ContextPath.Unset()
}

func (o FormDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if !IsNil(o.CamundaFormRef) {
		toSerialize["camundaFormRef"] = o.CamundaFormRef
	}
	if o.ContextPath.IsSet() {
		toSerialize["contextPath"] = o.ContextPath.Get()
	}
	return toSerialize, nil
}

type NullableFormDto struct {
	value *FormDto
	isSet bool
}

func (v NullableFormDto) Get() *FormDto {
	return v.value
}

func (v *NullableFormDto) Set(val *FormDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFormDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFormDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormDto(val *FormDto) *NullableFormDto {
	return &NullableFormDto{value: val, isSet: true}
}

func (v NullableFormDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


