/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the PatchVariablesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchVariablesDto{}

// PatchVariablesDto struct for PatchVariablesDto
type PatchVariablesDto struct {
	// A JSON object containing variable key-value pairs.
	Modifications map[string]VariableValueDto `json:"modifications,omitempty"`
	// An array of String keys of variables to be deleted.
	Deletions []string `json:"deletions,omitempty"`
}

// NewPatchVariablesDto instantiates a new PatchVariablesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchVariablesDto() *PatchVariablesDto {
	this := PatchVariablesDto{}
	return &this
}

// NewPatchVariablesDtoWithDefaults instantiates a new PatchVariablesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchVariablesDtoWithDefaults() *PatchVariablesDto {
	this := PatchVariablesDto{}
	return &this
}

// GetModifications returns the Modifications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchVariablesDto) GetModifications() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.Modifications
}

// GetModificationsOk returns a tuple with the Modifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchVariablesDto) GetModificationsOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.Modifications) {
		return nil, false
	}
	return &o.Modifications, true
}

// HasModifications returns a boolean if a field has been set.
func (o *PatchVariablesDto) HasModifications() bool {
	if o != nil && !IsNil(o.Modifications) {
		return true
	}

	return false
}

// SetModifications gets a reference to the given map[string]VariableValueDto and assigns it to the Modifications field.
func (o *PatchVariablesDto) SetModifications(v map[string]VariableValueDto) {
	o.Modifications = v
}

// GetDeletions returns the Deletions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchVariablesDto) GetDeletions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchVariablesDto) GetDeletionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *PatchVariablesDto) HasDeletions() bool {
	if o != nil && !IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given []string and assigns it to the Deletions field.
func (o *PatchVariablesDto) SetDeletions(v []string) {
	o.Deletions = v
}

func (o PatchVariablesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchVariablesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Modifications != nil {
		toSerialize["modifications"] = o.Modifications
	}
	if o.Deletions != nil {
		toSerialize["deletions"] = o.Deletions
	}
	return toSerialize, nil
}

type NullablePatchVariablesDto struct {
	value *PatchVariablesDto
	isSet bool
}

func (v NullablePatchVariablesDto) Get() *PatchVariablesDto {
	return v.value
}

func (v *NullablePatchVariablesDto) Set(val *PatchVariablesDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchVariablesDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchVariablesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchVariablesDto(val *PatchVariablesDto) *NullablePatchVariablesDto {
	return &NullablePatchVariablesDto{value: val, isSet: true}
}

func (v NullablePatchVariablesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchVariablesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


