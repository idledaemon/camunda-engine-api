/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CamundaFormRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CamundaFormRef{}

// CamundaFormRef struct for CamundaFormRef
type CamundaFormRef struct {
	// The key of the Camunda Form.
	Key NullableString `json:"key,omitempty"`
	// The binding of the Camunda Form. Can be `latest`, `deployment` or `version`.
	Binding NullableString `json:"binding,omitempty"`
	// The specific version of a Camunda Form. This property is only set if `binding` is `version`.
	Version NullableInt32 `json:"version,omitempty"`
}

// NewCamundaFormRef instantiates a new CamundaFormRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCamundaFormRef() *CamundaFormRef {
	this := CamundaFormRef{}
	return &this
}

// NewCamundaFormRefWithDefaults instantiates a new CamundaFormRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCamundaFormRefWithDefaults() *CamundaFormRef {
	this := CamundaFormRef{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CamundaFormRef) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CamundaFormRef) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CamundaFormRef) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CamundaFormRef) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *CamundaFormRef) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CamundaFormRef) UnsetKey() {
	o.Key.Unset()
}

// GetBinding returns the Binding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CamundaFormRef) GetBinding() string {
	if o == nil || IsNil(o.Binding.Get()) {
		var ret string
		return ret
	}
	return *o.Binding.Get()
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CamundaFormRef) GetBindingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Binding.Get(), o.Binding.IsSet()
}

// HasBinding returns a boolean if a field has been set.
func (o *CamundaFormRef) HasBinding() bool {
	if o != nil && o.Binding.IsSet() {
		return true
	}

	return false
}

// SetBinding gets a reference to the given NullableString and assigns it to the Binding field.
func (o *CamundaFormRef) SetBinding(v string) {
	o.Binding.Set(&v)
}
// SetBindingNil sets the value for Binding to be an explicit nil
func (o *CamundaFormRef) SetBindingNil() {
	o.Binding.Set(nil)
}

// UnsetBinding ensures that no value is present for Binding, not even an explicit nil
func (o *CamundaFormRef) UnsetBinding() {
	o.Binding.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CamundaFormRef) GetVersion() int32 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CamundaFormRef) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *CamundaFormRef) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *CamundaFormRef) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *CamundaFormRef) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *CamundaFormRef) UnsetVersion() {
	o.Version.Unset()
}

func (o CamundaFormRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CamundaFormRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Binding.IsSet() {
		toSerialize["binding"] = o.Binding.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

type NullableCamundaFormRef struct {
	value *CamundaFormRef
	isSet bool
}

func (v NullableCamundaFormRef) Get() *CamundaFormRef {
	return v.value
}

func (v *NullableCamundaFormRef) Set(val *CamundaFormRef) {
	v.value = val
	v.isSet = true
}

func (v NullableCamundaFormRef) IsSet() bool {
	return v.isSet
}

func (v *NullableCamundaFormRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCamundaFormRef(val *CamundaFormRef) *NullableCamundaFormRef {
	return &NullableCamundaFormRef{value: val, isSet: true}
}

func (v NullableCamundaFormRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCamundaFormRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


