/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the TelemetryProductDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryProductDto{}

// TelemetryProductDto struct for TelemetryProductDto
type TelemetryProductDto struct {
	// The name of the product (i.e., Camunda BPM Runtime).
	Name NullableString `json:"name,omitempty"`
	// The version of the process engine (i.e., 7.X.Y).
	Version NullableString `json:"version,omitempty"`
	// The edition of the product (i.e., either community or enterprise).
	Edition NullableString `json:"edition,omitempty"`
	Internals *TelemetryInternalsDto `json:"internals,omitempty"`
}

// NewTelemetryProductDto instantiates a new TelemetryProductDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryProductDto() *TelemetryProductDto {
	this := TelemetryProductDto{}
	return &this
}

// NewTelemetryProductDtoWithDefaults instantiates a new TelemetryProductDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryProductDtoWithDefaults() *TelemetryProductDto {
	this := TelemetryProductDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryProductDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryProductDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TelemetryProductDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TelemetryProductDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TelemetryProductDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TelemetryProductDto) UnsetName() {
	o.Name.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryProductDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryProductDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *TelemetryProductDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *TelemetryProductDto) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *TelemetryProductDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *TelemetryProductDto) UnsetVersion() {
	o.Version.Unset()
}

// GetEdition returns the Edition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryProductDto) GetEdition() string {
	if o == nil || IsNil(o.Edition.Get()) {
		var ret string
		return ret
	}
	return *o.Edition.Get()
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryProductDto) GetEditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Edition.Get(), o.Edition.IsSet()
}

// HasEdition returns a boolean if a field has been set.
func (o *TelemetryProductDto) HasEdition() bool {
	if o != nil && o.Edition.IsSet() {
		return true
	}

	return false
}

// SetEdition gets a reference to the given NullableString and assigns it to the Edition field.
func (o *TelemetryProductDto) SetEdition(v string) {
	o.Edition.Set(&v)
}
// SetEditionNil sets the value for Edition to be an explicit nil
func (o *TelemetryProductDto) SetEditionNil() {
	o.Edition.Set(nil)
}

// UnsetEdition ensures that no value is present for Edition, not even an explicit nil
func (o *TelemetryProductDto) UnsetEdition() {
	o.Edition.Unset()
}

// GetInternals returns the Internals field value if set, zero value otherwise.
func (o *TelemetryProductDto) GetInternals() TelemetryInternalsDto {
	if o == nil || IsNil(o.Internals) {
		var ret TelemetryInternalsDto
		return ret
	}
	return *o.Internals
}

// GetInternalsOk returns a tuple with the Internals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryProductDto) GetInternalsOk() (*TelemetryInternalsDto, bool) {
	if o == nil || IsNil(o.Internals) {
		return nil, false
	}
	return o.Internals, true
}

// HasInternals returns a boolean if a field has been set.
func (o *TelemetryProductDto) HasInternals() bool {
	if o != nil && !IsNil(o.Internals) {
		return true
	}

	return false
}

// SetInternals gets a reference to the given TelemetryInternalsDto and assigns it to the Internals field.
func (o *TelemetryProductDto) SetInternals(v TelemetryInternalsDto) {
	o.Internals = &v
}

func (o TelemetryProductDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryProductDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Edition.IsSet() {
		toSerialize["edition"] = o.Edition.Get()
	}
	if !IsNil(o.Internals) {
		toSerialize["internals"] = o.Internals
	}
	return toSerialize, nil
}

type NullableTelemetryProductDto struct {
	value *TelemetryProductDto
	isSet bool
}

func (v NullableTelemetryProductDto) Get() *TelemetryProductDto {
	return v.value
}

func (v *NullableTelemetryProductDto) Set(val *TelemetryProductDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryProductDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryProductDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryProductDto(val *TelemetryProductDto) *NullableTelemetryProductDto {
	return &NullableTelemetryProductDto{value: val, isSet: true}
}

func (v NullableTelemetryProductDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryProductDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


