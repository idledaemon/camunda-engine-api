/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the JobDefinitionsSuspensionStateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobDefinitionsSuspensionStateDto{}

// JobDefinitionsSuspensionStateDto struct for JobDefinitionsSuspensionStateDto
type JobDefinitionsSuspensionStateDto struct {
	// A `Boolean` value which indicates whether to activate or suspend also all jobs of the referenced job definitions. When the value is set to `true`, all jobs of the provided job definitions will be activated or suspended and when the value is set to `false`, the suspension state of all jobs of the provided job definitions will not be updated.
	IncludeJobs NullableBool `json:"includeJobs,omitempty"`
	// The date on which the referenced job definitions will be activated or suspended. If null, the suspension state of the given job definitions is updated immediately. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutionDate NullableString `json:"executionDate,omitempty"`
	// A Boolean value which indicates whether to activate or suspend a given instance  (e.g. process instance, job, job definition, or batch). When the value is set to true,  the given instance will be suspended and when the value is set to false,  the given instance will be activated.
	Suspended NullableBool `json:"suspended,omitempty"`
	// The process definition id of the job definitions to activate or suspend.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The process definition key of the job definitions to activate or suspend.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Only activate or suspend job definitions of a process definition which belongs to a tenant with the given id.  Note that this parameter will only be considered  in combination with `processDefinitionKey`.
	ProcessDefinitionTenantId NullableString `json:"processDefinitionTenantId,omitempty"`
	// Only activate or suspend job definitions of a process definition which belongs to no tenant. Value may only be `true`, as `false` is the default behavior.  Note that this parameter will only be considered  in combination with `processDefinitionKey`.
	ProcessDefinitionWithoutTenantId NullableBool `json:"processDefinitionWithoutTenantId,omitempty"`
}

// NewJobDefinitionsSuspensionStateDto instantiates a new JobDefinitionsSuspensionStateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobDefinitionsSuspensionStateDto() *JobDefinitionsSuspensionStateDto {
	this := JobDefinitionsSuspensionStateDto{}
	return &this
}

// NewJobDefinitionsSuspensionStateDtoWithDefaults instantiates a new JobDefinitionsSuspensionStateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobDefinitionsSuspensionStateDtoWithDefaults() *JobDefinitionsSuspensionStateDto {
	this := JobDefinitionsSuspensionStateDto{}
	return &this
}

// GetIncludeJobs returns the IncludeJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetIncludeJobs() bool {
	if o == nil || IsNil(o.IncludeJobs.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeJobs.Get()
}

// GetIncludeJobsOk returns a tuple with the IncludeJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetIncludeJobsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeJobs.Get(), o.IncludeJobs.IsSet()
}

// HasIncludeJobs returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasIncludeJobs() bool {
	if o != nil && o.IncludeJobs.IsSet() {
		return true
	}

	return false
}

// SetIncludeJobs gets a reference to the given NullableBool and assigns it to the IncludeJobs field.
func (o *JobDefinitionsSuspensionStateDto) SetIncludeJobs(v bool) {
	o.IncludeJobs.Set(&v)
}
// SetIncludeJobsNil sets the value for IncludeJobs to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetIncludeJobsNil() {
	o.IncludeJobs.Set(nil)
}

// UnsetIncludeJobs ensures that no value is present for IncludeJobs, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetIncludeJobs() {
	o.IncludeJobs.Unset()
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetExecutionDate() string {
	if o == nil || IsNil(o.ExecutionDate.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionDate.Get()
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetExecutionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionDate.Get(), o.ExecutionDate.IsSet()
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate.IsSet() {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given NullableString and assigns it to the ExecutionDate field.
func (o *JobDefinitionsSuspensionStateDto) SetExecutionDate(v string) {
	o.ExecutionDate.Set(&v)
}
// SetExecutionDateNil sets the value for ExecutionDate to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetExecutionDateNil() {
	o.ExecutionDate.Set(nil)
}

// UnsetExecutionDate ensures that no value is present for ExecutionDate, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetExecutionDate() {
	o.ExecutionDate.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *JobDefinitionsSuspensionStateDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionTenantId returns the ProcessDefinitionTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionTenantId() string {
	if o == nil || IsNil(o.ProcessDefinitionTenantId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionTenantId.Get()
}

// GetProcessDefinitionTenantIdOk returns a tuple with the ProcessDefinitionTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionTenantId.Get(), o.ProcessDefinitionTenantId.IsSet()
}

// HasProcessDefinitionTenantId returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasProcessDefinitionTenantId() bool {
	if o != nil && o.ProcessDefinitionTenantId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionTenantId gets a reference to the given NullableString and assigns it to the ProcessDefinitionTenantId field.
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionTenantId(v string) {
	o.ProcessDefinitionTenantId.Set(&v)
}
// SetProcessDefinitionTenantIdNil sets the value for ProcessDefinitionTenantId to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionTenantIdNil() {
	o.ProcessDefinitionTenantId.Set(nil)
}

// UnsetProcessDefinitionTenantId ensures that no value is present for ProcessDefinitionTenantId, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetProcessDefinitionTenantId() {
	o.ProcessDefinitionTenantId.Unset()
}

// GetProcessDefinitionWithoutTenantId returns the ProcessDefinitionWithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionWithoutTenantId() bool {
	if o == nil || IsNil(o.ProcessDefinitionWithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessDefinitionWithoutTenantId.Get()
}

// GetProcessDefinitionWithoutTenantIdOk returns a tuple with the ProcessDefinitionWithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionsSuspensionStateDto) GetProcessDefinitionWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionWithoutTenantId.Get(), o.ProcessDefinitionWithoutTenantId.IsSet()
}

// HasProcessDefinitionWithoutTenantId returns a boolean if a field has been set.
func (o *JobDefinitionsSuspensionStateDto) HasProcessDefinitionWithoutTenantId() bool {
	if o != nil && o.ProcessDefinitionWithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionWithoutTenantId gets a reference to the given NullableBool and assigns it to the ProcessDefinitionWithoutTenantId field.
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionWithoutTenantId(v bool) {
	o.ProcessDefinitionWithoutTenantId.Set(&v)
}
// SetProcessDefinitionWithoutTenantIdNil sets the value for ProcessDefinitionWithoutTenantId to be an explicit nil
func (o *JobDefinitionsSuspensionStateDto) SetProcessDefinitionWithoutTenantIdNil() {
	o.ProcessDefinitionWithoutTenantId.Set(nil)
}

// UnsetProcessDefinitionWithoutTenantId ensures that no value is present for ProcessDefinitionWithoutTenantId, not even an explicit nil
func (o *JobDefinitionsSuspensionStateDto) UnsetProcessDefinitionWithoutTenantId() {
	o.ProcessDefinitionWithoutTenantId.Unset()
}

func (o JobDefinitionsSuspensionStateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobDefinitionsSuspensionStateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludeJobs.IsSet() {
		toSerialize["includeJobs"] = o.IncludeJobs.Get()
	}
	if o.ExecutionDate.IsSet() {
		toSerialize["executionDate"] = o.ExecutionDate.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionTenantId.IsSet() {
		toSerialize["processDefinitionTenantId"] = o.ProcessDefinitionTenantId.Get()
	}
	if o.ProcessDefinitionWithoutTenantId.IsSet() {
		toSerialize["processDefinitionWithoutTenantId"] = o.ProcessDefinitionWithoutTenantId.Get()
	}
	return toSerialize, nil
}

type NullableJobDefinitionsSuspensionStateDto struct {
	value *JobDefinitionsSuspensionStateDto
	isSet bool
}

func (v NullableJobDefinitionsSuspensionStateDto) Get() *JobDefinitionsSuspensionStateDto {
	return v.value
}

func (v *NullableJobDefinitionsSuspensionStateDto) Set(val *JobDefinitionsSuspensionStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobDefinitionsSuspensionStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobDefinitionsSuspensionStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobDefinitionsSuspensionStateDto(val *JobDefinitionsSuspensionStateDto) *NullableJobDefinitionsSuspensionStateDto {
	return &NullableJobDefinitionsSuspensionStateDto{value: val, isSet: true}
}

func (v NullableJobDefinitionsSuspensionStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobDefinitionsSuspensionStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


