/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the ProcessDefinitionSuspensionStateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessDefinitionSuspensionStateDto{}

// ProcessDefinitionSuspensionStateDto struct for ProcessDefinitionSuspensionStateDto
type ProcessDefinitionSuspensionStateDto struct {
	// A `Boolean` value which indicates whether to activate or suspend all process definitions with the given key. When the value is set to `true`, all process definitions with the given key will be suspended and when the value is set to `false`, all process definitions with the given key will be activated.
	Suspended NullableBool `json:"suspended,omitempty"`
	// The id of the process definitions to activate or suspend.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The key of the process definitions to activate or suspend.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// A `Boolean` value which indicates whether to activate or suspend also all process instances of  the process definitions with the given key. When the value is set to `true`, all process instances of the process definitions with the given key will be activated or suspended and when the value is set to `false`, the suspension state of  all process instances of the process definitions with the given key will not be updated.
	IncludeProcessInstances NullableBool `json:"includeProcessInstances,omitempty"`
	// The date on which all process definitions with the given key will be activated or suspended. If `null`, the suspension state of all process definitions with the given key is updated immediately. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutionDate NullableTime `json:"executionDate,omitempty"`
}

// NewProcessDefinitionSuspensionStateDto instantiates a new ProcessDefinitionSuspensionStateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessDefinitionSuspensionStateDto() *ProcessDefinitionSuspensionStateDto {
	this := ProcessDefinitionSuspensionStateDto{}
	return &this
}

// NewProcessDefinitionSuspensionStateDtoWithDefaults instantiates a new ProcessDefinitionSuspensionStateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessDefinitionSuspensionStateDtoWithDefaults() *ProcessDefinitionSuspensionStateDto {
	this := ProcessDefinitionSuspensionStateDto{}
	return &this
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionSuspensionStateDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionSuspensionStateDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *ProcessDefinitionSuspensionStateDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *ProcessDefinitionSuspensionStateDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionSuspensionStateDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionSuspensionStateDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *ProcessDefinitionSuspensionStateDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *ProcessDefinitionSuspensionStateDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionSuspensionStateDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionSuspensionStateDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *ProcessDefinitionSuspensionStateDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *ProcessDefinitionSuspensionStateDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetIncludeProcessInstances returns the IncludeProcessInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionSuspensionStateDto) GetIncludeProcessInstances() bool {
	if o == nil || IsNil(o.IncludeProcessInstances.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeProcessInstances.Get()
}

// GetIncludeProcessInstancesOk returns a tuple with the IncludeProcessInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionSuspensionStateDto) GetIncludeProcessInstancesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeProcessInstances.Get(), o.IncludeProcessInstances.IsSet()
}

// HasIncludeProcessInstances returns a boolean if a field has been set.
func (o *ProcessDefinitionSuspensionStateDto) HasIncludeProcessInstances() bool {
	if o != nil && o.IncludeProcessInstances.IsSet() {
		return true
	}

	return false
}

// SetIncludeProcessInstances gets a reference to the given NullableBool and assigns it to the IncludeProcessInstances field.
func (o *ProcessDefinitionSuspensionStateDto) SetIncludeProcessInstances(v bool) {
	o.IncludeProcessInstances.Set(&v)
}
// SetIncludeProcessInstancesNil sets the value for IncludeProcessInstances to be an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) SetIncludeProcessInstancesNil() {
	o.IncludeProcessInstances.Set(nil)
}

// UnsetIncludeProcessInstances ensures that no value is present for IncludeProcessInstances, not even an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) UnsetIncludeProcessInstances() {
	o.IncludeProcessInstances.Unset()
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessDefinitionSuspensionStateDto) GetExecutionDate() time.Time {
	if o == nil || IsNil(o.ExecutionDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExecutionDate.Get()
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessDefinitionSuspensionStateDto) GetExecutionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionDate.Get(), o.ExecutionDate.IsSet()
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *ProcessDefinitionSuspensionStateDto) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate.IsSet() {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given NullableTime and assigns it to the ExecutionDate field.
func (o *ProcessDefinitionSuspensionStateDto) SetExecutionDate(v time.Time) {
	o.ExecutionDate.Set(&v)
}
// SetExecutionDateNil sets the value for ExecutionDate to be an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) SetExecutionDateNil() {
	o.ExecutionDate.Set(nil)
}

// UnsetExecutionDate ensures that no value is present for ExecutionDate, not even an explicit nil
func (o *ProcessDefinitionSuspensionStateDto) UnsetExecutionDate() {
	o.ExecutionDate.Unset()
}

func (o ProcessDefinitionSuspensionStateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessDefinitionSuspensionStateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.IncludeProcessInstances.IsSet() {
		toSerialize["includeProcessInstances"] = o.IncludeProcessInstances.Get()
	}
	if o.ExecutionDate.IsSet() {
		toSerialize["executionDate"] = o.ExecutionDate.Get()
	}
	return toSerialize, nil
}

type NullableProcessDefinitionSuspensionStateDto struct {
	value *ProcessDefinitionSuspensionStateDto
	isSet bool
}

func (v NullableProcessDefinitionSuspensionStateDto) Get() *ProcessDefinitionSuspensionStateDto {
	return v.value
}

func (v *NullableProcessDefinitionSuspensionStateDto) Set(val *ProcessDefinitionSuspensionStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessDefinitionSuspensionStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessDefinitionSuspensionStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessDefinitionSuspensionStateDto(val *ProcessDefinitionSuspensionStateDto) *NullableProcessDefinitionSuspensionStateDto {
	return &NullableProcessDefinitionSuspensionStateDto{value: val, isSet: true}
}

func (v NullableProcessDefinitionSuspensionStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessDefinitionSuspensionStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


