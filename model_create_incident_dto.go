/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CreateIncidentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIncidentDto{}

// CreateIncidentDto struct for CreateIncidentDto
type CreateIncidentDto struct {
	// A type of the new incident.
	IncidentType NullableString `json:"incidentType,omitempty"`
	// A configuration for the new incident.
	Configuration NullableString `json:"configuration,omitempty"`
	// A message for the new incident.
	Message NullableString `json:"message,omitempty"`
}

// NewCreateIncidentDto instantiates a new CreateIncidentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIncidentDto() *CreateIncidentDto {
	this := CreateIncidentDto{}
	return &this
}

// NewCreateIncidentDtoWithDefaults instantiates a new CreateIncidentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIncidentDtoWithDefaults() *CreateIncidentDto {
	this := CreateIncidentDto{}
	return &this
}

// GetIncidentType returns the IncidentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIncidentDto) GetIncidentType() string {
	if o == nil || IsNil(o.IncidentType.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentType.Get()
}

// GetIncidentTypeOk returns a tuple with the IncidentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIncidentDto) GetIncidentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentType.Get(), o.IncidentType.IsSet()
}

// HasIncidentType returns a boolean if a field has been set.
func (o *CreateIncidentDto) HasIncidentType() bool {
	if o != nil && o.IncidentType.IsSet() {
		return true
	}

	return false
}

// SetIncidentType gets a reference to the given NullableString and assigns it to the IncidentType field.
func (o *CreateIncidentDto) SetIncidentType(v string) {
	o.IncidentType.Set(&v)
}
// SetIncidentTypeNil sets the value for IncidentType to be an explicit nil
func (o *CreateIncidentDto) SetIncidentTypeNil() {
	o.IncidentType.Set(nil)
}

// UnsetIncidentType ensures that no value is present for IncidentType, not even an explicit nil
func (o *CreateIncidentDto) UnsetIncidentType() {
	o.IncidentType.Unset()
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIncidentDto) GetConfiguration() string {
	if o == nil || IsNil(o.Configuration.Get()) {
		var ret string
		return ret
	}
	return *o.Configuration.Get()
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIncidentDto) GetConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Configuration.Get(), o.Configuration.IsSet()
}

// HasConfiguration returns a boolean if a field has been set.
func (o *CreateIncidentDto) HasConfiguration() bool {
	if o != nil && o.Configuration.IsSet() {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given NullableString and assigns it to the Configuration field.
func (o *CreateIncidentDto) SetConfiguration(v string) {
	o.Configuration.Set(&v)
}
// SetConfigurationNil sets the value for Configuration to be an explicit nil
func (o *CreateIncidentDto) SetConfigurationNil() {
	o.Configuration.Set(nil)
}

// UnsetConfiguration ensures that no value is present for Configuration, not even an explicit nil
func (o *CreateIncidentDto) UnsetConfiguration() {
	o.Configuration.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIncidentDto) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIncidentDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *CreateIncidentDto) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *CreateIncidentDto) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *CreateIncidentDto) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *CreateIncidentDto) UnsetMessage() {
	o.Message.Unset()
}

func (o CreateIncidentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIncidentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IncidentType.IsSet() {
		toSerialize["incidentType"] = o.IncidentType.Get()
	}
	if o.Configuration.IsSet() {
		toSerialize["configuration"] = o.Configuration.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return toSerialize, nil
}

type NullableCreateIncidentDto struct {
	value *CreateIncidentDto
	isSet bool
}

func (v NullableCreateIncidentDto) Get() *CreateIncidentDto {
	return v.value
}

func (v *NullableCreateIncidentDto) Set(val *CreateIncidentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIncidentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIncidentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIncidentDto(val *CreateIncidentDto) *NullableCreateIncidentDto {
	return &NullableCreateIncidentDto{value: val, isSet: true}
}

func (v NullableCreateIncidentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIncidentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


