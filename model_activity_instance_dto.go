/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ActivityInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityInstanceDto{}

// ActivityInstanceDto A JSON object corresponding to the Activity Instance tree of the given process instance.
type ActivityInstanceDto struct {
	// The id of the activity instance.
	Id NullableString `json:"id,omitempty"`
	// The id of the parent activity instance, for example a sub process instance.
	ParentActivityInstanceId NullableString `json:"parentActivityInstanceId,omitempty"`
	// The id of the activity.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The name of the activity
	ActivityName NullableString `json:"activityName,omitempty"`
	// The name of the activity. This property is deprecated. Please use 'activityName'.
	Name NullableString `json:"name,omitempty"`
	// The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., 'userTask')
	ActivityType NullableString `json:"activityType,omitempty"`
	// The id of the process instance this activity instance is part of.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the process definition.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// A list of child activity instances.
	ChildActivityInstances []ActivityInstanceDto `json:"childActivityInstances,omitempty"`
	// A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation.
	ChildTransitionInstances []TransitionInstanceDto `json:"childTransitionInstances,omitempty"`
	// A list of execution ids.
	ExecutionIds []string `json:"executionIds,omitempty"`
	// A list of incident ids.
	IncidentIds []string `json:"incidentIds,omitempty"`
	// A list of JSON objects containing incident specific properties: * `id`: the id of the incident * `activityId`: the activity id in which the incident occurred
	Incidents []ActivityInstanceIncidentDto `json:"incidents,omitempty"`
}

// NewActivityInstanceDto instantiates a new ActivityInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityInstanceDto() *ActivityInstanceDto {
	this := ActivityInstanceDto{}
	return &this
}

// NewActivityInstanceDtoWithDefaults instantiates a new ActivityInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityInstanceDtoWithDefaults() *ActivityInstanceDto {
	this := ActivityInstanceDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ActivityInstanceDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ActivityInstanceDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ActivityInstanceDto) UnsetId() {
	o.Id.Unset()
}

// GetParentActivityInstanceId returns the ParentActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetParentActivityInstanceId() string {
	if o == nil || IsNil(o.ParentActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentActivityInstanceId.Get()
}

// GetParentActivityInstanceIdOk returns a tuple with the ParentActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetParentActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentActivityInstanceId.Get(), o.ParentActivityInstanceId.IsSet()
}

// HasParentActivityInstanceId returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasParentActivityInstanceId() bool {
	if o != nil && o.ParentActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetParentActivityInstanceId gets a reference to the given NullableString and assigns it to the ParentActivityInstanceId field.
func (o *ActivityInstanceDto) SetParentActivityInstanceId(v string) {
	o.ParentActivityInstanceId.Set(&v)
}
// SetParentActivityInstanceIdNil sets the value for ParentActivityInstanceId to be an explicit nil
func (o *ActivityInstanceDto) SetParentActivityInstanceIdNil() {
	o.ParentActivityInstanceId.Set(nil)
}

// UnsetParentActivityInstanceId ensures that no value is present for ParentActivityInstanceId, not even an explicit nil
func (o *ActivityInstanceDto) UnsetParentActivityInstanceId() {
	o.ParentActivityInstanceId.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *ActivityInstanceDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *ActivityInstanceDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *ActivityInstanceDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetActivityName returns the ActivityName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetActivityName() string {
	if o == nil || IsNil(o.ActivityName.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityName.Get()
}

// GetActivityNameOk returns a tuple with the ActivityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetActivityNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityName.Get(), o.ActivityName.IsSet()
}

// HasActivityName returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasActivityName() bool {
	if o != nil && o.ActivityName.IsSet() {
		return true
	}

	return false
}

// SetActivityName gets a reference to the given NullableString and assigns it to the ActivityName field.
func (o *ActivityInstanceDto) SetActivityName(v string) {
	o.ActivityName.Set(&v)
}
// SetActivityNameNil sets the value for ActivityName to be an explicit nil
func (o *ActivityInstanceDto) SetActivityNameNil() {
	o.ActivityName.Set(nil)
}

// UnsetActivityName ensures that no value is present for ActivityName, not even an explicit nil
func (o *ActivityInstanceDto) UnsetActivityName() {
	o.ActivityName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ActivityInstanceDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ActivityInstanceDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ActivityInstanceDto) UnsetName() {
	o.Name.Unset()
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityType.Get()
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetActivityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityType.Get(), o.ActivityType.IsSet()
}

// HasActivityType returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasActivityType() bool {
	if o != nil && o.ActivityType.IsSet() {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given NullableString and assigns it to the ActivityType field.
func (o *ActivityInstanceDto) SetActivityType(v string) {
	o.ActivityType.Set(&v)
}
// SetActivityTypeNil sets the value for ActivityType to be an explicit nil
func (o *ActivityInstanceDto) SetActivityTypeNil() {
	o.ActivityType.Set(nil)
}

// UnsetActivityType ensures that no value is present for ActivityType, not even an explicit nil
func (o *ActivityInstanceDto) UnsetActivityType() {
	o.ActivityType.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *ActivityInstanceDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *ActivityInstanceDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *ActivityInstanceDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *ActivityInstanceDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *ActivityInstanceDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *ActivityInstanceDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetChildActivityInstances returns the ChildActivityInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetChildActivityInstances() []ActivityInstanceDto {
	if o == nil {
		var ret []ActivityInstanceDto
		return ret
	}
	return o.ChildActivityInstances
}

// GetChildActivityInstancesOk returns a tuple with the ChildActivityInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetChildActivityInstancesOk() ([]ActivityInstanceDto, bool) {
	if o == nil || IsNil(o.ChildActivityInstances) {
		return nil, false
	}
	return o.ChildActivityInstances, true
}

// HasChildActivityInstances returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasChildActivityInstances() bool {
	if o != nil && !IsNil(o.ChildActivityInstances) {
		return true
	}

	return false
}

// SetChildActivityInstances gets a reference to the given []ActivityInstanceDto and assigns it to the ChildActivityInstances field.
func (o *ActivityInstanceDto) SetChildActivityInstances(v []ActivityInstanceDto) {
	o.ChildActivityInstances = v
}

// GetChildTransitionInstances returns the ChildTransitionInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetChildTransitionInstances() []TransitionInstanceDto {
	if o == nil {
		var ret []TransitionInstanceDto
		return ret
	}
	return o.ChildTransitionInstances
}

// GetChildTransitionInstancesOk returns a tuple with the ChildTransitionInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetChildTransitionInstancesOk() ([]TransitionInstanceDto, bool) {
	if o == nil || IsNil(o.ChildTransitionInstances) {
		return nil, false
	}
	return o.ChildTransitionInstances, true
}

// HasChildTransitionInstances returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasChildTransitionInstances() bool {
	if o != nil && !IsNil(o.ChildTransitionInstances) {
		return true
	}

	return false
}

// SetChildTransitionInstances gets a reference to the given []TransitionInstanceDto and assigns it to the ChildTransitionInstances field.
func (o *ActivityInstanceDto) SetChildTransitionInstances(v []TransitionInstanceDto) {
	o.ChildTransitionInstances = v
}

// GetExecutionIds returns the ExecutionIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetExecutionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExecutionIds
}

// GetExecutionIdsOk returns a tuple with the ExecutionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetExecutionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExecutionIds) {
		return nil, false
	}
	return o.ExecutionIds, true
}

// HasExecutionIds returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasExecutionIds() bool {
	if o != nil && !IsNil(o.ExecutionIds) {
		return true
	}

	return false
}

// SetExecutionIds gets a reference to the given []string and assigns it to the ExecutionIds field.
func (o *ActivityInstanceDto) SetExecutionIds(v []string) {
	o.ExecutionIds = v
}

// GetIncidentIds returns the IncidentIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetIncidentIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncidentIds
}

// GetIncidentIdsOk returns a tuple with the IncidentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetIncidentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncidentIds) {
		return nil, false
	}
	return o.IncidentIds, true
}

// HasIncidentIds returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasIncidentIds() bool {
	if o != nil && !IsNil(o.IncidentIds) {
		return true
	}

	return false
}

// SetIncidentIds gets a reference to the given []string and assigns it to the IncidentIds field.
func (o *ActivityInstanceDto) SetIncidentIds(v []string) {
	o.IncidentIds = v
}

// GetIncidents returns the Incidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceDto) GetIncidents() []ActivityInstanceIncidentDto {
	if o == nil {
		var ret []ActivityInstanceIncidentDto
		return ret
	}
	return o.Incidents
}

// GetIncidentsOk returns a tuple with the Incidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceDto) GetIncidentsOk() ([]ActivityInstanceIncidentDto, bool) {
	if o == nil || IsNil(o.Incidents) {
		return nil, false
	}
	return o.Incidents, true
}

// HasIncidents returns a boolean if a field has been set.
func (o *ActivityInstanceDto) HasIncidents() bool {
	if o != nil && !IsNil(o.Incidents) {
		return true
	}

	return false
}

// SetIncidents gets a reference to the given []ActivityInstanceIncidentDto and assigns it to the Incidents field.
func (o *ActivityInstanceDto) SetIncidents(v []ActivityInstanceIncidentDto) {
	o.Incidents = v
}

func (o ActivityInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ParentActivityInstanceId.IsSet() {
		toSerialize["parentActivityInstanceId"] = o.ParentActivityInstanceId.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.ActivityName.IsSet() {
		toSerialize["activityName"] = o.ActivityName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ActivityType.IsSet() {
		toSerialize["activityType"] = o.ActivityType.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ChildActivityInstances != nil {
		toSerialize["childActivityInstances"] = o.ChildActivityInstances
	}
	if o.ChildTransitionInstances != nil {
		toSerialize["childTransitionInstances"] = o.ChildTransitionInstances
	}
	if o.ExecutionIds != nil {
		toSerialize["executionIds"] = o.ExecutionIds
	}
	if o.IncidentIds != nil {
		toSerialize["incidentIds"] = o.IncidentIds
	}
	if o.Incidents != nil {
		toSerialize["incidents"] = o.Incidents
	}
	return toSerialize, nil
}

type NullableActivityInstanceDto struct {
	value *ActivityInstanceDto
	isSet bool
}

func (v NullableActivityInstanceDto) Get() *ActivityInstanceDto {
	return v.value
}

func (v *NullableActivityInstanceDto) Set(val *ActivityInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityInstanceDto(val *ActivityInstanceDto) *NullableActivityInstanceDto {
	return &NullableActivityInstanceDto{value: val, isSet: true}
}

func (v NullableActivityInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


