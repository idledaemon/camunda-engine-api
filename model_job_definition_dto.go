/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the JobDefinitionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobDefinitionDto{}

// JobDefinitionDto struct for JobDefinitionDto
type JobDefinitionDto struct {
	// The id of the job definition.
	Id NullableString `json:"id,omitempty"`
	// The id of the process definition this job definition is associated with.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The key of the process definition this job definition is associated with.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The id of the activity this job definition is associated with.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The type of the job which is running for this job definition. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
	JobType NullableString `json:"jobType,omitempty"`
	// The configuration of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer configuration.
	JobConfiguration NullableString `json:"jobConfiguration,omitempty"`
	// The execution priority defined for jobs that are created based on this definition. May be `null` when the priority has not been overridden on the job definition level.
	OverridingJobPriority NullableInt64 `json:"overridingJobPriority,omitempty"`
	// Indicates whether this job definition is suspended or not.
	Suspended NullableBool `json:"suspended,omitempty"`
	// The id of the tenant this job definition is associated with.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The id of the deployment this job definition is related to. In a deployment-aware setup, this leads to all jobs of the same definition being executed on the same node.
	DeploymentId NullableString `json:"deploymentId,omitempty"`
}

// NewJobDefinitionDto instantiates a new JobDefinitionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobDefinitionDto() *JobDefinitionDto {
	this := JobDefinitionDto{}
	return &this
}

// NewJobDefinitionDtoWithDefaults instantiates a new JobDefinitionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobDefinitionDtoWithDefaults() *JobDefinitionDto {
	this := JobDefinitionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *JobDefinitionDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *JobDefinitionDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *JobDefinitionDto) UnsetId() {
	o.Id.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *JobDefinitionDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *JobDefinitionDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *JobDefinitionDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *JobDefinitionDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *JobDefinitionDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *JobDefinitionDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *JobDefinitionDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *JobDefinitionDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *JobDefinitionDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetJobType returns the JobType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetJobType() string {
	if o == nil || IsNil(o.JobType.Get()) {
		var ret string
		return ret
	}
	return *o.JobType.Get()
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetJobTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobType.Get(), o.JobType.IsSet()
}

// HasJobType returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasJobType() bool {
	if o != nil && o.JobType.IsSet() {
		return true
	}

	return false
}

// SetJobType gets a reference to the given NullableString and assigns it to the JobType field.
func (o *JobDefinitionDto) SetJobType(v string) {
	o.JobType.Set(&v)
}
// SetJobTypeNil sets the value for JobType to be an explicit nil
func (o *JobDefinitionDto) SetJobTypeNil() {
	o.JobType.Set(nil)
}

// UnsetJobType ensures that no value is present for JobType, not even an explicit nil
func (o *JobDefinitionDto) UnsetJobType() {
	o.JobType.Unset()
}

// GetJobConfiguration returns the JobConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetJobConfiguration() string {
	if o == nil || IsNil(o.JobConfiguration.Get()) {
		var ret string
		return ret
	}
	return *o.JobConfiguration.Get()
}

// GetJobConfigurationOk returns a tuple with the JobConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetJobConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobConfiguration.Get(), o.JobConfiguration.IsSet()
}

// HasJobConfiguration returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasJobConfiguration() bool {
	if o != nil && o.JobConfiguration.IsSet() {
		return true
	}

	return false
}

// SetJobConfiguration gets a reference to the given NullableString and assigns it to the JobConfiguration field.
func (o *JobDefinitionDto) SetJobConfiguration(v string) {
	o.JobConfiguration.Set(&v)
}
// SetJobConfigurationNil sets the value for JobConfiguration to be an explicit nil
func (o *JobDefinitionDto) SetJobConfigurationNil() {
	o.JobConfiguration.Set(nil)
}

// UnsetJobConfiguration ensures that no value is present for JobConfiguration, not even an explicit nil
func (o *JobDefinitionDto) UnsetJobConfiguration() {
	o.JobConfiguration.Unset()
}

// GetOverridingJobPriority returns the OverridingJobPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetOverridingJobPriority() int64 {
	if o == nil || IsNil(o.OverridingJobPriority.Get()) {
		var ret int64
		return ret
	}
	return *o.OverridingJobPriority.Get()
}

// GetOverridingJobPriorityOk returns a tuple with the OverridingJobPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetOverridingJobPriorityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverridingJobPriority.Get(), o.OverridingJobPriority.IsSet()
}

// HasOverridingJobPriority returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasOverridingJobPriority() bool {
	if o != nil && o.OverridingJobPriority.IsSet() {
		return true
	}

	return false
}

// SetOverridingJobPriority gets a reference to the given NullableInt64 and assigns it to the OverridingJobPriority field.
func (o *JobDefinitionDto) SetOverridingJobPriority(v int64) {
	o.OverridingJobPriority.Set(&v)
}
// SetOverridingJobPriorityNil sets the value for OverridingJobPriority to be an explicit nil
func (o *JobDefinitionDto) SetOverridingJobPriorityNil() {
	o.OverridingJobPriority.Set(nil)
}

// UnsetOverridingJobPriority ensures that no value is present for OverridingJobPriority, not even an explicit nil
func (o *JobDefinitionDto) UnsetOverridingJobPriority() {
	o.OverridingJobPriority.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *JobDefinitionDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *JobDefinitionDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *JobDefinitionDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *JobDefinitionDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *JobDefinitionDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *JobDefinitionDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionDto) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionDto) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *JobDefinitionDto) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *JobDefinitionDto) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *JobDefinitionDto) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *JobDefinitionDto) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

func (o JobDefinitionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobDefinitionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.JobType.IsSet() {
		toSerialize["jobType"] = o.JobType.Get()
	}
	if o.JobConfiguration.IsSet() {
		toSerialize["jobConfiguration"] = o.JobConfiguration.Get()
	}
	if o.OverridingJobPriority.IsSet() {
		toSerialize["overridingJobPriority"] = o.OverridingJobPriority.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	return toSerialize, nil
}

type NullableJobDefinitionDto struct {
	value *JobDefinitionDto
	isSet bool
}

func (v NullableJobDefinitionDto) Get() *JobDefinitionDto {
	return v.value
}

func (v *NullableJobDefinitionDto) Set(val *JobDefinitionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobDefinitionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobDefinitionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobDefinitionDto(val *JobDefinitionDto) *NullableJobDefinitionDto {
	return &NullableJobDefinitionDto{value: val, isSet: true}
}

func (v NullableJobDefinitionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobDefinitionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


