/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


type HistoricIncidentAPI interface {

	/*
	GetHistoricIncidents Get Incidents

	Queries for historic incidents that fulfill given parameters.
The size of the result set can be retrieved by using the
[Get Incident Count](https://docs.camunda.org/manual/7.21/reference/rest/history/incident/get-incident-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricIncidentsRequest
	*/
	GetHistoricIncidents(ctx context.Context) ApiGetHistoricIncidentsRequest

	// GetHistoricIncidentsExecute executes the request
	//  @return []HistoricIncidentDto
	GetHistoricIncidentsExecute(r ApiGetHistoricIncidentsRequest) ([]HistoricIncidentDto, *http.Response, error)

	/*
	GetHistoricIncidentsCount Get Incident Count

	Queries for the number of historic incidents that fulfill the given parameters.
Takes the same parameters as the
[Get Incidents](https://docs.camunda.org/manual/7.21/reference/rest/history/incident/get-incident-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricIncidentsCountRequest
	*/
	GetHistoricIncidentsCount(ctx context.Context) ApiGetHistoricIncidentsCountRequest

	// GetHistoricIncidentsCountExecute executes the request
	//  @return CountResultDto
	GetHistoricIncidentsCountExecute(r ApiGetHistoricIncidentsCountRequest) (*CountResultDto, *http.Response, error)
}

// HistoricIncidentAPIService HistoricIncidentAPI service
type HistoricIncidentAPIService service

type ApiGetHistoricIncidentsRequest struct {
	ctx context.Context
	ApiService HistoricIncidentAPI
	incidentId *string
	incidentType *string
	incidentMessage *string
	incidentMessageLike *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionKeyIn *string
	processInstanceId *string
	executionId *string
	createTimeBefore *time.Time
	createTimeAfter *time.Time
	endTimeBefore *time.Time
	endTimeAfter *time.Time
	activityId *string
	failedActivityId *string
	causeIncidentId *string
	rootCauseIncidentId *string
	configuration *string
	historyConfiguration *string
	open *bool
	resolved *bool
	deleted *bool
	tenantIdIn *string
	withoutTenantId *bool
	jobDefinitionIdIn *string
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Restricts to incidents that have the given id.
func (r ApiGetHistoricIncidentsRequest) IncidentId(incidentId string) ApiGetHistoricIncidentsRequest {
	r.incidentId = &incidentId
	return r
}

// Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
func (r ApiGetHistoricIncidentsRequest) IncidentType(incidentType string) ApiGetHistoricIncidentsRequest {
	r.incidentType = &incidentType
	return r
}

// Restricts to incidents that have the given incident message.
func (r ApiGetHistoricIncidentsRequest) IncidentMessage(incidentMessage string) ApiGetHistoricIncidentsRequest {
	r.incidentMessage = &incidentMessage
	return r
}

// Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
func (r ApiGetHistoricIncidentsRequest) IncidentMessageLike(incidentMessageLike string) ApiGetHistoricIncidentsRequest {
	r.incidentMessageLike = &incidentMessageLike
	return r
}

// Restricts to incidents that belong to a process definition with the given id.
func (r ApiGetHistoricIncidentsRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricIncidentsRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Restricts to incidents that have the given processDefinitionKey.
func (r ApiGetHistoricIncidentsRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricIncidentsRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Restricts to incidents that have one of the given process definition keys.
func (r ApiGetHistoricIncidentsRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetHistoricIncidentsRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Restricts to incidents that belong to a process instance with the given id.
func (r ApiGetHistoricIncidentsRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricIncidentsRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Restricts to incidents that belong to an execution with the given id.
func (r ApiGetHistoricIncidentsRequest) ExecutionId(executionId string) ApiGetHistoricIncidentsRequest {
	r.executionId = &executionId
	return r
}

// Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsRequest) CreateTimeBefore(createTimeBefore time.Time) ApiGetHistoricIncidentsRequest {
	r.createTimeBefore = &createTimeBefore
	return r
}

// Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsRequest) CreateTimeAfter(createTimeAfter time.Time) ApiGetHistoricIncidentsRequest {
	r.createTimeAfter = &createTimeAfter
	return r
}

// Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsRequest) EndTimeBefore(endTimeBefore time.Time) ApiGetHistoricIncidentsRequest {
	r.endTimeBefore = &endTimeBefore
	return r
}

// Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsRequest) EndTimeAfter(endTimeAfter time.Time) ApiGetHistoricIncidentsRequest {
	r.endTimeAfter = &endTimeAfter
	return r
}

// Restricts to incidents that belong to an activity with the given id.
func (r ApiGetHistoricIncidentsRequest) ActivityId(activityId string) ApiGetHistoricIncidentsRequest {
	r.activityId = &activityId
	return r
}

// Restricts to incidents that were created due to the failure of an activity with the given id.
func (r ApiGetHistoricIncidentsRequest) FailedActivityId(failedActivityId string) ApiGetHistoricIncidentsRequest {
	r.failedActivityId = &failedActivityId
	return r
}

// Restricts to incidents that have the given incident id as cause incident.
func (r ApiGetHistoricIncidentsRequest) CauseIncidentId(causeIncidentId string) ApiGetHistoricIncidentsRequest {
	r.causeIncidentId = &causeIncidentId
	return r
}

// Restricts to incidents that have the given incident id as root cause incident.
func (r ApiGetHistoricIncidentsRequest) RootCauseIncidentId(rootCauseIncidentId string) ApiGetHistoricIncidentsRequest {
	r.rootCauseIncidentId = &rootCauseIncidentId
	return r
}

// Restricts to incidents that have the given parameter set as configuration.
func (r ApiGetHistoricIncidentsRequest) Configuration(configuration string) ApiGetHistoricIncidentsRequest {
	r.configuration = &configuration
	return r
}

// Restricts to incidents that have the given parameter set as history configuration.
func (r ApiGetHistoricIncidentsRequest) HistoryConfiguration(historyConfiguration string) ApiGetHistoricIncidentsRequest {
	r.historyConfiguration = &historyConfiguration
	return r
}

// Restricts to incidents that are open.
func (r ApiGetHistoricIncidentsRequest) Open(open bool) ApiGetHistoricIncidentsRequest {
	r.open = &open
	return r
}

// Restricts to incidents that are resolved.
func (r ApiGetHistoricIncidentsRequest) Resolved(resolved bool) ApiGetHistoricIncidentsRequest {
	r.resolved = &resolved
	return r
}

// Restricts to incidents that are deleted.
func (r ApiGetHistoricIncidentsRequest) Deleted(deleted bool) ApiGetHistoricIncidentsRequest {
	r.deleted = &deleted
	return r
}

// Restricts to incidents that have one of the given comma-separated tenant ids.
func (r ApiGetHistoricIncidentsRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricIncidentsRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricIncidentsRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricIncidentsRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Restricts to incidents that have one of the given comma-separated job definition ids.
func (r ApiGetHistoricIncidentsRequest) JobDefinitionIdIn(jobDefinitionIdIn string) ApiGetHistoricIncidentsRequest {
	r.jobDefinitionIdIn = &jobDefinitionIdIn
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricIncidentsRequest) SortBy(sortBy string) ApiGetHistoricIncidentsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricIncidentsRequest) SortOrder(sortOrder string) ApiGetHistoricIncidentsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricIncidentsRequest) FirstResult(firstResult int32) ApiGetHistoricIncidentsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricIncidentsRequest) MaxResults(maxResults int32) ApiGetHistoricIncidentsRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetHistoricIncidentsRequest) Execute() ([]HistoricIncidentDto, *http.Response, error) {
	return r.ApiService.GetHistoricIncidentsExecute(r)
}

/*
GetHistoricIncidents Get Incidents

Queries for historic incidents that fulfill given parameters.
The size of the result set can be retrieved by using the
[Get Incident Count](https://docs.camunda.org/manual/7.21/reference/rest/history/incident/get-incident-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricIncidentsRequest
*/
func (a *HistoricIncidentAPIService) GetHistoricIncidents(ctx context.Context) ApiGetHistoricIncidentsRequest {
	return ApiGetHistoricIncidentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricIncidentDto
func (a *HistoricIncidentAPIService) GetHistoricIncidentsExecute(r ApiGetHistoricIncidentsRequest) ([]HistoricIncidentDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricIncidentDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricIncidentAPIService.GetHistoricIncidents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/incident"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.incidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentId", r.incidentId, "")
	}
	if r.incidentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentType", r.incidentType, "")
	}
	if r.incidentMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessage", r.incidentMessage, "")
	}
	if r.incidentMessageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessageLike", r.incidentMessageLike, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.createTimeBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeBefore", r.createTimeBefore, "")
	}
	if r.createTimeAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeAfter", r.createTimeAfter, "")
	}
	if r.endTimeBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTimeBefore", r.endTimeBefore, "")
	}
	if r.endTimeAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTimeAfter", r.endTimeAfter, "")
	}
	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityId", r.activityId, "")
	}
	if r.failedActivityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failedActivityId", r.failedActivityId, "")
	}
	if r.causeIncidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "causeIncidentId", r.causeIncidentId, "")
	}
	if r.rootCauseIncidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootCauseIncidentId", r.rootCauseIncidentId, "")
	}
	if r.configuration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
	}
	if r.historyConfiguration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "historyConfiguration", r.historyConfiguration, "")
	}
	if r.open != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open", r.open, "")
	}
	if r.resolved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolved", r.resolved, "")
	}
	if r.deleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted", r.deleted, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.jobDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionIdIn", r.jobDefinitionIdIn, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricIncidentsCountRequest struct {
	ctx context.Context
	ApiService HistoricIncidentAPI
	incidentId *string
	incidentType *string
	incidentMessage *string
	incidentMessageLike *string
	processDefinitionId *string
	processDefinitionKey *string
	processDefinitionKeyIn *string
	processInstanceId *string
	executionId *string
	createTimeBefore *time.Time
	createTimeAfter *time.Time
	endTimeBefore *time.Time
	endTimeAfter *time.Time
	activityId *string
	failedActivityId *string
	causeIncidentId *string
	rootCauseIncidentId *string
	configuration *string
	historyConfiguration *string
	open *bool
	resolved *bool
	deleted *bool
	tenantIdIn *string
	withoutTenantId *bool
	jobDefinitionIdIn *string
}

// Restricts to incidents that have the given id.
func (r ApiGetHistoricIncidentsCountRequest) IncidentId(incidentId string) ApiGetHistoricIncidentsCountRequest {
	r.incidentId = &incidentId
	return r
}

// Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
func (r ApiGetHistoricIncidentsCountRequest) IncidentType(incidentType string) ApiGetHistoricIncidentsCountRequest {
	r.incidentType = &incidentType
	return r
}

// Restricts to incidents that have the given incident message.
func (r ApiGetHistoricIncidentsCountRequest) IncidentMessage(incidentMessage string) ApiGetHistoricIncidentsCountRequest {
	r.incidentMessage = &incidentMessage
	return r
}

// Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
func (r ApiGetHistoricIncidentsCountRequest) IncidentMessageLike(incidentMessageLike string) ApiGetHistoricIncidentsCountRequest {
	r.incidentMessageLike = &incidentMessageLike
	return r
}

// Restricts to incidents that belong to a process definition with the given id.
func (r ApiGetHistoricIncidentsCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricIncidentsCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Restricts to incidents that have the given processDefinitionKey.
func (r ApiGetHistoricIncidentsCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricIncidentsCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Restricts to incidents that have one of the given process definition keys.
func (r ApiGetHistoricIncidentsCountRequest) ProcessDefinitionKeyIn(processDefinitionKeyIn string) ApiGetHistoricIncidentsCountRequest {
	r.processDefinitionKeyIn = &processDefinitionKeyIn
	return r
}

// Restricts to incidents that belong to a process instance with the given id.
func (r ApiGetHistoricIncidentsCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricIncidentsCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Restricts to incidents that belong to an execution with the given id.
func (r ApiGetHistoricIncidentsCountRequest) ExecutionId(executionId string) ApiGetHistoricIncidentsCountRequest {
	r.executionId = &executionId
	return r
}

// Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsCountRequest) CreateTimeBefore(createTimeBefore time.Time) ApiGetHistoricIncidentsCountRequest {
	r.createTimeBefore = &createTimeBefore
	return r
}

// Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsCountRequest) CreateTimeAfter(createTimeAfter time.Time) ApiGetHistoricIncidentsCountRequest {
	r.createTimeAfter = &createTimeAfter
	return r
}

// Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsCountRequest) EndTimeBefore(endTimeBefore time.Time) ApiGetHistoricIncidentsCountRequest {
	r.endTimeBefore = &endTimeBefore
	return r
}

// Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricIncidentsCountRequest) EndTimeAfter(endTimeAfter time.Time) ApiGetHistoricIncidentsCountRequest {
	r.endTimeAfter = &endTimeAfter
	return r
}

// Restricts to incidents that belong to an activity with the given id.
func (r ApiGetHistoricIncidentsCountRequest) ActivityId(activityId string) ApiGetHistoricIncidentsCountRequest {
	r.activityId = &activityId
	return r
}

// Restricts to incidents that were created due to the failure of an activity with the given id.
func (r ApiGetHistoricIncidentsCountRequest) FailedActivityId(failedActivityId string) ApiGetHistoricIncidentsCountRequest {
	r.failedActivityId = &failedActivityId
	return r
}

// Restricts to incidents that have the given incident id as cause incident.
func (r ApiGetHistoricIncidentsCountRequest) CauseIncidentId(causeIncidentId string) ApiGetHistoricIncidentsCountRequest {
	r.causeIncidentId = &causeIncidentId
	return r
}

// Restricts to incidents that have the given incident id as root cause incident.
func (r ApiGetHistoricIncidentsCountRequest) RootCauseIncidentId(rootCauseIncidentId string) ApiGetHistoricIncidentsCountRequest {
	r.rootCauseIncidentId = &rootCauseIncidentId
	return r
}

// Restricts to incidents that have the given parameter set as configuration.
func (r ApiGetHistoricIncidentsCountRequest) Configuration(configuration string) ApiGetHistoricIncidentsCountRequest {
	r.configuration = &configuration
	return r
}

// Restricts to incidents that have the given parameter set as history configuration.
func (r ApiGetHistoricIncidentsCountRequest) HistoryConfiguration(historyConfiguration string) ApiGetHistoricIncidentsCountRequest {
	r.historyConfiguration = &historyConfiguration
	return r
}

// Restricts to incidents that are open.
func (r ApiGetHistoricIncidentsCountRequest) Open(open bool) ApiGetHistoricIncidentsCountRequest {
	r.open = &open
	return r
}

// Restricts to incidents that are resolved.
func (r ApiGetHistoricIncidentsCountRequest) Resolved(resolved bool) ApiGetHistoricIncidentsCountRequest {
	r.resolved = &resolved
	return r
}

// Restricts to incidents that are deleted.
func (r ApiGetHistoricIncidentsCountRequest) Deleted(deleted bool) ApiGetHistoricIncidentsCountRequest {
	r.deleted = &deleted
	return r
}

// Restricts to incidents that have one of the given comma-separated tenant ids.
func (r ApiGetHistoricIncidentsCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricIncidentsCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricIncidentsCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricIncidentsCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Restricts to incidents that have one of the given comma-separated job definition ids.
func (r ApiGetHistoricIncidentsCountRequest) JobDefinitionIdIn(jobDefinitionIdIn string) ApiGetHistoricIncidentsCountRequest {
	r.jobDefinitionIdIn = &jobDefinitionIdIn
	return r
}

func (r ApiGetHistoricIncidentsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricIncidentsCountExecute(r)
}

/*
GetHistoricIncidentsCount Get Incident Count

Queries for the number of historic incidents that fulfill the given parameters.
Takes the same parameters as the
[Get Incidents](https://docs.camunda.org/manual/7.21/reference/rest/history/incident/get-incident-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricIncidentsCountRequest
*/
func (a *HistoricIncidentAPIService) GetHistoricIncidentsCount(ctx context.Context) ApiGetHistoricIncidentsCountRequest {
	return ApiGetHistoricIncidentsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricIncidentAPIService) GetHistoricIncidentsCountExecute(r ApiGetHistoricIncidentsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricIncidentAPIService.GetHistoricIncidentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/incident/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.incidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentId", r.incidentId, "")
	}
	if r.incidentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentType", r.incidentType, "")
	}
	if r.incidentMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessage", r.incidentMessage, "")
	}
	if r.incidentMessageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incidentMessageLike", r.incidentMessageLike, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKeyIn", r.processDefinitionKeyIn, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.createTimeBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeBefore", r.createTimeBefore, "")
	}
	if r.createTimeAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createTimeAfter", r.createTimeAfter, "")
	}
	if r.endTimeBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTimeBefore", r.endTimeBefore, "")
	}
	if r.endTimeAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTimeAfter", r.endTimeAfter, "")
	}
	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityId", r.activityId, "")
	}
	if r.failedActivityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "failedActivityId", r.failedActivityId, "")
	}
	if r.causeIncidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "causeIncidentId", r.causeIncidentId, "")
	}
	if r.rootCauseIncidentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootCauseIncidentId", r.rootCauseIncidentId, "")
	}
	if r.configuration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
	}
	if r.historyConfiguration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "historyConfiguration", r.historyConfiguration, "")
	}
	if r.open != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "open", r.open, "")
	}
	if r.resolved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolved", r.resolved, "")
	}
	if r.deleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted", r.deleted, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.jobDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobDefinitionIdIn", r.jobDefinitionIdIn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
