/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the HistoricActivityStatisticsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricActivityStatisticsDto{}

// HistoricActivityStatisticsDto struct for HistoricActivityStatisticsDto
type HistoricActivityStatisticsDto struct {
	// The id of the activity the results are aggregated for.
	Id NullableString `json:"id,omitempty"`
	// The total number of all running instances of the activity.
	Instances NullableInt64 `json:"instances,omitempty"`
	// The total number of all canceled instances of the activity. **Note:** Will be `0` (not `null`), if canceled activity instances were excluded.
	Canceled NullableInt64 `json:"canceled,omitempty"`
	// The total number of all finished instances of the activity. **Note:** Will be `0` (not `null`), if finished activity instances were excluded.
	Finished NullableInt64 `json:"finished,omitempty"`
	// The total number of all instances which completed a scope of the activity. **Note:** Will be `0` (not `null`), if activity instances which completed a scope were excluded.
	CompleteScope NullableInt64 `json:"completeScope,omitempty"`
	// The total number of open incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.
	OpenIncidents NullableInt64 `json:"openIncidents,omitempty"`
	// The total number of resolved incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.
	ResolvedIncidents NullableInt64 `json:"resolvedIncidents,omitempty"`
	// The total number of deleted incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.
	DeletedIncidents NullableInt64 `json:"deletedIncidents,omitempty"`
}

// NewHistoricActivityStatisticsDto instantiates a new HistoricActivityStatisticsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricActivityStatisticsDto() *HistoricActivityStatisticsDto {
	this := HistoricActivityStatisticsDto{}
	return &this
}

// NewHistoricActivityStatisticsDtoWithDefaults instantiates a new HistoricActivityStatisticsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricActivityStatisticsDtoWithDefaults() *HistoricActivityStatisticsDto {
	this := HistoricActivityStatisticsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricActivityStatisticsDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetId() {
	o.Id.Unset()
}

// GetInstances returns the Instances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetInstances() int64 {
	if o == nil || IsNil(o.Instances.Get()) {
		var ret int64
		return ret
	}
	return *o.Instances.Get()
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetInstancesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances.Get(), o.Instances.IsSet()
}

// HasInstances returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasInstances() bool {
	if o != nil && o.Instances.IsSet() {
		return true
	}

	return false
}

// SetInstances gets a reference to the given NullableInt64 and assigns it to the Instances field.
func (o *HistoricActivityStatisticsDto) SetInstances(v int64) {
	o.Instances.Set(&v)
}
// SetInstancesNil sets the value for Instances to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetInstancesNil() {
	o.Instances.Set(nil)
}

// UnsetInstances ensures that no value is present for Instances, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetInstances() {
	o.Instances.Unset()
}

// GetCanceled returns the Canceled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetCanceled() int64 {
	if o == nil || IsNil(o.Canceled.Get()) {
		var ret int64
		return ret
	}
	return *o.Canceled.Get()
}

// GetCanceledOk returns a tuple with the Canceled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetCanceledOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Canceled.Get(), o.Canceled.IsSet()
}

// HasCanceled returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasCanceled() bool {
	if o != nil && o.Canceled.IsSet() {
		return true
	}

	return false
}

// SetCanceled gets a reference to the given NullableInt64 and assigns it to the Canceled field.
func (o *HistoricActivityStatisticsDto) SetCanceled(v int64) {
	o.Canceled.Set(&v)
}
// SetCanceledNil sets the value for Canceled to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetCanceledNil() {
	o.Canceled.Set(nil)
}

// UnsetCanceled ensures that no value is present for Canceled, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetCanceled() {
	o.Canceled.Unset()
}

// GetFinished returns the Finished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetFinished() int64 {
	if o == nil || IsNil(o.Finished.Get()) {
		var ret int64
		return ret
	}
	return *o.Finished.Get()
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetFinishedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finished.Get(), o.Finished.IsSet()
}

// HasFinished returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasFinished() bool {
	if o != nil && o.Finished.IsSet() {
		return true
	}

	return false
}

// SetFinished gets a reference to the given NullableInt64 and assigns it to the Finished field.
func (o *HistoricActivityStatisticsDto) SetFinished(v int64) {
	o.Finished.Set(&v)
}
// SetFinishedNil sets the value for Finished to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetFinishedNil() {
	o.Finished.Set(nil)
}

// UnsetFinished ensures that no value is present for Finished, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetFinished() {
	o.Finished.Unset()
}

// GetCompleteScope returns the CompleteScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetCompleteScope() int64 {
	if o == nil || IsNil(o.CompleteScope.Get()) {
		var ret int64
		return ret
	}
	return *o.CompleteScope.Get()
}

// GetCompleteScopeOk returns a tuple with the CompleteScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetCompleteScopeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompleteScope.Get(), o.CompleteScope.IsSet()
}

// HasCompleteScope returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasCompleteScope() bool {
	if o != nil && o.CompleteScope.IsSet() {
		return true
	}

	return false
}

// SetCompleteScope gets a reference to the given NullableInt64 and assigns it to the CompleteScope field.
func (o *HistoricActivityStatisticsDto) SetCompleteScope(v int64) {
	o.CompleteScope.Set(&v)
}
// SetCompleteScopeNil sets the value for CompleteScope to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetCompleteScopeNil() {
	o.CompleteScope.Set(nil)
}

// UnsetCompleteScope ensures that no value is present for CompleteScope, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetCompleteScope() {
	o.CompleteScope.Unset()
}

// GetOpenIncidents returns the OpenIncidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetOpenIncidents() int64 {
	if o == nil || IsNil(o.OpenIncidents.Get()) {
		var ret int64
		return ret
	}
	return *o.OpenIncidents.Get()
}

// GetOpenIncidentsOk returns a tuple with the OpenIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetOpenIncidentsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenIncidents.Get(), o.OpenIncidents.IsSet()
}

// HasOpenIncidents returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasOpenIncidents() bool {
	if o != nil && o.OpenIncidents.IsSet() {
		return true
	}

	return false
}

// SetOpenIncidents gets a reference to the given NullableInt64 and assigns it to the OpenIncidents field.
func (o *HistoricActivityStatisticsDto) SetOpenIncidents(v int64) {
	o.OpenIncidents.Set(&v)
}
// SetOpenIncidentsNil sets the value for OpenIncidents to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetOpenIncidentsNil() {
	o.OpenIncidents.Set(nil)
}

// UnsetOpenIncidents ensures that no value is present for OpenIncidents, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetOpenIncidents() {
	o.OpenIncidents.Unset()
}

// GetResolvedIncidents returns the ResolvedIncidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetResolvedIncidents() int64 {
	if o == nil || IsNil(o.ResolvedIncidents.Get()) {
		var ret int64
		return ret
	}
	return *o.ResolvedIncidents.Get()
}

// GetResolvedIncidentsOk returns a tuple with the ResolvedIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetResolvedIncidentsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolvedIncidents.Get(), o.ResolvedIncidents.IsSet()
}

// HasResolvedIncidents returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasResolvedIncidents() bool {
	if o != nil && o.ResolvedIncidents.IsSet() {
		return true
	}

	return false
}

// SetResolvedIncidents gets a reference to the given NullableInt64 and assigns it to the ResolvedIncidents field.
func (o *HistoricActivityStatisticsDto) SetResolvedIncidents(v int64) {
	o.ResolvedIncidents.Set(&v)
}
// SetResolvedIncidentsNil sets the value for ResolvedIncidents to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetResolvedIncidentsNil() {
	o.ResolvedIncidents.Set(nil)
}

// UnsetResolvedIncidents ensures that no value is present for ResolvedIncidents, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetResolvedIncidents() {
	o.ResolvedIncidents.Unset()
}

// GetDeletedIncidents returns the DeletedIncidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityStatisticsDto) GetDeletedIncidents() int64 {
	if o == nil || IsNil(o.DeletedIncidents.Get()) {
		var ret int64
		return ret
	}
	return *o.DeletedIncidents.Get()
}

// GetDeletedIncidentsOk returns a tuple with the DeletedIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityStatisticsDto) GetDeletedIncidentsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedIncidents.Get(), o.DeletedIncidents.IsSet()
}

// HasDeletedIncidents returns a boolean if a field has been set.
func (o *HistoricActivityStatisticsDto) HasDeletedIncidents() bool {
	if o != nil && o.DeletedIncidents.IsSet() {
		return true
	}

	return false
}

// SetDeletedIncidents gets a reference to the given NullableInt64 and assigns it to the DeletedIncidents field.
func (o *HistoricActivityStatisticsDto) SetDeletedIncidents(v int64) {
	o.DeletedIncidents.Set(&v)
}
// SetDeletedIncidentsNil sets the value for DeletedIncidents to be an explicit nil
func (o *HistoricActivityStatisticsDto) SetDeletedIncidentsNil() {
	o.DeletedIncidents.Set(nil)
}

// UnsetDeletedIncidents ensures that no value is present for DeletedIncidents, not even an explicit nil
func (o *HistoricActivityStatisticsDto) UnsetDeletedIncidents() {
	o.DeletedIncidents.Unset()
}

func (o HistoricActivityStatisticsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricActivityStatisticsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Instances.IsSet() {
		toSerialize["instances"] = o.Instances.Get()
	}
	if o.Canceled.IsSet() {
		toSerialize["canceled"] = o.Canceled.Get()
	}
	if o.Finished.IsSet() {
		toSerialize["finished"] = o.Finished.Get()
	}
	if o.CompleteScope.IsSet() {
		toSerialize["completeScope"] = o.CompleteScope.Get()
	}
	if o.OpenIncidents.IsSet() {
		toSerialize["openIncidents"] = o.OpenIncidents.Get()
	}
	if o.ResolvedIncidents.IsSet() {
		toSerialize["resolvedIncidents"] = o.ResolvedIncidents.Get()
	}
	if o.DeletedIncidents.IsSet() {
		toSerialize["deletedIncidents"] = o.DeletedIncidents.Get()
	}
	return toSerialize, nil
}

type NullableHistoricActivityStatisticsDto struct {
	value *HistoricActivityStatisticsDto
	isSet bool
}

func (v NullableHistoricActivityStatisticsDto) Get() *HistoricActivityStatisticsDto {
	return v.value
}

func (v *NullableHistoricActivityStatisticsDto) Set(val *HistoricActivityStatisticsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricActivityStatisticsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricActivityStatisticsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricActivityStatisticsDto(val *HistoricActivityStatisticsDto) *NullableHistoricActivityStatisticsDto {
	return &NullableHistoricActivityStatisticsDto{value: val, isSet: true}
}

func (v NullableHistoricActivityStatisticsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricActivityStatisticsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


