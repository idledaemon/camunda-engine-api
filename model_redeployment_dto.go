/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the RedeploymentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedeploymentDto{}

// RedeploymentDto A JSON object with the following properties:
type RedeploymentDto struct {
	// A list of deployment resource ids to re-deploy.
	ResourceIds []string `json:"resourceIds,omitempty"`
	// A list of deployment resource names to re-deploy.
	ResourceNames []string `json:"resourceNames,omitempty"`
	// Sets the source of the deployment.
	Source NullableString `json:"source,omitempty"`
}

// NewRedeploymentDto instantiates a new RedeploymentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedeploymentDto() *RedeploymentDto {
	this := RedeploymentDto{}
	return &this
}

// NewRedeploymentDtoWithDefaults instantiates a new RedeploymentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedeploymentDtoWithDefaults() *RedeploymentDto {
	this := RedeploymentDto{}
	return &this
}

// GetResourceIds returns the ResourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedeploymentDto) GetResourceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ResourceIds
}

// GetResourceIdsOk returns a tuple with the ResourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedeploymentDto) GetResourceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceIds) {
		return nil, false
	}
	return o.ResourceIds, true
}

// HasResourceIds returns a boolean if a field has been set.
func (o *RedeploymentDto) HasResourceIds() bool {
	if o != nil && !IsNil(o.ResourceIds) {
		return true
	}

	return false
}

// SetResourceIds gets a reference to the given []string and assigns it to the ResourceIds field.
func (o *RedeploymentDto) SetResourceIds(v []string) {
	o.ResourceIds = v
}

// GetResourceNames returns the ResourceNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedeploymentDto) GetResourceNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ResourceNames
}

// GetResourceNamesOk returns a tuple with the ResourceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedeploymentDto) GetResourceNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceNames) {
		return nil, false
	}
	return o.ResourceNames, true
}

// HasResourceNames returns a boolean if a field has been set.
func (o *RedeploymentDto) HasResourceNames() bool {
	if o != nil && !IsNil(o.ResourceNames) {
		return true
	}

	return false
}

// SetResourceNames gets a reference to the given []string and assigns it to the ResourceNames field.
func (o *RedeploymentDto) SetResourceNames(v []string) {
	o.ResourceNames = v
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedeploymentDto) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedeploymentDto) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *RedeploymentDto) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *RedeploymentDto) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *RedeploymentDto) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *RedeploymentDto) UnsetSource() {
	o.Source.Unset()
}

func (o RedeploymentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedeploymentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceIds != nil {
		toSerialize["resourceIds"] = o.ResourceIds
	}
	if o.ResourceNames != nil {
		toSerialize["resourceNames"] = o.ResourceNames
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	return toSerialize, nil
}

type NullableRedeploymentDto struct {
	value *RedeploymentDto
	isSet bool
}

func (v NullableRedeploymentDto) Get() *RedeploymentDto {
	return v.value
}

func (v *NullableRedeploymentDto) Set(val *RedeploymentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRedeploymentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRedeploymentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedeploymentDto(val *RedeploymentDto) *NullableRedeploymentDto {
	return &NullableRedeploymentDto{value: val, isSet: true}
}

func (v NullableRedeploymentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedeploymentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


