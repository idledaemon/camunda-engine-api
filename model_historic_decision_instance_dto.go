/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricDecisionInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricDecisionInstanceDto{}

// HistoricDecisionInstanceDto struct for HistoricDecisionInstanceDto
type HistoricDecisionInstanceDto struct {
	// The id of the decision instance.
	Id NullableString `json:"id,omitempty"`
	// The id of the decision definition that this decision instance belongs to.
	DecisionDefinitionId NullableString `json:"decisionDefinitionId,omitempty"`
	// The key of the decision definition that this decision instance belongs to.
	DecisionDefinitionKey NullableString `json:"decisionDefinitionKey,omitempty"`
	// The name of the decision definition that this decision instance belongs to.
	DecisionDefinitionName NullableString `json:"decisionDefinitionName,omitempty"`
	// The time the instance was evaluated.  [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	EvaluationTime NullableTime `json:"evaluationTime,omitempty"`
	// The time after which the instance should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The id of the process definition that this decision instance belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The key of the process definition that this decision instance belongs to.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The id of the process instance that this decision instance belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the case definition that this decision instance belongs to.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// The key of the case definition that this decision instance belongs to.
	CaseDefinitionKey NullableString `json:"caseDefinitionKey,omitempty"`
	// The id of the case instance that this decision instance belongs to.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// The id of the activity that this decision instance belongs to.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The id of the activity instance that this decision instance belongs to.
	ActivityInstanceId NullableString `json:"activityInstanceId,omitempty"`
	// The tenant id of the historic decision instance.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The id of the authenticated user that has evaluated this decision instance without a process or case instance.
	UserId NullableString `json:"userId,omitempty"`
	// The list of decision input values. **Only exists** if `includeInputs` was set to `true` in the query.
	Inputs []HistoricDecisionInputInstanceDto `json:"inputs,omitempty"`
	// The list of decision output values. **Only exists** if `includeOutputs` was set to `true` in the query.
	Outputs []HistoricDecisionOutputInstanceDto `json:"outputs,omitempty"`
	// The result of the collect aggregation of the decision result if used. `null` if no aggregation was used.
	CollectResultValue NullableFloat64 `json:"collectResultValue,omitempty"`
	// The decision instance id of the evaluated root decision. Can be `null` if this instance is the root decision instance of the evaluation.
	RootDecisionInstanceId NullableString `json:"rootDecisionInstanceId,omitempty"`
	// The process instance id of the root process instance that initiated the evaluation of this decision. Can be `null` if this decision instance is not evaluated as part of a BPMN process.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
	// The id of the decision requirements definition that this decision instance belongs to.
	DecisionRequirementsDefinitionId NullableString `json:"decisionRequirementsDefinitionId,omitempty"`
	// The key of the decision requirements definition that this decision instance belongs to.
	DecisionRequirementsDefinitionKey NullableString `json:"decisionRequirementsDefinitionKey,omitempty"`
}

// NewHistoricDecisionInstanceDto instantiates a new HistoricDecisionInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricDecisionInstanceDto() *HistoricDecisionInstanceDto {
	this := HistoricDecisionInstanceDto{}
	return &this
}

// NewHistoricDecisionInstanceDtoWithDefaults instantiates a new HistoricDecisionInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricDecisionInstanceDtoWithDefaults() *HistoricDecisionInstanceDto {
	this := HistoricDecisionInstanceDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricDecisionInstanceDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetId() {
	o.Id.Unset()
}

// GetDecisionDefinitionId returns the DecisionDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetDecisionDefinitionId() string {
	if o == nil || IsNil(o.DecisionDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionId.Get()
}

// GetDecisionDefinitionIdOk returns a tuple with the DecisionDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetDecisionDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionId.Get(), o.DecisionDefinitionId.IsSet()
}

// HasDecisionDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasDecisionDefinitionId() bool {
	if o != nil && o.DecisionDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionId gets a reference to the given NullableString and assigns it to the DecisionDefinitionId field.
func (o *HistoricDecisionInstanceDto) SetDecisionDefinitionId(v string) {
	o.DecisionDefinitionId.Set(&v)
}
// SetDecisionDefinitionIdNil sets the value for DecisionDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetDecisionDefinitionIdNil() {
	o.DecisionDefinitionId.Set(nil)
}

// UnsetDecisionDefinitionId ensures that no value is present for DecisionDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetDecisionDefinitionId() {
	o.DecisionDefinitionId.Unset()
}

// GetDecisionDefinitionKey returns the DecisionDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetDecisionDefinitionKey() string {
	if o == nil || IsNil(o.DecisionDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionKey.Get()
}

// GetDecisionDefinitionKeyOk returns a tuple with the DecisionDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetDecisionDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionKey.Get(), o.DecisionDefinitionKey.IsSet()
}

// HasDecisionDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasDecisionDefinitionKey() bool {
	if o != nil && o.DecisionDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionKey gets a reference to the given NullableString and assigns it to the DecisionDefinitionKey field.
func (o *HistoricDecisionInstanceDto) SetDecisionDefinitionKey(v string) {
	o.DecisionDefinitionKey.Set(&v)
}
// SetDecisionDefinitionKeyNil sets the value for DecisionDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetDecisionDefinitionKeyNil() {
	o.DecisionDefinitionKey.Set(nil)
}

// UnsetDecisionDefinitionKey ensures that no value is present for DecisionDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetDecisionDefinitionKey() {
	o.DecisionDefinitionKey.Unset()
}

// GetDecisionDefinitionName returns the DecisionDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetDecisionDefinitionName() string {
	if o == nil || IsNil(o.DecisionDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionName.Get()
}

// GetDecisionDefinitionNameOk returns a tuple with the DecisionDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetDecisionDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionName.Get(), o.DecisionDefinitionName.IsSet()
}

// HasDecisionDefinitionName returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasDecisionDefinitionName() bool {
	if o != nil && o.DecisionDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionName gets a reference to the given NullableString and assigns it to the DecisionDefinitionName field.
func (o *HistoricDecisionInstanceDto) SetDecisionDefinitionName(v string) {
	o.DecisionDefinitionName.Set(&v)
}
// SetDecisionDefinitionNameNil sets the value for DecisionDefinitionName to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetDecisionDefinitionNameNil() {
	o.DecisionDefinitionName.Set(nil)
}

// UnsetDecisionDefinitionName ensures that no value is present for DecisionDefinitionName, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetDecisionDefinitionName() {
	o.DecisionDefinitionName.Unset()
}

// GetEvaluationTime returns the EvaluationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetEvaluationTime() time.Time {
	if o == nil || IsNil(o.EvaluationTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EvaluationTime.Get()
}

// GetEvaluationTimeOk returns a tuple with the EvaluationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetEvaluationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EvaluationTime.Get(), o.EvaluationTime.IsSet()
}

// HasEvaluationTime returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasEvaluationTime() bool {
	if o != nil && o.EvaluationTime.IsSet() {
		return true
	}

	return false
}

// SetEvaluationTime gets a reference to the given NullableTime and assigns it to the EvaluationTime field.
func (o *HistoricDecisionInstanceDto) SetEvaluationTime(v time.Time) {
	o.EvaluationTime.Set(&v)
}
// SetEvaluationTimeNil sets the value for EvaluationTime to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetEvaluationTimeNil() {
	o.EvaluationTime.Set(nil)
}

// UnsetEvaluationTime ensures that no value is present for EvaluationTime, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetEvaluationTime() {
	o.EvaluationTime.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricDecisionInstanceDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricDecisionInstanceDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricDecisionInstanceDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricDecisionInstanceDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *HistoricDecisionInstanceDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseDefinitionKey returns the CaseDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetCaseDefinitionKey() string {
	if o == nil || IsNil(o.CaseDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionKey.Get()
}

// GetCaseDefinitionKeyOk returns a tuple with the CaseDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetCaseDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionKey.Get(), o.CaseDefinitionKey.IsSet()
}

// HasCaseDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasCaseDefinitionKey() bool {
	if o != nil && o.CaseDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionKey gets a reference to the given NullableString and assigns it to the CaseDefinitionKey field.
func (o *HistoricDecisionInstanceDto) SetCaseDefinitionKey(v string) {
	o.CaseDefinitionKey.Set(&v)
}
// SetCaseDefinitionKeyNil sets the value for CaseDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetCaseDefinitionKeyNil() {
	o.CaseDefinitionKey.Set(nil)
}

// UnsetCaseDefinitionKey ensures that no value is present for CaseDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetCaseDefinitionKey() {
	o.CaseDefinitionKey.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricDecisionInstanceDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *HistoricDecisionInstanceDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetActivityInstanceId returns the ActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetActivityInstanceId() string {
	if o == nil || IsNil(o.ActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityInstanceId.Get()
}

// GetActivityInstanceIdOk returns a tuple with the ActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityInstanceId.Get(), o.ActivityInstanceId.IsSet()
}

// HasActivityInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasActivityInstanceId() bool {
	if o != nil && o.ActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetActivityInstanceId gets a reference to the given NullableString and assigns it to the ActivityInstanceId field.
func (o *HistoricDecisionInstanceDto) SetActivityInstanceId(v string) {
	o.ActivityInstanceId.Set(&v)
}
// SetActivityInstanceIdNil sets the value for ActivityInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetActivityInstanceIdNil() {
	o.ActivityInstanceId.Set(nil)
}

// UnsetActivityInstanceId ensures that no value is present for ActivityInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetActivityInstanceId() {
	o.ActivityInstanceId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *HistoricDecisionInstanceDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *HistoricDecisionInstanceDto) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetUserId() {
	o.UserId.Unset()
}

// GetInputs returns the Inputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetInputs() []HistoricDecisionInputInstanceDto {
	if o == nil {
		var ret []HistoricDecisionInputInstanceDto
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetInputsOk() ([]HistoricDecisionInputInstanceDto, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []HistoricDecisionInputInstanceDto and assigns it to the Inputs field.
func (o *HistoricDecisionInstanceDto) SetInputs(v []HistoricDecisionInputInstanceDto) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetOutputs() []HistoricDecisionOutputInstanceDto {
	if o == nil {
		var ret []HistoricDecisionOutputInstanceDto
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetOutputsOk() ([]HistoricDecisionOutputInstanceDto, bool) {
	if o == nil || IsNil(o.Outputs) {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []HistoricDecisionOutputInstanceDto and assigns it to the Outputs field.
func (o *HistoricDecisionInstanceDto) SetOutputs(v []HistoricDecisionOutputInstanceDto) {
	o.Outputs = v
}

// GetCollectResultValue returns the CollectResultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetCollectResultValue() float64 {
	if o == nil || IsNil(o.CollectResultValue.Get()) {
		var ret float64
		return ret
	}
	return *o.CollectResultValue.Get()
}

// GetCollectResultValueOk returns a tuple with the CollectResultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetCollectResultValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectResultValue.Get(), o.CollectResultValue.IsSet()
}

// HasCollectResultValue returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasCollectResultValue() bool {
	if o != nil && o.CollectResultValue.IsSet() {
		return true
	}

	return false
}

// SetCollectResultValue gets a reference to the given NullableFloat64 and assigns it to the CollectResultValue field.
func (o *HistoricDecisionInstanceDto) SetCollectResultValue(v float64) {
	o.CollectResultValue.Set(&v)
}
// SetCollectResultValueNil sets the value for CollectResultValue to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetCollectResultValueNil() {
	o.CollectResultValue.Set(nil)
}

// UnsetCollectResultValue ensures that no value is present for CollectResultValue, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetCollectResultValue() {
	o.CollectResultValue.Unset()
}

// GetRootDecisionInstanceId returns the RootDecisionInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetRootDecisionInstanceId() string {
	if o == nil || IsNil(o.RootDecisionInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootDecisionInstanceId.Get()
}

// GetRootDecisionInstanceIdOk returns a tuple with the RootDecisionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetRootDecisionInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootDecisionInstanceId.Get(), o.RootDecisionInstanceId.IsSet()
}

// HasRootDecisionInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasRootDecisionInstanceId() bool {
	if o != nil && o.RootDecisionInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootDecisionInstanceId gets a reference to the given NullableString and assigns it to the RootDecisionInstanceId field.
func (o *HistoricDecisionInstanceDto) SetRootDecisionInstanceId(v string) {
	o.RootDecisionInstanceId.Set(&v)
}
// SetRootDecisionInstanceIdNil sets the value for RootDecisionInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetRootDecisionInstanceIdNil() {
	o.RootDecisionInstanceId.Set(nil)
}

// UnsetRootDecisionInstanceId ensures that no value is present for RootDecisionInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetRootDecisionInstanceId() {
	o.RootDecisionInstanceId.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricDecisionInstanceDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

// GetDecisionRequirementsDefinitionId returns the DecisionRequirementsDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetDecisionRequirementsDefinitionId() string {
	if o == nil || IsNil(o.DecisionRequirementsDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionRequirementsDefinitionId.Get()
}

// GetDecisionRequirementsDefinitionIdOk returns a tuple with the DecisionRequirementsDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetDecisionRequirementsDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionRequirementsDefinitionId.Get(), o.DecisionRequirementsDefinitionId.IsSet()
}

// HasDecisionRequirementsDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasDecisionRequirementsDefinitionId() bool {
	if o != nil && o.DecisionRequirementsDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetDecisionRequirementsDefinitionId gets a reference to the given NullableString and assigns it to the DecisionRequirementsDefinitionId field.
func (o *HistoricDecisionInstanceDto) SetDecisionRequirementsDefinitionId(v string) {
	o.DecisionRequirementsDefinitionId.Set(&v)
}
// SetDecisionRequirementsDefinitionIdNil sets the value for DecisionRequirementsDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetDecisionRequirementsDefinitionIdNil() {
	o.DecisionRequirementsDefinitionId.Set(nil)
}

// UnsetDecisionRequirementsDefinitionId ensures that no value is present for DecisionRequirementsDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetDecisionRequirementsDefinitionId() {
	o.DecisionRequirementsDefinitionId.Unset()
}

// GetDecisionRequirementsDefinitionKey returns the DecisionRequirementsDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceDto) GetDecisionRequirementsDefinitionKey() string {
	if o == nil || IsNil(o.DecisionRequirementsDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionRequirementsDefinitionKey.Get()
}

// GetDecisionRequirementsDefinitionKeyOk returns a tuple with the DecisionRequirementsDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceDto) GetDecisionRequirementsDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionRequirementsDefinitionKey.Get(), o.DecisionRequirementsDefinitionKey.IsSet()
}

// HasDecisionRequirementsDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceDto) HasDecisionRequirementsDefinitionKey() bool {
	if o != nil && o.DecisionRequirementsDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetDecisionRequirementsDefinitionKey gets a reference to the given NullableString and assigns it to the DecisionRequirementsDefinitionKey field.
func (o *HistoricDecisionInstanceDto) SetDecisionRequirementsDefinitionKey(v string) {
	o.DecisionRequirementsDefinitionKey.Set(&v)
}
// SetDecisionRequirementsDefinitionKeyNil sets the value for DecisionRequirementsDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceDto) SetDecisionRequirementsDefinitionKeyNil() {
	o.DecisionRequirementsDefinitionKey.Set(nil)
}

// UnsetDecisionRequirementsDefinitionKey ensures that no value is present for DecisionRequirementsDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceDto) UnsetDecisionRequirementsDefinitionKey() {
	o.DecisionRequirementsDefinitionKey.Unset()
}

func (o HistoricDecisionInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricDecisionInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.DecisionDefinitionId.IsSet() {
		toSerialize["decisionDefinitionId"] = o.DecisionDefinitionId.Get()
	}
	if o.DecisionDefinitionKey.IsSet() {
		toSerialize["decisionDefinitionKey"] = o.DecisionDefinitionKey.Get()
	}
	if o.DecisionDefinitionName.IsSet() {
		toSerialize["decisionDefinitionName"] = o.DecisionDefinitionName.Get()
	}
	if o.EvaluationTime.IsSet() {
		toSerialize["evaluationTime"] = o.EvaluationTime.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseDefinitionKey.IsSet() {
		toSerialize["caseDefinitionKey"] = o.CaseDefinitionKey.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.ActivityInstanceId.IsSet() {
		toSerialize["activityInstanceId"] = o.ActivityInstanceId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.CollectResultValue.IsSet() {
		toSerialize["collectResultValue"] = o.CollectResultValue.Get()
	}
	if o.RootDecisionInstanceId.IsSet() {
		toSerialize["rootDecisionInstanceId"] = o.RootDecisionInstanceId.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	if o.DecisionRequirementsDefinitionId.IsSet() {
		toSerialize["decisionRequirementsDefinitionId"] = o.DecisionRequirementsDefinitionId.Get()
	}
	if o.DecisionRequirementsDefinitionKey.IsSet() {
		toSerialize["decisionRequirementsDefinitionKey"] = o.DecisionRequirementsDefinitionKey.Get()
	}
	return toSerialize, nil
}

type NullableHistoricDecisionInstanceDto struct {
	value *HistoricDecisionInstanceDto
	isSet bool
}

func (v NullableHistoricDecisionInstanceDto) Get() *HistoricDecisionInstanceDto {
	return v.value
}

func (v *NullableHistoricDecisionInstanceDto) Set(val *HistoricDecisionInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricDecisionInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricDecisionInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricDecisionInstanceDto(val *HistoricDecisionInstanceDto) *NullableHistoricDecisionInstanceDto {
	return &NullableHistoricDecisionInstanceDto{value: val, isSet: true}
}

func (v NullableHistoricDecisionInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricDecisionInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


