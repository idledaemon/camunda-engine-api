/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the TelemetryLicenseKeyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryLicenseKeyDto{}

// TelemetryLicenseKeyDto struct for TelemetryLicenseKeyDto
type TelemetryLicenseKeyDto struct {
	// The name of the customer the license was issued for.
	Customer NullableString `json:"customer,omitempty"`
	// The license type.
	Type NullableString `json:"type,omitempty"`
	// The expiration date of the license.
	ValidUntil NullableString `json:"valid-until,omitempty"`
	// Flag that indicates if the license is unlimited.
	Unlimited NullableBool `json:"unlimited,omitempty"`
	// A map of features included in the license.
	Features *map[string]string `json:"features,omitempty"`
	// The raw license information.
	Raw NullableString `json:"raw,omitempty"`
}

// NewTelemetryLicenseKeyDto instantiates a new TelemetryLicenseKeyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryLicenseKeyDto() *TelemetryLicenseKeyDto {
	this := TelemetryLicenseKeyDto{}
	return &this
}

// NewTelemetryLicenseKeyDtoWithDefaults instantiates a new TelemetryLicenseKeyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryLicenseKeyDtoWithDefaults() *TelemetryLicenseKeyDto {
	this := TelemetryLicenseKeyDto{}
	return &this
}

// GetCustomer returns the Customer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryLicenseKeyDto) GetCustomer() string {
	if o == nil || IsNil(o.Customer.Get()) {
		var ret string
		return ret
	}
	return *o.Customer.Get()
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryLicenseKeyDto) GetCustomerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Customer.Get(), o.Customer.IsSet()
}

// HasCustomer returns a boolean if a field has been set.
func (o *TelemetryLicenseKeyDto) HasCustomer() bool {
	if o != nil && o.Customer.IsSet() {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given NullableString and assigns it to the Customer field.
func (o *TelemetryLicenseKeyDto) SetCustomer(v string) {
	o.Customer.Set(&v)
}
// SetCustomerNil sets the value for Customer to be an explicit nil
func (o *TelemetryLicenseKeyDto) SetCustomerNil() {
	o.Customer.Set(nil)
}

// UnsetCustomer ensures that no value is present for Customer, not even an explicit nil
func (o *TelemetryLicenseKeyDto) UnsetCustomer() {
	o.Customer.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryLicenseKeyDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryLicenseKeyDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *TelemetryLicenseKeyDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *TelemetryLicenseKeyDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *TelemetryLicenseKeyDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *TelemetryLicenseKeyDto) UnsetType() {
	o.Type.Unset()
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryLicenseKeyDto) GetValidUntil() string {
	if o == nil || IsNil(o.ValidUntil.Get()) {
		var ret string
		return ret
	}
	return *o.ValidUntil.Get()
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryLicenseKeyDto) GetValidUntilOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidUntil.Get(), o.ValidUntil.IsSet()
}

// HasValidUntil returns a boolean if a field has been set.
func (o *TelemetryLicenseKeyDto) HasValidUntil() bool {
	if o != nil && o.ValidUntil.IsSet() {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given NullableString and assigns it to the ValidUntil field.
func (o *TelemetryLicenseKeyDto) SetValidUntil(v string) {
	o.ValidUntil.Set(&v)
}
// SetValidUntilNil sets the value for ValidUntil to be an explicit nil
func (o *TelemetryLicenseKeyDto) SetValidUntilNil() {
	o.ValidUntil.Set(nil)
}

// UnsetValidUntil ensures that no value is present for ValidUntil, not even an explicit nil
func (o *TelemetryLicenseKeyDto) UnsetValidUntil() {
	o.ValidUntil.Unset()
}

// GetUnlimited returns the Unlimited field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryLicenseKeyDto) GetUnlimited() bool {
	if o == nil || IsNil(o.Unlimited.Get()) {
		var ret bool
		return ret
	}
	return *o.Unlimited.Get()
}

// GetUnlimitedOk returns a tuple with the Unlimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryLicenseKeyDto) GetUnlimitedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unlimited.Get(), o.Unlimited.IsSet()
}

// HasUnlimited returns a boolean if a field has been set.
func (o *TelemetryLicenseKeyDto) HasUnlimited() bool {
	if o != nil && o.Unlimited.IsSet() {
		return true
	}

	return false
}

// SetUnlimited gets a reference to the given NullableBool and assigns it to the Unlimited field.
func (o *TelemetryLicenseKeyDto) SetUnlimited(v bool) {
	o.Unlimited.Set(&v)
}
// SetUnlimitedNil sets the value for Unlimited to be an explicit nil
func (o *TelemetryLicenseKeyDto) SetUnlimitedNil() {
	o.Unlimited.Set(nil)
}

// UnsetUnlimited ensures that no value is present for Unlimited, not even an explicit nil
func (o *TelemetryLicenseKeyDto) UnsetUnlimited() {
	o.Unlimited.Unset()
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *TelemetryLicenseKeyDto) GetFeatures() map[string]string {
	if o == nil || IsNil(o.Features) {
		var ret map[string]string
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryLicenseKeyDto) GetFeaturesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *TelemetryLicenseKeyDto) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given map[string]string and assigns it to the Features field.
func (o *TelemetryLicenseKeyDto) SetFeatures(v map[string]string) {
	o.Features = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryLicenseKeyDto) GetRaw() string {
	if o == nil || IsNil(o.Raw.Get()) {
		var ret string
		return ret
	}
	return *o.Raw.Get()
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryLicenseKeyDto) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Raw.Get(), o.Raw.IsSet()
}

// HasRaw returns a boolean if a field has been set.
func (o *TelemetryLicenseKeyDto) HasRaw() bool {
	if o != nil && o.Raw.IsSet() {
		return true
	}

	return false
}

// SetRaw gets a reference to the given NullableString and assigns it to the Raw field.
func (o *TelemetryLicenseKeyDto) SetRaw(v string) {
	o.Raw.Set(&v)
}
// SetRawNil sets the value for Raw to be an explicit nil
func (o *TelemetryLicenseKeyDto) SetRawNil() {
	o.Raw.Set(nil)
}

// UnsetRaw ensures that no value is present for Raw, not even an explicit nil
func (o *TelemetryLicenseKeyDto) UnsetRaw() {
	o.Raw.Unset()
}

func (o TelemetryLicenseKeyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryLicenseKeyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Customer.IsSet() {
		toSerialize["customer"] = o.Customer.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ValidUntil.IsSet() {
		toSerialize["valid-until"] = o.ValidUntil.Get()
	}
	if o.Unlimited.IsSet() {
		toSerialize["unlimited"] = o.Unlimited.Get()
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if o.Raw.IsSet() {
		toSerialize["raw"] = o.Raw.Get()
	}
	return toSerialize, nil
}

type NullableTelemetryLicenseKeyDto struct {
	value *TelemetryLicenseKeyDto
	isSet bool
}

func (v NullableTelemetryLicenseKeyDto) Get() *TelemetryLicenseKeyDto {
	return v.value
}

func (v *NullableTelemetryLicenseKeyDto) Set(val *TelemetryLicenseKeyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryLicenseKeyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryLicenseKeyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryLicenseKeyDto(val *TelemetryLicenseKeyDto) *NullableTelemetryLicenseKeyDto {
	return &NullableTelemetryLicenseKeyDto{value: val, isSet: true}
}

func (v NullableTelemetryLicenseKeyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryLicenseKeyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


