/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"os"
)


type HistoricDetailAPI interface {

	/*
	GetHistoricDetails Get Historic Details

	Queries for historic details that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get Historic Detail Count](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query-count/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricDetailsRequest
	*/
	GetHistoricDetails(ctx context.Context) ApiGetHistoricDetailsRequest

	// GetHistoricDetailsExecute executes the request
	//  @return []HistoricDetailDto
	GetHistoricDetailsExecute(r ApiGetHistoricDetailsRequest) ([]HistoricDetailDto, *http.Response, error)

	/*
	GetHistoricDetailsCount Get Historic Detail Count

	Queries for the number of historic details that fulfill the given parameters.
Takes the same parameters as the [Get Historic
Details](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricDetailsCountRequest
	*/
	GetHistoricDetailsCount(ctx context.Context) ApiGetHistoricDetailsCountRequest

	// GetHistoricDetailsCountExecute executes the request
	//  @return CountResultDto
	GetHistoricDetailsCountExecute(r ApiGetHistoricDetailsCountRequest) (*CountResultDto, *http.Response, error)

	/*
	HistoricDetail Get Historic Detail

	Retrieves a historic detail by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the detail.
	@return ApiHistoricDetailRequest
	*/
	HistoricDetail(ctx context.Context, id string) ApiHistoricDetailRequest

	// HistoricDetailExecute executes the request
	//  @return HistoricDetailDto
	HistoricDetailExecute(r ApiHistoricDetailRequest) (*HistoricDetailDto, *http.Response, error)

	/*
	HistoricDetailBinary Get Historic Detail (Binary)

	Retrieves the content of a historic variable update by id. Applicable for byte
array and file variables.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the historic variable update.
	@return ApiHistoricDetailBinaryRequest
	*/
	HistoricDetailBinary(ctx context.Context, id string) ApiHistoricDetailBinaryRequest

	// HistoricDetailBinaryExecute executes the request
	//  @return *os.File
	HistoricDetailBinaryExecute(r ApiHistoricDetailBinaryRequest) (*os.File, *http.Response, error)

	/*
	QueryHistoricDetails Get Historic Details (POST)

	Queries for historic details that fulfill the given parameters. This method is slightly more
powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query/)
method because it allows sorting by multiple parameters. The size of the result set can be retrieved by
using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoricDetailsRequest
	*/
	QueryHistoricDetails(ctx context.Context) ApiQueryHistoricDetailsRequest

	// QueryHistoricDetailsExecute executes the request
	//  @return []HistoricDetailDto
	QueryHistoricDetailsExecute(r ApiQueryHistoricDetailsRequest) ([]HistoricDetailDto, *http.Response, error)
}

// HistoricDetailAPIService HistoricDetailAPI service
type HistoricDetailAPIService service

type ApiGetHistoricDetailsRequest struct {
	ctx context.Context
	ApiService HistoricDetailAPI
	processInstanceId *string
	processInstanceIdIn *string
	executionId *string
	taskId *string
	activityInstanceId *string
	caseInstanceId *string
	caseExecutionId *string
	variableInstanceId *string
	variableTypeIn *string
	tenantIdIn *string
	withoutTenantId *bool
	userOperationId *string
	formFields *bool
	variableUpdates *bool
	excludeTaskDetails *bool
	initial *bool
	occurredBefore *time.Time
	occurredAfter *time.Time
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
	deserializeValues *bool
}

// Filter by process instance id.
func (r ApiGetHistoricDetailsRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricDetailsRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Only include historic details which belong to one of the passed comma-separated process instance ids.
func (r ApiGetHistoricDetailsRequest) ProcessInstanceIdIn(processInstanceIdIn string) ApiGetHistoricDetailsRequest {
	r.processInstanceIdIn = &processInstanceIdIn
	return r
}

// Filter by execution id.
func (r ApiGetHistoricDetailsRequest) ExecutionId(executionId string) ApiGetHistoricDetailsRequest {
	r.executionId = &executionId
	return r
}

// Filter by task id.
func (r ApiGetHistoricDetailsRequest) TaskId(taskId string) ApiGetHistoricDetailsRequest {
	r.taskId = &taskId
	return r
}

// Filter by activity instance id.
func (r ApiGetHistoricDetailsRequest) ActivityInstanceId(activityInstanceId string) ApiGetHistoricDetailsRequest {
	r.activityInstanceId = &activityInstanceId
	return r
}

// Filter by case instance id.
func (r ApiGetHistoricDetailsRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricDetailsRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by case execution id.
func (r ApiGetHistoricDetailsRequest) CaseExecutionId(caseExecutionId string) ApiGetHistoricDetailsRequest {
	r.caseExecutionId = &caseExecutionId
	return r
}

// Filter by variable instance id.
func (r ApiGetHistoricDetailsRequest) VariableInstanceId(variableInstanceId string) ApiGetHistoricDetailsRequest {
	r.variableInstanceId = &variableInstanceId
	return r
}

// Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
func (r ApiGetHistoricDetailsRequest) VariableTypeIn(variableTypeIn string) ApiGetHistoricDetailsRequest {
	r.variableTypeIn = &variableTypeIn
	return r
}

// Filter by a comma-separated list of tenant ids.
func (r ApiGetHistoricDetailsRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricDetailsRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricDetailsRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Filter by a user operation id.
func (r ApiGetHistoricDetailsRequest) UserOperationId(userOperationId string) ApiGetHistoricDetailsRequest {
	r.userOperationId = &userOperationId
	return r
}

// Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsRequest) FormFields(formFields bool) ApiGetHistoricDetailsRequest {
	r.formFields = &formFields
	return r
}

// Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsRequest) VariableUpdates(variableUpdates bool) ApiGetHistoricDetailsRequest {
	r.variableUpdates = &variableUpdates
	return r
}

// Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsRequest) ExcludeTaskDetails(excludeTaskDetails bool) ApiGetHistoricDetailsRequest {
	r.excludeTaskDetails = &excludeTaskDetails
	return r
}

// Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsRequest) Initial(initial bool) ApiGetHistoricDetailsRequest {
	r.initial = &initial
	return r
}

// Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
func (r ApiGetHistoricDetailsRequest) OccurredBefore(occurredBefore time.Time) ApiGetHistoricDetailsRequest {
	r.occurredBefore = &occurredBefore
	return r
}

// Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
func (r ApiGetHistoricDetailsRequest) OccurredAfter(occurredAfter time.Time) ApiGetHistoricDetailsRequest {
	r.occurredAfter = &occurredAfter
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricDetailsRequest) SortBy(sortBy string) ApiGetHistoricDetailsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricDetailsRequest) SortOrder(sortOrder string) ApiGetHistoricDetailsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricDetailsRequest) FirstResult(firstResult int32) ApiGetHistoricDetailsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricDetailsRequest) MaxResults(maxResults int32) ApiGetHistoricDetailsRequest {
	r.maxResults = &maxResults
	return r
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetHistoricDetailsRequest) DeserializeValues(deserializeValues bool) ApiGetHistoricDetailsRequest {
	r.deserializeValues = &deserializeValues
	return r
}

func (r ApiGetHistoricDetailsRequest) Execute() ([]HistoricDetailDto, *http.Response, error) {
	return r.ApiService.GetHistoricDetailsExecute(r)
}

/*
GetHistoricDetails Get Historic Details

Queries for historic details that fulfill the given parameters.
The size of the result set can be retrieved by using the
[Get Historic Detail Count](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query-count/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricDetailsRequest
*/
func (a *HistoricDetailAPIService) GetHistoricDetails(ctx context.Context) ApiGetHistoricDetailsRequest {
	return ApiGetHistoricDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricDetailDto
func (a *HistoricDetailAPIService) GetHistoricDetailsExecute(r ApiGetHistoricDetailsRequest) ([]HistoricDetailDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricDetailDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDetailAPIService.GetHistoricDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIdIn", r.processInstanceIdIn, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.activityInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceId", r.activityInstanceId, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.caseExecutionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseExecutionId", r.caseExecutionId, "")
	}
	if r.variableInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableInstanceId", r.variableInstanceId, "")
	}
	if r.variableTypeIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableTypeIn", r.variableTypeIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.userOperationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOperationId", r.userOperationId, "")
	}
	if r.formFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "formFields", r.formFields, "")
	}
	if r.variableUpdates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableUpdates", r.variableUpdates, "")
	}
	if r.excludeTaskDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeTaskDetails", r.excludeTaskDetails, "")
	}
	if r.initial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "initial", r.initial, "")
	}
	if r.occurredBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredBefore", r.occurredBefore, "")
	}
	if r.occurredAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredAfter", r.occurredAfter, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.deserializeValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValues", r.deserializeValues, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricDetailsCountRequest struct {
	ctx context.Context
	ApiService HistoricDetailAPI
	processInstanceId *string
	processInstanceIdIn *string
	executionId *string
	taskId *string
	activityInstanceId *string
	caseInstanceId *string
	caseExecutionId *string
	variableInstanceId *string
	variableTypeIn *string
	tenantIdIn *string
	withoutTenantId *bool
	userOperationId *string
	formFields *bool
	variableUpdates *bool
	excludeTaskDetails *bool
	initial *bool
	occurredBefore *time.Time
	occurredAfter *time.Time
}

// Filter by process instance id.
func (r ApiGetHistoricDetailsCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricDetailsCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Only include historic details which belong to one of the passed comma-separated process instance ids.
func (r ApiGetHistoricDetailsCountRequest) ProcessInstanceIdIn(processInstanceIdIn string) ApiGetHistoricDetailsCountRequest {
	r.processInstanceIdIn = &processInstanceIdIn
	return r
}

// Filter by execution id.
func (r ApiGetHistoricDetailsCountRequest) ExecutionId(executionId string) ApiGetHistoricDetailsCountRequest {
	r.executionId = &executionId
	return r
}

// Filter by task id.
func (r ApiGetHistoricDetailsCountRequest) TaskId(taskId string) ApiGetHistoricDetailsCountRequest {
	r.taskId = &taskId
	return r
}

// Filter by activity instance id.
func (r ApiGetHistoricDetailsCountRequest) ActivityInstanceId(activityInstanceId string) ApiGetHistoricDetailsCountRequest {
	r.activityInstanceId = &activityInstanceId
	return r
}

// Filter by case instance id.
func (r ApiGetHistoricDetailsCountRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricDetailsCountRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by case execution id.
func (r ApiGetHistoricDetailsCountRequest) CaseExecutionId(caseExecutionId string) ApiGetHistoricDetailsCountRequest {
	r.caseExecutionId = &caseExecutionId
	return r
}

// Filter by variable instance id.
func (r ApiGetHistoricDetailsCountRequest) VariableInstanceId(variableInstanceId string) ApiGetHistoricDetailsCountRequest {
	r.variableInstanceId = &variableInstanceId
	return r
}

// Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;.
func (r ApiGetHistoricDetailsCountRequest) VariableTypeIn(variableTypeIn string) ApiGetHistoricDetailsCountRequest {
	r.variableTypeIn = &variableTypeIn
	return r
}

// Filter by a comma-separated list of tenant ids.
func (r ApiGetHistoricDetailsCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricDetailsCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricDetailsCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Filter by a user operation id.
func (r ApiGetHistoricDetailsCountRequest) UserOperationId(userOperationId string) ApiGetHistoricDetailsCountRequest {
	r.userOperationId = &userOperationId
	return r
}

// Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsCountRequest) FormFields(formFields bool) ApiGetHistoricDetailsCountRequest {
	r.formFields = &formFields
	return r
}

// Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsCountRequest) VariableUpdates(variableUpdates bool) ApiGetHistoricDetailsCountRequest {
	r.variableUpdates = &variableUpdates
	return r
}

// Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsCountRequest) ExcludeTaskDetails(excludeTaskDetails bool) ApiGetHistoricDetailsCountRequest {
	r.excludeTaskDetails = &excludeTaskDetails
	return r
}

// Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDetailsCountRequest) Initial(initial bool) ApiGetHistoricDetailsCountRequest {
	r.initial = &initial
	return r
}

// Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
func (r ApiGetHistoricDetailsCountRequest) OccurredBefore(occurredBefore time.Time) ApiGetHistoricDetailsCountRequest {
	r.occurredBefore = &occurredBefore
	return r
}

// Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
func (r ApiGetHistoricDetailsCountRequest) OccurredAfter(occurredAfter time.Time) ApiGetHistoricDetailsCountRequest {
	r.occurredAfter = &occurredAfter
	return r
}

func (r ApiGetHistoricDetailsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricDetailsCountExecute(r)
}

/*
GetHistoricDetailsCount Get Historic Detail Count

Queries for the number of historic details that fulfill the given parameters.
Takes the same parameters as the [Get Historic
Details](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricDetailsCountRequest
*/
func (a *HistoricDetailAPIService) GetHistoricDetailsCount(ctx context.Context) ApiGetHistoricDetailsCountRequest {
	return ApiGetHistoricDetailsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricDetailAPIService) GetHistoricDetailsCountExecute(r ApiGetHistoricDetailsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDetailAPIService.GetHistoricDetailsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/detail/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.processInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceIdIn", r.processInstanceIdIn, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.activityInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceId", r.activityInstanceId, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.caseExecutionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseExecutionId", r.caseExecutionId, "")
	}
	if r.variableInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableInstanceId", r.variableInstanceId, "")
	}
	if r.variableTypeIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableTypeIn", r.variableTypeIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.userOperationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userOperationId", r.userOperationId, "")
	}
	if r.formFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "formFields", r.formFields, "")
	}
	if r.variableUpdates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableUpdates", r.variableUpdates, "")
	}
	if r.excludeTaskDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeTaskDetails", r.excludeTaskDetails, "")
	}
	if r.initial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "initial", r.initial, "")
	}
	if r.occurredBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredBefore", r.occurredBefore, "")
	}
	if r.occurredAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredAfter", r.occurredAfter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHistoricDetailRequest struct {
	ctx context.Context
	ApiService HistoricDetailAPI
	id string
	deserializeValue *bool
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiHistoricDetailRequest) DeserializeValue(deserializeValue bool) ApiHistoricDetailRequest {
	r.deserializeValue = &deserializeValue
	return r
}

func (r ApiHistoricDetailRequest) Execute() (*HistoricDetailDto, *http.Response, error) {
	return r.ApiService.HistoricDetailExecute(r)
}

/*
HistoricDetail Get Historic Detail

Retrieves a historic detail by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the detail.
 @return ApiHistoricDetailRequest
*/
func (a *HistoricDetailAPIService) HistoricDetail(ctx context.Context, id string) ApiHistoricDetailRequest {
	return ApiHistoricDetailRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistoricDetailDto
func (a *HistoricDetailAPIService) HistoricDetailExecute(r ApiHistoricDetailRequest) (*HistoricDetailDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricDetailDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDetailAPIService.HistoricDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/detail/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deserializeValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValue", r.deserializeValue, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHistoricDetailBinaryRequest struct {
	ctx context.Context
	ApiService HistoricDetailAPI
	id string
}

func (r ApiHistoricDetailBinaryRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HistoricDetailBinaryExecute(r)
}

/*
HistoricDetailBinary Get Historic Detail (Binary)

Retrieves the content of a historic variable update by id. Applicable for byte
array and file variables.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the historic variable update.
 @return ApiHistoricDetailBinaryRequest
*/
func (a *HistoricDetailAPIService) HistoricDetailBinary(ctx context.Context, id string) ApiHistoricDetailBinaryRequest {
	return ApiHistoricDetailBinaryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *HistoricDetailAPIService) HistoricDetailBinaryExecute(r ApiHistoricDetailBinaryRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDetailAPIService.HistoricDetailBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/detail/{id}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "*/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoricDetailsRequest struct {
	ctx context.Context
	ApiService HistoricDetailAPI
	firstResult *int32
	maxResults *int32
	deserializeValues *bool
	historicDetailQueryDto *HistoricDetailQueryDto
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiQueryHistoricDetailsRequest) FirstResult(firstResult int32) ApiQueryHistoricDetailsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiQueryHistoricDetailsRequest) MaxResults(maxResults int32) ApiQueryHistoricDetailsRequest {
	r.maxResults = &maxResults
	return r
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiQueryHistoricDetailsRequest) DeserializeValues(deserializeValues bool) ApiQueryHistoricDetailsRequest {
	r.deserializeValues = &deserializeValues
	return r
}

func (r ApiQueryHistoricDetailsRequest) HistoricDetailQueryDto(historicDetailQueryDto HistoricDetailQueryDto) ApiQueryHistoricDetailsRequest {
	r.historicDetailQueryDto = &historicDetailQueryDto
	return r
}

func (r ApiQueryHistoricDetailsRequest) Execute() ([]HistoricDetailDto, *http.Response, error) {
	return r.ApiService.QueryHistoricDetailsExecute(r)
}

/*
QueryHistoricDetails Get Historic Details (POST)

Queries for historic details that fulfill the given parameters. This method is slightly more
powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query/)
method because it allows sorting by multiple parameters. The size of the result set can be retrieved by
using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.21/reference/rest/history/detail/get-detail-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoricDetailsRequest
*/
func (a *HistoricDetailAPIService) QueryHistoricDetails(ctx context.Context) ApiQueryHistoricDetailsRequest {
	return ApiQueryHistoricDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricDetailDto
func (a *HistoricDetailAPIService) QueryHistoricDetailsExecute(r ApiQueryHistoricDetailsRequest) ([]HistoricDetailDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricDetailDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDetailAPIService.QueryHistoricDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	if r.deserializeValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValues", r.deserializeValues, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.historicDetailQueryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
