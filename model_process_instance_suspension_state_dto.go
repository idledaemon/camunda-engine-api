/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ProcessInstanceSuspensionStateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessInstanceSuspensionStateDto{}

// ProcessInstanceSuspensionStateDto struct for ProcessInstanceSuspensionStateDto
type ProcessInstanceSuspensionStateDto struct {
	// A Boolean value which indicates whether to activate or suspend a given instance  (e.g. process instance, job, job definition, or batch). When the value is set to true,  the given instance will be suspended and when the value is set to false,  the given instance will be activated.
	Suspended NullableBool `json:"suspended,omitempty"`
	// The process definition id of the process instances to activate or suspend.  **Note**: This parameter can be used only with combination of `suspended`.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The process definition key of the process instances to activate or suspend.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.
	ProcessDefinitionTenantId NullableString `json:"processDefinitionTenantId,omitempty"`
	// Only activate or suspend process instances of a process definition which belongs to no tenant. Value may only be true, as false is the default behavior.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.
	ProcessDefinitionWithoutTenantId NullableBool `json:"processDefinitionWithoutTenantId,omitempty"`
	// A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.  **Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.
	ProcessInstanceIds []string `json:"processInstanceIds,omitempty"`
	ProcessInstanceQuery *ProcessInstanceQueryDto `json:"processInstanceQuery,omitempty"`
	HistoricProcessInstanceQuery *HistoricProcessInstanceQueryDto `json:"historicProcessInstanceQuery,omitempty"`
}

// NewProcessInstanceSuspensionStateDto instantiates a new ProcessInstanceSuspensionStateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessInstanceSuspensionStateDto() *ProcessInstanceSuspensionStateDto {
	this := ProcessInstanceSuspensionStateDto{}
	return &this
}

// NewProcessInstanceSuspensionStateDtoWithDefaults instantiates a new ProcessInstanceSuspensionStateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessInstanceSuspensionStateDtoWithDefaults() *ProcessInstanceSuspensionStateDto {
	this := ProcessInstanceSuspensionStateDto{}
	return &this
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceSuspensionStateDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceSuspensionStateDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *ProcessInstanceSuspensionStateDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *ProcessInstanceSuspensionStateDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *ProcessInstanceSuspensionStateDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *ProcessInstanceSuspensionStateDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *ProcessInstanceSuspensionStateDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionTenantId returns the ProcessDefinitionTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionTenantId() string {
	if o == nil || IsNil(o.ProcessDefinitionTenantId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionTenantId.Get()
}

// GetProcessDefinitionTenantIdOk returns a tuple with the ProcessDefinitionTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionTenantId.Get(), o.ProcessDefinitionTenantId.IsSet()
}

// HasProcessDefinitionTenantId returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasProcessDefinitionTenantId() bool {
	if o != nil && o.ProcessDefinitionTenantId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionTenantId gets a reference to the given NullableString and assigns it to the ProcessDefinitionTenantId field.
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionTenantId(v string) {
	o.ProcessDefinitionTenantId.Set(&v)
}
// SetProcessDefinitionTenantIdNil sets the value for ProcessDefinitionTenantId to be an explicit nil
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionTenantIdNil() {
	o.ProcessDefinitionTenantId.Set(nil)
}

// UnsetProcessDefinitionTenantId ensures that no value is present for ProcessDefinitionTenantId, not even an explicit nil
func (o *ProcessInstanceSuspensionStateDto) UnsetProcessDefinitionTenantId() {
	o.ProcessDefinitionTenantId.Unset()
}

// GetProcessDefinitionWithoutTenantId returns the ProcessDefinitionWithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionWithoutTenantId() bool {
	if o == nil || IsNil(o.ProcessDefinitionWithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessDefinitionWithoutTenantId.Get()
}

// GetProcessDefinitionWithoutTenantIdOk returns a tuple with the ProcessDefinitionWithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceSuspensionStateDto) GetProcessDefinitionWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionWithoutTenantId.Get(), o.ProcessDefinitionWithoutTenantId.IsSet()
}

// HasProcessDefinitionWithoutTenantId returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasProcessDefinitionWithoutTenantId() bool {
	if o != nil && o.ProcessDefinitionWithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionWithoutTenantId gets a reference to the given NullableBool and assigns it to the ProcessDefinitionWithoutTenantId field.
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionWithoutTenantId(v bool) {
	o.ProcessDefinitionWithoutTenantId.Set(&v)
}
// SetProcessDefinitionWithoutTenantIdNil sets the value for ProcessDefinitionWithoutTenantId to be an explicit nil
func (o *ProcessInstanceSuspensionStateDto) SetProcessDefinitionWithoutTenantIdNil() {
	o.ProcessDefinitionWithoutTenantId.Set(nil)
}

// UnsetProcessDefinitionWithoutTenantId ensures that no value is present for ProcessDefinitionWithoutTenantId, not even an explicit nil
func (o *ProcessInstanceSuspensionStateDto) UnsetProcessDefinitionWithoutTenantId() {
	o.ProcessDefinitionWithoutTenantId.Unset()
}

// GetProcessInstanceIds returns the ProcessInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceSuspensionStateDto) GetProcessInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIds
}

// GetProcessInstanceIdsOk returns a tuple with the ProcessInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceSuspensionStateDto) GetProcessInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIds) {
		return nil, false
	}
	return o.ProcessInstanceIds, true
}

// HasProcessInstanceIds returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasProcessInstanceIds() bool {
	if o != nil && !IsNil(o.ProcessInstanceIds) {
		return true
	}

	return false
}

// SetProcessInstanceIds gets a reference to the given []string and assigns it to the ProcessInstanceIds field.
func (o *ProcessInstanceSuspensionStateDto) SetProcessInstanceIds(v []string) {
	o.ProcessInstanceIds = v
}

// GetProcessInstanceQuery returns the ProcessInstanceQuery field value if set, zero value otherwise.
func (o *ProcessInstanceSuspensionStateDto) GetProcessInstanceQuery() ProcessInstanceQueryDto {
	if o == nil || IsNil(o.ProcessInstanceQuery) {
		var ret ProcessInstanceQueryDto
		return ret
	}
	return *o.ProcessInstanceQuery
}

// GetProcessInstanceQueryOk returns a tuple with the ProcessInstanceQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInstanceSuspensionStateDto) GetProcessInstanceQueryOk() (*ProcessInstanceQueryDto, bool) {
	if o == nil || IsNil(o.ProcessInstanceQuery) {
		return nil, false
	}
	return o.ProcessInstanceQuery, true
}

// HasProcessInstanceQuery returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasProcessInstanceQuery() bool {
	if o != nil && !IsNil(o.ProcessInstanceQuery) {
		return true
	}

	return false
}

// SetProcessInstanceQuery gets a reference to the given ProcessInstanceQueryDto and assigns it to the ProcessInstanceQuery field.
func (o *ProcessInstanceSuspensionStateDto) SetProcessInstanceQuery(v ProcessInstanceQueryDto) {
	o.ProcessInstanceQuery = &v
}

// GetHistoricProcessInstanceQuery returns the HistoricProcessInstanceQuery field value if set, zero value otherwise.
func (o *ProcessInstanceSuspensionStateDto) GetHistoricProcessInstanceQuery() HistoricProcessInstanceQueryDto {
	if o == nil || IsNil(o.HistoricProcessInstanceQuery) {
		var ret HistoricProcessInstanceQueryDto
		return ret
	}
	return *o.HistoricProcessInstanceQuery
}

// GetHistoricProcessInstanceQueryOk returns a tuple with the HistoricProcessInstanceQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInstanceSuspensionStateDto) GetHistoricProcessInstanceQueryOk() (*HistoricProcessInstanceQueryDto, bool) {
	if o == nil || IsNil(o.HistoricProcessInstanceQuery) {
		return nil, false
	}
	return o.HistoricProcessInstanceQuery, true
}

// HasHistoricProcessInstanceQuery returns a boolean if a field has been set.
func (o *ProcessInstanceSuspensionStateDto) HasHistoricProcessInstanceQuery() bool {
	if o != nil && !IsNil(o.HistoricProcessInstanceQuery) {
		return true
	}

	return false
}

// SetHistoricProcessInstanceQuery gets a reference to the given HistoricProcessInstanceQueryDto and assigns it to the HistoricProcessInstanceQuery field.
func (o *ProcessInstanceSuspensionStateDto) SetHistoricProcessInstanceQuery(v HistoricProcessInstanceQueryDto) {
	o.HistoricProcessInstanceQuery = &v
}

func (o ProcessInstanceSuspensionStateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessInstanceSuspensionStateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionTenantId.IsSet() {
		toSerialize["processDefinitionTenantId"] = o.ProcessDefinitionTenantId.Get()
	}
	if o.ProcessDefinitionWithoutTenantId.IsSet() {
		toSerialize["processDefinitionWithoutTenantId"] = o.ProcessDefinitionWithoutTenantId.Get()
	}
	if o.ProcessInstanceIds != nil {
		toSerialize["processInstanceIds"] = o.ProcessInstanceIds
	}
	if !IsNil(o.ProcessInstanceQuery) {
		toSerialize["processInstanceQuery"] = o.ProcessInstanceQuery
	}
	if !IsNil(o.HistoricProcessInstanceQuery) {
		toSerialize["historicProcessInstanceQuery"] = o.HistoricProcessInstanceQuery
	}
	return toSerialize, nil
}

type NullableProcessInstanceSuspensionStateDto struct {
	value *ProcessInstanceSuspensionStateDto
	isSet bool
}

func (v NullableProcessInstanceSuspensionStateDto) Get() *ProcessInstanceSuspensionStateDto {
	return v.value
}

func (v *NullableProcessInstanceSuspensionStateDto) Set(val *ProcessInstanceSuspensionStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessInstanceSuspensionStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessInstanceSuspensionStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessInstanceSuspensionStateDto(val *ProcessInstanceSuspensionStateDto) *NullableProcessInstanceSuspensionStateDto {
	return &NullableProcessInstanceSuspensionStateDto{value: val, isSet: true}
}

func (v NullableProcessInstanceSuspensionStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessInstanceSuspensionStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


