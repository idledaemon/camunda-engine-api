/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type MessageAPI interface {

	/*
	DeliverMessage Correlate

	Correlates a message to the process engine to either trigger a message start event or an intermediate message 
catching event. Internally this maps to the engine's message correlation builder methods
`MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.
For more information about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.21/bpmn20/events/message-events/)
section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.21/reference/bpmn20/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeliverMessageRequest
	*/
	DeliverMessage(ctx context.Context) ApiDeliverMessageRequest

	// DeliverMessageExecute executes the request
	//  @return []MessageCorrelationResultWithVariableDto
	DeliverMessageExecute(r ApiDeliverMessageRequest) ([]MessageCorrelationResultWithVariableDto, *http.Response, error)
}

// MessageAPIService MessageAPI service
type MessageAPIService service

type ApiDeliverMessageRequest struct {
	ctx context.Context
	ApiService MessageAPI
	correlationMessageDto *CorrelationMessageDto
}

func (r ApiDeliverMessageRequest) CorrelationMessageDto(correlationMessageDto CorrelationMessageDto) ApiDeliverMessageRequest {
	r.correlationMessageDto = &correlationMessageDto
	return r
}

func (r ApiDeliverMessageRequest) Execute() ([]MessageCorrelationResultWithVariableDto, *http.Response, error) {
	return r.ApiService.DeliverMessageExecute(r)
}

/*
DeliverMessage Correlate

Correlates a message to the process engine to either trigger a message start event or an intermediate message 
catching event. Internally this maps to the engine's message correlation builder methods
`MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.
For more information about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.21/bpmn20/events/message-events/)
section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.21/reference/bpmn20/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliverMessageRequest
*/
func (a *MessageAPIService) DeliverMessage(ctx context.Context) ApiDeliverMessageRequest {
	return ApiDeliverMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MessageCorrelationResultWithVariableDto
func (a *MessageAPIService) DeliverMessageExecute(r ApiDeliverMessageRequest) ([]MessageCorrelationResultWithVariableDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MessageCorrelationResultWithVariableDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageAPIService.DeliverMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/message"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.correlationMessageDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
