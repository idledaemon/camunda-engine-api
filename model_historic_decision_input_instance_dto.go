/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricDecisionInputInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricDecisionInputInstanceDto{}

// HistoricDecisionInputInstanceDto struct for HistoricDecisionInputInstanceDto
type HistoricDecisionInputInstanceDto struct {
	// The id of the decision input value.
	Id NullableString `json:"id,omitempty"`
	// The id of the decision instance the input value belongs to.
	DecisionInstanceId NullableString `json:"decisionInstanceId,omitempty"`
	// The id of the clause the input value belongs to.
	ClauseId NullableString `json:"clauseId,omitempty"`
	// The name of the clause the input value belongs to.
	ClauseName NullableString `json:"clauseName,omitempty"`
	// An error message in case a Java Serialized Object could not be de-serialized.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// The value type of the variable.
	Type NullableString `json:"type,omitempty"`
	// The time the variable was inserted.  [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	CreateTime NullableTime `json:"createTime,omitempty"`
	// The time after which the entry should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The process instance id of the root process instance that initiated the process containing this entry.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
	// The variable's value. Value differs depending on the variable's type and on the `disableCustomObjectDeserialization` parameter.
	Value map[string]interface{} `json:"value,omitempty"`
	// A JSON object containing additional, value-type-dependent properties.  For variables of type `Object`, the following properties are returned:  * `objectTypeName`: A string representation of the object's type name.  * `serializationDataFormat`: The serialization format used to store the variable.
	ValueInfo map[string]interface{} `json:"valueInfo,omitempty"`
}

// NewHistoricDecisionInputInstanceDto instantiates a new HistoricDecisionInputInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricDecisionInputInstanceDto() *HistoricDecisionInputInstanceDto {
	this := HistoricDecisionInputInstanceDto{}
	return &this
}

// NewHistoricDecisionInputInstanceDtoWithDefaults instantiates a new HistoricDecisionInputInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricDecisionInputInstanceDtoWithDefaults() *HistoricDecisionInputInstanceDto {
	this := HistoricDecisionInputInstanceDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricDecisionInputInstanceDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetId() {
	o.Id.Unset()
}

// GetDecisionInstanceId returns the DecisionInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetDecisionInstanceId() string {
	if o == nil || IsNil(o.DecisionInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionInstanceId.Get()
}

// GetDecisionInstanceIdOk returns a tuple with the DecisionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetDecisionInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionInstanceId.Get(), o.DecisionInstanceId.IsSet()
}

// HasDecisionInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasDecisionInstanceId() bool {
	if o != nil && o.DecisionInstanceId.IsSet() {
		return true
	}

	return false
}

// SetDecisionInstanceId gets a reference to the given NullableString and assigns it to the DecisionInstanceId field.
func (o *HistoricDecisionInputInstanceDto) SetDecisionInstanceId(v string) {
	o.DecisionInstanceId.Set(&v)
}
// SetDecisionInstanceIdNil sets the value for DecisionInstanceId to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetDecisionInstanceIdNil() {
	o.DecisionInstanceId.Set(nil)
}

// UnsetDecisionInstanceId ensures that no value is present for DecisionInstanceId, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetDecisionInstanceId() {
	o.DecisionInstanceId.Unset()
}

// GetClauseId returns the ClauseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetClauseId() string {
	if o == nil || IsNil(o.ClauseId.Get()) {
		var ret string
		return ret
	}
	return *o.ClauseId.Get()
}

// GetClauseIdOk returns a tuple with the ClauseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetClauseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClauseId.Get(), o.ClauseId.IsSet()
}

// HasClauseId returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasClauseId() bool {
	if o != nil && o.ClauseId.IsSet() {
		return true
	}

	return false
}

// SetClauseId gets a reference to the given NullableString and assigns it to the ClauseId field.
func (o *HistoricDecisionInputInstanceDto) SetClauseId(v string) {
	o.ClauseId.Set(&v)
}
// SetClauseIdNil sets the value for ClauseId to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetClauseIdNil() {
	o.ClauseId.Set(nil)
}

// UnsetClauseId ensures that no value is present for ClauseId, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetClauseId() {
	o.ClauseId.Unset()
}

// GetClauseName returns the ClauseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetClauseName() string {
	if o == nil || IsNil(o.ClauseName.Get()) {
		var ret string
		return ret
	}
	return *o.ClauseName.Get()
}

// GetClauseNameOk returns a tuple with the ClauseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetClauseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClauseName.Get(), o.ClauseName.IsSet()
}

// HasClauseName returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasClauseName() bool {
	if o != nil && o.ClauseName.IsSet() {
		return true
	}

	return false
}

// SetClauseName gets a reference to the given NullableString and assigns it to the ClauseName field.
func (o *HistoricDecisionInputInstanceDto) SetClauseName(v string) {
	o.ClauseName.Set(&v)
}
// SetClauseNameNil sets the value for ClauseName to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetClauseNameNil() {
	o.ClauseName.Set(nil)
}

// UnsetClauseName ensures that no value is present for ClauseName, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetClauseName() {
	o.ClauseName.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *HistoricDecisionInputInstanceDto) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HistoricDecisionInputInstanceDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetType() {
	o.Type.Unset()
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime.Get()
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateTime.Get(), o.CreateTime.IsSet()
}

// HasCreateTime returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasCreateTime() bool {
	if o != nil && o.CreateTime.IsSet() {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given NullableTime and assigns it to the CreateTime field.
func (o *HistoricDecisionInputInstanceDto) SetCreateTime(v time.Time) {
	o.CreateTime.Set(&v)
}
// SetCreateTimeNil sets the value for CreateTime to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetCreateTimeNil() {
	o.CreateTime.Set(nil)
}

// UnsetCreateTime ensures that no value is present for CreateTime, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetCreateTime() {
	o.CreateTime.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricDecisionInputInstanceDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInputInstanceDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInputInstanceDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricDecisionInputInstanceDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricDecisionInputInstanceDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricDecisionInputInstanceDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *HistoricDecisionInputInstanceDto) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricDecisionInputInstanceDto) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *HistoricDecisionInputInstanceDto) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetValueInfo returns the ValueInfo field value if set, zero value otherwise.
func (o *HistoricDecisionInputInstanceDto) GetValueInfo() map[string]interface{} {
	if o == nil || IsNil(o.ValueInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.ValueInfo
}

// GetValueInfoOk returns a tuple with the ValueInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricDecisionInputInstanceDto) GetValueInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ValueInfo) {
		return map[string]interface{}{}, false
	}
	return o.ValueInfo, true
}

// HasValueInfo returns a boolean if a field has been set.
func (o *HistoricDecisionInputInstanceDto) HasValueInfo() bool {
	if o != nil && !IsNil(o.ValueInfo) {
		return true
	}

	return false
}

// SetValueInfo gets a reference to the given map[string]interface{} and assigns it to the ValueInfo field.
func (o *HistoricDecisionInputInstanceDto) SetValueInfo(v map[string]interface{}) {
	o.ValueInfo = v
}

func (o HistoricDecisionInputInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricDecisionInputInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.DecisionInstanceId.IsSet() {
		toSerialize["decisionInstanceId"] = o.DecisionInstanceId.Get()
	}
	if o.ClauseId.IsSet() {
		toSerialize["clauseId"] = o.ClauseId.Get()
	}
	if o.ClauseName.IsSet() {
		toSerialize["clauseName"] = o.ClauseName.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.CreateTime.IsSet() {
		toSerialize["createTime"] = o.CreateTime.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueInfo) {
		toSerialize["valueInfo"] = o.ValueInfo
	}
	return toSerialize, nil
}

type NullableHistoricDecisionInputInstanceDto struct {
	value *HistoricDecisionInputInstanceDto
	isSet bool
}

func (v NullableHistoricDecisionInputInstanceDto) Get() *HistoricDecisionInputInstanceDto {
	return v.value
}

func (v *NullableHistoricDecisionInputInstanceDto) Set(val *HistoricDecisionInputInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricDecisionInputInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricDecisionInputInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricDecisionInputInstanceDto(val *HistoricDecisionInputInstanceDto) *NullableHistoricDecisionInputInstanceDto {
	return &NullableHistoricDecisionInputInstanceDto{value: val, isSet: true}
}

func (v NullableHistoricDecisionInputInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricDecisionInputInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


