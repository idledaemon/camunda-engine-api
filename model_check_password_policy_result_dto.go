/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CheckPasswordPolicyResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckPasswordPolicyResultDto{}

// CheckPasswordPolicyResultDto struct for CheckPasswordPolicyResultDto
type CheckPasswordPolicyResultDto struct {
	// An array of password policy rules. Each element of the array is representing one rule of the policy.
	Rules []PasswordPolicyRuleDto `json:"rules,omitempty"`
	// `true` if the password is compliant with the policy, otherwise `false`.
	Valid NullableBool `json:"valid,omitempty"`
}

// NewCheckPasswordPolicyResultDto instantiates a new CheckPasswordPolicyResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckPasswordPolicyResultDto() *CheckPasswordPolicyResultDto {
	this := CheckPasswordPolicyResultDto{}
	return &this
}

// NewCheckPasswordPolicyResultDtoWithDefaults instantiates a new CheckPasswordPolicyResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckPasswordPolicyResultDtoWithDefaults() *CheckPasswordPolicyResultDto {
	this := CheckPasswordPolicyResultDto{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckPasswordPolicyResultDto) GetRules() []PasswordPolicyRuleDto {
	if o == nil {
		var ret []PasswordPolicyRuleDto
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckPasswordPolicyResultDto) GetRulesOk() ([]PasswordPolicyRuleDto, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *CheckPasswordPolicyResultDto) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PasswordPolicyRuleDto and assigns it to the Rules field.
func (o *CheckPasswordPolicyResultDto) SetRules(v []PasswordPolicyRuleDto) {
	o.Rules = v
}

// GetValid returns the Valid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckPasswordPolicyResultDto) GetValid() bool {
	if o == nil || IsNil(o.Valid.Get()) {
		var ret bool
		return ret
	}
	return *o.Valid.Get()
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckPasswordPolicyResultDto) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Valid.Get(), o.Valid.IsSet()
}

// HasValid returns a boolean if a field has been set.
func (o *CheckPasswordPolicyResultDto) HasValid() bool {
	if o != nil && o.Valid.IsSet() {
		return true
	}

	return false
}

// SetValid gets a reference to the given NullableBool and assigns it to the Valid field.
func (o *CheckPasswordPolicyResultDto) SetValid(v bool) {
	o.Valid.Set(&v)
}
// SetValidNil sets the value for Valid to be an explicit nil
func (o *CheckPasswordPolicyResultDto) SetValidNil() {
	o.Valid.Set(nil)
}

// UnsetValid ensures that no value is present for Valid, not even an explicit nil
func (o *CheckPasswordPolicyResultDto) UnsetValid() {
	o.Valid.Unset()
}

func (o CheckPasswordPolicyResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckPasswordPolicyResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Valid.IsSet() {
		toSerialize["valid"] = o.Valid.Get()
	}
	return toSerialize, nil
}

type NullableCheckPasswordPolicyResultDto struct {
	value *CheckPasswordPolicyResultDto
	isSet bool
}

func (v NullableCheckPasswordPolicyResultDto) Get() *CheckPasswordPolicyResultDto {
	return v.value
}

func (v *NullableCheckPasswordPolicyResultDto) Set(val *CheckPasswordPolicyResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckPasswordPolicyResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckPasswordPolicyResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckPasswordPolicyResultDto(val *CheckPasswordPolicyResultDto) *NullableCheckPasswordPolicyResultDto {
	return &NullableCheckPasswordPolicyResultDto{value: val, isSet: true}
}

func (v NullableCheckPasswordPolicyResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckPasswordPolicyResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


