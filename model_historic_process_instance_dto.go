/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricProcessInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricProcessInstanceDto{}

// HistoricProcessInstanceDto struct for HistoricProcessInstanceDto
type HistoricProcessInstanceDto struct {
	// The id of the process instance.
	Id NullableString `json:"id,omitempty"`
	// The process instance id of the root process instance that initiated the process.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
	// The id of the parent process instance, if it exists.
	SuperProcessInstanceId NullableString `json:"superProcessInstanceId,omitempty"`
	// The id of the parent case instance, if it exists.
	SuperCaseInstanceId NullableString `json:"superCaseInstanceId,omitempty"`
	// The id of the parent case instance, if it exists.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// The name of the process definition that this process instance belongs to.
	ProcessDefinitionName NullableString `json:"processDefinitionName,omitempty"`
	// The key of the process definition that this process instance belongs to.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The version of the process definition that this process instance belongs to.
	ProcessDefinitionVersion NullableInt32 `json:"processDefinitionVersion,omitempty"`
	// The id of the process definition that this process instance belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The business key of the process instance.
	BusinessKey NullableString `json:"businessKey,omitempty"`
	// The time the instance was started. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	StartTime NullableTime `json:"startTime,omitempty"`
	// The time the instance ended. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	EndTime NullableTime `json:"endTime,omitempty"`
	// The time after which the instance should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The time the instance took to finish (in milliseconds).
	DurationInMillis NullableInt64 `json:"durationInMillis,omitempty"`
	// The id of the user who started the process instance.
	StartUserId NullableString `json:"startUserId,omitempty"`
	// The id of the initial activity that was executed (e.g., a start event).
	StartActivityId NullableString `json:"startActivityId,omitempty"`
	// The provided delete reason in case the process instance was canceled during execution.
	DeleteReason NullableString `json:"deleteReason,omitempty"`
	// The tenant id of the process instance.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Last state of the process instance, possible values are:  `ACTIVE` - running process instance  `SUSPENDED` - suspended process instances  `COMPLETED` - completed through normal end event  `EXTERNALLY_TERMINATED` - terminated externally, for instance through REST API  `INTERNALLY_TERMINATED` - terminated internally, for instance by terminating boundary event
	State NullableString `json:"state,omitempty"`
}

// NewHistoricProcessInstanceDto instantiates a new HistoricProcessInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricProcessInstanceDto() *HistoricProcessInstanceDto {
	this := HistoricProcessInstanceDto{}
	return &this
}

// NewHistoricProcessInstanceDtoWithDefaults instantiates a new HistoricProcessInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricProcessInstanceDtoWithDefaults() *HistoricProcessInstanceDto {
	this := HistoricProcessInstanceDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricProcessInstanceDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricProcessInstanceDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetId() {
	o.Id.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricProcessInstanceDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

// GetSuperProcessInstanceId returns the SuperProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetSuperProcessInstanceId() string {
	if o == nil || IsNil(o.SuperProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.SuperProcessInstanceId.Get()
}

// GetSuperProcessInstanceIdOk returns a tuple with the SuperProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetSuperProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuperProcessInstanceId.Get(), o.SuperProcessInstanceId.IsSet()
}

// HasSuperProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasSuperProcessInstanceId() bool {
	if o != nil && o.SuperProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetSuperProcessInstanceId gets a reference to the given NullableString and assigns it to the SuperProcessInstanceId field.
func (o *HistoricProcessInstanceDto) SetSuperProcessInstanceId(v string) {
	o.SuperProcessInstanceId.Set(&v)
}
// SetSuperProcessInstanceIdNil sets the value for SuperProcessInstanceId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetSuperProcessInstanceIdNil() {
	o.SuperProcessInstanceId.Set(nil)
}

// UnsetSuperProcessInstanceId ensures that no value is present for SuperProcessInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetSuperProcessInstanceId() {
	o.SuperProcessInstanceId.Unset()
}

// GetSuperCaseInstanceId returns the SuperCaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetSuperCaseInstanceId() string {
	if o == nil || IsNil(o.SuperCaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.SuperCaseInstanceId.Get()
}

// GetSuperCaseInstanceIdOk returns a tuple with the SuperCaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetSuperCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuperCaseInstanceId.Get(), o.SuperCaseInstanceId.IsSet()
}

// HasSuperCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasSuperCaseInstanceId() bool {
	if o != nil && o.SuperCaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetSuperCaseInstanceId gets a reference to the given NullableString and assigns it to the SuperCaseInstanceId field.
func (o *HistoricProcessInstanceDto) SetSuperCaseInstanceId(v string) {
	o.SuperCaseInstanceId.Set(&v)
}
// SetSuperCaseInstanceIdNil sets the value for SuperCaseInstanceId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetSuperCaseInstanceIdNil() {
	o.SuperCaseInstanceId.Set(nil)
}

// UnsetSuperCaseInstanceId ensures that no value is present for SuperCaseInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetSuperCaseInstanceId() {
	o.SuperCaseInstanceId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricProcessInstanceDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetProcessDefinitionName returns the ProcessDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetProcessDefinitionName() string {
	if o == nil || IsNil(o.ProcessDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionName.Get()
}

// GetProcessDefinitionNameOk returns a tuple with the ProcessDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetProcessDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionName.Get(), o.ProcessDefinitionName.IsSet()
}

// HasProcessDefinitionName returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasProcessDefinitionName() bool {
	if o != nil && o.ProcessDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionName gets a reference to the given NullableString and assigns it to the ProcessDefinitionName field.
func (o *HistoricProcessInstanceDto) SetProcessDefinitionName(v string) {
	o.ProcessDefinitionName.Set(&v)
}
// SetProcessDefinitionNameNil sets the value for ProcessDefinitionName to be an explicit nil
func (o *HistoricProcessInstanceDto) SetProcessDefinitionNameNil() {
	o.ProcessDefinitionName.Set(nil)
}

// UnsetProcessDefinitionName ensures that no value is present for ProcessDefinitionName, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetProcessDefinitionName() {
	o.ProcessDefinitionName.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricProcessInstanceDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricProcessInstanceDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionVersion returns the ProcessDefinitionVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetProcessDefinitionVersion() int32 {
	if o == nil || IsNil(o.ProcessDefinitionVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.ProcessDefinitionVersion.Get()
}

// GetProcessDefinitionVersionOk returns a tuple with the ProcessDefinitionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetProcessDefinitionVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionVersion.Get(), o.ProcessDefinitionVersion.IsSet()
}

// HasProcessDefinitionVersion returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasProcessDefinitionVersion() bool {
	if o != nil && o.ProcessDefinitionVersion.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionVersion gets a reference to the given NullableInt32 and assigns it to the ProcessDefinitionVersion field.
func (o *HistoricProcessInstanceDto) SetProcessDefinitionVersion(v int32) {
	o.ProcessDefinitionVersion.Set(&v)
}
// SetProcessDefinitionVersionNil sets the value for ProcessDefinitionVersion to be an explicit nil
func (o *HistoricProcessInstanceDto) SetProcessDefinitionVersionNil() {
	o.ProcessDefinitionVersion.Set(nil)
}

// UnsetProcessDefinitionVersion ensures that no value is present for ProcessDefinitionVersion, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetProcessDefinitionVersion() {
	o.ProcessDefinitionVersion.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricProcessInstanceDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetBusinessKey returns the BusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetBusinessKey() string {
	if o == nil || IsNil(o.BusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessKey.Get()
}

// GetBusinessKeyOk returns a tuple with the BusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessKey.Get(), o.BusinessKey.IsSet()
}

// HasBusinessKey returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasBusinessKey() bool {
	if o != nil && o.BusinessKey.IsSet() {
		return true
	}

	return false
}

// SetBusinessKey gets a reference to the given NullableString and assigns it to the BusinessKey field.
func (o *HistoricProcessInstanceDto) SetBusinessKey(v string) {
	o.BusinessKey.Set(&v)
}
// SetBusinessKeyNil sets the value for BusinessKey to be an explicit nil
func (o *HistoricProcessInstanceDto) SetBusinessKeyNil() {
	o.BusinessKey.Set(nil)
}

// UnsetBusinessKey ensures that no value is present for BusinessKey, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetBusinessKey() {
	o.BusinessKey.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTime and assigns it to the StartTime field.
func (o *HistoricProcessInstanceDto) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *HistoricProcessInstanceDto) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *HistoricProcessInstanceDto) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *HistoricProcessInstanceDto) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricProcessInstanceDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricProcessInstanceDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetDurationInMillis returns the DurationInMillis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetDurationInMillis() int64 {
	if o == nil || IsNil(o.DurationInMillis.Get()) {
		var ret int64
		return ret
	}
	return *o.DurationInMillis.Get()
}

// GetDurationInMillisOk returns a tuple with the DurationInMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetDurationInMillisOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationInMillis.Get(), o.DurationInMillis.IsSet()
}

// HasDurationInMillis returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasDurationInMillis() bool {
	if o != nil && o.DurationInMillis.IsSet() {
		return true
	}

	return false
}

// SetDurationInMillis gets a reference to the given NullableInt64 and assigns it to the DurationInMillis field.
func (o *HistoricProcessInstanceDto) SetDurationInMillis(v int64) {
	o.DurationInMillis.Set(&v)
}
// SetDurationInMillisNil sets the value for DurationInMillis to be an explicit nil
func (o *HistoricProcessInstanceDto) SetDurationInMillisNil() {
	o.DurationInMillis.Set(nil)
}

// UnsetDurationInMillis ensures that no value is present for DurationInMillis, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetDurationInMillis() {
	o.DurationInMillis.Unset()
}

// GetStartUserId returns the StartUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetStartUserId() string {
	if o == nil || IsNil(o.StartUserId.Get()) {
		var ret string
		return ret
	}
	return *o.StartUserId.Get()
}

// GetStartUserIdOk returns a tuple with the StartUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetStartUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartUserId.Get(), o.StartUserId.IsSet()
}

// HasStartUserId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasStartUserId() bool {
	if o != nil && o.StartUserId.IsSet() {
		return true
	}

	return false
}

// SetStartUserId gets a reference to the given NullableString and assigns it to the StartUserId field.
func (o *HistoricProcessInstanceDto) SetStartUserId(v string) {
	o.StartUserId.Set(&v)
}
// SetStartUserIdNil sets the value for StartUserId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetStartUserIdNil() {
	o.StartUserId.Set(nil)
}

// UnsetStartUserId ensures that no value is present for StartUserId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetStartUserId() {
	o.StartUserId.Unset()
}

// GetStartActivityId returns the StartActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetStartActivityId() string {
	if o == nil || IsNil(o.StartActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.StartActivityId.Get()
}

// GetStartActivityIdOk returns a tuple with the StartActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetStartActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartActivityId.Get(), o.StartActivityId.IsSet()
}

// HasStartActivityId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasStartActivityId() bool {
	if o != nil && o.StartActivityId.IsSet() {
		return true
	}

	return false
}

// SetStartActivityId gets a reference to the given NullableString and assigns it to the StartActivityId field.
func (o *HistoricProcessInstanceDto) SetStartActivityId(v string) {
	o.StartActivityId.Set(&v)
}
// SetStartActivityIdNil sets the value for StartActivityId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetStartActivityIdNil() {
	o.StartActivityId.Set(nil)
}

// UnsetStartActivityId ensures that no value is present for StartActivityId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetStartActivityId() {
	o.StartActivityId.Unset()
}

// GetDeleteReason returns the DeleteReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetDeleteReason() string {
	if o == nil || IsNil(o.DeleteReason.Get()) {
		var ret string
		return ret
	}
	return *o.DeleteReason.Get()
}

// GetDeleteReasonOk returns a tuple with the DeleteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetDeleteReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteReason.Get(), o.DeleteReason.IsSet()
}

// HasDeleteReason returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasDeleteReason() bool {
	if o != nil && o.DeleteReason.IsSet() {
		return true
	}

	return false
}

// SetDeleteReason gets a reference to the given NullableString and assigns it to the DeleteReason field.
func (o *HistoricProcessInstanceDto) SetDeleteReason(v string) {
	o.DeleteReason.Set(&v)
}
// SetDeleteReasonNil sets the value for DeleteReason to be an explicit nil
func (o *HistoricProcessInstanceDto) SetDeleteReasonNil() {
	o.DeleteReason.Set(nil)
}

// UnsetDeleteReason ensures that no value is present for DeleteReason, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetDeleteReason() {
	o.DeleteReason.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *HistoricProcessInstanceDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *HistoricProcessInstanceDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceDto) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceDto) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *HistoricProcessInstanceDto) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *HistoricProcessInstanceDto) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *HistoricProcessInstanceDto) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *HistoricProcessInstanceDto) UnsetState() {
	o.State.Unset()
}

func (o HistoricProcessInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricProcessInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	if o.SuperProcessInstanceId.IsSet() {
		toSerialize["superProcessInstanceId"] = o.SuperProcessInstanceId.Get()
	}
	if o.SuperCaseInstanceId.IsSet() {
		toSerialize["superCaseInstanceId"] = o.SuperCaseInstanceId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.ProcessDefinitionName.IsSet() {
		toSerialize["processDefinitionName"] = o.ProcessDefinitionName.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionVersion.IsSet() {
		toSerialize["processDefinitionVersion"] = o.ProcessDefinitionVersion.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.BusinessKey.IsSet() {
		toSerialize["businessKey"] = o.BusinessKey.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.DurationInMillis.IsSet() {
		toSerialize["durationInMillis"] = o.DurationInMillis.Get()
	}
	if o.StartUserId.IsSet() {
		toSerialize["startUserId"] = o.StartUserId.Get()
	}
	if o.StartActivityId.IsSet() {
		toSerialize["startActivityId"] = o.StartActivityId.Get()
	}
	if o.DeleteReason.IsSet() {
		toSerialize["deleteReason"] = o.DeleteReason.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return toSerialize, nil
}

type NullableHistoricProcessInstanceDto struct {
	value *HistoricProcessInstanceDto
	isSet bool
}

func (v NullableHistoricProcessInstanceDto) Get() *HistoricProcessInstanceDto {
	return v.value
}

func (v *NullableHistoricProcessInstanceDto) Set(val *HistoricProcessInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricProcessInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricProcessInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricProcessInstanceDto(val *HistoricProcessInstanceDto) *NullableHistoricProcessInstanceDto {
	return &NullableHistoricProcessInstanceDto{value: val, isSet: true}
}

func (v NullableHistoricProcessInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricProcessInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


