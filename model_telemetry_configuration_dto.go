/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the TelemetryConfigurationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryConfigurationDto{}

// TelemetryConfigurationDto struct for TelemetryConfigurationDto
type TelemetryConfigurationDto struct {
	// Specifies if the telemetry data should be sent or not.
	EnableTelemetry NullableBool `json:"enableTelemetry,omitempty"`
}

// NewTelemetryConfigurationDto instantiates a new TelemetryConfigurationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryConfigurationDto() *TelemetryConfigurationDto {
	this := TelemetryConfigurationDto{}
	return &this
}

// NewTelemetryConfigurationDtoWithDefaults instantiates a new TelemetryConfigurationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryConfigurationDtoWithDefaults() *TelemetryConfigurationDto {
	this := TelemetryConfigurationDto{}
	return &this
}

// GetEnableTelemetry returns the EnableTelemetry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryConfigurationDto) GetEnableTelemetry() bool {
	if o == nil || IsNil(o.EnableTelemetry.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableTelemetry.Get()
}

// GetEnableTelemetryOk returns a tuple with the EnableTelemetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryConfigurationDto) GetEnableTelemetryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableTelemetry.Get(), o.EnableTelemetry.IsSet()
}

// HasEnableTelemetry returns a boolean if a field has been set.
func (o *TelemetryConfigurationDto) HasEnableTelemetry() bool {
	if o != nil && o.EnableTelemetry.IsSet() {
		return true
	}

	return false
}

// SetEnableTelemetry gets a reference to the given NullableBool and assigns it to the EnableTelemetry field.
func (o *TelemetryConfigurationDto) SetEnableTelemetry(v bool) {
	o.EnableTelemetry.Set(&v)
}
// SetEnableTelemetryNil sets the value for EnableTelemetry to be an explicit nil
func (o *TelemetryConfigurationDto) SetEnableTelemetryNil() {
	o.EnableTelemetry.Set(nil)
}

// UnsetEnableTelemetry ensures that no value is present for EnableTelemetry, not even an explicit nil
func (o *TelemetryConfigurationDto) UnsetEnableTelemetry() {
	o.EnableTelemetry.Unset()
}

func (o TelemetryConfigurationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryConfigurationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableTelemetry.IsSet() {
		toSerialize["enableTelemetry"] = o.EnableTelemetry.Get()
	}
	return toSerialize, nil
}

type NullableTelemetryConfigurationDto struct {
	value *TelemetryConfigurationDto
	isSet bool
}

func (v NullableTelemetryConfigurationDto) Get() *TelemetryConfigurationDto {
	return v.value
}

func (v *NullableTelemetryConfigurationDto) Set(val *TelemetryConfigurationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryConfigurationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryConfigurationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryConfigurationDto(val *TelemetryConfigurationDto) *NullableTelemetryConfigurationDto {
	return &NullableTelemetryConfigurationDto{value: val, isSet: true}
}

func (v NullableTelemetryConfigurationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryConfigurationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


