/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the SetJobRetriesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetJobRetriesDto{}

// SetJobRetriesDto struct for SetJobRetriesDto
type SetJobRetriesDto struct {
	// The due date to set for the job. A due date indicates when this job is ready for execution. Jobs with due dates in the past will be scheduled for execution.
	DueDate NullableTime `json:"dueDate,omitempty"`
	// The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again. Can not be null.
	Retries NullableInt32 `json:"retries,omitempty"`
	// A list of job ids to set retries for.
	JobIds []string `json:"jobIds,omitempty"`
	JobQuery *JobQueryDto `json:"jobQuery,omitempty"`
}

// NewSetJobRetriesDto instantiates a new SetJobRetriesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetJobRetriesDto() *SetJobRetriesDto {
	this := SetJobRetriesDto{}
	return &this
}

// NewSetJobRetriesDtoWithDefaults instantiates a new SetJobRetriesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetJobRetriesDtoWithDefaults() *SetJobRetriesDto {
	this := SetJobRetriesDto{}
	return &this
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetJobRetriesDto) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetJobRetriesDto) GetDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *SetJobRetriesDto) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *SetJobRetriesDto) SetDueDate(v time.Time) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *SetJobRetriesDto) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *SetJobRetriesDto) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetRetries returns the Retries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetJobRetriesDto) GetRetries() int32 {
	if o == nil || IsNil(o.Retries.Get()) {
		var ret int32
		return ret
	}
	return *o.Retries.Get()
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetJobRetriesDto) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Retries.Get(), o.Retries.IsSet()
}

// HasRetries returns a boolean if a field has been set.
func (o *SetJobRetriesDto) HasRetries() bool {
	if o != nil && o.Retries.IsSet() {
		return true
	}

	return false
}

// SetRetries gets a reference to the given NullableInt32 and assigns it to the Retries field.
func (o *SetJobRetriesDto) SetRetries(v int32) {
	o.Retries.Set(&v)
}
// SetRetriesNil sets the value for Retries to be an explicit nil
func (o *SetJobRetriesDto) SetRetriesNil() {
	o.Retries.Set(nil)
}

// UnsetRetries ensures that no value is present for Retries, not even an explicit nil
func (o *SetJobRetriesDto) UnsetRetries() {
	o.Retries.Unset()
}

// GetJobIds returns the JobIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetJobRetriesDto) GetJobIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.JobIds
}

// GetJobIdsOk returns a tuple with the JobIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetJobRetriesDto) GetJobIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.JobIds) {
		return nil, false
	}
	return o.JobIds, true
}

// HasJobIds returns a boolean if a field has been set.
func (o *SetJobRetriesDto) HasJobIds() bool {
	if o != nil && !IsNil(o.JobIds) {
		return true
	}

	return false
}

// SetJobIds gets a reference to the given []string and assigns it to the JobIds field.
func (o *SetJobRetriesDto) SetJobIds(v []string) {
	o.JobIds = v
}

// GetJobQuery returns the JobQuery field value if set, zero value otherwise.
func (o *SetJobRetriesDto) GetJobQuery() JobQueryDto {
	if o == nil || IsNil(o.JobQuery) {
		var ret JobQueryDto
		return ret
	}
	return *o.JobQuery
}

// GetJobQueryOk returns a tuple with the JobQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetJobRetriesDto) GetJobQueryOk() (*JobQueryDto, bool) {
	if o == nil || IsNil(o.JobQuery) {
		return nil, false
	}
	return o.JobQuery, true
}

// HasJobQuery returns a boolean if a field has been set.
func (o *SetJobRetriesDto) HasJobQuery() bool {
	if o != nil && !IsNil(o.JobQuery) {
		return true
	}

	return false
}

// SetJobQuery gets a reference to the given JobQueryDto and assigns it to the JobQuery field.
func (o *SetJobRetriesDto) SetJobQuery(v JobQueryDto) {
	o.JobQuery = &v
}

func (o SetJobRetriesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetJobRetriesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DueDate.IsSet() {
		toSerialize["dueDate"] = o.DueDate.Get()
	}
	if o.Retries.IsSet() {
		toSerialize["retries"] = o.Retries.Get()
	}
	if o.JobIds != nil {
		toSerialize["jobIds"] = o.JobIds
	}
	if !IsNil(o.JobQuery) {
		toSerialize["jobQuery"] = o.JobQuery
	}
	return toSerialize, nil
}

type NullableSetJobRetriesDto struct {
	value *SetJobRetriesDto
	isSet bool
}

func (v NullableSetJobRetriesDto) Get() *SetJobRetriesDto {
	return v.value
}

func (v *NullableSetJobRetriesDto) Set(val *SetJobRetriesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSetJobRetriesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSetJobRetriesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetJobRetriesDto(val *SetJobRetriesDto) *NullableSetJobRetriesDto {
	return &NullableSetJobRetriesDto{value: val, isSet: true}
}

func (v NullableSetJobRetriesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetJobRetriesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


