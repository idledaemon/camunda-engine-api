/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the IncidentStatisticsResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncidentStatisticsResultDto{}

// IncidentStatisticsResultDto struct for IncidentStatisticsResultDto
type IncidentStatisticsResultDto struct {
	// The type of the incident the number of incidents is aggregated for. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
	IncidentType NullableString `json:"incidentType,omitempty"`
	// The total number of incidents for the corresponding incident type.
	IncidentCount NullableInt32 `json:"incidentCount,omitempty"`
}

// NewIncidentStatisticsResultDto instantiates a new IncidentStatisticsResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentStatisticsResultDto() *IncidentStatisticsResultDto {
	this := IncidentStatisticsResultDto{}
	return &this
}

// NewIncidentStatisticsResultDtoWithDefaults instantiates a new IncidentStatisticsResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentStatisticsResultDtoWithDefaults() *IncidentStatisticsResultDto {
	this := IncidentStatisticsResultDto{}
	return &this
}

// GetIncidentType returns the IncidentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentStatisticsResultDto) GetIncidentType() string {
	if o == nil || IsNil(o.IncidentType.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentType.Get()
}

// GetIncidentTypeOk returns a tuple with the IncidentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentStatisticsResultDto) GetIncidentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentType.Get(), o.IncidentType.IsSet()
}

// HasIncidentType returns a boolean if a field has been set.
func (o *IncidentStatisticsResultDto) HasIncidentType() bool {
	if o != nil && o.IncidentType.IsSet() {
		return true
	}

	return false
}

// SetIncidentType gets a reference to the given NullableString and assigns it to the IncidentType field.
func (o *IncidentStatisticsResultDto) SetIncidentType(v string) {
	o.IncidentType.Set(&v)
}
// SetIncidentTypeNil sets the value for IncidentType to be an explicit nil
func (o *IncidentStatisticsResultDto) SetIncidentTypeNil() {
	o.IncidentType.Set(nil)
}

// UnsetIncidentType ensures that no value is present for IncidentType, not even an explicit nil
func (o *IncidentStatisticsResultDto) UnsetIncidentType() {
	o.IncidentType.Unset()
}

// GetIncidentCount returns the IncidentCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentStatisticsResultDto) GetIncidentCount() int32 {
	if o == nil || IsNil(o.IncidentCount.Get()) {
		var ret int32
		return ret
	}
	return *o.IncidentCount.Get()
}

// GetIncidentCountOk returns a tuple with the IncidentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentStatisticsResultDto) GetIncidentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentCount.Get(), o.IncidentCount.IsSet()
}

// HasIncidentCount returns a boolean if a field has been set.
func (o *IncidentStatisticsResultDto) HasIncidentCount() bool {
	if o != nil && o.IncidentCount.IsSet() {
		return true
	}

	return false
}

// SetIncidentCount gets a reference to the given NullableInt32 and assigns it to the IncidentCount field.
func (o *IncidentStatisticsResultDto) SetIncidentCount(v int32) {
	o.IncidentCount.Set(&v)
}
// SetIncidentCountNil sets the value for IncidentCount to be an explicit nil
func (o *IncidentStatisticsResultDto) SetIncidentCountNil() {
	o.IncidentCount.Set(nil)
}

// UnsetIncidentCount ensures that no value is present for IncidentCount, not even an explicit nil
func (o *IncidentStatisticsResultDto) UnsetIncidentCount() {
	o.IncidentCount.Unset()
}

func (o IncidentStatisticsResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncidentStatisticsResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IncidentType.IsSet() {
		toSerialize["incidentType"] = o.IncidentType.Get()
	}
	if o.IncidentCount.IsSet() {
		toSerialize["incidentCount"] = o.IncidentCount.Get()
	}
	return toSerialize, nil
}

type NullableIncidentStatisticsResultDto struct {
	value *IncidentStatisticsResultDto
	isSet bool
}

func (v NullableIncidentStatisticsResultDto) Get() *IncidentStatisticsResultDto {
	return v.value
}

func (v *NullableIncidentStatisticsResultDto) Set(val *IncidentStatisticsResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentStatisticsResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentStatisticsResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentStatisticsResultDto(val *IncidentStatisticsResultDto) *NullableIncidentStatisticsResultDto {
	return &NullableIncidentStatisticsResultDto{value: val, isSet: true}
}

func (v NullableIncidentStatisticsResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentStatisticsResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


