/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the PasswordPolicyRuleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicyRuleDto{}

// PasswordPolicyRuleDto Describes a rule of a password policy.
type PasswordPolicyRuleDto struct {
	// A placeholder string that contains the name of a password policy rule.
	Placeholder NullableString `json:"placeholder,omitempty"`
	// A map that describes the characteristics of a password policy rule, such as the minimum number of digits.
	Parameter *map[string]string `json:"parameter,omitempty"`
}

// NewPasswordPolicyRuleDto instantiates a new PasswordPolicyRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicyRuleDto() *PasswordPolicyRuleDto {
	this := PasswordPolicyRuleDto{}
	return &this
}

// NewPasswordPolicyRuleDtoWithDefaults instantiates a new PasswordPolicyRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyRuleDtoWithDefaults() *PasswordPolicyRuleDto {
	this := PasswordPolicyRuleDto{}
	return &this
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordPolicyRuleDto) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder.Get()) {
		var ret string
		return ret
	}
	return *o.Placeholder.Get()
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordPolicyRuleDto) GetPlaceholderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Placeholder.Get(), o.Placeholder.IsSet()
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *PasswordPolicyRuleDto) HasPlaceholder() bool {
	if o != nil && o.Placeholder.IsSet() {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given NullableString and assigns it to the Placeholder field.
func (o *PasswordPolicyRuleDto) SetPlaceholder(v string) {
	o.Placeholder.Set(&v)
}
// SetPlaceholderNil sets the value for Placeholder to be an explicit nil
func (o *PasswordPolicyRuleDto) SetPlaceholderNil() {
	o.Placeholder.Set(nil)
}

// UnsetPlaceholder ensures that no value is present for Placeholder, not even an explicit nil
func (o *PasswordPolicyRuleDto) UnsetPlaceholder() {
	o.Placeholder.Unset()
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *PasswordPolicyRuleDto) GetParameter() map[string]string {
	if o == nil || IsNil(o.Parameter) {
		var ret map[string]string
		return ret
	}
	return *o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyRuleDto) GetParameterOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *PasswordPolicyRuleDto) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given map[string]string and assigns it to the Parameter field.
func (o *PasswordPolicyRuleDto) SetParameter(v map[string]string) {
	o.Parameter = &v
}

func (o PasswordPolicyRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicyRuleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Placeholder.IsSet() {
		toSerialize["placeholder"] = o.Placeholder.Get()
	}
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	return toSerialize, nil
}

type NullablePasswordPolicyRuleDto struct {
	value *PasswordPolicyRuleDto
	isSet bool
}

func (v NullablePasswordPolicyRuleDto) Get() *PasswordPolicyRuleDto {
	return v.value
}

func (v *NullablePasswordPolicyRuleDto) Set(val *PasswordPolicyRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicyRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicyRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicyRuleDto(val *PasswordPolicyRuleDto) *NullablePasswordPolicyRuleDto {
	return &NullablePasswordPolicyRuleDto{value: val, isSet: true}
}

func (v NullablePasswordPolicyRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicyRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


