/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ExternalTaskFailureDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalTaskFailureDto{}

// ExternalTaskFailureDto struct for ExternalTaskFailureDto
type ExternalTaskFailureDto struct {
	// **Mandatory.** The ID of the worker who is performing the operation on the external task. If the task is already locked, must match the id of the worker who has most recently locked the task.
	WorkerId *string `json:"workerId,omitempty"`
	// An message indicating the reason of the failure.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// A detailed error description.
	ErrorDetails NullableString `json:"errorDetails,omitempty"`
	// A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident's message is set to the `errorMessage` parameter.
	Retries NullableInt32 `json:"retries,omitempty"`
	// A timeout in milliseconds before the external task becomes available again for fetching. Must be >= 0.
	RetryTimeout NullableInt64 `json:"retryTimeout,omitempty"`
	// A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:
	Variables map[string]VariableValueDto `json:"variables,omitempty"`
	// A JSON object containing local variable key-value pairs. Local variables are set only in the scope of external task. Each key is a variable name and each value a JSON variable value object with the following properties:
	LocalVariables map[string]VariableValueDto `json:"localVariables,omitempty"`
}

// NewExternalTaskFailureDto instantiates a new ExternalTaskFailureDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalTaskFailureDto() *ExternalTaskFailureDto {
	this := ExternalTaskFailureDto{}
	return &this
}

// NewExternalTaskFailureDtoWithDefaults instantiates a new ExternalTaskFailureDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalTaskFailureDtoWithDefaults() *ExternalTaskFailureDto {
	this := ExternalTaskFailureDto{}
	return &this
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *ExternalTaskFailureDto) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId) {
		var ret string
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTaskFailureDto) GetWorkerIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkerId) {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasWorkerId() bool {
	if o != nil && !IsNil(o.WorkerId) {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given string and assigns it to the WorkerId field.
func (o *ExternalTaskFailureDto) SetWorkerId(v string) {
	o.WorkerId = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTaskFailureDto) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTaskFailureDto) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *ExternalTaskFailureDto) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *ExternalTaskFailureDto) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *ExternalTaskFailureDto) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTaskFailureDto) GetErrorDetails() string {
	if o == nil || IsNil(o.ErrorDetails.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorDetails.Get()
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTaskFailureDto) GetErrorDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorDetails.Get(), o.ErrorDetails.IsSet()
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasErrorDetails() bool {
	if o != nil && o.ErrorDetails.IsSet() {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given NullableString and assigns it to the ErrorDetails field.
func (o *ExternalTaskFailureDto) SetErrorDetails(v string) {
	o.ErrorDetails.Set(&v)
}
// SetErrorDetailsNil sets the value for ErrorDetails to be an explicit nil
func (o *ExternalTaskFailureDto) SetErrorDetailsNil() {
	o.ErrorDetails.Set(nil)
}

// UnsetErrorDetails ensures that no value is present for ErrorDetails, not even an explicit nil
func (o *ExternalTaskFailureDto) UnsetErrorDetails() {
	o.ErrorDetails.Unset()
}

// GetRetries returns the Retries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTaskFailureDto) GetRetries() int32 {
	if o == nil || IsNil(o.Retries.Get()) {
		var ret int32
		return ret
	}
	return *o.Retries.Get()
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTaskFailureDto) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Retries.Get(), o.Retries.IsSet()
}

// HasRetries returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasRetries() bool {
	if o != nil && o.Retries.IsSet() {
		return true
	}

	return false
}

// SetRetries gets a reference to the given NullableInt32 and assigns it to the Retries field.
func (o *ExternalTaskFailureDto) SetRetries(v int32) {
	o.Retries.Set(&v)
}
// SetRetriesNil sets the value for Retries to be an explicit nil
func (o *ExternalTaskFailureDto) SetRetriesNil() {
	o.Retries.Set(nil)
}

// UnsetRetries ensures that no value is present for Retries, not even an explicit nil
func (o *ExternalTaskFailureDto) UnsetRetries() {
	o.Retries.Unset()
}

// GetRetryTimeout returns the RetryTimeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTaskFailureDto) GetRetryTimeout() int64 {
	if o == nil || IsNil(o.RetryTimeout.Get()) {
		var ret int64
		return ret
	}
	return *o.RetryTimeout.Get()
}

// GetRetryTimeoutOk returns a tuple with the RetryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTaskFailureDto) GetRetryTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetryTimeout.Get(), o.RetryTimeout.IsSet()
}

// HasRetryTimeout returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasRetryTimeout() bool {
	if o != nil && o.RetryTimeout.IsSet() {
		return true
	}

	return false
}

// SetRetryTimeout gets a reference to the given NullableInt64 and assigns it to the RetryTimeout field.
func (o *ExternalTaskFailureDto) SetRetryTimeout(v int64) {
	o.RetryTimeout.Set(&v)
}
// SetRetryTimeoutNil sets the value for RetryTimeout to be an explicit nil
func (o *ExternalTaskFailureDto) SetRetryTimeoutNil() {
	o.RetryTimeout.Set(nil)
}

// UnsetRetryTimeout ensures that no value is present for RetryTimeout, not even an explicit nil
func (o *ExternalTaskFailureDto) UnsetRetryTimeout() {
	o.RetryTimeout.Unset()
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTaskFailureDto) GetVariables() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTaskFailureDto) GetVariablesOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return &o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]VariableValueDto and assigns it to the Variables field.
func (o *ExternalTaskFailureDto) SetVariables(v map[string]VariableValueDto) {
	o.Variables = v
}

// GetLocalVariables returns the LocalVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTaskFailureDto) GetLocalVariables() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.LocalVariables
}

// GetLocalVariablesOk returns a tuple with the LocalVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTaskFailureDto) GetLocalVariablesOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.LocalVariables) {
		return nil, false
	}
	return &o.LocalVariables, true
}

// HasLocalVariables returns a boolean if a field has been set.
func (o *ExternalTaskFailureDto) HasLocalVariables() bool {
	if o != nil && !IsNil(o.LocalVariables) {
		return true
	}

	return false
}

// SetLocalVariables gets a reference to the given map[string]VariableValueDto and assigns it to the LocalVariables field.
func (o *ExternalTaskFailureDto) SetLocalVariables(v map[string]VariableValueDto) {
	o.LocalVariables = v
}

func (o ExternalTaskFailureDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalTaskFailureDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WorkerId) {
		toSerialize["workerId"] = o.WorkerId
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.ErrorDetails.IsSet() {
		toSerialize["errorDetails"] = o.ErrorDetails.Get()
	}
	if o.Retries.IsSet() {
		toSerialize["retries"] = o.Retries.Get()
	}
	if o.RetryTimeout.IsSet() {
		toSerialize["retryTimeout"] = o.RetryTimeout.Get()
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.LocalVariables != nil {
		toSerialize["localVariables"] = o.LocalVariables
	}
	return toSerialize, nil
}

type NullableExternalTaskFailureDto struct {
	value *ExternalTaskFailureDto
	isSet bool
}

func (v NullableExternalTaskFailureDto) Get() *ExternalTaskFailureDto {
	return v.value
}

func (v *NullableExternalTaskFailureDto) Set(val *ExternalTaskFailureDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalTaskFailureDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalTaskFailureDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalTaskFailureDto(val *ExternalTaskFailureDto) *NullableExternalTaskFailureDto {
	return &NullableExternalTaskFailureDto{value: val, isSet: true}
}

func (v NullableExternalTaskFailureDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalTaskFailureDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


