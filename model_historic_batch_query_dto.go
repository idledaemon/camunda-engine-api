/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the HistoricBatchQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricBatchQueryDto{}

// HistoricBatchQueryDto Query for the historic batches to set the removal time for.
type HistoricBatchQueryDto struct {
	// Filter by batch id.
	BatchId NullableString `json:"batchId,omitempty"`
	// Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
	Type NullableString `json:"type,omitempty"`
	//  Filter completed or not completed batches. If the value is `true`, only completed batches, i.e., end time is set, are returned. Otherwise, if the value is `false`, only running batches, i.e., end time is null, are returned.
	Completed NullableBool `json:"completed,omitempty"`
	// Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Has no effect for the `/count` endpoint
	Sorting []HistoricBatchQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewHistoricBatchQueryDto instantiates a new HistoricBatchQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricBatchQueryDto() *HistoricBatchQueryDto {
	this := HistoricBatchQueryDto{}
	return &this
}

// NewHistoricBatchQueryDtoWithDefaults instantiates a new HistoricBatchQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricBatchQueryDtoWithDefaults() *HistoricBatchQueryDto {
	this := HistoricBatchQueryDto{}
	return &this
}

// GetBatchId returns the BatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricBatchQueryDto) GetBatchId() string {
	if o == nil || IsNil(o.BatchId.Get()) {
		var ret string
		return ret
	}
	return *o.BatchId.Get()
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricBatchQueryDto) GetBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchId.Get(), o.BatchId.IsSet()
}

// HasBatchId returns a boolean if a field has been set.
func (o *HistoricBatchQueryDto) HasBatchId() bool {
	if o != nil && o.BatchId.IsSet() {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given NullableString and assigns it to the BatchId field.
func (o *HistoricBatchQueryDto) SetBatchId(v string) {
	o.BatchId.Set(&v)
}
// SetBatchIdNil sets the value for BatchId to be an explicit nil
func (o *HistoricBatchQueryDto) SetBatchIdNil() {
	o.BatchId.Set(nil)
}

// UnsetBatchId ensures that no value is present for BatchId, not even an explicit nil
func (o *HistoricBatchQueryDto) UnsetBatchId() {
	o.BatchId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricBatchQueryDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricBatchQueryDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HistoricBatchQueryDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HistoricBatchQueryDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HistoricBatchQueryDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HistoricBatchQueryDto) UnsetType() {
	o.Type.Unset()
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricBatchQueryDto) GetCompleted() bool {
	if o == nil || IsNil(o.Completed.Get()) {
		var ret bool
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricBatchQueryDto) GetCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *HistoricBatchQueryDto) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableBool and assigns it to the Completed field.
func (o *HistoricBatchQueryDto) SetCompleted(v bool) {
	o.Completed.Set(&v)
}
// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *HistoricBatchQueryDto) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *HistoricBatchQueryDto) UnsetCompleted() {
	o.Completed.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricBatchQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricBatchQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *HistoricBatchQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *HistoricBatchQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricBatchQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricBatchQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *HistoricBatchQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *HistoricBatchQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *HistoricBatchQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *HistoricBatchQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricBatchQueryDto) GetSorting() []HistoricBatchQueryDtoSortingInner {
	if o == nil {
		var ret []HistoricBatchQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricBatchQueryDto) GetSortingOk() ([]HistoricBatchQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *HistoricBatchQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []HistoricBatchQueryDtoSortingInner and assigns it to the Sorting field.
func (o *HistoricBatchQueryDto) SetSorting(v []HistoricBatchQueryDtoSortingInner) {
	o.Sorting = v
}

func (o HistoricBatchQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricBatchQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BatchId.IsSet() {
		toSerialize["batchId"] = o.BatchId.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableHistoricBatchQueryDto struct {
	value *HistoricBatchQueryDto
	isSet bool
}

func (v NullableHistoricBatchQueryDto) Get() *HistoricBatchQueryDto {
	return v.value
}

func (v *NullableHistoricBatchQueryDto) Set(val *HistoricBatchQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricBatchQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricBatchQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricBatchQueryDto(val *HistoricBatchQueryDto) *NullableHistoricBatchQueryDto {
	return &NullableHistoricBatchQueryDto{value: val, isSet: true}
}

func (v NullableHistoricBatchQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricBatchQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


