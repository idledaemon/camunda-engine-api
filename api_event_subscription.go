/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type EventSubscriptionAPI interface {

	/*
	GetEventSubscriptions Get List

	Queries for event subscriptions that fulfill given parameters.
The size of the result set can be retrieved by using the
[Get Event Subscriptions count](https://docs.camunda.org/manual/7.21/reference/rest/event-subscription/get-query-count/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEventSubscriptionsRequest
	*/
	GetEventSubscriptions(ctx context.Context) ApiGetEventSubscriptionsRequest

	// GetEventSubscriptionsExecute executes the request
	//  @return []EventSubscriptionDto
	GetEventSubscriptionsExecute(r ApiGetEventSubscriptionsRequest) ([]EventSubscriptionDto, *http.Response, error)

	/*
	GetEventSubscriptionsCount Get List Count

	Queries for the number of event subscriptions that fulfill given parameters.
Takes the same parameters as the
[Get Event Subscriptions](https://docs.camunda.org/manual/7.21/reference/rest/event-subscription/get-query/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEventSubscriptionsCountRequest
	*/
	GetEventSubscriptionsCount(ctx context.Context) ApiGetEventSubscriptionsCountRequest

	// GetEventSubscriptionsCountExecute executes the request
	//  @return CountResultDto
	GetEventSubscriptionsCountExecute(r ApiGetEventSubscriptionsCountRequest) (*CountResultDto, *http.Response, error)
}

// EventSubscriptionAPIService EventSubscriptionAPI service
type EventSubscriptionAPIService service

type ApiGetEventSubscriptionsRequest struct {
	ctx context.Context
	ApiService EventSubscriptionAPI
	eventSubscriptionId *string
	eventName *string
	eventType *string
	executionId *string
	processInstanceId *string
	activityId *string
	tenantIdIn *string
	withoutTenantId *bool
	includeEventSubscriptionsWithoutTenantId *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Only select subscription with the given id.
func (r ApiGetEventSubscriptionsRequest) EventSubscriptionId(eventSubscriptionId string) ApiGetEventSubscriptionsRequest {
	r.eventSubscriptionId = &eventSubscriptionId
	return r
}

// Only select subscriptions for events with the given name.
func (r ApiGetEventSubscriptionsRequest) EventName(eventName string) ApiGetEventSubscriptionsRequest {
	r.eventName = &eventName
	return r
}

// Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;.
func (r ApiGetEventSubscriptionsRequest) EventType(eventType string) ApiGetEventSubscriptionsRequest {
	r.eventType = &eventType
	return r
}

// Only select subscriptions that belong to an execution with the given id.
func (r ApiGetEventSubscriptionsRequest) ExecutionId(executionId string) ApiGetEventSubscriptionsRequest {
	r.executionId = &executionId
	return r
}

// Only select subscriptions that belong to a process instance with the given id.
func (r ApiGetEventSubscriptionsRequest) ProcessInstanceId(processInstanceId string) ApiGetEventSubscriptionsRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Only select subscriptions that belong to an activity with the given id.
func (r ApiGetEventSubscriptionsRequest) ActivityId(activityId string) ApiGetEventSubscriptionsRequest {
	r.activityId = &activityId
	return r
}

// Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
func (r ApiGetEventSubscriptionsRequest) TenantIdIn(tenantIdIn string) ApiGetEventSubscriptionsRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetEventSubscriptionsRequest) WithoutTenantId(withoutTenantId bool) ApiGetEventSubscriptionsRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetEventSubscriptionsRequest) IncludeEventSubscriptionsWithoutTenantId(includeEventSubscriptionsWithoutTenantId bool) ApiGetEventSubscriptionsRequest {
	r.includeEventSubscriptionsWithoutTenantId = &includeEventSubscriptionsWithoutTenantId
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetEventSubscriptionsRequest) SortBy(sortBy string) ApiGetEventSubscriptionsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetEventSubscriptionsRequest) SortOrder(sortOrder string) ApiGetEventSubscriptionsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetEventSubscriptionsRequest) FirstResult(firstResult int32) ApiGetEventSubscriptionsRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetEventSubscriptionsRequest) MaxResults(maxResults int32) ApiGetEventSubscriptionsRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetEventSubscriptionsRequest) Execute() ([]EventSubscriptionDto, *http.Response, error) {
	return r.ApiService.GetEventSubscriptionsExecute(r)
}

/*
GetEventSubscriptions Get List

Queries for event subscriptions that fulfill given parameters.
The size of the result set can be retrieved by using the
[Get Event Subscriptions count](https://docs.camunda.org/manual/7.21/reference/rest/event-subscription/get-query-count/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEventSubscriptionsRequest
*/
func (a *EventSubscriptionAPIService) GetEventSubscriptions(ctx context.Context) ApiGetEventSubscriptionsRequest {
	return ApiGetEventSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EventSubscriptionDto
func (a *EventSubscriptionAPIService) GetEventSubscriptionsExecute(r ApiGetEventSubscriptionsRequest) ([]EventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventSubscriptionAPIService.GetEventSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eventSubscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventSubscriptionId", r.eventSubscriptionId, "")
	}
	if r.eventName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventName", r.eventName, "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityId", r.activityId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.includeEventSubscriptionsWithoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeEventSubscriptionsWithoutTenantId", r.includeEventSubscriptionsWithoutTenantId, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventSubscriptionsCountRequest struct {
	ctx context.Context
	ApiService EventSubscriptionAPI
	eventSubscriptionId *string
	eventName *string
	eventType *string
	executionId *string
	processInstanceId *string
	activityId *string
	tenantIdIn *string
	withoutTenantId *bool
	includeEventSubscriptionsWithoutTenantId *bool
}

// Only select subscription with the given id.
func (r ApiGetEventSubscriptionsCountRequest) EventSubscriptionId(eventSubscriptionId string) ApiGetEventSubscriptionsCountRequest {
	r.eventSubscriptionId = &eventSubscriptionId
	return r
}

// Only select subscriptions for events with the given name.
func (r ApiGetEventSubscriptionsCountRequest) EventName(eventName string) ApiGetEventSubscriptionsCountRequest {
	r.eventName = &eventName
	return r
}

// Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;.
func (r ApiGetEventSubscriptionsCountRequest) EventType(eventType string) ApiGetEventSubscriptionsCountRequest {
	r.eventType = &eventType
	return r
}

// Only select subscriptions that belong to an execution with the given id.
func (r ApiGetEventSubscriptionsCountRequest) ExecutionId(executionId string) ApiGetEventSubscriptionsCountRequest {
	r.executionId = &executionId
	return r
}

// Only select subscriptions that belong to a process instance with the given id.
func (r ApiGetEventSubscriptionsCountRequest) ProcessInstanceId(processInstanceId string) ApiGetEventSubscriptionsCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Only select subscriptions that belong to an activity with the given id.
func (r ApiGetEventSubscriptionsCountRequest) ActivityId(activityId string) ApiGetEventSubscriptionsCountRequest {
	r.activityId = &activityId
	return r
}

// Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
func (r ApiGetEventSubscriptionsCountRequest) TenantIdIn(tenantIdIn string) ApiGetEventSubscriptionsCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetEventSubscriptionsCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetEventSubscriptionsCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetEventSubscriptionsCountRequest) IncludeEventSubscriptionsWithoutTenantId(includeEventSubscriptionsWithoutTenantId bool) ApiGetEventSubscriptionsCountRequest {
	r.includeEventSubscriptionsWithoutTenantId = &includeEventSubscriptionsWithoutTenantId
	return r
}

func (r ApiGetEventSubscriptionsCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetEventSubscriptionsCountExecute(r)
}

/*
GetEventSubscriptionsCount Get List Count

Queries for the number of event subscriptions that fulfill given parameters.
Takes the same parameters as the
[Get Event Subscriptions](https://docs.camunda.org/manual/7.21/reference/rest/event-subscription/get-query/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEventSubscriptionsCountRequest
*/
func (a *EventSubscriptionAPIService) GetEventSubscriptionsCount(ctx context.Context) ApiGetEventSubscriptionsCountRequest {
	return ApiGetEventSubscriptionsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *EventSubscriptionAPIService) GetEventSubscriptionsCountExecute(r ApiGetEventSubscriptionsCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventSubscriptionAPIService.GetEventSubscriptionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscription/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eventSubscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventSubscriptionId", r.eventSubscriptionId, "")
	}
	if r.eventName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventName", r.eventName, "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "")
	}
	if r.executionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionId", r.executionId, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.activityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityId", r.activityId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.includeEventSubscriptionsWithoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeEventSubscriptionsWithoutTenantId", r.includeEventSubscriptionsWithoutTenantId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
