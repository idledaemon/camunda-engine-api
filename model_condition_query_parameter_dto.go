/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ConditionQueryParameterDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionQueryParameterDto{}

// ConditionQueryParameterDto struct for ConditionQueryParameterDto
type ConditionQueryParameterDto struct {
	// Comparison operator to be used. `notLike` is not supported by all endpoints.
	Operator NullableString `json:"operator,omitempty"`
	// Can be any value - string, number, boolean, array or object.  **Note**: Not every endpoint supports every type.
	Value interface{} `json:"value,omitempty"`
}

// NewConditionQueryParameterDto instantiates a new ConditionQueryParameterDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionQueryParameterDto() *ConditionQueryParameterDto {
	this := ConditionQueryParameterDto{}
	return &this
}

// NewConditionQueryParameterDtoWithDefaults instantiates a new ConditionQueryParameterDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionQueryParameterDtoWithDefaults() *ConditionQueryParameterDto {
	this := ConditionQueryParameterDto{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConditionQueryParameterDto) GetOperator() string {
	if o == nil || IsNil(o.Operator.Get()) {
		var ret string
		return ret
	}
	return *o.Operator.Get()
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConditionQueryParameterDto) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator.Get(), o.Operator.IsSet()
}

// HasOperator returns a boolean if a field has been set.
func (o *ConditionQueryParameterDto) HasOperator() bool {
	if o != nil && o.Operator.IsSet() {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NullableString and assigns it to the Operator field.
func (o *ConditionQueryParameterDto) SetOperator(v string) {
	o.Operator.Set(&v)
}
// SetOperatorNil sets the value for Operator to be an explicit nil
func (o *ConditionQueryParameterDto) SetOperatorNil() {
	o.Operator.Set(nil)
}

// UnsetOperator ensures that no value is present for Operator, not even an explicit nil
func (o *ConditionQueryParameterDto) UnsetOperator() {
	o.Operator.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConditionQueryParameterDto) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConditionQueryParameterDto) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConditionQueryParameterDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *ConditionQueryParameterDto) SetValue(v interface{}) {
	o.Value = v
}

func (o ConditionQueryParameterDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionQueryParameterDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator.IsSet() {
		toSerialize["operator"] = o.Operator.Get()
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableConditionQueryParameterDto struct {
	value *ConditionQueryParameterDto
	isSet bool
}

func (v NullableConditionQueryParameterDto) Get() *ConditionQueryParameterDto {
	return v.value
}

func (v *NullableConditionQueryParameterDto) Set(val *ConditionQueryParameterDto) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionQueryParameterDto) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionQueryParameterDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionQueryParameterDto(val *ConditionQueryParameterDto) *NullableConditionQueryParameterDto {
	return &NullableConditionQueryParameterDto{value: val, isSet: true}
}

func (v NullableConditionQueryParameterDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionQueryParameterDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


