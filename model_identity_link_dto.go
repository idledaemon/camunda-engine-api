/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdentityLinkDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityLinkDto{}

// IdentityLinkDto struct for IdentityLinkDto
type IdentityLinkDto struct {
	// The id of the user participating in this link. Either `userId` or `groupId` is set.
	UserId NullableString `json:"userId,omitempty"`
	// The id of the group participating in this link. Either `groupId` or `userId` is set.
	GroupId NullableString `json:"groupId,omitempty"`
	// The type of the identity link. The value of the this property can be user-defined. The Process Engine provides three pre-defined Identity Link `type`s:  * `candidate` * `assignee` - reserved for the task assignee * `owner` - reserved for the task owner  **Note**: When adding or removing an Identity Link, the `type` property must be defined.
	Type NullableString `json:"type"`
}

type _IdentityLinkDto IdentityLinkDto

// NewIdentityLinkDto instantiates a new IdentityLinkDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityLinkDto(type_ NullableString) *IdentityLinkDto {
	this := IdentityLinkDto{}
	this.Type = type_
	return &this
}

// NewIdentityLinkDtoWithDefaults instantiates a new IdentityLinkDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityLinkDtoWithDefaults() *IdentityLinkDto {
	this := IdentityLinkDto{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityLinkDto) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityLinkDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *IdentityLinkDto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *IdentityLinkDto) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *IdentityLinkDto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *IdentityLinkDto) UnsetUserId() {
	o.UserId.Unset()
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityLinkDto) GetGroupId() string {
	if o == nil || IsNil(o.GroupId.Get()) {
		var ret string
		return ret
	}
	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityLinkDto) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// HasGroupId returns a boolean if a field has been set.
func (o *IdentityLinkDto) HasGroupId() bool {
	if o != nil && o.GroupId.IsSet() {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given NullableString and assigns it to the GroupId field.
func (o *IdentityLinkDto) SetGroupId(v string) {
	o.GroupId.Set(&v)
}
// SetGroupIdNil sets the value for GroupId to be an explicit nil
func (o *IdentityLinkDto) SetGroupIdNil() {
	o.GroupId.Set(nil)
}

// UnsetGroupId ensures that no value is present for GroupId, not even an explicit nil
func (o *IdentityLinkDto) UnsetGroupId() {
	o.GroupId.Unset()
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IdentityLinkDto) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityLinkDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *IdentityLinkDto) SetType(v string) {
	o.Type.Set(&v)
}

func (o IdentityLinkDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityLinkDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.GroupId.IsSet() {
		toSerialize["groupId"] = o.GroupId.Get()
	}
	toSerialize["type"] = o.Type.Get()
	return toSerialize, nil
}

func (o *IdentityLinkDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityLinkDto := _IdentityLinkDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityLinkDto)

	if err != nil {
		return err
	}

	*o = IdentityLinkDto(varIdentityLinkDto)

	return err
}

type NullableIdentityLinkDto struct {
	value *IdentityLinkDto
	isSet bool
}

func (v NullableIdentityLinkDto) Get() *IdentityLinkDto {
	return v.value
}

func (v *NullableIdentityLinkDto) Set(val *IdentityLinkDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityLinkDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityLinkDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityLinkDto(val *IdentityLinkDto) *NullableIdentityLinkDto {
	return &NullableIdentityLinkDto{value: val, isSet: true}
}

func (v NullableIdentityLinkDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityLinkDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


