/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the MetricsResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsResultDto{}

// MetricsResultDto struct for MetricsResultDto
type MetricsResultDto struct {
	// The current sum (count) for the selected metric.
	Result NullableInt64 `json:"result,omitempty"`
}

// NewMetricsResultDto instantiates a new MetricsResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsResultDto() *MetricsResultDto {
	this := MetricsResultDto{}
	return &this
}

// NewMetricsResultDtoWithDefaults instantiates a new MetricsResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsResultDtoWithDefaults() *MetricsResultDto {
	this := MetricsResultDto{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricsResultDto) GetResult() int64 {
	if o == nil || IsNil(o.Result.Get()) {
		var ret int64
		return ret
	}
	return *o.Result.Get()
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricsResultDto) GetResultOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result.Get(), o.Result.IsSet()
}

// HasResult returns a boolean if a field has been set.
func (o *MetricsResultDto) HasResult() bool {
	if o != nil && o.Result.IsSet() {
		return true
	}

	return false
}

// SetResult gets a reference to the given NullableInt64 and assigns it to the Result field.
func (o *MetricsResultDto) SetResult(v int64) {
	o.Result.Set(&v)
}
// SetResultNil sets the value for Result to be an explicit nil
func (o *MetricsResultDto) SetResultNil() {
	o.Result.Set(nil)
}

// UnsetResult ensures that no value is present for Result, not even an explicit nil
func (o *MetricsResultDto) UnsetResult() {
	o.Result.Unset()
}

func (o MetricsResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Result.IsSet() {
		toSerialize["result"] = o.Result.Get()
	}
	return toSerialize, nil
}

type NullableMetricsResultDto struct {
	value *MetricsResultDto
	isSet bool
}

func (v NullableMetricsResultDto) Get() *MetricsResultDto {
	return v.value
}

func (v *NullableMetricsResultDto) Set(val *MetricsResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsResultDto(val *MetricsResultDto) *NullableMetricsResultDto {
	return &NullableMetricsResultDto{value: val, isSet: true}
}

func (v NullableMetricsResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


