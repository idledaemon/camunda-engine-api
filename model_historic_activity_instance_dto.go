/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricActivityInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricActivityInstanceDto{}

// HistoricActivityInstanceDto struct for HistoricActivityInstanceDto
type HistoricActivityInstanceDto struct {
	// The id of the activity instance.
	Id NullableString `json:"id,omitempty"`
	// The id of the parent activity instance, for example a sub process instance.
	ParentActivityInstanceId NullableString `json:"parentActivityInstanceId,omitempty"`
	// The id of the activity that this object is an instance of.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The name of the activity that this object is an instance of.
	ActivityName NullableString `json:"activityName,omitempty"`
	// The type of the activity that this object is an instance of.
	ActivityType NullableString `json:"activityType,omitempty"`
	// The key of the process definition that this activity instance belongs to.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The id of the process definition that this activity instance belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The id of the process instance that this activity instance belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the execution that executed this activity instance.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// The id of the task that is associated to this activity instance. Is only set if the activity is a user task.
	TaskId NullableString `json:"taskId,omitempty"`
	// The assignee of the task that is associated to this activity instance. Is only set if the activity is a user task.
	Assignee NullableString `json:"assignee,omitempty"`
	// The id of the called process instance. Is only set if the activity is a call activity and the called instance a process instance.
	CalledProcessInstanceId NullableString `json:"calledProcessInstanceId,omitempty"`
	// The id of the called case instance. Is only set if the activity is a call activity and the called instance a case instance.
	CalledCaseInstanceId NullableString `json:"calledCaseInstanceId,omitempty"`
	// The time the instance was started. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartTime NullableTime `json:"startTime,omitempty"`
	// The time the instance ended. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	EndTime NullableTime `json:"endTime,omitempty"`
	// The time the instance took to finish (in milliseconds).
	DurationInMillis NullableInt64 `json:"durationInMillis,omitempty"`
	// If `true`, this activity instance is canceled.
	Canceled NullableBool `json:"canceled,omitempty"`
	// If `true`, this activity instance did complete a BPMN 2.0 scope.
	CompleteScope NullableBool `json:"completeScope,omitempty"`
	// The tenant id of the activity instance.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The process instance id of the root process instance that initiated the process containing this activity instance.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
}

// NewHistoricActivityInstanceDto instantiates a new HistoricActivityInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricActivityInstanceDto() *HistoricActivityInstanceDto {
	this := HistoricActivityInstanceDto{}
	return &this
}

// NewHistoricActivityInstanceDtoWithDefaults instantiates a new HistoricActivityInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricActivityInstanceDtoWithDefaults() *HistoricActivityInstanceDto {
	this := HistoricActivityInstanceDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricActivityInstanceDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricActivityInstanceDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetId() {
	o.Id.Unset()
}

// GetParentActivityInstanceId returns the ParentActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetParentActivityInstanceId() string {
	if o == nil || IsNil(o.ParentActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentActivityInstanceId.Get()
}

// GetParentActivityInstanceIdOk returns a tuple with the ParentActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetParentActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentActivityInstanceId.Get(), o.ParentActivityInstanceId.IsSet()
}

// HasParentActivityInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasParentActivityInstanceId() bool {
	if o != nil && o.ParentActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetParentActivityInstanceId gets a reference to the given NullableString and assigns it to the ParentActivityInstanceId field.
func (o *HistoricActivityInstanceDto) SetParentActivityInstanceId(v string) {
	o.ParentActivityInstanceId.Set(&v)
}
// SetParentActivityInstanceIdNil sets the value for ParentActivityInstanceId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetParentActivityInstanceIdNil() {
	o.ParentActivityInstanceId.Set(nil)
}

// UnsetParentActivityInstanceId ensures that no value is present for ParentActivityInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetParentActivityInstanceId() {
	o.ParentActivityInstanceId.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *HistoricActivityInstanceDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetActivityName returns the ActivityName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetActivityName() string {
	if o == nil || IsNil(o.ActivityName.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityName.Get()
}

// GetActivityNameOk returns a tuple with the ActivityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetActivityNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityName.Get(), o.ActivityName.IsSet()
}

// HasActivityName returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasActivityName() bool {
	if o != nil && o.ActivityName.IsSet() {
		return true
	}

	return false
}

// SetActivityName gets a reference to the given NullableString and assigns it to the ActivityName field.
func (o *HistoricActivityInstanceDto) SetActivityName(v string) {
	o.ActivityName.Set(&v)
}
// SetActivityNameNil sets the value for ActivityName to be an explicit nil
func (o *HistoricActivityInstanceDto) SetActivityNameNil() {
	o.ActivityName.Set(nil)
}

// UnsetActivityName ensures that no value is present for ActivityName, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetActivityName() {
	o.ActivityName.Unset()
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityType.Get()
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetActivityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityType.Get(), o.ActivityType.IsSet()
}

// HasActivityType returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasActivityType() bool {
	if o != nil && o.ActivityType.IsSet() {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given NullableString and assigns it to the ActivityType field.
func (o *HistoricActivityInstanceDto) SetActivityType(v string) {
	o.ActivityType.Set(&v)
}
// SetActivityTypeNil sets the value for ActivityType to be an explicit nil
func (o *HistoricActivityInstanceDto) SetActivityTypeNil() {
	o.ActivityType.Set(nil)
}

// UnsetActivityType ensures that no value is present for ActivityType, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetActivityType() {
	o.ActivityType.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricActivityInstanceDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricActivityInstanceDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricActivityInstanceDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricActivityInstanceDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricActivityInstanceDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *HistoricActivityInstanceDto) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetAssignee() string {
	if o == nil || IsNil(o.Assignee.Get()) {
		var ret string
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableString and assigns it to the Assignee field.
func (o *HistoricActivityInstanceDto) SetAssignee(v string) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *HistoricActivityInstanceDto) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetCalledProcessInstanceId returns the CalledProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetCalledProcessInstanceId() string {
	if o == nil || IsNil(o.CalledProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CalledProcessInstanceId.Get()
}

// GetCalledProcessInstanceIdOk returns a tuple with the CalledProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetCalledProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalledProcessInstanceId.Get(), o.CalledProcessInstanceId.IsSet()
}

// HasCalledProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasCalledProcessInstanceId() bool {
	if o != nil && o.CalledProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCalledProcessInstanceId gets a reference to the given NullableString and assigns it to the CalledProcessInstanceId field.
func (o *HistoricActivityInstanceDto) SetCalledProcessInstanceId(v string) {
	o.CalledProcessInstanceId.Set(&v)
}
// SetCalledProcessInstanceIdNil sets the value for CalledProcessInstanceId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetCalledProcessInstanceIdNil() {
	o.CalledProcessInstanceId.Set(nil)
}

// UnsetCalledProcessInstanceId ensures that no value is present for CalledProcessInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetCalledProcessInstanceId() {
	o.CalledProcessInstanceId.Unset()
}

// GetCalledCaseInstanceId returns the CalledCaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetCalledCaseInstanceId() string {
	if o == nil || IsNil(o.CalledCaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CalledCaseInstanceId.Get()
}

// GetCalledCaseInstanceIdOk returns a tuple with the CalledCaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetCalledCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalledCaseInstanceId.Get(), o.CalledCaseInstanceId.IsSet()
}

// HasCalledCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasCalledCaseInstanceId() bool {
	if o != nil && o.CalledCaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCalledCaseInstanceId gets a reference to the given NullableString and assigns it to the CalledCaseInstanceId field.
func (o *HistoricActivityInstanceDto) SetCalledCaseInstanceId(v string) {
	o.CalledCaseInstanceId.Set(&v)
}
// SetCalledCaseInstanceIdNil sets the value for CalledCaseInstanceId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetCalledCaseInstanceIdNil() {
	o.CalledCaseInstanceId.Set(nil)
}

// UnsetCalledCaseInstanceId ensures that no value is present for CalledCaseInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetCalledCaseInstanceId() {
	o.CalledCaseInstanceId.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTime and assigns it to the StartTime field.
func (o *HistoricActivityInstanceDto) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *HistoricActivityInstanceDto) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *HistoricActivityInstanceDto) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *HistoricActivityInstanceDto) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetDurationInMillis returns the DurationInMillis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetDurationInMillis() int64 {
	if o == nil || IsNil(o.DurationInMillis.Get()) {
		var ret int64
		return ret
	}
	return *o.DurationInMillis.Get()
}

// GetDurationInMillisOk returns a tuple with the DurationInMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetDurationInMillisOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationInMillis.Get(), o.DurationInMillis.IsSet()
}

// HasDurationInMillis returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasDurationInMillis() bool {
	if o != nil && o.DurationInMillis.IsSet() {
		return true
	}

	return false
}

// SetDurationInMillis gets a reference to the given NullableInt64 and assigns it to the DurationInMillis field.
func (o *HistoricActivityInstanceDto) SetDurationInMillis(v int64) {
	o.DurationInMillis.Set(&v)
}
// SetDurationInMillisNil sets the value for DurationInMillis to be an explicit nil
func (o *HistoricActivityInstanceDto) SetDurationInMillisNil() {
	o.DurationInMillis.Set(nil)
}

// UnsetDurationInMillis ensures that no value is present for DurationInMillis, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetDurationInMillis() {
	o.DurationInMillis.Unset()
}

// GetCanceled returns the Canceled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetCanceled() bool {
	if o == nil || IsNil(o.Canceled.Get()) {
		var ret bool
		return ret
	}
	return *o.Canceled.Get()
}

// GetCanceledOk returns a tuple with the Canceled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetCanceledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Canceled.Get(), o.Canceled.IsSet()
}

// HasCanceled returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasCanceled() bool {
	if o != nil && o.Canceled.IsSet() {
		return true
	}

	return false
}

// SetCanceled gets a reference to the given NullableBool and assigns it to the Canceled field.
func (o *HistoricActivityInstanceDto) SetCanceled(v bool) {
	o.Canceled.Set(&v)
}
// SetCanceledNil sets the value for Canceled to be an explicit nil
func (o *HistoricActivityInstanceDto) SetCanceledNil() {
	o.Canceled.Set(nil)
}

// UnsetCanceled ensures that no value is present for Canceled, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetCanceled() {
	o.Canceled.Unset()
}

// GetCompleteScope returns the CompleteScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetCompleteScope() bool {
	if o == nil || IsNil(o.CompleteScope.Get()) {
		var ret bool
		return ret
	}
	return *o.CompleteScope.Get()
}

// GetCompleteScopeOk returns a tuple with the CompleteScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetCompleteScopeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompleteScope.Get(), o.CompleteScope.IsSet()
}

// HasCompleteScope returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasCompleteScope() bool {
	if o != nil && o.CompleteScope.IsSet() {
		return true
	}

	return false
}

// SetCompleteScope gets a reference to the given NullableBool and assigns it to the CompleteScope field.
func (o *HistoricActivityInstanceDto) SetCompleteScope(v bool) {
	o.CompleteScope.Set(&v)
}
// SetCompleteScopeNil sets the value for CompleteScope to be an explicit nil
func (o *HistoricActivityInstanceDto) SetCompleteScopeNil() {
	o.CompleteScope.Set(nil)
}

// UnsetCompleteScope ensures that no value is present for CompleteScope, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetCompleteScope() {
	o.CompleteScope.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *HistoricActivityInstanceDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricActivityInstanceDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricActivityInstanceDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricActivityInstanceDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricActivityInstanceDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

func (o HistoricActivityInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricActivityInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ParentActivityInstanceId.IsSet() {
		toSerialize["parentActivityInstanceId"] = o.ParentActivityInstanceId.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.ActivityName.IsSet() {
		toSerialize["activityName"] = o.ActivityName.Get()
	}
	if o.ActivityType.IsSet() {
		toSerialize["activityType"] = o.ActivityType.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if o.CalledProcessInstanceId.IsSet() {
		toSerialize["calledProcessInstanceId"] = o.CalledProcessInstanceId.Get()
	}
	if o.CalledCaseInstanceId.IsSet() {
		toSerialize["calledCaseInstanceId"] = o.CalledCaseInstanceId.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.DurationInMillis.IsSet() {
		toSerialize["durationInMillis"] = o.DurationInMillis.Get()
	}
	if o.Canceled.IsSet() {
		toSerialize["canceled"] = o.Canceled.Get()
	}
	if o.CompleteScope.IsSet() {
		toSerialize["completeScope"] = o.CompleteScope.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	return toSerialize, nil
}

type NullableHistoricActivityInstanceDto struct {
	value *HistoricActivityInstanceDto
	isSet bool
}

func (v NullableHistoricActivityInstanceDto) Get() *HistoricActivityInstanceDto {
	return v.value
}

func (v *NullableHistoricActivityInstanceDto) Set(val *HistoricActivityInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricActivityInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricActivityInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricActivityInstanceDto(val *HistoricActivityInstanceDto) *NullableHistoricActivityInstanceDto {
	return &NullableHistoricActivityInstanceDto{value: val, isSet: true}
}

func (v NullableHistoricActivityInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricActivityInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


