/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the CleanableHistoricProcessInstanceReportResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CleanableHistoricProcessInstanceReportResultDto{}

// CleanableHistoricProcessInstanceReportResultDto struct for CleanableHistoricProcessInstanceReportResultDto
type CleanableHistoricProcessInstanceReportResultDto struct {
	// The id of the process definition.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The key of the process definition.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The name of the process definition.
	ProcessDefinitionName NullableString `json:"processDefinitionName,omitempty"`
	// The version of the process definition.
	ProcessDefinitionVersion NullableInt32 `json:"processDefinitionVersion,omitempty"`
	// The history time to live of the process definition.
	HistoryTimeToLive NullableInt32 `json:"historyTimeToLive,omitempty"`
	// The count of the finished historic process instances.
	FinishedProcessInstanceCount NullableInt64 `json:"finishedProcessInstanceCount,omitempty"`
	// The count of the cleanable historic process instances, referring to history time to live.
	CleanableProcessInstanceCount NullableInt64 `json:"cleanableProcessInstanceCount,omitempty"`
	// The tenant id of the process definition.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewCleanableHistoricProcessInstanceReportResultDto instantiates a new CleanableHistoricProcessInstanceReportResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCleanableHistoricProcessInstanceReportResultDto() *CleanableHistoricProcessInstanceReportResultDto {
	this := CleanableHistoricProcessInstanceReportResultDto{}
	return &this
}

// NewCleanableHistoricProcessInstanceReportResultDtoWithDefaults instantiates a new CleanableHistoricProcessInstanceReportResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanableHistoricProcessInstanceReportResultDtoWithDefaults() *CleanableHistoricProcessInstanceReportResultDto {
	this := CleanableHistoricProcessInstanceReportResultDto{}
	return &this
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionName returns the ProcessDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionName() string {
	if o == nil || IsNil(o.ProcessDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionName.Get()
}

// GetProcessDefinitionNameOk returns a tuple with the ProcessDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionName.Get(), o.ProcessDefinitionName.IsSet()
}

// HasProcessDefinitionName returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasProcessDefinitionName() bool {
	if o != nil && o.ProcessDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionName gets a reference to the given NullableString and assigns it to the ProcessDefinitionName field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionName(v string) {
	o.ProcessDefinitionName.Set(&v)
}
// SetProcessDefinitionNameNil sets the value for ProcessDefinitionName to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionNameNil() {
	o.ProcessDefinitionName.Set(nil)
}

// UnsetProcessDefinitionName ensures that no value is present for ProcessDefinitionName, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetProcessDefinitionName() {
	o.ProcessDefinitionName.Unset()
}

// GetProcessDefinitionVersion returns the ProcessDefinitionVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionVersion() int32 {
	if o == nil || IsNil(o.ProcessDefinitionVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.ProcessDefinitionVersion.Get()
}

// GetProcessDefinitionVersionOk returns a tuple with the ProcessDefinitionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetProcessDefinitionVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionVersion.Get(), o.ProcessDefinitionVersion.IsSet()
}

// HasProcessDefinitionVersion returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasProcessDefinitionVersion() bool {
	if o != nil && o.ProcessDefinitionVersion.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionVersion gets a reference to the given NullableInt32 and assigns it to the ProcessDefinitionVersion field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionVersion(v int32) {
	o.ProcessDefinitionVersion.Set(&v)
}
// SetProcessDefinitionVersionNil sets the value for ProcessDefinitionVersion to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetProcessDefinitionVersionNil() {
	o.ProcessDefinitionVersion.Set(nil)
}

// UnsetProcessDefinitionVersion ensures that no value is present for ProcessDefinitionVersion, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetProcessDefinitionVersion() {
	o.ProcessDefinitionVersion.Unset()
}

// GetHistoryTimeToLive returns the HistoryTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetHistoryTimeToLive() int32 {
	if o == nil || IsNil(o.HistoryTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HistoryTimeToLive.Get()
}

// GetHistoryTimeToLiveOk returns a tuple with the HistoryTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetHistoryTimeToLiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryTimeToLive.Get(), o.HistoryTimeToLive.IsSet()
}

// HasHistoryTimeToLive returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasHistoryTimeToLive() bool {
	if o != nil && o.HistoryTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHistoryTimeToLive gets a reference to the given NullableInt32 and assigns it to the HistoryTimeToLive field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetHistoryTimeToLive(v int32) {
	o.HistoryTimeToLive.Set(&v)
}
// SetHistoryTimeToLiveNil sets the value for HistoryTimeToLive to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetHistoryTimeToLiveNil() {
	o.HistoryTimeToLive.Set(nil)
}

// UnsetHistoryTimeToLive ensures that no value is present for HistoryTimeToLive, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetHistoryTimeToLive() {
	o.HistoryTimeToLive.Unset()
}

// GetFinishedProcessInstanceCount returns the FinishedProcessInstanceCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetFinishedProcessInstanceCount() int64 {
	if o == nil || IsNil(o.FinishedProcessInstanceCount.Get()) {
		var ret int64
		return ret
	}
	return *o.FinishedProcessInstanceCount.Get()
}

// GetFinishedProcessInstanceCountOk returns a tuple with the FinishedProcessInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetFinishedProcessInstanceCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedProcessInstanceCount.Get(), o.FinishedProcessInstanceCount.IsSet()
}

// HasFinishedProcessInstanceCount returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasFinishedProcessInstanceCount() bool {
	if o != nil && o.FinishedProcessInstanceCount.IsSet() {
		return true
	}

	return false
}

// SetFinishedProcessInstanceCount gets a reference to the given NullableInt64 and assigns it to the FinishedProcessInstanceCount field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetFinishedProcessInstanceCount(v int64) {
	o.FinishedProcessInstanceCount.Set(&v)
}
// SetFinishedProcessInstanceCountNil sets the value for FinishedProcessInstanceCount to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetFinishedProcessInstanceCountNil() {
	o.FinishedProcessInstanceCount.Set(nil)
}

// UnsetFinishedProcessInstanceCount ensures that no value is present for FinishedProcessInstanceCount, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetFinishedProcessInstanceCount() {
	o.FinishedProcessInstanceCount.Unset()
}

// GetCleanableProcessInstanceCount returns the CleanableProcessInstanceCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetCleanableProcessInstanceCount() int64 {
	if o == nil || IsNil(o.CleanableProcessInstanceCount.Get()) {
		var ret int64
		return ret
	}
	return *o.CleanableProcessInstanceCount.Get()
}

// GetCleanableProcessInstanceCountOk returns a tuple with the CleanableProcessInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetCleanableProcessInstanceCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CleanableProcessInstanceCount.Get(), o.CleanableProcessInstanceCount.IsSet()
}

// HasCleanableProcessInstanceCount returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasCleanableProcessInstanceCount() bool {
	if o != nil && o.CleanableProcessInstanceCount.IsSet() {
		return true
	}

	return false
}

// SetCleanableProcessInstanceCount gets a reference to the given NullableInt64 and assigns it to the CleanableProcessInstanceCount field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetCleanableProcessInstanceCount(v int64) {
	o.CleanableProcessInstanceCount.Set(&v)
}
// SetCleanableProcessInstanceCountNil sets the value for CleanableProcessInstanceCount to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetCleanableProcessInstanceCountNil() {
	o.CleanableProcessInstanceCount.Set(nil)
}

// UnsetCleanableProcessInstanceCount ensures that no value is present for CleanableProcessInstanceCount, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetCleanableProcessInstanceCount() {
	o.CleanableProcessInstanceCount.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CleanableHistoricProcessInstanceReportResultDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CleanableHistoricProcessInstanceReportResultDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *CleanableHistoricProcessInstanceReportResultDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *CleanableHistoricProcessInstanceReportResultDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *CleanableHistoricProcessInstanceReportResultDto) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o CleanableHistoricProcessInstanceReportResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanableHistoricProcessInstanceReportResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionName.IsSet() {
		toSerialize["processDefinitionName"] = o.ProcessDefinitionName.Get()
	}
	if o.ProcessDefinitionVersion.IsSet() {
		toSerialize["processDefinitionVersion"] = o.ProcessDefinitionVersion.Get()
	}
	if o.HistoryTimeToLive.IsSet() {
		toSerialize["historyTimeToLive"] = o.HistoryTimeToLive.Get()
	}
	if o.FinishedProcessInstanceCount.IsSet() {
		toSerialize["finishedProcessInstanceCount"] = o.FinishedProcessInstanceCount.Get()
	}
	if o.CleanableProcessInstanceCount.IsSet() {
		toSerialize["cleanableProcessInstanceCount"] = o.CleanableProcessInstanceCount.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

type NullableCleanableHistoricProcessInstanceReportResultDto struct {
	value *CleanableHistoricProcessInstanceReportResultDto
	isSet bool
}

func (v NullableCleanableHistoricProcessInstanceReportResultDto) Get() *CleanableHistoricProcessInstanceReportResultDto {
	return v.value
}

func (v *NullableCleanableHistoricProcessInstanceReportResultDto) Set(val *CleanableHistoricProcessInstanceReportResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCleanableHistoricProcessInstanceReportResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanableHistoricProcessInstanceReportResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanableHistoricProcessInstanceReportResultDto(val *CleanableHistoricProcessInstanceReportResultDto) *NullableCleanableHistoricProcessInstanceReportResultDto {
	return &NullableCleanableHistoricProcessInstanceReportResultDto{value: val, isSet: true}
}

func (v NullableCleanableHistoricProcessInstanceReportResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanableHistoricProcessInstanceReportResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


