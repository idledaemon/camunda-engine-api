/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the VariableInstanceQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableInstanceQueryDto{}

// VariableInstanceQueryDto A variable instance query which defines a list of variable instances
type VariableInstanceQueryDto struct {
	// Filter by variable instance name.
	VariableName NullableString `json:"variableName,omitempty"`
	// Filter by the variable instance name. The parameter can include the wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains (`%`name`%`).
	VariableNameLike NullableString `json:"variableNameLike,omitempty"`
	// Only include variable instances which belong to one of the passed  process instance ids.
	ProcessInstanceIdIn []string `json:"processInstanceIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  execution ids.
	ExecutionIdIn []string `json:"executionIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  case instance ids.
	CaseInstanceIdIn []string `json:"caseInstanceIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  case execution ids.
	CaseExecutionIdIn []string `json:"caseExecutionIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  task ids.
	TaskIdIn []string `json:"taskIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  batch ids.
	BatchIdIn []string `json:"batchIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  activity instance ids.
	ActivityInstanceIdIn []string `json:"activityInstanceIdIn,omitempty"`
	// Only include variable instances which belong to one of the passed  tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// An array to only include variable instances that have the certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`
	VariableValues []VariableQueryParameterDto `json:"variableValues,omitempty"`
	// Match all variable names provided in `variableValues` case-insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
	VariableNamesIgnoreCase NullableBool `json:"variableNamesIgnoreCase,omitempty"`
	// Match all variable values provided in `variableValues` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
	VariableValuesIgnoreCase NullableBool `json:"variableValuesIgnoreCase,omitempty"`
	// Only include variable instances which belong to one of passed scope ids.
	VariableScopeIdIn []string `json:"variableScopeIdIn,omitempty"`
	// An array of criteria to sort the result by. Each element of the array is an object that specifies one ordering.                       The position in the array identifies the rank of an ordering, i.e., whether it is primary, secondary, etc.                       Sorting has no effect for `count` endpoints
	Sorting []VariableInstanceQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewVariableInstanceQueryDto instantiates a new VariableInstanceQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableInstanceQueryDto() *VariableInstanceQueryDto {
	this := VariableInstanceQueryDto{}
	return &this
}

// NewVariableInstanceQueryDtoWithDefaults instantiates a new VariableInstanceQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableInstanceQueryDtoWithDefaults() *VariableInstanceQueryDto {
	this := VariableInstanceQueryDto{}
	return &this
}

// GetVariableName returns the VariableName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetVariableName() string {
	if o == nil || IsNil(o.VariableName.Get()) {
		var ret string
		return ret
	}
	return *o.VariableName.Get()
}

// GetVariableNameOk returns a tuple with the VariableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetVariableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableName.Get(), o.VariableName.IsSet()
}

// HasVariableName returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasVariableName() bool {
	if o != nil && o.VariableName.IsSet() {
		return true
	}

	return false
}

// SetVariableName gets a reference to the given NullableString and assigns it to the VariableName field.
func (o *VariableInstanceQueryDto) SetVariableName(v string) {
	o.VariableName.Set(&v)
}
// SetVariableNameNil sets the value for VariableName to be an explicit nil
func (o *VariableInstanceQueryDto) SetVariableNameNil() {
	o.VariableName.Set(nil)
}

// UnsetVariableName ensures that no value is present for VariableName, not even an explicit nil
func (o *VariableInstanceQueryDto) UnsetVariableName() {
	o.VariableName.Unset()
}

// GetVariableNameLike returns the VariableNameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetVariableNameLike() string {
	if o == nil || IsNil(o.VariableNameLike.Get()) {
		var ret string
		return ret
	}
	return *o.VariableNameLike.Get()
}

// GetVariableNameLikeOk returns a tuple with the VariableNameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetVariableNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNameLike.Get(), o.VariableNameLike.IsSet()
}

// HasVariableNameLike returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasVariableNameLike() bool {
	if o != nil && o.VariableNameLike.IsSet() {
		return true
	}

	return false
}

// SetVariableNameLike gets a reference to the given NullableString and assigns it to the VariableNameLike field.
func (o *VariableInstanceQueryDto) SetVariableNameLike(v string) {
	o.VariableNameLike.Set(&v)
}
// SetVariableNameLikeNil sets the value for VariableNameLike to be an explicit nil
func (o *VariableInstanceQueryDto) SetVariableNameLikeNil() {
	o.VariableNameLike.Set(nil)
}

// UnsetVariableNameLike ensures that no value is present for VariableNameLike, not even an explicit nil
func (o *VariableInstanceQueryDto) UnsetVariableNameLike() {
	o.VariableNameLike.Unset()
}

// GetProcessInstanceIdIn returns the ProcessInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetProcessInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIdIn
}

// GetProcessInstanceIdInOk returns a tuple with the ProcessInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetProcessInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIdIn) {
		return nil, false
	}
	return o.ProcessInstanceIdIn, true
}

// HasProcessInstanceIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasProcessInstanceIdIn() bool {
	if o != nil && !IsNil(o.ProcessInstanceIdIn) {
		return true
	}

	return false
}

// SetProcessInstanceIdIn gets a reference to the given []string and assigns it to the ProcessInstanceIdIn field.
func (o *VariableInstanceQueryDto) SetProcessInstanceIdIn(v []string) {
	o.ProcessInstanceIdIn = v
}

// GetExecutionIdIn returns the ExecutionIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetExecutionIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExecutionIdIn
}

// GetExecutionIdInOk returns a tuple with the ExecutionIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetExecutionIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ExecutionIdIn) {
		return nil, false
	}
	return o.ExecutionIdIn, true
}

// HasExecutionIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasExecutionIdIn() bool {
	if o != nil && !IsNil(o.ExecutionIdIn) {
		return true
	}

	return false
}

// SetExecutionIdIn gets a reference to the given []string and assigns it to the ExecutionIdIn field.
func (o *VariableInstanceQueryDto) SetExecutionIdIn(v []string) {
	o.ExecutionIdIn = v
}

// GetCaseInstanceIdIn returns the CaseInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetCaseInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CaseInstanceIdIn
}

// GetCaseInstanceIdInOk returns a tuple with the CaseInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetCaseInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.CaseInstanceIdIn) {
		return nil, false
	}
	return o.CaseInstanceIdIn, true
}

// HasCaseInstanceIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasCaseInstanceIdIn() bool {
	if o != nil && !IsNil(o.CaseInstanceIdIn) {
		return true
	}

	return false
}

// SetCaseInstanceIdIn gets a reference to the given []string and assigns it to the CaseInstanceIdIn field.
func (o *VariableInstanceQueryDto) SetCaseInstanceIdIn(v []string) {
	o.CaseInstanceIdIn = v
}

// GetCaseExecutionIdIn returns the CaseExecutionIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetCaseExecutionIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CaseExecutionIdIn
}

// GetCaseExecutionIdInOk returns a tuple with the CaseExecutionIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetCaseExecutionIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.CaseExecutionIdIn) {
		return nil, false
	}
	return o.CaseExecutionIdIn, true
}

// HasCaseExecutionIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasCaseExecutionIdIn() bool {
	if o != nil && !IsNil(o.CaseExecutionIdIn) {
		return true
	}

	return false
}

// SetCaseExecutionIdIn gets a reference to the given []string and assigns it to the CaseExecutionIdIn field.
func (o *VariableInstanceQueryDto) SetCaseExecutionIdIn(v []string) {
	o.CaseExecutionIdIn = v
}

// GetTaskIdIn returns the TaskIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetTaskIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TaskIdIn
}

// GetTaskIdInOk returns a tuple with the TaskIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetTaskIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TaskIdIn) {
		return nil, false
	}
	return o.TaskIdIn, true
}

// HasTaskIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasTaskIdIn() bool {
	if o != nil && !IsNil(o.TaskIdIn) {
		return true
	}

	return false
}

// SetTaskIdIn gets a reference to the given []string and assigns it to the TaskIdIn field.
func (o *VariableInstanceQueryDto) SetTaskIdIn(v []string) {
	o.TaskIdIn = v
}

// GetBatchIdIn returns the BatchIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetBatchIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BatchIdIn
}

// GetBatchIdInOk returns a tuple with the BatchIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetBatchIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.BatchIdIn) {
		return nil, false
	}
	return o.BatchIdIn, true
}

// HasBatchIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasBatchIdIn() bool {
	if o != nil && !IsNil(o.BatchIdIn) {
		return true
	}

	return false
}

// SetBatchIdIn gets a reference to the given []string and assigns it to the BatchIdIn field.
func (o *VariableInstanceQueryDto) SetBatchIdIn(v []string) {
	o.BatchIdIn = v
}

// GetActivityInstanceIdIn returns the ActivityInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetActivityInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActivityInstanceIdIn
}

// GetActivityInstanceIdInOk returns a tuple with the ActivityInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetActivityInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActivityInstanceIdIn) {
		return nil, false
	}
	return o.ActivityInstanceIdIn, true
}

// HasActivityInstanceIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasActivityInstanceIdIn() bool {
	if o != nil && !IsNil(o.ActivityInstanceIdIn) {
		return true
	}

	return false
}

// SetActivityInstanceIdIn gets a reference to the given []string and assigns it to the ActivityInstanceIdIn field.
func (o *VariableInstanceQueryDto) SetActivityInstanceIdIn(v []string) {
	o.ActivityInstanceIdIn = v
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *VariableInstanceQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetVariableValues returns the VariableValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetVariableValues() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.VariableValues
}

// GetVariableValuesOk returns a tuple with the VariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetVariableValuesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.VariableValues) {
		return nil, false
	}
	return o.VariableValues, true
}

// HasVariableValues returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasVariableValues() bool {
	if o != nil && !IsNil(o.VariableValues) {
		return true
	}

	return false
}

// SetVariableValues gets a reference to the given []VariableQueryParameterDto and assigns it to the VariableValues field.
func (o *VariableInstanceQueryDto) SetVariableValues(v []VariableQueryParameterDto) {
	o.VariableValues = v
}

// GetVariableNamesIgnoreCase returns the VariableNamesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetVariableNamesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableNamesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableNamesIgnoreCase.Get()
}

// GetVariableNamesIgnoreCaseOk returns a tuple with the VariableNamesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetVariableNamesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNamesIgnoreCase.Get(), o.VariableNamesIgnoreCase.IsSet()
}

// HasVariableNamesIgnoreCase returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasVariableNamesIgnoreCase() bool {
	if o != nil && o.VariableNamesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableNamesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableNamesIgnoreCase field.
func (o *VariableInstanceQueryDto) SetVariableNamesIgnoreCase(v bool) {
	o.VariableNamesIgnoreCase.Set(&v)
}
// SetVariableNamesIgnoreCaseNil sets the value for VariableNamesIgnoreCase to be an explicit nil
func (o *VariableInstanceQueryDto) SetVariableNamesIgnoreCaseNil() {
	o.VariableNamesIgnoreCase.Set(nil)
}

// UnsetVariableNamesIgnoreCase ensures that no value is present for VariableNamesIgnoreCase, not even an explicit nil
func (o *VariableInstanceQueryDto) UnsetVariableNamesIgnoreCase() {
	o.VariableNamesIgnoreCase.Unset()
}

// GetVariableValuesIgnoreCase returns the VariableValuesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetVariableValuesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableValuesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableValuesIgnoreCase.Get()
}

// GetVariableValuesIgnoreCaseOk returns a tuple with the VariableValuesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetVariableValuesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValuesIgnoreCase.Get(), o.VariableValuesIgnoreCase.IsSet()
}

// HasVariableValuesIgnoreCase returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasVariableValuesIgnoreCase() bool {
	if o != nil && o.VariableValuesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableValuesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableValuesIgnoreCase field.
func (o *VariableInstanceQueryDto) SetVariableValuesIgnoreCase(v bool) {
	o.VariableValuesIgnoreCase.Set(&v)
}
// SetVariableValuesIgnoreCaseNil sets the value for VariableValuesIgnoreCase to be an explicit nil
func (o *VariableInstanceQueryDto) SetVariableValuesIgnoreCaseNil() {
	o.VariableValuesIgnoreCase.Set(nil)
}

// UnsetVariableValuesIgnoreCase ensures that no value is present for VariableValuesIgnoreCase, not even an explicit nil
func (o *VariableInstanceQueryDto) UnsetVariableValuesIgnoreCase() {
	o.VariableValuesIgnoreCase.Unset()
}

// GetVariableScopeIdIn returns the VariableScopeIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetVariableScopeIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VariableScopeIdIn
}

// GetVariableScopeIdInOk returns a tuple with the VariableScopeIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetVariableScopeIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.VariableScopeIdIn) {
		return nil, false
	}
	return o.VariableScopeIdIn, true
}

// HasVariableScopeIdIn returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasVariableScopeIdIn() bool {
	if o != nil && !IsNil(o.VariableScopeIdIn) {
		return true
	}

	return false
}

// SetVariableScopeIdIn gets a reference to the given []string and assigns it to the VariableScopeIdIn field.
func (o *VariableInstanceQueryDto) SetVariableScopeIdIn(v []string) {
	o.VariableScopeIdIn = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VariableInstanceQueryDto) GetSorting() []VariableInstanceQueryDtoSortingInner {
	if o == nil {
		var ret []VariableInstanceQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VariableInstanceQueryDto) GetSortingOk() ([]VariableInstanceQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *VariableInstanceQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []VariableInstanceQueryDtoSortingInner and assigns it to the Sorting field.
func (o *VariableInstanceQueryDto) SetSorting(v []VariableInstanceQueryDtoSortingInner) {
	o.Sorting = v
}

func (o VariableInstanceQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableInstanceQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.VariableName.IsSet() {
		toSerialize["variableName"] = o.VariableName.Get()
	}
	if o.VariableNameLike.IsSet() {
		toSerialize["variableNameLike"] = o.VariableNameLike.Get()
	}
	if o.ProcessInstanceIdIn != nil {
		toSerialize["processInstanceIdIn"] = o.ProcessInstanceIdIn
	}
	if o.ExecutionIdIn != nil {
		toSerialize["executionIdIn"] = o.ExecutionIdIn
	}
	if o.CaseInstanceIdIn != nil {
		toSerialize["caseInstanceIdIn"] = o.CaseInstanceIdIn
	}
	if o.CaseExecutionIdIn != nil {
		toSerialize["caseExecutionIdIn"] = o.CaseExecutionIdIn
	}
	if o.TaskIdIn != nil {
		toSerialize["taskIdIn"] = o.TaskIdIn
	}
	if o.BatchIdIn != nil {
		toSerialize["batchIdIn"] = o.BatchIdIn
	}
	if o.ActivityInstanceIdIn != nil {
		toSerialize["activityInstanceIdIn"] = o.ActivityInstanceIdIn
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.VariableValues != nil {
		toSerialize["variableValues"] = o.VariableValues
	}
	if o.VariableNamesIgnoreCase.IsSet() {
		toSerialize["variableNamesIgnoreCase"] = o.VariableNamesIgnoreCase.Get()
	}
	if o.VariableValuesIgnoreCase.IsSet() {
		toSerialize["variableValuesIgnoreCase"] = o.VariableValuesIgnoreCase.Get()
	}
	if o.VariableScopeIdIn != nil {
		toSerialize["variableScopeIdIn"] = o.VariableScopeIdIn
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableVariableInstanceQueryDto struct {
	value *VariableInstanceQueryDto
	isSet bool
}

func (v NullableVariableInstanceQueryDto) Get() *VariableInstanceQueryDto {
	return v.value
}

func (v *NullableVariableInstanceQueryDto) Set(val *VariableInstanceQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableInstanceQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableInstanceQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableInstanceQueryDto(val *VariableInstanceQueryDto) *NullableVariableInstanceQueryDto {
	return &NullableVariableInstanceQueryDto{value: val, isSet: true}
}

func (v NullableVariableInstanceQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableInstanceQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


