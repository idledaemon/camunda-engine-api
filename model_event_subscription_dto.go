/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the EventSubscriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSubscriptionDto{}

// EventSubscriptionDto struct for EventSubscriptionDto
type EventSubscriptionDto struct {
	// The id of the event subscription.
	Id NullableString `json:"id,omitempty"`
	// The type of the event subscription.
	EventType NullableString `json:"eventType,omitempty"`
	// The name of the event this subscription belongs to as defined in the process model.
	EventName NullableString `json:"eventName,omitempty"`
	// The execution that is subscribed on the referenced event.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// The process instance this subscription belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The identifier of the activity that this event subscription belongs to. This could for example be the id of a receive task.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The time this event subscription was created.
	CreatedDate NullableTime `json:"createdDate,omitempty"`
	// The id of the tenant this event subscription belongs to. Can be `null` if the subscription belongs to no single tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewEventSubscriptionDto instantiates a new EventSubscriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSubscriptionDto() *EventSubscriptionDto {
	this := EventSubscriptionDto{}
	return &this
}

// NewEventSubscriptionDtoWithDefaults instantiates a new EventSubscriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSubscriptionDtoWithDefaults() *EventSubscriptionDto {
	this := EventSubscriptionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *EventSubscriptionDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *EventSubscriptionDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *EventSubscriptionDto) UnsetId() {
	o.Id.Unset()
}

// GetEventType returns the EventType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetEventType() string {
	if o == nil || IsNil(o.EventType.Get()) {
		var ret string
		return ret
	}
	return *o.EventType.Get()
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventType.Get(), o.EventType.IsSet()
}

// HasEventType returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasEventType() bool {
	if o != nil && o.EventType.IsSet() {
		return true
	}

	return false
}

// SetEventType gets a reference to the given NullableString and assigns it to the EventType field.
func (o *EventSubscriptionDto) SetEventType(v string) {
	o.EventType.Set(&v)
}
// SetEventTypeNil sets the value for EventType to be an explicit nil
func (o *EventSubscriptionDto) SetEventTypeNil() {
	o.EventType.Set(nil)
}

// UnsetEventType ensures that no value is present for EventType, not even an explicit nil
func (o *EventSubscriptionDto) UnsetEventType() {
	o.EventType.Unset()
}

// GetEventName returns the EventName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetEventName() string {
	if o == nil || IsNil(o.EventName.Get()) {
		var ret string
		return ret
	}
	return *o.EventName.Get()
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventName.Get(), o.EventName.IsSet()
}

// HasEventName returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasEventName() bool {
	if o != nil && o.EventName.IsSet() {
		return true
	}

	return false
}

// SetEventName gets a reference to the given NullableString and assigns it to the EventName field.
func (o *EventSubscriptionDto) SetEventName(v string) {
	o.EventName.Set(&v)
}
// SetEventNameNil sets the value for EventName to be an explicit nil
func (o *EventSubscriptionDto) SetEventNameNil() {
	o.EventName.Set(nil)
}

// UnsetEventName ensures that no value is present for EventName, not even an explicit nil
func (o *EventSubscriptionDto) UnsetEventName() {
	o.EventName.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *EventSubscriptionDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *EventSubscriptionDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *EventSubscriptionDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *EventSubscriptionDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *EventSubscriptionDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *EventSubscriptionDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *EventSubscriptionDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *EventSubscriptionDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *EventSubscriptionDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate.Get()
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedDate.Get(), o.CreatedDate.IsSet()
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasCreatedDate() bool {
	if o != nil && o.CreatedDate.IsSet() {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given NullableTime and assigns it to the CreatedDate field.
func (o *EventSubscriptionDto) SetCreatedDate(v time.Time) {
	o.CreatedDate.Set(&v)
}
// SetCreatedDateNil sets the value for CreatedDate to be an explicit nil
func (o *EventSubscriptionDto) SetCreatedDateNil() {
	o.CreatedDate.Set(nil)
}

// UnsetCreatedDate ensures that no value is present for CreatedDate, not even an explicit nil
func (o *EventSubscriptionDto) UnsetCreatedDate() {
	o.CreatedDate.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSubscriptionDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSubscriptionDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *EventSubscriptionDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *EventSubscriptionDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *EventSubscriptionDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *EventSubscriptionDto) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o EventSubscriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSubscriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.EventType.IsSet() {
		toSerialize["eventType"] = o.EventType.Get()
	}
	if o.EventName.IsSet() {
		toSerialize["eventName"] = o.EventName.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.CreatedDate.IsSet() {
		toSerialize["createdDate"] = o.CreatedDate.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

type NullableEventSubscriptionDto struct {
	value *EventSubscriptionDto
	isSet bool
}

func (v NullableEventSubscriptionDto) Get() *EventSubscriptionDto {
	return v.value
}

func (v *NullableEventSubscriptionDto) Set(val *EventSubscriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSubscriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSubscriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSubscriptionDto(val *EventSubscriptionDto) *NullableEventSubscriptionDto {
	return &NullableEventSubscriptionDto{value: val, isSet: true}
}

func (v NullableEventSubscriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSubscriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


