/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricProcessInstanceQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricProcessInstanceQueryDto{}

// HistoricProcessInstanceQueryDto A historic process instance query which defines a group of historic process instances
type HistoricProcessInstanceQueryDto struct {
	// Filter by process instance id.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Filter by process instance ids. Must be a JSON array of `Strings`.
	ProcessInstanceIds []string `json:"processInstanceIds,omitempty"`
	// Filter by the process definition the instances run on.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Filter by the key of the process definition the instances run on.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of `Strings`.
	ProcessDefinitionKeyIn []string `json:"processDefinitionKeyIn,omitempty"`
	// Filter by the name of the process definition the instances run on.
	ProcessDefinitionName NullableString `json:"processDefinitionName,omitempty"`
	// Filter by process definition names that the parameter is a substring of.
	ProcessDefinitionNameLike NullableString `json:"processDefinitionNameLike,omitempty"`
	// Exclude instances that belong to a set of process definitions. Must be a JSON array of `Strings`.
	ProcessDefinitionKeyNotIn []string `json:"processDefinitionKeyNotIn,omitempty"`
	// Filter by process instance business key.
	ProcessInstanceBusinessKey NullableString `json:"processInstanceBusinessKey,omitempty"`
	// Filter by a list of business keys. A process instance must have one of the given business keys. Must be a JSON array of `Strings`
	ProcessInstanceBusinessKeyIn []string `json:"processInstanceBusinessKeyIn,omitempty"`
	// Filter by process instance business key that the parameter is a substring of.
	ProcessInstanceBusinessKeyLike NullableString `json:"processInstanceBusinessKeyLike,omitempty"`
	// Restrict the query to all process instances that are top level process instances.
	RootProcessInstances NullableBool `json:"rootProcessInstances,omitempty"`
	// Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be `true`, as `false` is the default behavior.
	Finished NullableBool `json:"finished,omitempty"`
	// Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior.
	Unfinished NullableBool `json:"unfinished,omitempty"`
	// Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior.
	WithIncidents NullableBool `json:"withIncidents,omitempty"`
	// Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior.
	WithRootIncidents NullableBool `json:"withRootIncidents,omitempty"`
	// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
	IncidentType NullableString `json:"incidentType,omitempty"`
	// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
	IncidentStatus NullableString `json:"incidentStatus,omitempty"`
	// Filter by the incident message. Exact match.
	IncidentMessage NullableString `json:"incidentMessage,omitempty"`
	// Filter by the incident message that the parameter is a substring of.
	IncidentMessageLike NullableString `json:"incidentMessageLike,omitempty"`
	// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartedBefore NullableTime `json:"startedBefore,omitempty"`
	// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartedAfter NullableTime `json:"startedAfter,omitempty"`
	// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	FinishedBefore NullableTime `json:"finishedBefore,omitempty"`
	// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	FinishedAfter NullableTime `json:"finishedAfter,omitempty"`
	// Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutedActivityAfter NullableTime `json:"executedActivityAfter,omitempty"`
	// Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutedActivityBefore NullableTime `json:"executedActivityBefore,omitempty"`
	// Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutedJobAfter NullableTime `json:"executedJobAfter,omitempty"`
	// Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutedJobBefore NullableTime `json:"executedJobBefore,omitempty"`
	// Only include process instances that were started by the given user.
	StartedBy NullableString `json:"startedBy,omitempty"`
	// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
	SuperProcessInstanceId NullableString `json:"superProcessInstanceId,omitempty"`
	// Restrict query to one process instance that has a sub process instance with the given id.
	SubProcessInstanceId NullableString `json:"subProcessInstanceId,omitempty"`
	// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
	SuperCaseInstanceId NullableString `json:"superCaseInstanceId,omitempty"`
	// Restrict query to one process instance that has a sub case instance with the given id.
	SubCaseInstanceId NullableString `json:"subCaseInstanceId,omitempty"`
	// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of `Strings`
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Restrict to instances that executed an activity with one of given ids. Must be a JSON array of `Strings`
	ExecutedActivityIdIn []string `json:"executedActivityIdIn,omitempty"`
	// Restrict to instances that have an active activity with one of given ids. Must be a JSON array of `Strings`
	ActiveActivityIdIn []string `json:"activeActivityIdIn,omitempty"`
	// Restrict to instances that are active.
	Active NullableBool `json:"active,omitempty"`
	// Restrict to instances that are suspended.
	Suspended NullableBool `json:"suspended,omitempty"`
	// Restrict to instances that are completed.
	Completed NullableBool `json:"completed,omitempty"`
	// Restrict to instances that are externallyTerminated.
	ExternallyTerminated NullableBool `json:"externallyTerminated,omitempty"`
	// Restrict to instances that are internallyTerminated.
	InternallyTerminated NullableBool `json:"internallyTerminated,omitempty"`
	// A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name, `operator` (`String`) is the comparison operator to be used and `value` the variable value.  Value may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. 
	Variables []VariableQueryParameterDto `json:"variables,omitempty"`
	// Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal.
	VariableNamesIgnoreCase NullableBool `json:"variableNamesIgnoreCase,omitempty"`
	// Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal.
	VariableValuesIgnoreCase NullableBool `json:"variableValuesIgnoreCase,omitempty"`
	// A JSON array of nested historic process instance queries with OR semantics.  A process instance matches a nested query if it fulfills at least one of the query's predicates.  With multiple nested queries, a process instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All process instance query properties can be used except for: `sorting`  See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
	OrQueries []HistoricProcessInstanceQueryDto `json:"orQueries,omitempty"`
	// Apply sorting of the result
	Sorting []HistoricProcessInstanceQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewHistoricProcessInstanceQueryDto instantiates a new HistoricProcessInstanceQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricProcessInstanceQueryDto() *HistoricProcessInstanceQueryDto {
	this := HistoricProcessInstanceQueryDto{}
	return &this
}

// NewHistoricProcessInstanceQueryDtoWithDefaults instantiates a new HistoricProcessInstanceQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricProcessInstanceQueryDtoWithDefaults() *HistoricProcessInstanceQueryDto {
	this := HistoricProcessInstanceQueryDto{}
	return &this
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessInstanceIds returns the ProcessInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIds
}

// GetProcessInstanceIdsOk returns a tuple with the ProcessInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIds) {
		return nil, false
	}
	return o.ProcessInstanceIds, true
}

// HasProcessInstanceIds returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessInstanceIds() bool {
	if o != nil && !IsNil(o.ProcessInstanceIds) {
		return true
	}

	return false
}

// SetProcessInstanceIds gets a reference to the given []string and assigns it to the ProcessInstanceIds field.
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceIds(v []string) {
	o.ProcessInstanceIds = v
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionKeyIn returns the ProcessDefinitionKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessDefinitionKeyIn
}

// GetProcessDefinitionKeyInOk returns a tuple with the ProcessDefinitionKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessDefinitionKeyIn) {
		return nil, false
	}
	return o.ProcessDefinitionKeyIn, true
}

// HasProcessDefinitionKeyIn returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessDefinitionKeyIn() bool {
	if o != nil && !IsNil(o.ProcessDefinitionKeyIn) {
		return true
	}

	return false
}

// SetProcessDefinitionKeyIn gets a reference to the given []string and assigns it to the ProcessDefinitionKeyIn field.
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionKeyIn(v []string) {
	o.ProcessDefinitionKeyIn = v
}

// GetProcessDefinitionName returns the ProcessDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionName() string {
	if o == nil || IsNil(o.ProcessDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionName.Get()
}

// GetProcessDefinitionNameOk returns a tuple with the ProcessDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionName.Get(), o.ProcessDefinitionName.IsSet()
}

// HasProcessDefinitionName returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessDefinitionName() bool {
	if o != nil && o.ProcessDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionName gets a reference to the given NullableString and assigns it to the ProcessDefinitionName field.
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionName(v string) {
	o.ProcessDefinitionName.Set(&v)
}
// SetProcessDefinitionNameNil sets the value for ProcessDefinitionName to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionNameNil() {
	o.ProcessDefinitionName.Set(nil)
}

// UnsetProcessDefinitionName ensures that no value is present for ProcessDefinitionName, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessDefinitionName() {
	o.ProcessDefinitionName.Unset()
}

// GetProcessDefinitionNameLike returns the ProcessDefinitionNameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionNameLike() string {
	if o == nil || IsNil(o.ProcessDefinitionNameLike.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionNameLike.Get()
}

// GetProcessDefinitionNameLikeOk returns a tuple with the ProcessDefinitionNameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionNameLike.Get(), o.ProcessDefinitionNameLike.IsSet()
}

// HasProcessDefinitionNameLike returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessDefinitionNameLike() bool {
	if o != nil && o.ProcessDefinitionNameLike.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionNameLike gets a reference to the given NullableString and assigns it to the ProcessDefinitionNameLike field.
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionNameLike(v string) {
	o.ProcessDefinitionNameLike.Set(&v)
}
// SetProcessDefinitionNameLikeNil sets the value for ProcessDefinitionNameLike to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionNameLikeNil() {
	o.ProcessDefinitionNameLike.Set(nil)
}

// UnsetProcessDefinitionNameLike ensures that no value is present for ProcessDefinitionNameLike, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessDefinitionNameLike() {
	o.ProcessDefinitionNameLike.Unset()
}

// GetProcessDefinitionKeyNotIn returns the ProcessDefinitionKeyNotIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionKeyNotIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessDefinitionKeyNotIn
}

// GetProcessDefinitionKeyNotInOk returns a tuple with the ProcessDefinitionKeyNotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessDefinitionKeyNotInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessDefinitionKeyNotIn) {
		return nil, false
	}
	return o.ProcessDefinitionKeyNotIn, true
}

// HasProcessDefinitionKeyNotIn returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessDefinitionKeyNotIn() bool {
	if o != nil && !IsNil(o.ProcessDefinitionKeyNotIn) {
		return true
	}

	return false
}

// SetProcessDefinitionKeyNotIn gets a reference to the given []string and assigns it to the ProcessDefinitionKeyNotIn field.
func (o *HistoricProcessInstanceQueryDto) SetProcessDefinitionKeyNotIn(v []string) {
	o.ProcessDefinitionKeyNotIn = v
}

// GetProcessInstanceBusinessKey returns the ProcessInstanceBusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceBusinessKey() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKey.Get()
}

// GetProcessInstanceBusinessKeyOk returns a tuple with the ProcessInstanceBusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKey.Get(), o.ProcessInstanceBusinessKey.IsSet()
}

// HasProcessInstanceBusinessKey returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessInstanceBusinessKey() bool {
	if o != nil && o.ProcessInstanceBusinessKey.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKey gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKey field.
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceBusinessKey(v string) {
	o.ProcessInstanceBusinessKey.Set(&v)
}
// SetProcessInstanceBusinessKeyNil sets the value for ProcessInstanceBusinessKey to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceBusinessKeyNil() {
	o.ProcessInstanceBusinessKey.Set(nil)
}

// UnsetProcessInstanceBusinessKey ensures that no value is present for ProcessInstanceBusinessKey, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessInstanceBusinessKey() {
	o.ProcessInstanceBusinessKey.Unset()
}

// GetProcessInstanceBusinessKeyIn returns the ProcessInstanceBusinessKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceBusinessKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceBusinessKeyIn
}

// GetProcessInstanceBusinessKeyInOk returns a tuple with the ProcessInstanceBusinessKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceBusinessKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyIn) {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyIn, true
}

// HasProcessInstanceBusinessKeyIn returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessInstanceBusinessKeyIn() bool {
	if o != nil && !IsNil(o.ProcessInstanceBusinessKeyIn) {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyIn gets a reference to the given []string and assigns it to the ProcessInstanceBusinessKeyIn field.
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceBusinessKeyIn(v []string) {
	o.ProcessInstanceBusinessKeyIn = v
}

// GetProcessInstanceBusinessKeyLike returns the ProcessInstanceBusinessKeyLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceBusinessKeyLike() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyLike.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKeyLike.Get()
}

// GetProcessInstanceBusinessKeyLikeOk returns a tuple with the ProcessInstanceBusinessKeyLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetProcessInstanceBusinessKeyLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyLike.Get(), o.ProcessInstanceBusinessKeyLike.IsSet()
}

// HasProcessInstanceBusinessKeyLike returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasProcessInstanceBusinessKeyLike() bool {
	if o != nil && o.ProcessInstanceBusinessKeyLike.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyLike gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKeyLike field.
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceBusinessKeyLike(v string) {
	o.ProcessInstanceBusinessKeyLike.Set(&v)
}
// SetProcessInstanceBusinessKeyLikeNil sets the value for ProcessInstanceBusinessKeyLike to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetProcessInstanceBusinessKeyLikeNil() {
	o.ProcessInstanceBusinessKeyLike.Set(nil)
}

// UnsetProcessInstanceBusinessKeyLike ensures that no value is present for ProcessInstanceBusinessKeyLike, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetProcessInstanceBusinessKeyLike() {
	o.ProcessInstanceBusinessKeyLike.Unset()
}

// GetRootProcessInstances returns the RootProcessInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetRootProcessInstances() bool {
	if o == nil || IsNil(o.RootProcessInstances.Get()) {
		var ret bool
		return ret
	}
	return *o.RootProcessInstances.Get()
}

// GetRootProcessInstancesOk returns a tuple with the RootProcessInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetRootProcessInstancesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstances.Get(), o.RootProcessInstances.IsSet()
}

// HasRootProcessInstances returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasRootProcessInstances() bool {
	if o != nil && o.RootProcessInstances.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstances gets a reference to the given NullableBool and assigns it to the RootProcessInstances field.
func (o *HistoricProcessInstanceQueryDto) SetRootProcessInstances(v bool) {
	o.RootProcessInstances.Set(&v)
}
// SetRootProcessInstancesNil sets the value for RootProcessInstances to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetRootProcessInstancesNil() {
	o.RootProcessInstances.Set(nil)
}

// UnsetRootProcessInstances ensures that no value is present for RootProcessInstances, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetRootProcessInstances() {
	o.RootProcessInstances.Unset()
}

// GetFinished returns the Finished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetFinished() bool {
	if o == nil || IsNil(o.Finished.Get()) {
		var ret bool
		return ret
	}
	return *o.Finished.Get()
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finished.Get(), o.Finished.IsSet()
}

// HasFinished returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasFinished() bool {
	if o != nil && o.Finished.IsSet() {
		return true
	}

	return false
}

// SetFinished gets a reference to the given NullableBool and assigns it to the Finished field.
func (o *HistoricProcessInstanceQueryDto) SetFinished(v bool) {
	o.Finished.Set(&v)
}
// SetFinishedNil sets the value for Finished to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetFinishedNil() {
	o.Finished.Set(nil)
}

// UnsetFinished ensures that no value is present for Finished, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetFinished() {
	o.Finished.Unset()
}

// GetUnfinished returns the Unfinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetUnfinished() bool {
	if o == nil || IsNil(o.Unfinished.Get()) {
		var ret bool
		return ret
	}
	return *o.Unfinished.Get()
}

// GetUnfinishedOk returns a tuple with the Unfinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetUnfinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unfinished.Get(), o.Unfinished.IsSet()
}

// HasUnfinished returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasUnfinished() bool {
	if o != nil && o.Unfinished.IsSet() {
		return true
	}

	return false
}

// SetUnfinished gets a reference to the given NullableBool and assigns it to the Unfinished field.
func (o *HistoricProcessInstanceQueryDto) SetUnfinished(v bool) {
	o.Unfinished.Set(&v)
}
// SetUnfinishedNil sets the value for Unfinished to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetUnfinishedNil() {
	o.Unfinished.Set(nil)
}

// UnsetUnfinished ensures that no value is present for Unfinished, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetUnfinished() {
	o.Unfinished.Unset()
}

// GetWithIncidents returns the WithIncidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetWithIncidents() bool {
	if o == nil || IsNil(o.WithIncidents.Get()) {
		var ret bool
		return ret
	}
	return *o.WithIncidents.Get()
}

// GetWithIncidentsOk returns a tuple with the WithIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetWithIncidentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithIncidents.Get(), o.WithIncidents.IsSet()
}

// HasWithIncidents returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasWithIncidents() bool {
	if o != nil && o.WithIncidents.IsSet() {
		return true
	}

	return false
}

// SetWithIncidents gets a reference to the given NullableBool and assigns it to the WithIncidents field.
func (o *HistoricProcessInstanceQueryDto) SetWithIncidents(v bool) {
	o.WithIncidents.Set(&v)
}
// SetWithIncidentsNil sets the value for WithIncidents to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetWithIncidentsNil() {
	o.WithIncidents.Set(nil)
}

// UnsetWithIncidents ensures that no value is present for WithIncidents, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetWithIncidents() {
	o.WithIncidents.Unset()
}

// GetWithRootIncidents returns the WithRootIncidents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetWithRootIncidents() bool {
	if o == nil || IsNil(o.WithRootIncidents.Get()) {
		var ret bool
		return ret
	}
	return *o.WithRootIncidents.Get()
}

// GetWithRootIncidentsOk returns a tuple with the WithRootIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetWithRootIncidentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithRootIncidents.Get(), o.WithRootIncidents.IsSet()
}

// HasWithRootIncidents returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasWithRootIncidents() bool {
	if o != nil && o.WithRootIncidents.IsSet() {
		return true
	}

	return false
}

// SetWithRootIncidents gets a reference to the given NullableBool and assigns it to the WithRootIncidents field.
func (o *HistoricProcessInstanceQueryDto) SetWithRootIncidents(v bool) {
	o.WithRootIncidents.Set(&v)
}
// SetWithRootIncidentsNil sets the value for WithRootIncidents to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetWithRootIncidentsNil() {
	o.WithRootIncidents.Set(nil)
}

// UnsetWithRootIncidents ensures that no value is present for WithRootIncidents, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetWithRootIncidents() {
	o.WithRootIncidents.Unset()
}

// GetIncidentType returns the IncidentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetIncidentType() string {
	if o == nil || IsNil(o.IncidentType.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentType.Get()
}

// GetIncidentTypeOk returns a tuple with the IncidentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetIncidentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentType.Get(), o.IncidentType.IsSet()
}

// HasIncidentType returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasIncidentType() bool {
	if o != nil && o.IncidentType.IsSet() {
		return true
	}

	return false
}

// SetIncidentType gets a reference to the given NullableString and assigns it to the IncidentType field.
func (o *HistoricProcessInstanceQueryDto) SetIncidentType(v string) {
	o.IncidentType.Set(&v)
}
// SetIncidentTypeNil sets the value for IncidentType to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetIncidentTypeNil() {
	o.IncidentType.Set(nil)
}

// UnsetIncidentType ensures that no value is present for IncidentType, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetIncidentType() {
	o.IncidentType.Unset()
}

// GetIncidentStatus returns the IncidentStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetIncidentStatus() string {
	if o == nil || IsNil(o.IncidentStatus.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentStatus.Get()
}

// GetIncidentStatusOk returns a tuple with the IncidentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetIncidentStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentStatus.Get(), o.IncidentStatus.IsSet()
}

// HasIncidentStatus returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasIncidentStatus() bool {
	if o != nil && o.IncidentStatus.IsSet() {
		return true
	}

	return false
}

// SetIncidentStatus gets a reference to the given NullableString and assigns it to the IncidentStatus field.
func (o *HistoricProcessInstanceQueryDto) SetIncidentStatus(v string) {
	o.IncidentStatus.Set(&v)
}
// SetIncidentStatusNil sets the value for IncidentStatus to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetIncidentStatusNil() {
	o.IncidentStatus.Set(nil)
}

// UnsetIncidentStatus ensures that no value is present for IncidentStatus, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetIncidentStatus() {
	o.IncidentStatus.Unset()
}

// GetIncidentMessage returns the IncidentMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetIncidentMessage() string {
	if o == nil || IsNil(o.IncidentMessage.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessage.Get()
}

// GetIncidentMessageOk returns a tuple with the IncidentMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetIncidentMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessage.Get(), o.IncidentMessage.IsSet()
}

// HasIncidentMessage returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasIncidentMessage() bool {
	if o != nil && o.IncidentMessage.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessage gets a reference to the given NullableString and assigns it to the IncidentMessage field.
func (o *HistoricProcessInstanceQueryDto) SetIncidentMessage(v string) {
	o.IncidentMessage.Set(&v)
}
// SetIncidentMessageNil sets the value for IncidentMessage to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetIncidentMessageNil() {
	o.IncidentMessage.Set(nil)
}

// UnsetIncidentMessage ensures that no value is present for IncidentMessage, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetIncidentMessage() {
	o.IncidentMessage.Unset()
}

// GetIncidentMessageLike returns the IncidentMessageLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetIncidentMessageLike() string {
	if o == nil || IsNil(o.IncidentMessageLike.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessageLike.Get()
}

// GetIncidentMessageLikeOk returns a tuple with the IncidentMessageLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetIncidentMessageLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessageLike.Get(), o.IncidentMessageLike.IsSet()
}

// HasIncidentMessageLike returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasIncidentMessageLike() bool {
	if o != nil && o.IncidentMessageLike.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessageLike gets a reference to the given NullableString and assigns it to the IncidentMessageLike field.
func (o *HistoricProcessInstanceQueryDto) SetIncidentMessageLike(v string) {
	o.IncidentMessageLike.Set(&v)
}
// SetIncidentMessageLikeNil sets the value for IncidentMessageLike to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetIncidentMessageLikeNil() {
	o.IncidentMessageLike.Set(nil)
}

// UnsetIncidentMessageLike ensures that no value is present for IncidentMessageLike, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetIncidentMessageLike() {
	o.IncidentMessageLike.Unset()
}

// GetStartedBefore returns the StartedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetStartedBefore() time.Time {
	if o == nil || IsNil(o.StartedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedBefore.Get()
}

// GetStartedBeforeOk returns a tuple with the StartedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetStartedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedBefore.Get(), o.StartedBefore.IsSet()
}

// HasStartedBefore returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasStartedBefore() bool {
	if o != nil && o.StartedBefore.IsSet() {
		return true
	}

	return false
}

// SetStartedBefore gets a reference to the given NullableTime and assigns it to the StartedBefore field.
func (o *HistoricProcessInstanceQueryDto) SetStartedBefore(v time.Time) {
	o.StartedBefore.Set(&v)
}
// SetStartedBeforeNil sets the value for StartedBefore to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetStartedBeforeNil() {
	o.StartedBefore.Set(nil)
}

// UnsetStartedBefore ensures that no value is present for StartedBefore, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetStartedBefore() {
	o.StartedBefore.Unset()
}

// GetStartedAfter returns the StartedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetStartedAfter() time.Time {
	if o == nil || IsNil(o.StartedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAfter.Get()
}

// GetStartedAfterOk returns a tuple with the StartedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetStartedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAfter.Get(), o.StartedAfter.IsSet()
}

// HasStartedAfter returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasStartedAfter() bool {
	if o != nil && o.StartedAfter.IsSet() {
		return true
	}

	return false
}

// SetStartedAfter gets a reference to the given NullableTime and assigns it to the StartedAfter field.
func (o *HistoricProcessInstanceQueryDto) SetStartedAfter(v time.Time) {
	o.StartedAfter.Set(&v)
}
// SetStartedAfterNil sets the value for StartedAfter to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetStartedAfterNil() {
	o.StartedAfter.Set(nil)
}

// UnsetStartedAfter ensures that no value is present for StartedAfter, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetStartedAfter() {
	o.StartedAfter.Unset()
}

// GetFinishedBefore returns the FinishedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetFinishedBefore() time.Time {
	if o == nil || IsNil(o.FinishedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishedBefore.Get()
}

// GetFinishedBeforeOk returns a tuple with the FinishedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetFinishedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedBefore.Get(), o.FinishedBefore.IsSet()
}

// HasFinishedBefore returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasFinishedBefore() bool {
	if o != nil && o.FinishedBefore.IsSet() {
		return true
	}

	return false
}

// SetFinishedBefore gets a reference to the given NullableTime and assigns it to the FinishedBefore field.
func (o *HistoricProcessInstanceQueryDto) SetFinishedBefore(v time.Time) {
	o.FinishedBefore.Set(&v)
}
// SetFinishedBeforeNil sets the value for FinishedBefore to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetFinishedBeforeNil() {
	o.FinishedBefore.Set(nil)
}

// UnsetFinishedBefore ensures that no value is present for FinishedBefore, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetFinishedBefore() {
	o.FinishedBefore.Unset()
}

// GetFinishedAfter returns the FinishedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetFinishedAfter() time.Time {
	if o == nil || IsNil(o.FinishedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAfter.Get()
}

// GetFinishedAfterOk returns a tuple with the FinishedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetFinishedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedAfter.Get(), o.FinishedAfter.IsSet()
}

// HasFinishedAfter returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasFinishedAfter() bool {
	if o != nil && o.FinishedAfter.IsSet() {
		return true
	}

	return false
}

// SetFinishedAfter gets a reference to the given NullableTime and assigns it to the FinishedAfter field.
func (o *HistoricProcessInstanceQueryDto) SetFinishedAfter(v time.Time) {
	o.FinishedAfter.Set(&v)
}
// SetFinishedAfterNil sets the value for FinishedAfter to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetFinishedAfterNil() {
	o.FinishedAfter.Set(nil)
}

// UnsetFinishedAfter ensures that no value is present for FinishedAfter, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetFinishedAfter() {
	o.FinishedAfter.Unset()
}

// GetExecutedActivityAfter returns the ExecutedActivityAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetExecutedActivityAfter() time.Time {
	if o == nil || IsNil(o.ExecutedActivityAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExecutedActivityAfter.Get()
}

// GetExecutedActivityAfterOk returns a tuple with the ExecutedActivityAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetExecutedActivityAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutedActivityAfter.Get(), o.ExecutedActivityAfter.IsSet()
}

// HasExecutedActivityAfter returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasExecutedActivityAfter() bool {
	if o != nil && o.ExecutedActivityAfter.IsSet() {
		return true
	}

	return false
}

// SetExecutedActivityAfter gets a reference to the given NullableTime and assigns it to the ExecutedActivityAfter field.
func (o *HistoricProcessInstanceQueryDto) SetExecutedActivityAfter(v time.Time) {
	o.ExecutedActivityAfter.Set(&v)
}
// SetExecutedActivityAfterNil sets the value for ExecutedActivityAfter to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetExecutedActivityAfterNil() {
	o.ExecutedActivityAfter.Set(nil)
}

// UnsetExecutedActivityAfter ensures that no value is present for ExecutedActivityAfter, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetExecutedActivityAfter() {
	o.ExecutedActivityAfter.Unset()
}

// GetExecutedActivityBefore returns the ExecutedActivityBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetExecutedActivityBefore() time.Time {
	if o == nil || IsNil(o.ExecutedActivityBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExecutedActivityBefore.Get()
}

// GetExecutedActivityBeforeOk returns a tuple with the ExecutedActivityBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetExecutedActivityBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutedActivityBefore.Get(), o.ExecutedActivityBefore.IsSet()
}

// HasExecutedActivityBefore returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasExecutedActivityBefore() bool {
	if o != nil && o.ExecutedActivityBefore.IsSet() {
		return true
	}

	return false
}

// SetExecutedActivityBefore gets a reference to the given NullableTime and assigns it to the ExecutedActivityBefore field.
func (o *HistoricProcessInstanceQueryDto) SetExecutedActivityBefore(v time.Time) {
	o.ExecutedActivityBefore.Set(&v)
}
// SetExecutedActivityBeforeNil sets the value for ExecutedActivityBefore to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetExecutedActivityBeforeNil() {
	o.ExecutedActivityBefore.Set(nil)
}

// UnsetExecutedActivityBefore ensures that no value is present for ExecutedActivityBefore, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetExecutedActivityBefore() {
	o.ExecutedActivityBefore.Unset()
}

// GetExecutedJobAfter returns the ExecutedJobAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetExecutedJobAfter() time.Time {
	if o == nil || IsNil(o.ExecutedJobAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExecutedJobAfter.Get()
}

// GetExecutedJobAfterOk returns a tuple with the ExecutedJobAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetExecutedJobAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutedJobAfter.Get(), o.ExecutedJobAfter.IsSet()
}

// HasExecutedJobAfter returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasExecutedJobAfter() bool {
	if o != nil && o.ExecutedJobAfter.IsSet() {
		return true
	}

	return false
}

// SetExecutedJobAfter gets a reference to the given NullableTime and assigns it to the ExecutedJobAfter field.
func (o *HistoricProcessInstanceQueryDto) SetExecutedJobAfter(v time.Time) {
	o.ExecutedJobAfter.Set(&v)
}
// SetExecutedJobAfterNil sets the value for ExecutedJobAfter to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetExecutedJobAfterNil() {
	o.ExecutedJobAfter.Set(nil)
}

// UnsetExecutedJobAfter ensures that no value is present for ExecutedJobAfter, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetExecutedJobAfter() {
	o.ExecutedJobAfter.Unset()
}

// GetExecutedJobBefore returns the ExecutedJobBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetExecutedJobBefore() time.Time {
	if o == nil || IsNil(o.ExecutedJobBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExecutedJobBefore.Get()
}

// GetExecutedJobBeforeOk returns a tuple with the ExecutedJobBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetExecutedJobBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutedJobBefore.Get(), o.ExecutedJobBefore.IsSet()
}

// HasExecutedJobBefore returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasExecutedJobBefore() bool {
	if o != nil && o.ExecutedJobBefore.IsSet() {
		return true
	}

	return false
}

// SetExecutedJobBefore gets a reference to the given NullableTime and assigns it to the ExecutedJobBefore field.
func (o *HistoricProcessInstanceQueryDto) SetExecutedJobBefore(v time.Time) {
	o.ExecutedJobBefore.Set(&v)
}
// SetExecutedJobBeforeNil sets the value for ExecutedJobBefore to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetExecutedJobBeforeNil() {
	o.ExecutedJobBefore.Set(nil)
}

// UnsetExecutedJobBefore ensures that no value is present for ExecutedJobBefore, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetExecutedJobBefore() {
	o.ExecutedJobBefore.Unset()
}

// GetStartedBy returns the StartedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetStartedBy() string {
	if o == nil || IsNil(o.StartedBy.Get()) {
		var ret string
		return ret
	}
	return *o.StartedBy.Get()
}

// GetStartedByOk returns a tuple with the StartedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetStartedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedBy.Get(), o.StartedBy.IsSet()
}

// HasStartedBy returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasStartedBy() bool {
	if o != nil && o.StartedBy.IsSet() {
		return true
	}

	return false
}

// SetStartedBy gets a reference to the given NullableString and assigns it to the StartedBy field.
func (o *HistoricProcessInstanceQueryDto) SetStartedBy(v string) {
	o.StartedBy.Set(&v)
}
// SetStartedByNil sets the value for StartedBy to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetStartedByNil() {
	o.StartedBy.Set(nil)
}

// UnsetStartedBy ensures that no value is present for StartedBy, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetStartedBy() {
	o.StartedBy.Unset()
}

// GetSuperProcessInstanceId returns the SuperProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetSuperProcessInstanceId() string {
	if o == nil || IsNil(o.SuperProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.SuperProcessInstanceId.Get()
}

// GetSuperProcessInstanceIdOk returns a tuple with the SuperProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetSuperProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuperProcessInstanceId.Get(), o.SuperProcessInstanceId.IsSet()
}

// HasSuperProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasSuperProcessInstanceId() bool {
	if o != nil && o.SuperProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetSuperProcessInstanceId gets a reference to the given NullableString and assigns it to the SuperProcessInstanceId field.
func (o *HistoricProcessInstanceQueryDto) SetSuperProcessInstanceId(v string) {
	o.SuperProcessInstanceId.Set(&v)
}
// SetSuperProcessInstanceIdNil sets the value for SuperProcessInstanceId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetSuperProcessInstanceIdNil() {
	o.SuperProcessInstanceId.Set(nil)
}

// UnsetSuperProcessInstanceId ensures that no value is present for SuperProcessInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetSuperProcessInstanceId() {
	o.SuperProcessInstanceId.Unset()
}

// GetSubProcessInstanceId returns the SubProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetSubProcessInstanceId() string {
	if o == nil || IsNil(o.SubProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.SubProcessInstanceId.Get()
}

// GetSubProcessInstanceIdOk returns a tuple with the SubProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetSubProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubProcessInstanceId.Get(), o.SubProcessInstanceId.IsSet()
}

// HasSubProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasSubProcessInstanceId() bool {
	if o != nil && o.SubProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetSubProcessInstanceId gets a reference to the given NullableString and assigns it to the SubProcessInstanceId field.
func (o *HistoricProcessInstanceQueryDto) SetSubProcessInstanceId(v string) {
	o.SubProcessInstanceId.Set(&v)
}
// SetSubProcessInstanceIdNil sets the value for SubProcessInstanceId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetSubProcessInstanceIdNil() {
	o.SubProcessInstanceId.Set(nil)
}

// UnsetSubProcessInstanceId ensures that no value is present for SubProcessInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetSubProcessInstanceId() {
	o.SubProcessInstanceId.Unset()
}

// GetSuperCaseInstanceId returns the SuperCaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetSuperCaseInstanceId() string {
	if o == nil || IsNil(o.SuperCaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.SuperCaseInstanceId.Get()
}

// GetSuperCaseInstanceIdOk returns a tuple with the SuperCaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetSuperCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuperCaseInstanceId.Get(), o.SuperCaseInstanceId.IsSet()
}

// HasSuperCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasSuperCaseInstanceId() bool {
	if o != nil && o.SuperCaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetSuperCaseInstanceId gets a reference to the given NullableString and assigns it to the SuperCaseInstanceId field.
func (o *HistoricProcessInstanceQueryDto) SetSuperCaseInstanceId(v string) {
	o.SuperCaseInstanceId.Set(&v)
}
// SetSuperCaseInstanceIdNil sets the value for SuperCaseInstanceId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetSuperCaseInstanceIdNil() {
	o.SuperCaseInstanceId.Set(nil)
}

// UnsetSuperCaseInstanceId ensures that no value is present for SuperCaseInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetSuperCaseInstanceId() {
	o.SuperCaseInstanceId.Unset()
}

// GetSubCaseInstanceId returns the SubCaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetSubCaseInstanceId() string {
	if o == nil || IsNil(o.SubCaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.SubCaseInstanceId.Get()
}

// GetSubCaseInstanceIdOk returns a tuple with the SubCaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetSubCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubCaseInstanceId.Get(), o.SubCaseInstanceId.IsSet()
}

// HasSubCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasSubCaseInstanceId() bool {
	if o != nil && o.SubCaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetSubCaseInstanceId gets a reference to the given NullableString and assigns it to the SubCaseInstanceId field.
func (o *HistoricProcessInstanceQueryDto) SetSubCaseInstanceId(v string) {
	o.SubCaseInstanceId.Set(&v)
}
// SetSubCaseInstanceIdNil sets the value for SubCaseInstanceId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetSubCaseInstanceIdNil() {
	o.SubCaseInstanceId.Set(nil)
}

// UnsetSubCaseInstanceId ensures that no value is present for SubCaseInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetSubCaseInstanceId() {
	o.SubCaseInstanceId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricProcessInstanceQueryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *HistoricProcessInstanceQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *HistoricProcessInstanceQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetExecutedActivityIdIn returns the ExecutedActivityIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetExecutedActivityIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExecutedActivityIdIn
}

// GetExecutedActivityIdInOk returns a tuple with the ExecutedActivityIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetExecutedActivityIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ExecutedActivityIdIn) {
		return nil, false
	}
	return o.ExecutedActivityIdIn, true
}

// HasExecutedActivityIdIn returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasExecutedActivityIdIn() bool {
	if o != nil && !IsNil(o.ExecutedActivityIdIn) {
		return true
	}

	return false
}

// SetExecutedActivityIdIn gets a reference to the given []string and assigns it to the ExecutedActivityIdIn field.
func (o *HistoricProcessInstanceQueryDto) SetExecutedActivityIdIn(v []string) {
	o.ExecutedActivityIdIn = v
}

// GetActiveActivityIdIn returns the ActiveActivityIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetActiveActivityIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActiveActivityIdIn
}

// GetActiveActivityIdInOk returns a tuple with the ActiveActivityIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetActiveActivityIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActiveActivityIdIn) {
		return nil, false
	}
	return o.ActiveActivityIdIn, true
}

// HasActiveActivityIdIn returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasActiveActivityIdIn() bool {
	if o != nil && !IsNil(o.ActiveActivityIdIn) {
		return true
	}

	return false
}

// SetActiveActivityIdIn gets a reference to the given []string and assigns it to the ActiveActivityIdIn field.
func (o *HistoricProcessInstanceQueryDto) SetActiveActivityIdIn(v []string) {
	o.ActiveActivityIdIn = v
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *HistoricProcessInstanceQueryDto) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetActive() {
	o.Active.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *HistoricProcessInstanceQueryDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetCompleted() bool {
	if o == nil || IsNil(o.Completed.Get()) {
		var ret bool
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableBool and assigns it to the Completed field.
func (o *HistoricProcessInstanceQueryDto) SetCompleted(v bool) {
	o.Completed.Set(&v)
}
// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetCompleted() {
	o.Completed.Unset()
}

// GetExternallyTerminated returns the ExternallyTerminated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetExternallyTerminated() bool {
	if o == nil || IsNil(o.ExternallyTerminated.Get()) {
		var ret bool
		return ret
	}
	return *o.ExternallyTerminated.Get()
}

// GetExternallyTerminatedOk returns a tuple with the ExternallyTerminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetExternallyTerminatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternallyTerminated.Get(), o.ExternallyTerminated.IsSet()
}

// HasExternallyTerminated returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasExternallyTerminated() bool {
	if o != nil && o.ExternallyTerminated.IsSet() {
		return true
	}

	return false
}

// SetExternallyTerminated gets a reference to the given NullableBool and assigns it to the ExternallyTerminated field.
func (o *HistoricProcessInstanceQueryDto) SetExternallyTerminated(v bool) {
	o.ExternallyTerminated.Set(&v)
}
// SetExternallyTerminatedNil sets the value for ExternallyTerminated to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetExternallyTerminatedNil() {
	o.ExternallyTerminated.Set(nil)
}

// UnsetExternallyTerminated ensures that no value is present for ExternallyTerminated, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetExternallyTerminated() {
	o.ExternallyTerminated.Unset()
}

// GetInternallyTerminated returns the InternallyTerminated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetInternallyTerminated() bool {
	if o == nil || IsNil(o.InternallyTerminated.Get()) {
		var ret bool
		return ret
	}
	return *o.InternallyTerminated.Get()
}

// GetInternallyTerminatedOk returns a tuple with the InternallyTerminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetInternallyTerminatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternallyTerminated.Get(), o.InternallyTerminated.IsSet()
}

// HasInternallyTerminated returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasInternallyTerminated() bool {
	if o != nil && o.InternallyTerminated.IsSet() {
		return true
	}

	return false
}

// SetInternallyTerminated gets a reference to the given NullableBool and assigns it to the InternallyTerminated field.
func (o *HistoricProcessInstanceQueryDto) SetInternallyTerminated(v bool) {
	o.InternallyTerminated.Set(&v)
}
// SetInternallyTerminatedNil sets the value for InternallyTerminated to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetInternallyTerminatedNil() {
	o.InternallyTerminated.Set(nil)
}

// UnsetInternallyTerminated ensures that no value is present for InternallyTerminated, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetInternallyTerminated() {
	o.InternallyTerminated.Unset()
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the Variables field.
func (o *HistoricProcessInstanceQueryDto) SetVariables(v []VariableQueryParameterDto) {
	o.Variables = v
}

// GetVariableNamesIgnoreCase returns the VariableNamesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetVariableNamesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableNamesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableNamesIgnoreCase.Get()
}

// GetVariableNamesIgnoreCaseOk returns a tuple with the VariableNamesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetVariableNamesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNamesIgnoreCase.Get(), o.VariableNamesIgnoreCase.IsSet()
}

// HasVariableNamesIgnoreCase returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasVariableNamesIgnoreCase() bool {
	if o != nil && o.VariableNamesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableNamesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableNamesIgnoreCase field.
func (o *HistoricProcessInstanceQueryDto) SetVariableNamesIgnoreCase(v bool) {
	o.VariableNamesIgnoreCase.Set(&v)
}
// SetVariableNamesIgnoreCaseNil sets the value for VariableNamesIgnoreCase to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetVariableNamesIgnoreCaseNil() {
	o.VariableNamesIgnoreCase.Set(nil)
}

// UnsetVariableNamesIgnoreCase ensures that no value is present for VariableNamesIgnoreCase, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetVariableNamesIgnoreCase() {
	o.VariableNamesIgnoreCase.Unset()
}

// GetVariableValuesIgnoreCase returns the VariableValuesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetVariableValuesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableValuesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableValuesIgnoreCase.Get()
}

// GetVariableValuesIgnoreCaseOk returns a tuple with the VariableValuesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetVariableValuesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValuesIgnoreCase.Get(), o.VariableValuesIgnoreCase.IsSet()
}

// HasVariableValuesIgnoreCase returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasVariableValuesIgnoreCase() bool {
	if o != nil && o.VariableValuesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableValuesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableValuesIgnoreCase field.
func (o *HistoricProcessInstanceQueryDto) SetVariableValuesIgnoreCase(v bool) {
	o.VariableValuesIgnoreCase.Set(&v)
}
// SetVariableValuesIgnoreCaseNil sets the value for VariableValuesIgnoreCase to be an explicit nil
func (o *HistoricProcessInstanceQueryDto) SetVariableValuesIgnoreCaseNil() {
	o.VariableValuesIgnoreCase.Set(nil)
}

// UnsetVariableValuesIgnoreCase ensures that no value is present for VariableValuesIgnoreCase, not even an explicit nil
func (o *HistoricProcessInstanceQueryDto) UnsetVariableValuesIgnoreCase() {
	o.VariableValuesIgnoreCase.Unset()
}

// GetOrQueries returns the OrQueries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetOrQueries() []HistoricProcessInstanceQueryDto {
	if o == nil {
		var ret []HistoricProcessInstanceQueryDto
		return ret
	}
	return o.OrQueries
}

// GetOrQueriesOk returns a tuple with the OrQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetOrQueriesOk() ([]HistoricProcessInstanceQueryDto, bool) {
	if o == nil || IsNil(o.OrQueries) {
		return nil, false
	}
	return o.OrQueries, true
}

// HasOrQueries returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasOrQueries() bool {
	if o != nil && !IsNil(o.OrQueries) {
		return true
	}

	return false
}

// SetOrQueries gets a reference to the given []HistoricProcessInstanceQueryDto and assigns it to the OrQueries field.
func (o *HistoricProcessInstanceQueryDto) SetOrQueries(v []HistoricProcessInstanceQueryDto) {
	o.OrQueries = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricProcessInstanceQueryDto) GetSorting() []HistoricProcessInstanceQueryDtoSortingInner {
	if o == nil {
		var ret []HistoricProcessInstanceQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricProcessInstanceQueryDto) GetSortingOk() ([]HistoricProcessInstanceQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *HistoricProcessInstanceQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []HistoricProcessInstanceQueryDtoSortingInner and assigns it to the Sorting field.
func (o *HistoricProcessInstanceQueryDto) SetSorting(v []HistoricProcessInstanceQueryDtoSortingInner) {
	o.Sorting = v
}

func (o HistoricProcessInstanceQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricProcessInstanceQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessInstanceIds != nil {
		toSerialize["processInstanceIds"] = o.ProcessInstanceIds
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionKeyIn != nil {
		toSerialize["processDefinitionKeyIn"] = o.ProcessDefinitionKeyIn
	}
	if o.ProcessDefinitionName.IsSet() {
		toSerialize["processDefinitionName"] = o.ProcessDefinitionName.Get()
	}
	if o.ProcessDefinitionNameLike.IsSet() {
		toSerialize["processDefinitionNameLike"] = o.ProcessDefinitionNameLike.Get()
	}
	if o.ProcessDefinitionKeyNotIn != nil {
		toSerialize["processDefinitionKeyNotIn"] = o.ProcessDefinitionKeyNotIn
	}
	if o.ProcessInstanceBusinessKey.IsSet() {
		toSerialize["processInstanceBusinessKey"] = o.ProcessInstanceBusinessKey.Get()
	}
	if o.ProcessInstanceBusinessKeyIn != nil {
		toSerialize["processInstanceBusinessKeyIn"] = o.ProcessInstanceBusinessKeyIn
	}
	if o.ProcessInstanceBusinessKeyLike.IsSet() {
		toSerialize["processInstanceBusinessKeyLike"] = o.ProcessInstanceBusinessKeyLike.Get()
	}
	if o.RootProcessInstances.IsSet() {
		toSerialize["rootProcessInstances"] = o.RootProcessInstances.Get()
	}
	if o.Finished.IsSet() {
		toSerialize["finished"] = o.Finished.Get()
	}
	if o.Unfinished.IsSet() {
		toSerialize["unfinished"] = o.Unfinished.Get()
	}
	if o.WithIncidents.IsSet() {
		toSerialize["withIncidents"] = o.WithIncidents.Get()
	}
	if o.WithRootIncidents.IsSet() {
		toSerialize["withRootIncidents"] = o.WithRootIncidents.Get()
	}
	if o.IncidentType.IsSet() {
		toSerialize["incidentType"] = o.IncidentType.Get()
	}
	if o.IncidentStatus.IsSet() {
		toSerialize["incidentStatus"] = o.IncidentStatus.Get()
	}
	if o.IncidentMessage.IsSet() {
		toSerialize["incidentMessage"] = o.IncidentMessage.Get()
	}
	if o.IncidentMessageLike.IsSet() {
		toSerialize["incidentMessageLike"] = o.IncidentMessageLike.Get()
	}
	if o.StartedBefore.IsSet() {
		toSerialize["startedBefore"] = o.StartedBefore.Get()
	}
	if o.StartedAfter.IsSet() {
		toSerialize["startedAfter"] = o.StartedAfter.Get()
	}
	if o.FinishedBefore.IsSet() {
		toSerialize["finishedBefore"] = o.FinishedBefore.Get()
	}
	if o.FinishedAfter.IsSet() {
		toSerialize["finishedAfter"] = o.FinishedAfter.Get()
	}
	if o.ExecutedActivityAfter.IsSet() {
		toSerialize["executedActivityAfter"] = o.ExecutedActivityAfter.Get()
	}
	if o.ExecutedActivityBefore.IsSet() {
		toSerialize["executedActivityBefore"] = o.ExecutedActivityBefore.Get()
	}
	if o.ExecutedJobAfter.IsSet() {
		toSerialize["executedJobAfter"] = o.ExecutedJobAfter.Get()
	}
	if o.ExecutedJobBefore.IsSet() {
		toSerialize["executedJobBefore"] = o.ExecutedJobBefore.Get()
	}
	if o.StartedBy.IsSet() {
		toSerialize["startedBy"] = o.StartedBy.Get()
	}
	if o.SuperProcessInstanceId.IsSet() {
		toSerialize["superProcessInstanceId"] = o.SuperProcessInstanceId.Get()
	}
	if o.SubProcessInstanceId.IsSet() {
		toSerialize["subProcessInstanceId"] = o.SubProcessInstanceId.Get()
	}
	if o.SuperCaseInstanceId.IsSet() {
		toSerialize["superCaseInstanceId"] = o.SuperCaseInstanceId.Get()
	}
	if o.SubCaseInstanceId.IsSet() {
		toSerialize["subCaseInstanceId"] = o.SubCaseInstanceId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.ExecutedActivityIdIn != nil {
		toSerialize["executedActivityIdIn"] = o.ExecutedActivityIdIn
	}
	if o.ActiveActivityIdIn != nil {
		toSerialize["activeActivityIdIn"] = o.ActiveActivityIdIn
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}
	if o.ExternallyTerminated.IsSet() {
		toSerialize["externallyTerminated"] = o.ExternallyTerminated.Get()
	}
	if o.InternallyTerminated.IsSet() {
		toSerialize["internallyTerminated"] = o.InternallyTerminated.Get()
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.VariableNamesIgnoreCase.IsSet() {
		toSerialize["variableNamesIgnoreCase"] = o.VariableNamesIgnoreCase.Get()
	}
	if o.VariableValuesIgnoreCase.IsSet() {
		toSerialize["variableValuesIgnoreCase"] = o.VariableValuesIgnoreCase.Get()
	}
	if o.OrQueries != nil {
		toSerialize["orQueries"] = o.OrQueries
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableHistoricProcessInstanceQueryDto struct {
	value *HistoricProcessInstanceQueryDto
	isSet bool
}

func (v NullableHistoricProcessInstanceQueryDto) Get() *HistoricProcessInstanceQueryDto {
	return v.value
}

func (v *NullableHistoricProcessInstanceQueryDto) Set(val *HistoricProcessInstanceQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricProcessInstanceQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricProcessInstanceQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricProcessInstanceQueryDto(val *HistoricProcessInstanceQueryDto) *NullableHistoricProcessInstanceQueryDto {
	return &NullableHistoricProcessInstanceQueryDto{value: val, isSet: true}
}

func (v NullableHistoricProcessInstanceQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricProcessInstanceQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


