/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricTaskInstanceQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricTaskInstanceQueryDto{}

// HistoricTaskInstanceQueryDto A Historic Task instance query which defines a list of Historic Task instances
type HistoricTaskInstanceQueryDto struct {
	// Filter by task id.
	TaskId NullableString `json:"taskId,omitempty"`
	// Filter by parent task id.
	TaskParentTaskId NullableString `json:"taskParentTaskId,omitempty"`
	// Filter by process instance id.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Filter by process instance business key.
	ProcessInstanceBusinessKey NullableString `json:"processInstanceBusinessKey,omitempty"`
	// Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
	ProcessInstanceBusinessKeyIn []string `json:"processInstanceBusinessKeyIn,omitempty"`
	// Filter by  process instance business key that has the parameter value as a substring.
	ProcessInstanceBusinessKeyLike NullableString `json:"processInstanceBusinessKeyLike,omitempty"`
	// Filter by the id of the execution that executed the task.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// Filter by process definition id.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Restrict to tasks that belong to a process definition with the given key.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Restrict to tasks that belong to a process definition with the given name.
	ProcessDefinitionName NullableString `json:"processDefinitionName,omitempty"`
	// Filter by case instance id.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// Filter by the id of the case execution that executed the task.
	CaseExecutionId NullableString `json:"caseExecutionId,omitempty"`
	// Filter by case definition id.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// Restrict to tasks that belong to a case definition with the given key.
	CaseDefinitionKey NullableString `json:"caseDefinitionKey,omitempty"`
	// Restrict to tasks that belong to a case definition with the given name.
	CaseDefinitionName NullableString `json:"caseDefinitionName,omitempty"`
	// Only include tasks which belong to one of the passed  activity instance ids.
	ActivityInstanceIdIn []string `json:"activityInstanceIdIn,omitempty"`
	// Restrict to tasks that have the given name.
	TaskName NullableString `json:"taskName,omitempty"`
	// Restrict to tasks that have a name with the given parameter value as substring.
	TaskNameLike NullableString `json:"taskNameLike,omitempty"`
	// Restrict to tasks that have the given description.
	TaskDescription NullableString `json:"taskDescription,omitempty"`
	// Restrict to tasks that have a description that has the parameter value as a substring.
	TaskDescriptionLike NullableString `json:"taskDescriptionLike,omitempty"`
	// Restrict to tasks that have the given key.
	TaskDefinitionKey NullableString `json:"taskDefinitionKey,omitempty"`
	// Restrict to tasks that have one of the passed  task definition keys.
	TaskDefinitionKeyIn []string `json:"taskDefinitionKeyIn,omitempty"`
	// Restrict to tasks that have the given delete reason.
	TaskDeleteReason NullableString `json:"taskDeleteReason,omitempty"`
	// Restrict to tasks that have a delete reason that has the parameter value as a substring.
	TaskDeleteReasonLike NullableString `json:"taskDeleteReasonLike,omitempty"`
	// Restrict to tasks that the given user is assigned to.
	TaskAssignee NullableString `json:"taskAssignee,omitempty"`
	// Restrict to tasks that are assigned to users with the parameter value as a substring.
	TaskAssigneeLike NullableString `json:"taskAssigneeLike,omitempty"`
	// Restrict to tasks that the given user owns.
	TaskOwner NullableString `json:"taskOwner,omitempty"`
	// Restrict to tasks that are owned by users with the parameter value as a substring.
	TaskOwnerLike NullableString `json:"taskOwnerLike,omitempty"`
	// Restrict to tasks that have the given priority.
	TaskPriority NullableInt32 `json:"taskPriority,omitempty"`
	// If set to `true`, restricts the query to all tasks that are assigned.
	Assigned NullableBool `json:"assigned,omitempty"`
	// If set to `true`, restricts the query to all tasks that are unassigned.
	Unassigned NullableBool `json:"unassigned,omitempty"`
	// Only include finished tasks. Value may only be `true`, as `false` is the default behavior.
	Finished NullableBool `json:"finished,omitempty"`
	// Only include unfinished tasks. Value may only be `true`, as `false` is the default behavior.
	Unfinished NullableBool `json:"unfinished,omitempty"`
	// Only include tasks of finished processes. Value may only be `true`, as `false` is the default behavior.
	ProcessFinished NullableBool `json:"processFinished,omitempty"`
	// Only include tasks of unfinished processes. Value may only be `true`, as `false` is the default behavior.
	ProcessUnfinished NullableBool `json:"processUnfinished,omitempty"`
	// Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	TaskDueDate NullableTime `json:"taskDueDate,omitempty"`
	// Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	TaskDueDateBefore NullableTime `json:"taskDueDateBefore,omitempty"`
	// Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	TaskDueDateAfter NullableTime `json:"taskDueDateAfter,omitempty"`
	// Only include tasks which have no due date. Value may only be `true`, as `false` is the default behavior.
	WithoutTaskDueDate NullableBool `json:"withoutTaskDueDate,omitempty"`
	// Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	TaskFollowUpDate NullableTime `json:"taskFollowUpDate,omitempty"`
	// Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	TaskFollowUpDateBefore NullableTime `json:"taskFollowUpDateBefore,omitempty"`
	// Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	TaskFollowUpDateAfter NullableTime `json:"taskFollowUpDateAfter,omitempty"`
	// Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartedBefore NullableTime `json:"startedBefore,omitempty"`
	// Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartedAfter NullableTime `json:"startedAfter,omitempty"`
	// Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	FinishedBefore NullableTime `json:"finishedBefore,omitempty"`
	// Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	FinishedAfter NullableTime `json:"finishedAfter,omitempty"`
	// Filter by a  list of tenant ids. A task instance must have one of the given tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include historic task instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`.  `key` and `value` may not contain underscore or comma characters.
	TaskVariables []VariableQueryParameterDto `json:"taskVariables,omitempty"`
	// Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`; * `notLike`.  `key` and `value` may not contain underscore or comma characters.
	ProcessVariables []VariableQueryParameterDto `json:"processVariables,omitempty"`
	// Match the variable name provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
	VariableNamesIgnoreCase NullableBool `json:"variableNamesIgnoreCase,omitempty"`
	// Match the variable value provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
	VariableValuesIgnoreCase NullableBool `json:"variableValuesIgnoreCase,omitempty"`
	// Restrict to tasks with a historic identity link to the given user.
	TaskInvolvedUser NullableString `json:"taskInvolvedUser,omitempty"`
	// Restrict to tasks with a historic identity link to the given group.
	TaskInvolvedGroup NullableString `json:"taskInvolvedGroup,omitempty"`
	// Restrict to tasks with a historic identity link to the given candidate user.
	TaskHadCandidateUser NullableString `json:"taskHadCandidateUser,omitempty"`
	// Restrict to tasks with a historic identity link to the given candidate group.
	TaskHadCandidateGroup NullableString `json:"taskHadCandidateGroup,omitempty"`
	// Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.
	WithCandidateGroups NullableBool `json:"withCandidateGroups,omitempty"`
	// Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.
	WithoutCandidateGroups NullableBool `json:"withoutCandidateGroups,omitempty"`
	// A JSON array of nested historic task instance queries with OR semantics.  A task instance matches a nested query if it fulfills at least one of the query's predicates.  With multiple nested queries, a task instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All task instance query properties can be used except for: `sorting`, `withCandidateGroups`, ` withoutCandidateGroups`.  See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
	OrQueries []HistoricTaskInstanceQueryDto `json:"orQueries,omitempty"`
	// An array of criteria to sort the result by. Each element of the array is                     an object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Sorting has no effect for `count` endpoints
	Sorting []HistoricTaskInstanceQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewHistoricTaskInstanceQueryDto instantiates a new HistoricTaskInstanceQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricTaskInstanceQueryDto() *HistoricTaskInstanceQueryDto {
	this := HistoricTaskInstanceQueryDto{}
	return &this
}

// NewHistoricTaskInstanceQueryDtoWithDefaults instantiates a new HistoricTaskInstanceQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricTaskInstanceQueryDtoWithDefaults() *HistoricTaskInstanceQueryDto {
	this := HistoricTaskInstanceQueryDto{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *HistoricTaskInstanceQueryDto) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetTaskParentTaskId returns the TaskParentTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskParentTaskId() string {
	if o == nil || IsNil(o.TaskParentTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskParentTaskId.Get()
}

// GetTaskParentTaskIdOk returns a tuple with the TaskParentTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskParentTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskParentTaskId.Get(), o.TaskParentTaskId.IsSet()
}

// HasTaskParentTaskId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskParentTaskId() bool {
	if o != nil && o.TaskParentTaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskParentTaskId gets a reference to the given NullableString and assigns it to the TaskParentTaskId field.
func (o *HistoricTaskInstanceQueryDto) SetTaskParentTaskId(v string) {
	o.TaskParentTaskId.Set(&v)
}
// SetTaskParentTaskIdNil sets the value for TaskParentTaskId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskParentTaskIdNil() {
	o.TaskParentTaskId.Set(nil)
}

// UnsetTaskParentTaskId ensures that no value is present for TaskParentTaskId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskParentTaskId() {
	o.TaskParentTaskId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessInstanceBusinessKey returns the ProcessInstanceBusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceBusinessKey() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKey.Get()
}

// GetProcessInstanceBusinessKeyOk returns a tuple with the ProcessInstanceBusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKey.Get(), o.ProcessInstanceBusinessKey.IsSet()
}

// HasProcessInstanceBusinessKey returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessInstanceBusinessKey() bool {
	if o != nil && o.ProcessInstanceBusinessKey.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKey gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKey field.
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceBusinessKey(v string) {
	o.ProcessInstanceBusinessKey.Set(&v)
}
// SetProcessInstanceBusinessKeyNil sets the value for ProcessInstanceBusinessKey to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceBusinessKeyNil() {
	o.ProcessInstanceBusinessKey.Set(nil)
}

// UnsetProcessInstanceBusinessKey ensures that no value is present for ProcessInstanceBusinessKey, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessInstanceBusinessKey() {
	o.ProcessInstanceBusinessKey.Unset()
}

// GetProcessInstanceBusinessKeyIn returns the ProcessInstanceBusinessKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceBusinessKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceBusinessKeyIn
}

// GetProcessInstanceBusinessKeyInOk returns a tuple with the ProcessInstanceBusinessKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceBusinessKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyIn) {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyIn, true
}

// HasProcessInstanceBusinessKeyIn returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessInstanceBusinessKeyIn() bool {
	if o != nil && !IsNil(o.ProcessInstanceBusinessKeyIn) {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyIn gets a reference to the given []string and assigns it to the ProcessInstanceBusinessKeyIn field.
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceBusinessKeyIn(v []string) {
	o.ProcessInstanceBusinessKeyIn = v
}

// GetProcessInstanceBusinessKeyLike returns the ProcessInstanceBusinessKeyLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceBusinessKeyLike() string {
	if o == nil || IsNil(o.ProcessInstanceBusinessKeyLike.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceBusinessKeyLike.Get()
}

// GetProcessInstanceBusinessKeyLikeOk returns a tuple with the ProcessInstanceBusinessKeyLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessInstanceBusinessKeyLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceBusinessKeyLike.Get(), o.ProcessInstanceBusinessKeyLike.IsSet()
}

// HasProcessInstanceBusinessKeyLike returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessInstanceBusinessKeyLike() bool {
	if o != nil && o.ProcessInstanceBusinessKeyLike.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceBusinessKeyLike gets a reference to the given NullableString and assigns it to the ProcessInstanceBusinessKeyLike field.
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceBusinessKeyLike(v string) {
	o.ProcessInstanceBusinessKeyLike.Set(&v)
}
// SetProcessInstanceBusinessKeyLikeNil sets the value for ProcessInstanceBusinessKeyLike to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessInstanceBusinessKeyLikeNil() {
	o.ProcessInstanceBusinessKeyLike.Set(nil)
}

// UnsetProcessInstanceBusinessKeyLike ensures that no value is present for ProcessInstanceBusinessKeyLike, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessInstanceBusinessKeyLike() {
	o.ProcessInstanceBusinessKeyLike.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricTaskInstanceQueryDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricTaskInstanceQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricTaskInstanceQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionName returns the ProcessDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessDefinitionName() string {
	if o == nil || IsNil(o.ProcessDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionName.Get()
}

// GetProcessDefinitionNameOk returns a tuple with the ProcessDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionName.Get(), o.ProcessDefinitionName.IsSet()
}

// HasProcessDefinitionName returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessDefinitionName() bool {
	if o != nil && o.ProcessDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionName gets a reference to the given NullableString and assigns it to the ProcessDefinitionName field.
func (o *HistoricTaskInstanceQueryDto) SetProcessDefinitionName(v string) {
	o.ProcessDefinitionName.Set(&v)
}
// SetProcessDefinitionNameNil sets the value for ProcessDefinitionName to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessDefinitionNameNil() {
	o.ProcessDefinitionName.Set(nil)
}

// UnsetProcessDefinitionName ensures that no value is present for ProcessDefinitionName, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessDefinitionName() {
	o.ProcessDefinitionName.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricTaskInstanceQueryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetCaseExecutionId returns the CaseExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetCaseExecutionId() string {
	if o == nil || IsNil(o.CaseExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseExecutionId.Get()
}

// GetCaseExecutionIdOk returns a tuple with the CaseExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetCaseExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseExecutionId.Get(), o.CaseExecutionId.IsSet()
}

// HasCaseExecutionId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasCaseExecutionId() bool {
	if o != nil && o.CaseExecutionId.IsSet() {
		return true
	}

	return false
}

// SetCaseExecutionId gets a reference to the given NullableString and assigns it to the CaseExecutionId field.
func (o *HistoricTaskInstanceQueryDto) SetCaseExecutionId(v string) {
	o.CaseExecutionId.Set(&v)
}
// SetCaseExecutionIdNil sets the value for CaseExecutionId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetCaseExecutionIdNil() {
	o.CaseExecutionId.Set(nil)
}

// UnsetCaseExecutionId ensures that no value is present for CaseExecutionId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetCaseExecutionId() {
	o.CaseExecutionId.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *HistoricTaskInstanceQueryDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseDefinitionKey returns the CaseDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetCaseDefinitionKey() string {
	if o == nil || IsNil(o.CaseDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionKey.Get()
}

// GetCaseDefinitionKeyOk returns a tuple with the CaseDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetCaseDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionKey.Get(), o.CaseDefinitionKey.IsSet()
}

// HasCaseDefinitionKey returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasCaseDefinitionKey() bool {
	if o != nil && o.CaseDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionKey gets a reference to the given NullableString and assigns it to the CaseDefinitionKey field.
func (o *HistoricTaskInstanceQueryDto) SetCaseDefinitionKey(v string) {
	o.CaseDefinitionKey.Set(&v)
}
// SetCaseDefinitionKeyNil sets the value for CaseDefinitionKey to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetCaseDefinitionKeyNil() {
	o.CaseDefinitionKey.Set(nil)
}

// UnsetCaseDefinitionKey ensures that no value is present for CaseDefinitionKey, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetCaseDefinitionKey() {
	o.CaseDefinitionKey.Unset()
}

// GetCaseDefinitionName returns the CaseDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetCaseDefinitionName() string {
	if o == nil || IsNil(o.CaseDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionName.Get()
}

// GetCaseDefinitionNameOk returns a tuple with the CaseDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetCaseDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionName.Get(), o.CaseDefinitionName.IsSet()
}

// HasCaseDefinitionName returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasCaseDefinitionName() bool {
	if o != nil && o.CaseDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionName gets a reference to the given NullableString and assigns it to the CaseDefinitionName field.
func (o *HistoricTaskInstanceQueryDto) SetCaseDefinitionName(v string) {
	o.CaseDefinitionName.Set(&v)
}
// SetCaseDefinitionNameNil sets the value for CaseDefinitionName to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetCaseDefinitionNameNil() {
	o.CaseDefinitionName.Set(nil)
}

// UnsetCaseDefinitionName ensures that no value is present for CaseDefinitionName, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetCaseDefinitionName() {
	o.CaseDefinitionName.Unset()
}

// GetActivityInstanceIdIn returns the ActivityInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetActivityInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActivityInstanceIdIn
}

// GetActivityInstanceIdInOk returns a tuple with the ActivityInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetActivityInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActivityInstanceIdIn) {
		return nil, false
	}
	return o.ActivityInstanceIdIn, true
}

// HasActivityInstanceIdIn returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasActivityInstanceIdIn() bool {
	if o != nil && !IsNil(o.ActivityInstanceIdIn) {
		return true
	}

	return false
}

// SetActivityInstanceIdIn gets a reference to the given []string and assigns it to the ActivityInstanceIdIn field.
func (o *HistoricTaskInstanceQueryDto) SetActivityInstanceIdIn(v []string) {
	o.ActivityInstanceIdIn = v
}

// GetTaskName returns the TaskName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskName() string {
	if o == nil || IsNil(o.TaskName.Get()) {
		var ret string
		return ret
	}
	return *o.TaskName.Get()
}

// GetTaskNameOk returns a tuple with the TaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskName.Get(), o.TaskName.IsSet()
}

// HasTaskName returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskName() bool {
	if o != nil && o.TaskName.IsSet() {
		return true
	}

	return false
}

// SetTaskName gets a reference to the given NullableString and assigns it to the TaskName field.
func (o *HistoricTaskInstanceQueryDto) SetTaskName(v string) {
	o.TaskName.Set(&v)
}
// SetTaskNameNil sets the value for TaskName to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskNameNil() {
	o.TaskName.Set(nil)
}

// UnsetTaskName ensures that no value is present for TaskName, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskName() {
	o.TaskName.Unset()
}

// GetTaskNameLike returns the TaskNameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskNameLike() string {
	if o == nil || IsNil(o.TaskNameLike.Get()) {
		var ret string
		return ret
	}
	return *o.TaskNameLike.Get()
}

// GetTaskNameLikeOk returns a tuple with the TaskNameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskNameLike.Get(), o.TaskNameLike.IsSet()
}

// HasTaskNameLike returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskNameLike() bool {
	if o != nil && o.TaskNameLike.IsSet() {
		return true
	}

	return false
}

// SetTaskNameLike gets a reference to the given NullableString and assigns it to the TaskNameLike field.
func (o *HistoricTaskInstanceQueryDto) SetTaskNameLike(v string) {
	o.TaskNameLike.Set(&v)
}
// SetTaskNameLikeNil sets the value for TaskNameLike to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskNameLikeNil() {
	o.TaskNameLike.Set(nil)
}

// UnsetTaskNameLike ensures that no value is present for TaskNameLike, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskNameLike() {
	o.TaskNameLike.Unset()
}

// GetTaskDescription returns the TaskDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDescription() string {
	if o == nil || IsNil(o.TaskDescription.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDescription.Get()
}

// GetTaskDescriptionOk returns a tuple with the TaskDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDescription.Get(), o.TaskDescription.IsSet()
}

// HasTaskDescription returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDescription() bool {
	if o != nil && o.TaskDescription.IsSet() {
		return true
	}

	return false
}

// SetTaskDescription gets a reference to the given NullableString and assigns it to the TaskDescription field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDescription(v string) {
	o.TaskDescription.Set(&v)
}
// SetTaskDescriptionNil sets the value for TaskDescription to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDescriptionNil() {
	o.TaskDescription.Set(nil)
}

// UnsetTaskDescription ensures that no value is present for TaskDescription, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDescription() {
	o.TaskDescription.Unset()
}

// GetTaskDescriptionLike returns the TaskDescriptionLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDescriptionLike() string {
	if o == nil || IsNil(o.TaskDescriptionLike.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDescriptionLike.Get()
}

// GetTaskDescriptionLikeOk returns a tuple with the TaskDescriptionLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDescriptionLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDescriptionLike.Get(), o.TaskDescriptionLike.IsSet()
}

// HasTaskDescriptionLike returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDescriptionLike() bool {
	if o != nil && o.TaskDescriptionLike.IsSet() {
		return true
	}

	return false
}

// SetTaskDescriptionLike gets a reference to the given NullableString and assigns it to the TaskDescriptionLike field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDescriptionLike(v string) {
	o.TaskDescriptionLike.Set(&v)
}
// SetTaskDescriptionLikeNil sets the value for TaskDescriptionLike to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDescriptionLikeNil() {
	o.TaskDescriptionLike.Set(nil)
}

// UnsetTaskDescriptionLike ensures that no value is present for TaskDescriptionLike, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDescriptionLike() {
	o.TaskDescriptionLike.Unset()
}

// GetTaskDefinitionKey returns the TaskDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDefinitionKey() string {
	if o == nil || IsNil(o.TaskDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDefinitionKey.Get()
}

// GetTaskDefinitionKeyOk returns a tuple with the TaskDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDefinitionKey.Get(), o.TaskDefinitionKey.IsSet()
}

// HasTaskDefinitionKey returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDefinitionKey() bool {
	if o != nil && o.TaskDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetTaskDefinitionKey gets a reference to the given NullableString and assigns it to the TaskDefinitionKey field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDefinitionKey(v string) {
	o.TaskDefinitionKey.Set(&v)
}
// SetTaskDefinitionKeyNil sets the value for TaskDefinitionKey to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDefinitionKeyNil() {
	o.TaskDefinitionKey.Set(nil)
}

// UnsetTaskDefinitionKey ensures that no value is present for TaskDefinitionKey, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDefinitionKey() {
	o.TaskDefinitionKey.Unset()
}

// GetTaskDefinitionKeyIn returns the TaskDefinitionKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDefinitionKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TaskDefinitionKeyIn
}

// GetTaskDefinitionKeyInOk returns a tuple with the TaskDefinitionKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDefinitionKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.TaskDefinitionKeyIn) {
		return nil, false
	}
	return o.TaskDefinitionKeyIn, true
}

// HasTaskDefinitionKeyIn returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDefinitionKeyIn() bool {
	if o != nil && !IsNil(o.TaskDefinitionKeyIn) {
		return true
	}

	return false
}

// SetTaskDefinitionKeyIn gets a reference to the given []string and assigns it to the TaskDefinitionKeyIn field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDefinitionKeyIn(v []string) {
	o.TaskDefinitionKeyIn = v
}

// GetTaskDeleteReason returns the TaskDeleteReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDeleteReason() string {
	if o == nil || IsNil(o.TaskDeleteReason.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDeleteReason.Get()
}

// GetTaskDeleteReasonOk returns a tuple with the TaskDeleteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDeleteReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDeleteReason.Get(), o.TaskDeleteReason.IsSet()
}

// HasTaskDeleteReason returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDeleteReason() bool {
	if o != nil && o.TaskDeleteReason.IsSet() {
		return true
	}

	return false
}

// SetTaskDeleteReason gets a reference to the given NullableString and assigns it to the TaskDeleteReason field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDeleteReason(v string) {
	o.TaskDeleteReason.Set(&v)
}
// SetTaskDeleteReasonNil sets the value for TaskDeleteReason to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDeleteReasonNil() {
	o.TaskDeleteReason.Set(nil)
}

// UnsetTaskDeleteReason ensures that no value is present for TaskDeleteReason, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDeleteReason() {
	o.TaskDeleteReason.Unset()
}

// GetTaskDeleteReasonLike returns the TaskDeleteReasonLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDeleteReasonLike() string {
	if o == nil || IsNil(o.TaskDeleteReasonLike.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDeleteReasonLike.Get()
}

// GetTaskDeleteReasonLikeOk returns a tuple with the TaskDeleteReasonLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDeleteReasonLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDeleteReasonLike.Get(), o.TaskDeleteReasonLike.IsSet()
}

// HasTaskDeleteReasonLike returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDeleteReasonLike() bool {
	if o != nil && o.TaskDeleteReasonLike.IsSet() {
		return true
	}

	return false
}

// SetTaskDeleteReasonLike gets a reference to the given NullableString and assigns it to the TaskDeleteReasonLike field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDeleteReasonLike(v string) {
	o.TaskDeleteReasonLike.Set(&v)
}
// SetTaskDeleteReasonLikeNil sets the value for TaskDeleteReasonLike to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDeleteReasonLikeNil() {
	o.TaskDeleteReasonLike.Set(nil)
}

// UnsetTaskDeleteReasonLike ensures that no value is present for TaskDeleteReasonLike, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDeleteReasonLike() {
	o.TaskDeleteReasonLike.Unset()
}

// GetTaskAssignee returns the TaskAssignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskAssignee() string {
	if o == nil || IsNil(o.TaskAssignee.Get()) {
		var ret string
		return ret
	}
	return *o.TaskAssignee.Get()
}

// GetTaskAssigneeOk returns a tuple with the TaskAssignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskAssignee.Get(), o.TaskAssignee.IsSet()
}

// HasTaskAssignee returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskAssignee() bool {
	if o != nil && o.TaskAssignee.IsSet() {
		return true
	}

	return false
}

// SetTaskAssignee gets a reference to the given NullableString and assigns it to the TaskAssignee field.
func (o *HistoricTaskInstanceQueryDto) SetTaskAssignee(v string) {
	o.TaskAssignee.Set(&v)
}
// SetTaskAssigneeNil sets the value for TaskAssignee to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskAssigneeNil() {
	o.TaskAssignee.Set(nil)
}

// UnsetTaskAssignee ensures that no value is present for TaskAssignee, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskAssignee() {
	o.TaskAssignee.Unset()
}

// GetTaskAssigneeLike returns the TaskAssigneeLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskAssigneeLike() string {
	if o == nil || IsNil(o.TaskAssigneeLike.Get()) {
		var ret string
		return ret
	}
	return *o.TaskAssigneeLike.Get()
}

// GetTaskAssigneeLikeOk returns a tuple with the TaskAssigneeLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskAssigneeLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskAssigneeLike.Get(), o.TaskAssigneeLike.IsSet()
}

// HasTaskAssigneeLike returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskAssigneeLike() bool {
	if o != nil && o.TaskAssigneeLike.IsSet() {
		return true
	}

	return false
}

// SetTaskAssigneeLike gets a reference to the given NullableString and assigns it to the TaskAssigneeLike field.
func (o *HistoricTaskInstanceQueryDto) SetTaskAssigneeLike(v string) {
	o.TaskAssigneeLike.Set(&v)
}
// SetTaskAssigneeLikeNil sets the value for TaskAssigneeLike to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskAssigneeLikeNil() {
	o.TaskAssigneeLike.Set(nil)
}

// UnsetTaskAssigneeLike ensures that no value is present for TaskAssigneeLike, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskAssigneeLike() {
	o.TaskAssigneeLike.Unset()
}

// GetTaskOwner returns the TaskOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskOwner() string {
	if o == nil || IsNil(o.TaskOwner.Get()) {
		var ret string
		return ret
	}
	return *o.TaskOwner.Get()
}

// GetTaskOwnerOk returns a tuple with the TaskOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskOwner.Get(), o.TaskOwner.IsSet()
}

// HasTaskOwner returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskOwner() bool {
	if o != nil && o.TaskOwner.IsSet() {
		return true
	}

	return false
}

// SetTaskOwner gets a reference to the given NullableString and assigns it to the TaskOwner field.
func (o *HistoricTaskInstanceQueryDto) SetTaskOwner(v string) {
	o.TaskOwner.Set(&v)
}
// SetTaskOwnerNil sets the value for TaskOwner to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskOwnerNil() {
	o.TaskOwner.Set(nil)
}

// UnsetTaskOwner ensures that no value is present for TaskOwner, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskOwner() {
	o.TaskOwner.Unset()
}

// GetTaskOwnerLike returns the TaskOwnerLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskOwnerLike() string {
	if o == nil || IsNil(o.TaskOwnerLike.Get()) {
		var ret string
		return ret
	}
	return *o.TaskOwnerLike.Get()
}

// GetTaskOwnerLikeOk returns a tuple with the TaskOwnerLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskOwnerLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskOwnerLike.Get(), o.TaskOwnerLike.IsSet()
}

// HasTaskOwnerLike returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskOwnerLike() bool {
	if o != nil && o.TaskOwnerLike.IsSet() {
		return true
	}

	return false
}

// SetTaskOwnerLike gets a reference to the given NullableString and assigns it to the TaskOwnerLike field.
func (o *HistoricTaskInstanceQueryDto) SetTaskOwnerLike(v string) {
	o.TaskOwnerLike.Set(&v)
}
// SetTaskOwnerLikeNil sets the value for TaskOwnerLike to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskOwnerLikeNil() {
	o.TaskOwnerLike.Set(nil)
}

// UnsetTaskOwnerLike ensures that no value is present for TaskOwnerLike, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskOwnerLike() {
	o.TaskOwnerLike.Unset()
}

// GetTaskPriority returns the TaskPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskPriority() int32 {
	if o == nil || IsNil(o.TaskPriority.Get()) {
		var ret int32
		return ret
	}
	return *o.TaskPriority.Get()
}

// GetTaskPriorityOk returns a tuple with the TaskPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskPriority.Get(), o.TaskPriority.IsSet()
}

// HasTaskPriority returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskPriority() bool {
	if o != nil && o.TaskPriority.IsSet() {
		return true
	}

	return false
}

// SetTaskPriority gets a reference to the given NullableInt32 and assigns it to the TaskPriority field.
func (o *HistoricTaskInstanceQueryDto) SetTaskPriority(v int32) {
	o.TaskPriority.Set(&v)
}
// SetTaskPriorityNil sets the value for TaskPriority to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskPriorityNil() {
	o.TaskPriority.Set(nil)
}

// UnsetTaskPriority ensures that no value is present for TaskPriority, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskPriority() {
	o.TaskPriority.Unset()
}

// GetAssigned returns the Assigned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetAssigned() bool {
	if o == nil || IsNil(o.Assigned.Get()) {
		var ret bool
		return ret
	}
	return *o.Assigned.Get()
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetAssignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assigned.Get(), o.Assigned.IsSet()
}

// HasAssigned returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasAssigned() bool {
	if o != nil && o.Assigned.IsSet() {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given NullableBool and assigns it to the Assigned field.
func (o *HistoricTaskInstanceQueryDto) SetAssigned(v bool) {
	o.Assigned.Set(&v)
}
// SetAssignedNil sets the value for Assigned to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetAssignedNil() {
	o.Assigned.Set(nil)
}

// UnsetAssigned ensures that no value is present for Assigned, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetAssigned() {
	o.Assigned.Unset()
}

// GetUnassigned returns the Unassigned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetUnassigned() bool {
	if o == nil || IsNil(o.Unassigned.Get()) {
		var ret bool
		return ret
	}
	return *o.Unassigned.Get()
}

// GetUnassignedOk returns a tuple with the Unassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetUnassignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unassigned.Get(), o.Unassigned.IsSet()
}

// HasUnassigned returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasUnassigned() bool {
	if o != nil && o.Unassigned.IsSet() {
		return true
	}

	return false
}

// SetUnassigned gets a reference to the given NullableBool and assigns it to the Unassigned field.
func (o *HistoricTaskInstanceQueryDto) SetUnassigned(v bool) {
	o.Unassigned.Set(&v)
}
// SetUnassignedNil sets the value for Unassigned to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetUnassignedNil() {
	o.Unassigned.Set(nil)
}

// UnsetUnassigned ensures that no value is present for Unassigned, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetUnassigned() {
	o.Unassigned.Unset()
}

// GetFinished returns the Finished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetFinished() bool {
	if o == nil || IsNil(o.Finished.Get()) {
		var ret bool
		return ret
	}
	return *o.Finished.Get()
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finished.Get(), o.Finished.IsSet()
}

// HasFinished returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasFinished() bool {
	if o != nil && o.Finished.IsSet() {
		return true
	}

	return false
}

// SetFinished gets a reference to the given NullableBool and assigns it to the Finished field.
func (o *HistoricTaskInstanceQueryDto) SetFinished(v bool) {
	o.Finished.Set(&v)
}
// SetFinishedNil sets the value for Finished to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetFinishedNil() {
	o.Finished.Set(nil)
}

// UnsetFinished ensures that no value is present for Finished, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetFinished() {
	o.Finished.Unset()
}

// GetUnfinished returns the Unfinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetUnfinished() bool {
	if o == nil || IsNil(o.Unfinished.Get()) {
		var ret bool
		return ret
	}
	return *o.Unfinished.Get()
}

// GetUnfinishedOk returns a tuple with the Unfinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetUnfinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unfinished.Get(), o.Unfinished.IsSet()
}

// HasUnfinished returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasUnfinished() bool {
	if o != nil && o.Unfinished.IsSet() {
		return true
	}

	return false
}

// SetUnfinished gets a reference to the given NullableBool and assigns it to the Unfinished field.
func (o *HistoricTaskInstanceQueryDto) SetUnfinished(v bool) {
	o.Unfinished.Set(&v)
}
// SetUnfinishedNil sets the value for Unfinished to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetUnfinishedNil() {
	o.Unfinished.Set(nil)
}

// UnsetUnfinished ensures that no value is present for Unfinished, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetUnfinished() {
	o.Unfinished.Unset()
}

// GetProcessFinished returns the ProcessFinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessFinished() bool {
	if o == nil || IsNil(o.ProcessFinished.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessFinished.Get()
}

// GetProcessFinishedOk returns a tuple with the ProcessFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessFinished.Get(), o.ProcessFinished.IsSet()
}

// HasProcessFinished returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessFinished() bool {
	if o != nil && o.ProcessFinished.IsSet() {
		return true
	}

	return false
}

// SetProcessFinished gets a reference to the given NullableBool and assigns it to the ProcessFinished field.
func (o *HistoricTaskInstanceQueryDto) SetProcessFinished(v bool) {
	o.ProcessFinished.Set(&v)
}
// SetProcessFinishedNil sets the value for ProcessFinished to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessFinishedNil() {
	o.ProcessFinished.Set(nil)
}

// UnsetProcessFinished ensures that no value is present for ProcessFinished, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessFinished() {
	o.ProcessFinished.Unset()
}

// GetProcessUnfinished returns the ProcessUnfinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessUnfinished() bool {
	if o == nil || IsNil(o.ProcessUnfinished.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessUnfinished.Get()
}

// GetProcessUnfinishedOk returns a tuple with the ProcessUnfinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessUnfinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessUnfinished.Get(), o.ProcessUnfinished.IsSet()
}

// HasProcessUnfinished returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessUnfinished() bool {
	if o != nil && o.ProcessUnfinished.IsSet() {
		return true
	}

	return false
}

// SetProcessUnfinished gets a reference to the given NullableBool and assigns it to the ProcessUnfinished field.
func (o *HistoricTaskInstanceQueryDto) SetProcessUnfinished(v bool) {
	o.ProcessUnfinished.Set(&v)
}
// SetProcessUnfinishedNil sets the value for ProcessUnfinished to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetProcessUnfinishedNil() {
	o.ProcessUnfinished.Set(nil)
}

// UnsetProcessUnfinished ensures that no value is present for ProcessUnfinished, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetProcessUnfinished() {
	o.ProcessUnfinished.Unset()
}

// GetTaskDueDate returns the TaskDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDueDate() time.Time {
	if o == nil || IsNil(o.TaskDueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TaskDueDate.Get()
}

// GetTaskDueDateOk returns a tuple with the TaskDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDueDate.Get(), o.TaskDueDate.IsSet()
}

// HasTaskDueDate returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDueDate() bool {
	if o != nil && o.TaskDueDate.IsSet() {
		return true
	}

	return false
}

// SetTaskDueDate gets a reference to the given NullableTime and assigns it to the TaskDueDate field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDueDate(v time.Time) {
	o.TaskDueDate.Set(&v)
}
// SetTaskDueDateNil sets the value for TaskDueDate to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDueDateNil() {
	o.TaskDueDate.Set(nil)
}

// UnsetTaskDueDate ensures that no value is present for TaskDueDate, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDueDate() {
	o.TaskDueDate.Unset()
}

// GetTaskDueDateBefore returns the TaskDueDateBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDueDateBefore() time.Time {
	if o == nil || IsNil(o.TaskDueDateBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TaskDueDateBefore.Get()
}

// GetTaskDueDateBeforeOk returns a tuple with the TaskDueDateBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDueDateBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDueDateBefore.Get(), o.TaskDueDateBefore.IsSet()
}

// HasTaskDueDateBefore returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDueDateBefore() bool {
	if o != nil && o.TaskDueDateBefore.IsSet() {
		return true
	}

	return false
}

// SetTaskDueDateBefore gets a reference to the given NullableTime and assigns it to the TaskDueDateBefore field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDueDateBefore(v time.Time) {
	o.TaskDueDateBefore.Set(&v)
}
// SetTaskDueDateBeforeNil sets the value for TaskDueDateBefore to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDueDateBeforeNil() {
	o.TaskDueDateBefore.Set(nil)
}

// UnsetTaskDueDateBefore ensures that no value is present for TaskDueDateBefore, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDueDateBefore() {
	o.TaskDueDateBefore.Unset()
}

// GetTaskDueDateAfter returns the TaskDueDateAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskDueDateAfter() time.Time {
	if o == nil || IsNil(o.TaskDueDateAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TaskDueDateAfter.Get()
}

// GetTaskDueDateAfterOk returns a tuple with the TaskDueDateAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskDueDateAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDueDateAfter.Get(), o.TaskDueDateAfter.IsSet()
}

// HasTaskDueDateAfter returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskDueDateAfter() bool {
	if o != nil && o.TaskDueDateAfter.IsSet() {
		return true
	}

	return false
}

// SetTaskDueDateAfter gets a reference to the given NullableTime and assigns it to the TaskDueDateAfter field.
func (o *HistoricTaskInstanceQueryDto) SetTaskDueDateAfter(v time.Time) {
	o.TaskDueDateAfter.Set(&v)
}
// SetTaskDueDateAfterNil sets the value for TaskDueDateAfter to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskDueDateAfterNil() {
	o.TaskDueDateAfter.Set(nil)
}

// UnsetTaskDueDateAfter ensures that no value is present for TaskDueDateAfter, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskDueDateAfter() {
	o.TaskDueDateAfter.Unset()
}

// GetWithoutTaskDueDate returns the WithoutTaskDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetWithoutTaskDueDate() bool {
	if o == nil || IsNil(o.WithoutTaskDueDate.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTaskDueDate.Get()
}

// GetWithoutTaskDueDateOk returns a tuple with the WithoutTaskDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetWithoutTaskDueDateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTaskDueDate.Get(), o.WithoutTaskDueDate.IsSet()
}

// HasWithoutTaskDueDate returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasWithoutTaskDueDate() bool {
	if o != nil && o.WithoutTaskDueDate.IsSet() {
		return true
	}

	return false
}

// SetWithoutTaskDueDate gets a reference to the given NullableBool and assigns it to the WithoutTaskDueDate field.
func (o *HistoricTaskInstanceQueryDto) SetWithoutTaskDueDate(v bool) {
	o.WithoutTaskDueDate.Set(&v)
}
// SetWithoutTaskDueDateNil sets the value for WithoutTaskDueDate to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetWithoutTaskDueDateNil() {
	o.WithoutTaskDueDate.Set(nil)
}

// UnsetWithoutTaskDueDate ensures that no value is present for WithoutTaskDueDate, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetWithoutTaskDueDate() {
	o.WithoutTaskDueDate.Unset()
}

// GetTaskFollowUpDate returns the TaskFollowUpDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskFollowUpDate() time.Time {
	if o == nil || IsNil(o.TaskFollowUpDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TaskFollowUpDate.Get()
}

// GetTaskFollowUpDateOk returns a tuple with the TaskFollowUpDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskFollowUpDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskFollowUpDate.Get(), o.TaskFollowUpDate.IsSet()
}

// HasTaskFollowUpDate returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskFollowUpDate() bool {
	if o != nil && o.TaskFollowUpDate.IsSet() {
		return true
	}

	return false
}

// SetTaskFollowUpDate gets a reference to the given NullableTime and assigns it to the TaskFollowUpDate field.
func (o *HistoricTaskInstanceQueryDto) SetTaskFollowUpDate(v time.Time) {
	o.TaskFollowUpDate.Set(&v)
}
// SetTaskFollowUpDateNil sets the value for TaskFollowUpDate to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskFollowUpDateNil() {
	o.TaskFollowUpDate.Set(nil)
}

// UnsetTaskFollowUpDate ensures that no value is present for TaskFollowUpDate, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskFollowUpDate() {
	o.TaskFollowUpDate.Unset()
}

// GetTaskFollowUpDateBefore returns the TaskFollowUpDateBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskFollowUpDateBefore() time.Time {
	if o == nil || IsNil(o.TaskFollowUpDateBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TaskFollowUpDateBefore.Get()
}

// GetTaskFollowUpDateBeforeOk returns a tuple with the TaskFollowUpDateBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskFollowUpDateBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskFollowUpDateBefore.Get(), o.TaskFollowUpDateBefore.IsSet()
}

// HasTaskFollowUpDateBefore returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskFollowUpDateBefore() bool {
	if o != nil && o.TaskFollowUpDateBefore.IsSet() {
		return true
	}

	return false
}

// SetTaskFollowUpDateBefore gets a reference to the given NullableTime and assigns it to the TaskFollowUpDateBefore field.
func (o *HistoricTaskInstanceQueryDto) SetTaskFollowUpDateBefore(v time.Time) {
	o.TaskFollowUpDateBefore.Set(&v)
}
// SetTaskFollowUpDateBeforeNil sets the value for TaskFollowUpDateBefore to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskFollowUpDateBeforeNil() {
	o.TaskFollowUpDateBefore.Set(nil)
}

// UnsetTaskFollowUpDateBefore ensures that no value is present for TaskFollowUpDateBefore, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskFollowUpDateBefore() {
	o.TaskFollowUpDateBefore.Unset()
}

// GetTaskFollowUpDateAfter returns the TaskFollowUpDateAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskFollowUpDateAfter() time.Time {
	if o == nil || IsNil(o.TaskFollowUpDateAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TaskFollowUpDateAfter.Get()
}

// GetTaskFollowUpDateAfterOk returns a tuple with the TaskFollowUpDateAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskFollowUpDateAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskFollowUpDateAfter.Get(), o.TaskFollowUpDateAfter.IsSet()
}

// HasTaskFollowUpDateAfter returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskFollowUpDateAfter() bool {
	if o != nil && o.TaskFollowUpDateAfter.IsSet() {
		return true
	}

	return false
}

// SetTaskFollowUpDateAfter gets a reference to the given NullableTime and assigns it to the TaskFollowUpDateAfter field.
func (o *HistoricTaskInstanceQueryDto) SetTaskFollowUpDateAfter(v time.Time) {
	o.TaskFollowUpDateAfter.Set(&v)
}
// SetTaskFollowUpDateAfterNil sets the value for TaskFollowUpDateAfter to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskFollowUpDateAfterNil() {
	o.TaskFollowUpDateAfter.Set(nil)
}

// UnsetTaskFollowUpDateAfter ensures that no value is present for TaskFollowUpDateAfter, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskFollowUpDateAfter() {
	o.TaskFollowUpDateAfter.Unset()
}

// GetStartedBefore returns the StartedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetStartedBefore() time.Time {
	if o == nil || IsNil(o.StartedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedBefore.Get()
}

// GetStartedBeforeOk returns a tuple with the StartedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetStartedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedBefore.Get(), o.StartedBefore.IsSet()
}

// HasStartedBefore returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasStartedBefore() bool {
	if o != nil && o.StartedBefore.IsSet() {
		return true
	}

	return false
}

// SetStartedBefore gets a reference to the given NullableTime and assigns it to the StartedBefore field.
func (o *HistoricTaskInstanceQueryDto) SetStartedBefore(v time.Time) {
	o.StartedBefore.Set(&v)
}
// SetStartedBeforeNil sets the value for StartedBefore to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetStartedBeforeNil() {
	o.StartedBefore.Set(nil)
}

// UnsetStartedBefore ensures that no value is present for StartedBefore, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetStartedBefore() {
	o.StartedBefore.Unset()
}

// GetStartedAfter returns the StartedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetStartedAfter() time.Time {
	if o == nil || IsNil(o.StartedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAfter.Get()
}

// GetStartedAfterOk returns a tuple with the StartedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetStartedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAfter.Get(), o.StartedAfter.IsSet()
}

// HasStartedAfter returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasStartedAfter() bool {
	if o != nil && o.StartedAfter.IsSet() {
		return true
	}

	return false
}

// SetStartedAfter gets a reference to the given NullableTime and assigns it to the StartedAfter field.
func (o *HistoricTaskInstanceQueryDto) SetStartedAfter(v time.Time) {
	o.StartedAfter.Set(&v)
}
// SetStartedAfterNil sets the value for StartedAfter to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetStartedAfterNil() {
	o.StartedAfter.Set(nil)
}

// UnsetStartedAfter ensures that no value is present for StartedAfter, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetStartedAfter() {
	o.StartedAfter.Unset()
}

// GetFinishedBefore returns the FinishedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetFinishedBefore() time.Time {
	if o == nil || IsNil(o.FinishedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishedBefore.Get()
}

// GetFinishedBeforeOk returns a tuple with the FinishedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetFinishedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedBefore.Get(), o.FinishedBefore.IsSet()
}

// HasFinishedBefore returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasFinishedBefore() bool {
	if o != nil && o.FinishedBefore.IsSet() {
		return true
	}

	return false
}

// SetFinishedBefore gets a reference to the given NullableTime and assigns it to the FinishedBefore field.
func (o *HistoricTaskInstanceQueryDto) SetFinishedBefore(v time.Time) {
	o.FinishedBefore.Set(&v)
}
// SetFinishedBeforeNil sets the value for FinishedBefore to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetFinishedBeforeNil() {
	o.FinishedBefore.Set(nil)
}

// UnsetFinishedBefore ensures that no value is present for FinishedBefore, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetFinishedBefore() {
	o.FinishedBefore.Unset()
}

// GetFinishedAfter returns the FinishedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetFinishedAfter() time.Time {
	if o == nil || IsNil(o.FinishedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAfter.Get()
}

// GetFinishedAfterOk returns a tuple with the FinishedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetFinishedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedAfter.Get(), o.FinishedAfter.IsSet()
}

// HasFinishedAfter returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasFinishedAfter() bool {
	if o != nil && o.FinishedAfter.IsSet() {
		return true
	}

	return false
}

// SetFinishedAfter gets a reference to the given NullableTime and assigns it to the FinishedAfter field.
func (o *HistoricTaskInstanceQueryDto) SetFinishedAfter(v time.Time) {
	o.FinishedAfter.Set(&v)
}
// SetFinishedAfterNil sets the value for FinishedAfter to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetFinishedAfterNil() {
	o.FinishedAfter.Set(nil)
}

// UnsetFinishedAfter ensures that no value is present for FinishedAfter, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetFinishedAfter() {
	o.FinishedAfter.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *HistoricTaskInstanceQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *HistoricTaskInstanceQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetTaskVariables returns the TaskVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.TaskVariables
}

// GetTaskVariablesOk returns a tuple with the TaskVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.TaskVariables) {
		return nil, false
	}
	return o.TaskVariables, true
}

// HasTaskVariables returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskVariables() bool {
	if o != nil && !IsNil(o.TaskVariables) {
		return true
	}

	return false
}

// SetTaskVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the TaskVariables field.
func (o *HistoricTaskInstanceQueryDto) SetTaskVariables(v []VariableQueryParameterDto) {
	o.TaskVariables = v
}

// GetProcessVariables returns the ProcessVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetProcessVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.ProcessVariables
}

// GetProcessVariablesOk returns a tuple with the ProcessVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetProcessVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.ProcessVariables) {
		return nil, false
	}
	return o.ProcessVariables, true
}

// HasProcessVariables returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasProcessVariables() bool {
	if o != nil && !IsNil(o.ProcessVariables) {
		return true
	}

	return false
}

// SetProcessVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the ProcessVariables field.
func (o *HistoricTaskInstanceQueryDto) SetProcessVariables(v []VariableQueryParameterDto) {
	o.ProcessVariables = v
}

// GetVariableNamesIgnoreCase returns the VariableNamesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetVariableNamesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableNamesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableNamesIgnoreCase.Get()
}

// GetVariableNamesIgnoreCaseOk returns a tuple with the VariableNamesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetVariableNamesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNamesIgnoreCase.Get(), o.VariableNamesIgnoreCase.IsSet()
}

// HasVariableNamesIgnoreCase returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasVariableNamesIgnoreCase() bool {
	if o != nil && o.VariableNamesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableNamesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableNamesIgnoreCase field.
func (o *HistoricTaskInstanceQueryDto) SetVariableNamesIgnoreCase(v bool) {
	o.VariableNamesIgnoreCase.Set(&v)
}
// SetVariableNamesIgnoreCaseNil sets the value for VariableNamesIgnoreCase to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetVariableNamesIgnoreCaseNil() {
	o.VariableNamesIgnoreCase.Set(nil)
}

// UnsetVariableNamesIgnoreCase ensures that no value is present for VariableNamesIgnoreCase, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetVariableNamesIgnoreCase() {
	o.VariableNamesIgnoreCase.Unset()
}

// GetVariableValuesIgnoreCase returns the VariableValuesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetVariableValuesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableValuesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableValuesIgnoreCase.Get()
}

// GetVariableValuesIgnoreCaseOk returns a tuple with the VariableValuesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetVariableValuesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValuesIgnoreCase.Get(), o.VariableValuesIgnoreCase.IsSet()
}

// HasVariableValuesIgnoreCase returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasVariableValuesIgnoreCase() bool {
	if o != nil && o.VariableValuesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableValuesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableValuesIgnoreCase field.
func (o *HistoricTaskInstanceQueryDto) SetVariableValuesIgnoreCase(v bool) {
	o.VariableValuesIgnoreCase.Set(&v)
}
// SetVariableValuesIgnoreCaseNil sets the value for VariableValuesIgnoreCase to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetVariableValuesIgnoreCaseNil() {
	o.VariableValuesIgnoreCase.Set(nil)
}

// UnsetVariableValuesIgnoreCase ensures that no value is present for VariableValuesIgnoreCase, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetVariableValuesIgnoreCase() {
	o.VariableValuesIgnoreCase.Unset()
}

// GetTaskInvolvedUser returns the TaskInvolvedUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskInvolvedUser() string {
	if o == nil || IsNil(o.TaskInvolvedUser.Get()) {
		var ret string
		return ret
	}
	return *o.TaskInvolvedUser.Get()
}

// GetTaskInvolvedUserOk returns a tuple with the TaskInvolvedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskInvolvedUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskInvolvedUser.Get(), o.TaskInvolvedUser.IsSet()
}

// HasTaskInvolvedUser returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskInvolvedUser() bool {
	if o != nil && o.TaskInvolvedUser.IsSet() {
		return true
	}

	return false
}

// SetTaskInvolvedUser gets a reference to the given NullableString and assigns it to the TaskInvolvedUser field.
func (o *HistoricTaskInstanceQueryDto) SetTaskInvolvedUser(v string) {
	o.TaskInvolvedUser.Set(&v)
}
// SetTaskInvolvedUserNil sets the value for TaskInvolvedUser to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskInvolvedUserNil() {
	o.TaskInvolvedUser.Set(nil)
}

// UnsetTaskInvolvedUser ensures that no value is present for TaskInvolvedUser, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskInvolvedUser() {
	o.TaskInvolvedUser.Unset()
}

// GetTaskInvolvedGroup returns the TaskInvolvedGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskInvolvedGroup() string {
	if o == nil || IsNil(o.TaskInvolvedGroup.Get()) {
		var ret string
		return ret
	}
	return *o.TaskInvolvedGroup.Get()
}

// GetTaskInvolvedGroupOk returns a tuple with the TaskInvolvedGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskInvolvedGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskInvolvedGroup.Get(), o.TaskInvolvedGroup.IsSet()
}

// HasTaskInvolvedGroup returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskInvolvedGroup() bool {
	if o != nil && o.TaskInvolvedGroup.IsSet() {
		return true
	}

	return false
}

// SetTaskInvolvedGroup gets a reference to the given NullableString and assigns it to the TaskInvolvedGroup field.
func (o *HistoricTaskInstanceQueryDto) SetTaskInvolvedGroup(v string) {
	o.TaskInvolvedGroup.Set(&v)
}
// SetTaskInvolvedGroupNil sets the value for TaskInvolvedGroup to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskInvolvedGroupNil() {
	o.TaskInvolvedGroup.Set(nil)
}

// UnsetTaskInvolvedGroup ensures that no value is present for TaskInvolvedGroup, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskInvolvedGroup() {
	o.TaskInvolvedGroup.Unset()
}

// GetTaskHadCandidateUser returns the TaskHadCandidateUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskHadCandidateUser() string {
	if o == nil || IsNil(o.TaskHadCandidateUser.Get()) {
		var ret string
		return ret
	}
	return *o.TaskHadCandidateUser.Get()
}

// GetTaskHadCandidateUserOk returns a tuple with the TaskHadCandidateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskHadCandidateUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskHadCandidateUser.Get(), o.TaskHadCandidateUser.IsSet()
}

// HasTaskHadCandidateUser returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskHadCandidateUser() bool {
	if o != nil && o.TaskHadCandidateUser.IsSet() {
		return true
	}

	return false
}

// SetTaskHadCandidateUser gets a reference to the given NullableString and assigns it to the TaskHadCandidateUser field.
func (o *HistoricTaskInstanceQueryDto) SetTaskHadCandidateUser(v string) {
	o.TaskHadCandidateUser.Set(&v)
}
// SetTaskHadCandidateUserNil sets the value for TaskHadCandidateUser to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskHadCandidateUserNil() {
	o.TaskHadCandidateUser.Set(nil)
}

// UnsetTaskHadCandidateUser ensures that no value is present for TaskHadCandidateUser, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskHadCandidateUser() {
	o.TaskHadCandidateUser.Unset()
}

// GetTaskHadCandidateGroup returns the TaskHadCandidateGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetTaskHadCandidateGroup() string {
	if o == nil || IsNil(o.TaskHadCandidateGroup.Get()) {
		var ret string
		return ret
	}
	return *o.TaskHadCandidateGroup.Get()
}

// GetTaskHadCandidateGroupOk returns a tuple with the TaskHadCandidateGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetTaskHadCandidateGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskHadCandidateGroup.Get(), o.TaskHadCandidateGroup.IsSet()
}

// HasTaskHadCandidateGroup returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasTaskHadCandidateGroup() bool {
	if o != nil && o.TaskHadCandidateGroup.IsSet() {
		return true
	}

	return false
}

// SetTaskHadCandidateGroup gets a reference to the given NullableString and assigns it to the TaskHadCandidateGroup field.
func (o *HistoricTaskInstanceQueryDto) SetTaskHadCandidateGroup(v string) {
	o.TaskHadCandidateGroup.Set(&v)
}
// SetTaskHadCandidateGroupNil sets the value for TaskHadCandidateGroup to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetTaskHadCandidateGroupNil() {
	o.TaskHadCandidateGroup.Set(nil)
}

// UnsetTaskHadCandidateGroup ensures that no value is present for TaskHadCandidateGroup, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetTaskHadCandidateGroup() {
	o.TaskHadCandidateGroup.Unset()
}

// GetWithCandidateGroups returns the WithCandidateGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetWithCandidateGroups() bool {
	if o == nil || IsNil(o.WithCandidateGroups.Get()) {
		var ret bool
		return ret
	}
	return *o.WithCandidateGroups.Get()
}

// GetWithCandidateGroupsOk returns a tuple with the WithCandidateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetWithCandidateGroupsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithCandidateGroups.Get(), o.WithCandidateGroups.IsSet()
}

// HasWithCandidateGroups returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasWithCandidateGroups() bool {
	if o != nil && o.WithCandidateGroups.IsSet() {
		return true
	}

	return false
}

// SetWithCandidateGroups gets a reference to the given NullableBool and assigns it to the WithCandidateGroups field.
func (o *HistoricTaskInstanceQueryDto) SetWithCandidateGroups(v bool) {
	o.WithCandidateGroups.Set(&v)
}
// SetWithCandidateGroupsNil sets the value for WithCandidateGroups to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetWithCandidateGroupsNil() {
	o.WithCandidateGroups.Set(nil)
}

// UnsetWithCandidateGroups ensures that no value is present for WithCandidateGroups, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetWithCandidateGroups() {
	o.WithCandidateGroups.Unset()
}

// GetWithoutCandidateGroups returns the WithoutCandidateGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetWithoutCandidateGroups() bool {
	if o == nil || IsNil(o.WithoutCandidateGroups.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutCandidateGroups.Get()
}

// GetWithoutCandidateGroupsOk returns a tuple with the WithoutCandidateGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetWithoutCandidateGroupsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutCandidateGroups.Get(), o.WithoutCandidateGroups.IsSet()
}

// HasWithoutCandidateGroups returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasWithoutCandidateGroups() bool {
	if o != nil && o.WithoutCandidateGroups.IsSet() {
		return true
	}

	return false
}

// SetWithoutCandidateGroups gets a reference to the given NullableBool and assigns it to the WithoutCandidateGroups field.
func (o *HistoricTaskInstanceQueryDto) SetWithoutCandidateGroups(v bool) {
	o.WithoutCandidateGroups.Set(&v)
}
// SetWithoutCandidateGroupsNil sets the value for WithoutCandidateGroups to be an explicit nil
func (o *HistoricTaskInstanceQueryDto) SetWithoutCandidateGroupsNil() {
	o.WithoutCandidateGroups.Set(nil)
}

// UnsetWithoutCandidateGroups ensures that no value is present for WithoutCandidateGroups, not even an explicit nil
func (o *HistoricTaskInstanceQueryDto) UnsetWithoutCandidateGroups() {
	o.WithoutCandidateGroups.Unset()
}

// GetOrQueries returns the OrQueries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetOrQueries() []HistoricTaskInstanceQueryDto {
	if o == nil {
		var ret []HistoricTaskInstanceQueryDto
		return ret
	}
	return o.OrQueries
}

// GetOrQueriesOk returns a tuple with the OrQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetOrQueriesOk() ([]HistoricTaskInstanceQueryDto, bool) {
	if o == nil || IsNil(o.OrQueries) {
		return nil, false
	}
	return o.OrQueries, true
}

// HasOrQueries returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasOrQueries() bool {
	if o != nil && !IsNil(o.OrQueries) {
		return true
	}

	return false
}

// SetOrQueries gets a reference to the given []HistoricTaskInstanceQueryDto and assigns it to the OrQueries field.
func (o *HistoricTaskInstanceQueryDto) SetOrQueries(v []HistoricTaskInstanceQueryDto) {
	o.OrQueries = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricTaskInstanceQueryDto) GetSorting() []HistoricTaskInstanceQueryDtoSortingInner {
	if o == nil {
		var ret []HistoricTaskInstanceQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricTaskInstanceQueryDto) GetSortingOk() ([]HistoricTaskInstanceQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *HistoricTaskInstanceQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []HistoricTaskInstanceQueryDtoSortingInner and assigns it to the Sorting field.
func (o *HistoricTaskInstanceQueryDto) SetSorting(v []HistoricTaskInstanceQueryDtoSortingInner) {
	o.Sorting = v
}

func (o HistoricTaskInstanceQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricTaskInstanceQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.TaskParentTaskId.IsSet() {
		toSerialize["taskParentTaskId"] = o.TaskParentTaskId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessInstanceBusinessKey.IsSet() {
		toSerialize["processInstanceBusinessKey"] = o.ProcessInstanceBusinessKey.Get()
	}
	if o.ProcessInstanceBusinessKeyIn != nil {
		toSerialize["processInstanceBusinessKeyIn"] = o.ProcessInstanceBusinessKeyIn
	}
	if o.ProcessInstanceBusinessKeyLike.IsSet() {
		toSerialize["processInstanceBusinessKeyLike"] = o.ProcessInstanceBusinessKeyLike.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionName.IsSet() {
		toSerialize["processDefinitionName"] = o.ProcessDefinitionName.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.CaseExecutionId.IsSet() {
		toSerialize["caseExecutionId"] = o.CaseExecutionId.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseDefinitionKey.IsSet() {
		toSerialize["caseDefinitionKey"] = o.CaseDefinitionKey.Get()
	}
	if o.CaseDefinitionName.IsSet() {
		toSerialize["caseDefinitionName"] = o.CaseDefinitionName.Get()
	}
	if o.ActivityInstanceIdIn != nil {
		toSerialize["activityInstanceIdIn"] = o.ActivityInstanceIdIn
	}
	if o.TaskName.IsSet() {
		toSerialize["taskName"] = o.TaskName.Get()
	}
	if o.TaskNameLike.IsSet() {
		toSerialize["taskNameLike"] = o.TaskNameLike.Get()
	}
	if o.TaskDescription.IsSet() {
		toSerialize["taskDescription"] = o.TaskDescription.Get()
	}
	if o.TaskDescriptionLike.IsSet() {
		toSerialize["taskDescriptionLike"] = o.TaskDescriptionLike.Get()
	}
	if o.TaskDefinitionKey.IsSet() {
		toSerialize["taskDefinitionKey"] = o.TaskDefinitionKey.Get()
	}
	if o.TaskDefinitionKeyIn != nil {
		toSerialize["taskDefinitionKeyIn"] = o.TaskDefinitionKeyIn
	}
	if o.TaskDeleteReason.IsSet() {
		toSerialize["taskDeleteReason"] = o.TaskDeleteReason.Get()
	}
	if o.TaskDeleteReasonLike.IsSet() {
		toSerialize["taskDeleteReasonLike"] = o.TaskDeleteReasonLike.Get()
	}
	if o.TaskAssignee.IsSet() {
		toSerialize["taskAssignee"] = o.TaskAssignee.Get()
	}
	if o.TaskAssigneeLike.IsSet() {
		toSerialize["taskAssigneeLike"] = o.TaskAssigneeLike.Get()
	}
	if o.TaskOwner.IsSet() {
		toSerialize["taskOwner"] = o.TaskOwner.Get()
	}
	if o.TaskOwnerLike.IsSet() {
		toSerialize["taskOwnerLike"] = o.TaskOwnerLike.Get()
	}
	if o.TaskPriority.IsSet() {
		toSerialize["taskPriority"] = o.TaskPriority.Get()
	}
	if o.Assigned.IsSet() {
		toSerialize["assigned"] = o.Assigned.Get()
	}
	if o.Unassigned.IsSet() {
		toSerialize["unassigned"] = o.Unassigned.Get()
	}
	if o.Finished.IsSet() {
		toSerialize["finished"] = o.Finished.Get()
	}
	if o.Unfinished.IsSet() {
		toSerialize["unfinished"] = o.Unfinished.Get()
	}
	if o.ProcessFinished.IsSet() {
		toSerialize["processFinished"] = o.ProcessFinished.Get()
	}
	if o.ProcessUnfinished.IsSet() {
		toSerialize["processUnfinished"] = o.ProcessUnfinished.Get()
	}
	if o.TaskDueDate.IsSet() {
		toSerialize["taskDueDate"] = o.TaskDueDate.Get()
	}
	if o.TaskDueDateBefore.IsSet() {
		toSerialize["taskDueDateBefore"] = o.TaskDueDateBefore.Get()
	}
	if o.TaskDueDateAfter.IsSet() {
		toSerialize["taskDueDateAfter"] = o.TaskDueDateAfter.Get()
	}
	if o.WithoutTaskDueDate.IsSet() {
		toSerialize["withoutTaskDueDate"] = o.WithoutTaskDueDate.Get()
	}
	if o.TaskFollowUpDate.IsSet() {
		toSerialize["taskFollowUpDate"] = o.TaskFollowUpDate.Get()
	}
	if o.TaskFollowUpDateBefore.IsSet() {
		toSerialize["taskFollowUpDateBefore"] = o.TaskFollowUpDateBefore.Get()
	}
	if o.TaskFollowUpDateAfter.IsSet() {
		toSerialize["taskFollowUpDateAfter"] = o.TaskFollowUpDateAfter.Get()
	}
	if o.StartedBefore.IsSet() {
		toSerialize["startedBefore"] = o.StartedBefore.Get()
	}
	if o.StartedAfter.IsSet() {
		toSerialize["startedAfter"] = o.StartedAfter.Get()
	}
	if o.FinishedBefore.IsSet() {
		toSerialize["finishedBefore"] = o.FinishedBefore.Get()
	}
	if o.FinishedAfter.IsSet() {
		toSerialize["finishedAfter"] = o.FinishedAfter.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.TaskVariables != nil {
		toSerialize["taskVariables"] = o.TaskVariables
	}
	if o.ProcessVariables != nil {
		toSerialize["processVariables"] = o.ProcessVariables
	}
	if o.VariableNamesIgnoreCase.IsSet() {
		toSerialize["variableNamesIgnoreCase"] = o.VariableNamesIgnoreCase.Get()
	}
	if o.VariableValuesIgnoreCase.IsSet() {
		toSerialize["variableValuesIgnoreCase"] = o.VariableValuesIgnoreCase.Get()
	}
	if o.TaskInvolvedUser.IsSet() {
		toSerialize["taskInvolvedUser"] = o.TaskInvolvedUser.Get()
	}
	if o.TaskInvolvedGroup.IsSet() {
		toSerialize["taskInvolvedGroup"] = o.TaskInvolvedGroup.Get()
	}
	if o.TaskHadCandidateUser.IsSet() {
		toSerialize["taskHadCandidateUser"] = o.TaskHadCandidateUser.Get()
	}
	if o.TaskHadCandidateGroup.IsSet() {
		toSerialize["taskHadCandidateGroup"] = o.TaskHadCandidateGroup.Get()
	}
	if o.WithCandidateGroups.IsSet() {
		toSerialize["withCandidateGroups"] = o.WithCandidateGroups.Get()
	}
	if o.WithoutCandidateGroups.IsSet() {
		toSerialize["withoutCandidateGroups"] = o.WithoutCandidateGroups.Get()
	}
	if o.OrQueries != nil {
		toSerialize["orQueries"] = o.OrQueries
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableHistoricTaskInstanceQueryDto struct {
	value *HistoricTaskInstanceQueryDto
	isSet bool
}

func (v NullableHistoricTaskInstanceQueryDto) Get() *HistoricTaskInstanceQueryDto {
	return v.value
}

func (v *NullableHistoricTaskInstanceQueryDto) Set(val *HistoricTaskInstanceQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricTaskInstanceQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricTaskInstanceQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricTaskInstanceQueryDto(val *HistoricTaskInstanceQueryDto) *NullableHistoricTaskInstanceQueryDto {
	return &NullableHistoricTaskInstanceQueryDto{value: val, isSet: true}
}

func (v NullableHistoricTaskInstanceQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricTaskInstanceQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


