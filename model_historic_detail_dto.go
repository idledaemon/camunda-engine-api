/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricDetailDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricDetailDto{}

// HistoricDetailDto struct for HistoricDetailDto
type HistoricDetailDto struct {
	// The id of the historic detail.
	Id NullableString `json:"id,omitempty"`
	// The type of the historic detail. Either `formField` for a submitted form field value or `variableUpdate` for variable updates.
	Type NullableString `json:"type,omitempty"`
	// The key of the process definition that this historic detail belongs to.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The id of the process definition that this historic detail belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The id of the process instance the historic detail belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the activity instance the historic detail belongs to.
	ActivityInstanceId NullableString `json:"activityInstanceId,omitempty"`
	// The id of the execution the historic detail belongs to.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// The key of the case definition that this historic detail belongs to.
	CaseDefinitionKey NullableString `json:"caseDefinitionKey,omitempty"`
	// The id of the case definition that this historic detail belongs to.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// The id of the case instance the historic detail belongs to.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// The id of the case execution the historic detail belongs to.
	CaseExecutionId NullableString `json:"caseExecutionId,omitempty"`
	// The id of the task the historic detail belongs to.
	TaskId NullableString `json:"taskId,omitempty"`
	// The id of the tenant that this historic detail belongs to.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The id of user operation which links historic detail with [user operation log](https://docs.camunda.org/manual/7.21/reference/rest/history/user-operation-log/) entries.
	UserOperationId NullableString `json:"userOperationId,omitempty"`
	// The time when this historic detail occurred. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	Time NullableTime `json:"time,omitempty"`
	// The time after which the historic detail should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The process instance id of the root process instance that initiated the process containing this historic detail.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
	// The id of the form field.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `formField`.
	FieldId NullableString `json:"fieldId,omitempty"`
	// The submitted form field value. The value differs depending on the form field's type and on the `deserializeValue` parameter.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `formField`.
	FieldValue map[string]interface{} `json:"fieldValue,omitempty"`
	// The name of the variable which has been updated.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	VariableName NullableString `json:"variableName,omitempty"`
	// The id of the associated variable instance.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	VariableInstanceId NullableString `json:"variableInstanceId,omitempty"`
	// The value type of the variable.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	VariableType NullableString `json:"variableType,omitempty"`
	// The variable's value. Value differs depending on the variable's type and on the deserializeValues parameter.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	Value map[string]interface{} `json:"value,omitempty"`
	// A JSON object containing additional, value-type-dependent properties. For variables of type `Object`, the following properties are returned:  * `objectTypeName`: A string representation of the object's type name. * `serializationDataFormat`: The serialization format used to store the variable.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	ValueInfo map[string]interface{} `json:"valueInfo,omitempty"`
	// Returns `true` for variable updates that contains the initial values of the variables.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	Initial NullableBool `json:"initial,omitempty"`
	// The revision of the historic variable update.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	Revision NullableInt32 `json:"revision,omitempty"`
	// An error message in case a Java Serialized Object could not be de-serialized.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewHistoricDetailDto instantiates a new HistoricDetailDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricDetailDto() *HistoricDetailDto {
	this := HistoricDetailDto{}
	return &this
}

// NewHistoricDetailDtoWithDefaults instantiates a new HistoricDetailDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricDetailDtoWithDefaults() *HistoricDetailDto {
	this := HistoricDetailDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricDetailDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricDetailDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricDetailDto) UnsetId() {
	o.Id.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HistoricDetailDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HistoricDetailDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HistoricDetailDto) UnsetType() {
	o.Type.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricDetailDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricDetailDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricDetailDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricDetailDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricDetailDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricDetailDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricDetailDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricDetailDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricDetailDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetActivityInstanceId returns the ActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetActivityInstanceId() string {
	if o == nil || IsNil(o.ActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityInstanceId.Get()
}

// GetActivityInstanceIdOk returns a tuple with the ActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityInstanceId.Get(), o.ActivityInstanceId.IsSet()
}

// HasActivityInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasActivityInstanceId() bool {
	if o != nil && o.ActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetActivityInstanceId gets a reference to the given NullableString and assigns it to the ActivityInstanceId field.
func (o *HistoricDetailDto) SetActivityInstanceId(v string) {
	o.ActivityInstanceId.Set(&v)
}
// SetActivityInstanceIdNil sets the value for ActivityInstanceId to be an explicit nil
func (o *HistoricDetailDto) SetActivityInstanceIdNil() {
	o.ActivityInstanceId.Set(nil)
}

// UnsetActivityInstanceId ensures that no value is present for ActivityInstanceId, not even an explicit nil
func (o *HistoricDetailDto) UnsetActivityInstanceId() {
	o.ActivityInstanceId.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricDetailDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricDetailDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricDetailDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetCaseDefinitionKey returns the CaseDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetCaseDefinitionKey() string {
	if o == nil || IsNil(o.CaseDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionKey.Get()
}

// GetCaseDefinitionKeyOk returns a tuple with the CaseDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetCaseDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionKey.Get(), o.CaseDefinitionKey.IsSet()
}

// HasCaseDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasCaseDefinitionKey() bool {
	if o != nil && o.CaseDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionKey gets a reference to the given NullableString and assigns it to the CaseDefinitionKey field.
func (o *HistoricDetailDto) SetCaseDefinitionKey(v string) {
	o.CaseDefinitionKey.Set(&v)
}
// SetCaseDefinitionKeyNil sets the value for CaseDefinitionKey to be an explicit nil
func (o *HistoricDetailDto) SetCaseDefinitionKeyNil() {
	o.CaseDefinitionKey.Set(nil)
}

// UnsetCaseDefinitionKey ensures that no value is present for CaseDefinitionKey, not even an explicit nil
func (o *HistoricDetailDto) UnsetCaseDefinitionKey() {
	o.CaseDefinitionKey.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *HistoricDetailDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *HistoricDetailDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *HistoricDetailDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricDetailDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricDetailDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricDetailDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetCaseExecutionId returns the CaseExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetCaseExecutionId() string {
	if o == nil || IsNil(o.CaseExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseExecutionId.Get()
}

// GetCaseExecutionIdOk returns a tuple with the CaseExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetCaseExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseExecutionId.Get(), o.CaseExecutionId.IsSet()
}

// HasCaseExecutionId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasCaseExecutionId() bool {
	if o != nil && o.CaseExecutionId.IsSet() {
		return true
	}

	return false
}

// SetCaseExecutionId gets a reference to the given NullableString and assigns it to the CaseExecutionId field.
func (o *HistoricDetailDto) SetCaseExecutionId(v string) {
	o.CaseExecutionId.Set(&v)
}
// SetCaseExecutionIdNil sets the value for CaseExecutionId to be an explicit nil
func (o *HistoricDetailDto) SetCaseExecutionIdNil() {
	o.CaseExecutionId.Set(nil)
}

// UnsetCaseExecutionId ensures that no value is present for CaseExecutionId, not even an explicit nil
func (o *HistoricDetailDto) UnsetCaseExecutionId() {
	o.CaseExecutionId.Unset()
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *HistoricDetailDto) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *HistoricDetailDto) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *HistoricDetailDto) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *HistoricDetailDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *HistoricDetailDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *HistoricDetailDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUserOperationId returns the UserOperationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetUserOperationId() string {
	if o == nil || IsNil(o.UserOperationId.Get()) {
		var ret string
		return ret
	}
	return *o.UserOperationId.Get()
}

// GetUserOperationIdOk returns a tuple with the UserOperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetUserOperationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserOperationId.Get(), o.UserOperationId.IsSet()
}

// HasUserOperationId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasUserOperationId() bool {
	if o != nil && o.UserOperationId.IsSet() {
		return true
	}

	return false
}

// SetUserOperationId gets a reference to the given NullableString and assigns it to the UserOperationId field.
func (o *HistoricDetailDto) SetUserOperationId(v string) {
	o.UserOperationId.Set(&v)
}
// SetUserOperationIdNil sets the value for UserOperationId to be an explicit nil
func (o *HistoricDetailDto) SetUserOperationIdNil() {
	o.UserOperationId.Set(nil)
}

// UnsetUserOperationId ensures that no value is present for UserOperationId, not even an explicit nil
func (o *HistoricDetailDto) UnsetUserOperationId() {
	o.UserOperationId.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetTime() time.Time {
	if o == nil || IsNil(o.Time.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Time.Get()
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Time.Get(), o.Time.IsSet()
}

// HasTime returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasTime() bool {
	if o != nil && o.Time.IsSet() {
		return true
	}

	return false
}

// SetTime gets a reference to the given NullableTime and assigns it to the Time field.
func (o *HistoricDetailDto) SetTime(v time.Time) {
	o.Time.Set(&v)
}
// SetTimeNil sets the value for Time to be an explicit nil
func (o *HistoricDetailDto) SetTimeNil() {
	o.Time.Set(nil)
}

// UnsetTime ensures that no value is present for Time, not even an explicit nil
func (o *HistoricDetailDto) UnsetTime() {
	o.Time.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricDetailDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricDetailDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricDetailDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricDetailDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricDetailDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricDetailDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

// GetFieldId returns the FieldId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetFieldId() string {
	if o == nil || IsNil(o.FieldId.Get()) {
		var ret string
		return ret
	}
	return *o.FieldId.Get()
}

// GetFieldIdOk returns a tuple with the FieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldId.Get(), o.FieldId.IsSet()
}

// HasFieldId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasFieldId() bool {
	if o != nil && o.FieldId.IsSet() {
		return true
	}

	return false
}

// SetFieldId gets a reference to the given NullableString and assigns it to the FieldId field.
func (o *HistoricDetailDto) SetFieldId(v string) {
	o.FieldId.Set(&v)
}
// SetFieldIdNil sets the value for FieldId to be an explicit nil
func (o *HistoricDetailDto) SetFieldIdNil() {
	o.FieldId.Set(nil)
}

// UnsetFieldId ensures that no value is present for FieldId, not even an explicit nil
func (o *HistoricDetailDto) UnsetFieldId() {
	o.FieldId.Unset()
}

// GetFieldValue returns the FieldValue field value if set, zero value otherwise.
func (o *HistoricDetailDto) GetFieldValue() map[string]interface{} {
	if o == nil || IsNil(o.FieldValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldValue
}

// GetFieldValueOk returns a tuple with the FieldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricDetailDto) GetFieldValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FieldValue) {
		return map[string]interface{}{}, false
	}
	return o.FieldValue, true
}

// HasFieldValue returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasFieldValue() bool {
	if o != nil && !IsNil(o.FieldValue) {
		return true
	}

	return false
}

// SetFieldValue gets a reference to the given map[string]interface{} and assigns it to the FieldValue field.
func (o *HistoricDetailDto) SetFieldValue(v map[string]interface{}) {
	o.FieldValue = v
}

// GetVariableName returns the VariableName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetVariableName() string {
	if o == nil || IsNil(o.VariableName.Get()) {
		var ret string
		return ret
	}
	return *o.VariableName.Get()
}

// GetVariableNameOk returns a tuple with the VariableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetVariableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableName.Get(), o.VariableName.IsSet()
}

// HasVariableName returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasVariableName() bool {
	if o != nil && o.VariableName.IsSet() {
		return true
	}

	return false
}

// SetVariableName gets a reference to the given NullableString and assigns it to the VariableName field.
func (o *HistoricDetailDto) SetVariableName(v string) {
	o.VariableName.Set(&v)
}
// SetVariableNameNil sets the value for VariableName to be an explicit nil
func (o *HistoricDetailDto) SetVariableNameNil() {
	o.VariableName.Set(nil)
}

// UnsetVariableName ensures that no value is present for VariableName, not even an explicit nil
func (o *HistoricDetailDto) UnsetVariableName() {
	o.VariableName.Unset()
}

// GetVariableInstanceId returns the VariableInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetVariableInstanceId() string {
	if o == nil || IsNil(o.VariableInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.VariableInstanceId.Get()
}

// GetVariableInstanceIdOk returns a tuple with the VariableInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetVariableInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableInstanceId.Get(), o.VariableInstanceId.IsSet()
}

// HasVariableInstanceId returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasVariableInstanceId() bool {
	if o != nil && o.VariableInstanceId.IsSet() {
		return true
	}

	return false
}

// SetVariableInstanceId gets a reference to the given NullableString and assigns it to the VariableInstanceId field.
func (o *HistoricDetailDto) SetVariableInstanceId(v string) {
	o.VariableInstanceId.Set(&v)
}
// SetVariableInstanceIdNil sets the value for VariableInstanceId to be an explicit nil
func (o *HistoricDetailDto) SetVariableInstanceIdNil() {
	o.VariableInstanceId.Set(nil)
}

// UnsetVariableInstanceId ensures that no value is present for VariableInstanceId, not even an explicit nil
func (o *HistoricDetailDto) UnsetVariableInstanceId() {
	o.VariableInstanceId.Unset()
}

// GetVariableType returns the VariableType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetVariableType() string {
	if o == nil || IsNil(o.VariableType.Get()) {
		var ret string
		return ret
	}
	return *o.VariableType.Get()
}

// GetVariableTypeOk returns a tuple with the VariableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetVariableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableType.Get(), o.VariableType.IsSet()
}

// HasVariableType returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasVariableType() bool {
	if o != nil && o.VariableType.IsSet() {
		return true
	}

	return false
}

// SetVariableType gets a reference to the given NullableString and assigns it to the VariableType field.
func (o *HistoricDetailDto) SetVariableType(v string) {
	o.VariableType.Set(&v)
}
// SetVariableTypeNil sets the value for VariableType to be an explicit nil
func (o *HistoricDetailDto) SetVariableTypeNil() {
	o.VariableType.Set(nil)
}

// UnsetVariableType ensures that no value is present for VariableType, not even an explicit nil
func (o *HistoricDetailDto) UnsetVariableType() {
	o.VariableType.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *HistoricDetailDto) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricDetailDto) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *HistoricDetailDto) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetValueInfo returns the ValueInfo field value if set, zero value otherwise.
func (o *HistoricDetailDto) GetValueInfo() map[string]interface{} {
	if o == nil || IsNil(o.ValueInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.ValueInfo
}

// GetValueInfoOk returns a tuple with the ValueInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricDetailDto) GetValueInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ValueInfo) {
		return map[string]interface{}{}, false
	}
	return o.ValueInfo, true
}

// HasValueInfo returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasValueInfo() bool {
	if o != nil && !IsNil(o.ValueInfo) {
		return true
	}

	return false
}

// SetValueInfo gets a reference to the given map[string]interface{} and assigns it to the ValueInfo field.
func (o *HistoricDetailDto) SetValueInfo(v map[string]interface{}) {
	o.ValueInfo = v
}

// GetInitial returns the Initial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetInitial() bool {
	if o == nil || IsNil(o.Initial.Get()) {
		var ret bool
		return ret
	}
	return *o.Initial.Get()
}

// GetInitialOk returns a tuple with the Initial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetInitialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Initial.Get(), o.Initial.IsSet()
}

// HasInitial returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasInitial() bool {
	if o != nil && o.Initial.IsSet() {
		return true
	}

	return false
}

// SetInitial gets a reference to the given NullableBool and assigns it to the Initial field.
func (o *HistoricDetailDto) SetInitial(v bool) {
	o.Initial.Set(&v)
}
// SetInitialNil sets the value for Initial to be an explicit nil
func (o *HistoricDetailDto) SetInitialNil() {
	o.Initial.Set(nil)
}

// UnsetInitial ensures that no value is present for Initial, not even an explicit nil
func (o *HistoricDetailDto) UnsetInitial() {
	o.Initial.Unset()
}

// GetRevision returns the Revision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetRevision() int32 {
	if o == nil || IsNil(o.Revision.Get()) {
		var ret int32
		return ret
	}
	return *o.Revision.Get()
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Revision.Get(), o.Revision.IsSet()
}

// HasRevision returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasRevision() bool {
	if o != nil && o.Revision.IsSet() {
		return true
	}

	return false
}

// SetRevision gets a reference to the given NullableInt32 and assigns it to the Revision field.
func (o *HistoricDetailDto) SetRevision(v int32) {
	o.Revision.Set(&v)
}
// SetRevisionNil sets the value for Revision to be an explicit nil
func (o *HistoricDetailDto) SetRevisionNil() {
	o.Revision.Set(nil)
}

// UnsetRevision ensures that no value is present for Revision, not even an explicit nil
func (o *HistoricDetailDto) UnsetRevision() {
	o.Revision.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDetailDto) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDetailDto) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *HistoricDetailDto) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *HistoricDetailDto) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *HistoricDetailDto) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *HistoricDetailDto) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o HistoricDetailDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricDetailDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ActivityInstanceId.IsSet() {
		toSerialize["activityInstanceId"] = o.ActivityInstanceId.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.CaseDefinitionKey.IsSet() {
		toSerialize["caseDefinitionKey"] = o.CaseDefinitionKey.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.CaseExecutionId.IsSet() {
		toSerialize["caseExecutionId"] = o.CaseExecutionId.Get()
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.UserOperationId.IsSet() {
		toSerialize["userOperationId"] = o.UserOperationId.Get()
	}
	if o.Time.IsSet() {
		toSerialize["time"] = o.Time.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	if o.FieldId.IsSet() {
		toSerialize["fieldId"] = o.FieldId.Get()
	}
	if !IsNil(o.FieldValue) {
		toSerialize["fieldValue"] = o.FieldValue
	}
	if o.VariableName.IsSet() {
		toSerialize["variableName"] = o.VariableName.Get()
	}
	if o.VariableInstanceId.IsSet() {
		toSerialize["variableInstanceId"] = o.VariableInstanceId.Get()
	}
	if o.VariableType.IsSet() {
		toSerialize["variableType"] = o.VariableType.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueInfo) {
		toSerialize["valueInfo"] = o.ValueInfo
	}
	if o.Initial.IsSet() {
		toSerialize["initial"] = o.Initial.Get()
	}
	if o.Revision.IsSet() {
		toSerialize["revision"] = o.Revision.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return toSerialize, nil
}

type NullableHistoricDetailDto struct {
	value *HistoricDetailDto
	isSet bool
}

func (v NullableHistoricDetailDto) Get() *HistoricDetailDto {
	return v.value
}

func (v *NullableHistoricDetailDto) Set(val *HistoricDetailDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricDetailDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricDetailDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricDetailDto(val *HistoricDetailDto) *NullableHistoricDetailDto {
	return &NullableHistoricDetailDto{value: val, isSet: true}
}

func (v NullableHistoricDetailDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricDetailDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


