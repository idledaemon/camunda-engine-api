/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ExecutionQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionQueryDto{}

// ExecutionQueryDto A Execution instance query which defines a list of Execution instances
type ExecutionQueryDto struct {
	// Filter by the business key of the process instances the executions belong to.
	BusinessKey NullableString `json:"businessKey,omitempty"`
	// Filter by the process definition the executions run on.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Filter by the key of the process definition the executions run on.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Filter by the id of the process instance the execution belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Filter by the id of the activity the execution currently executes.
	ActivityId NullableString `json:"activityId,omitempty"`
	// Select only those executions that expect a signal of the given name.
	SignalEventSubscriptionName NullableString `json:"signalEventSubscriptionName,omitempty"`
	// Select only those executions that expect a message of the given name.
	MessageEventSubscriptionName NullableString `json:"messageEventSubscriptionName,omitempty"`
	// Only include active executions. Value may only be `true`, as `false` is the default behavior.
	Active NullableBool `json:"active,omitempty"`
	// Only include suspended executions. Value may only be `true`, as `false` is the default behavior.
	Suspended NullableBool `json:"suspended,omitempty"`
	// Filter by the incident id.
	IncidentId NullableString `json:"incidentId,omitempty"`
	// Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
	IncidentType NullableString `json:"incidentType,omitempty"`
	// Filter by the incident message. Exact match.
	IncidentMessage NullableString `json:"incidentMessage,omitempty"`
	// Filter by the incident message that the parameter is a substring of.
	IncidentMessageLike NullableString `json:"incidentMessageLike,omitempty"`
	// Filter by a  list of tenant ids. An execution must have one of the given tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// An array to only include executions that have variables with certain values.  The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
	Variables []VariableQueryParameterDto `json:"variables,omitempty"`
	// An array to only include executions that belong to a process instance with variables with certain values.  The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to.
	ProcessVariables []VariableQueryParameterDto `json:"processVariables,omitempty"`
	// Match all variable names provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
	VariableNamesIgnoreCase NullableBool `json:"variableNamesIgnoreCase,omitempty"`
	// Match all variable values provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
	VariableValuesIgnoreCase NullableBool `json:"variableValuesIgnoreCase,omitempty"`
	// An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Has no effect for the `/count` endpoint
	Sorting []ExecutionQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewExecutionQueryDto instantiates a new ExecutionQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionQueryDto() *ExecutionQueryDto {
	this := ExecutionQueryDto{}
	return &this
}

// NewExecutionQueryDtoWithDefaults instantiates a new ExecutionQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionQueryDtoWithDefaults() *ExecutionQueryDto {
	this := ExecutionQueryDto{}
	return &this
}

// GetBusinessKey returns the BusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetBusinessKey() string {
	if o == nil || IsNil(o.BusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessKey.Get()
}

// GetBusinessKeyOk returns a tuple with the BusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessKey.Get(), o.BusinessKey.IsSet()
}

// HasBusinessKey returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasBusinessKey() bool {
	if o != nil && o.BusinessKey.IsSet() {
		return true
	}

	return false
}

// SetBusinessKey gets a reference to the given NullableString and assigns it to the BusinessKey field.
func (o *ExecutionQueryDto) SetBusinessKey(v string) {
	o.BusinessKey.Set(&v)
}
// SetBusinessKeyNil sets the value for BusinessKey to be an explicit nil
func (o *ExecutionQueryDto) SetBusinessKeyNil() {
	o.BusinessKey.Set(nil)
}

// UnsetBusinessKey ensures that no value is present for BusinessKey, not even an explicit nil
func (o *ExecutionQueryDto) UnsetBusinessKey() {
	o.BusinessKey.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *ExecutionQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *ExecutionQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *ExecutionQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *ExecutionQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *ExecutionQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *ExecutionQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *ExecutionQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *ExecutionQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *ExecutionQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *ExecutionQueryDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *ExecutionQueryDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *ExecutionQueryDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetSignalEventSubscriptionName returns the SignalEventSubscriptionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetSignalEventSubscriptionName() string {
	if o == nil || IsNil(o.SignalEventSubscriptionName.Get()) {
		var ret string
		return ret
	}
	return *o.SignalEventSubscriptionName.Get()
}

// GetSignalEventSubscriptionNameOk returns a tuple with the SignalEventSubscriptionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetSignalEventSubscriptionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignalEventSubscriptionName.Get(), o.SignalEventSubscriptionName.IsSet()
}

// HasSignalEventSubscriptionName returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasSignalEventSubscriptionName() bool {
	if o != nil && o.SignalEventSubscriptionName.IsSet() {
		return true
	}

	return false
}

// SetSignalEventSubscriptionName gets a reference to the given NullableString and assigns it to the SignalEventSubscriptionName field.
func (o *ExecutionQueryDto) SetSignalEventSubscriptionName(v string) {
	o.SignalEventSubscriptionName.Set(&v)
}
// SetSignalEventSubscriptionNameNil sets the value for SignalEventSubscriptionName to be an explicit nil
func (o *ExecutionQueryDto) SetSignalEventSubscriptionNameNil() {
	o.SignalEventSubscriptionName.Set(nil)
}

// UnsetSignalEventSubscriptionName ensures that no value is present for SignalEventSubscriptionName, not even an explicit nil
func (o *ExecutionQueryDto) UnsetSignalEventSubscriptionName() {
	o.SignalEventSubscriptionName.Unset()
}

// GetMessageEventSubscriptionName returns the MessageEventSubscriptionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetMessageEventSubscriptionName() string {
	if o == nil || IsNil(o.MessageEventSubscriptionName.Get()) {
		var ret string
		return ret
	}
	return *o.MessageEventSubscriptionName.Get()
}

// GetMessageEventSubscriptionNameOk returns a tuple with the MessageEventSubscriptionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetMessageEventSubscriptionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageEventSubscriptionName.Get(), o.MessageEventSubscriptionName.IsSet()
}

// HasMessageEventSubscriptionName returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasMessageEventSubscriptionName() bool {
	if o != nil && o.MessageEventSubscriptionName.IsSet() {
		return true
	}

	return false
}

// SetMessageEventSubscriptionName gets a reference to the given NullableString and assigns it to the MessageEventSubscriptionName field.
func (o *ExecutionQueryDto) SetMessageEventSubscriptionName(v string) {
	o.MessageEventSubscriptionName.Set(&v)
}
// SetMessageEventSubscriptionNameNil sets the value for MessageEventSubscriptionName to be an explicit nil
func (o *ExecutionQueryDto) SetMessageEventSubscriptionNameNil() {
	o.MessageEventSubscriptionName.Set(nil)
}

// UnsetMessageEventSubscriptionName ensures that no value is present for MessageEventSubscriptionName, not even an explicit nil
func (o *ExecutionQueryDto) UnsetMessageEventSubscriptionName() {
	o.MessageEventSubscriptionName.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *ExecutionQueryDto) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *ExecutionQueryDto) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *ExecutionQueryDto) UnsetActive() {
	o.Active.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *ExecutionQueryDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *ExecutionQueryDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *ExecutionQueryDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetIncidentId returns the IncidentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetIncidentId() string {
	if o == nil || IsNil(o.IncidentId.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentId.Get()
}

// GetIncidentIdOk returns a tuple with the IncidentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetIncidentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentId.Get(), o.IncidentId.IsSet()
}

// HasIncidentId returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasIncidentId() bool {
	if o != nil && o.IncidentId.IsSet() {
		return true
	}

	return false
}

// SetIncidentId gets a reference to the given NullableString and assigns it to the IncidentId field.
func (o *ExecutionQueryDto) SetIncidentId(v string) {
	o.IncidentId.Set(&v)
}
// SetIncidentIdNil sets the value for IncidentId to be an explicit nil
func (o *ExecutionQueryDto) SetIncidentIdNil() {
	o.IncidentId.Set(nil)
}

// UnsetIncidentId ensures that no value is present for IncidentId, not even an explicit nil
func (o *ExecutionQueryDto) UnsetIncidentId() {
	o.IncidentId.Unset()
}

// GetIncidentType returns the IncidentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetIncidentType() string {
	if o == nil || IsNil(o.IncidentType.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentType.Get()
}

// GetIncidentTypeOk returns a tuple with the IncidentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetIncidentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentType.Get(), o.IncidentType.IsSet()
}

// HasIncidentType returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasIncidentType() bool {
	if o != nil && o.IncidentType.IsSet() {
		return true
	}

	return false
}

// SetIncidentType gets a reference to the given NullableString and assigns it to the IncidentType field.
func (o *ExecutionQueryDto) SetIncidentType(v string) {
	o.IncidentType.Set(&v)
}
// SetIncidentTypeNil sets the value for IncidentType to be an explicit nil
func (o *ExecutionQueryDto) SetIncidentTypeNil() {
	o.IncidentType.Set(nil)
}

// UnsetIncidentType ensures that no value is present for IncidentType, not even an explicit nil
func (o *ExecutionQueryDto) UnsetIncidentType() {
	o.IncidentType.Unset()
}

// GetIncidentMessage returns the IncidentMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetIncidentMessage() string {
	if o == nil || IsNil(o.IncidentMessage.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessage.Get()
}

// GetIncidentMessageOk returns a tuple with the IncidentMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetIncidentMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessage.Get(), o.IncidentMessage.IsSet()
}

// HasIncidentMessage returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasIncidentMessage() bool {
	if o != nil && o.IncidentMessage.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessage gets a reference to the given NullableString and assigns it to the IncidentMessage field.
func (o *ExecutionQueryDto) SetIncidentMessage(v string) {
	o.IncidentMessage.Set(&v)
}
// SetIncidentMessageNil sets the value for IncidentMessage to be an explicit nil
func (o *ExecutionQueryDto) SetIncidentMessageNil() {
	o.IncidentMessage.Set(nil)
}

// UnsetIncidentMessage ensures that no value is present for IncidentMessage, not even an explicit nil
func (o *ExecutionQueryDto) UnsetIncidentMessage() {
	o.IncidentMessage.Unset()
}

// GetIncidentMessageLike returns the IncidentMessageLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetIncidentMessageLike() string {
	if o == nil || IsNil(o.IncidentMessageLike.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessageLike.Get()
}

// GetIncidentMessageLikeOk returns a tuple with the IncidentMessageLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetIncidentMessageLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessageLike.Get(), o.IncidentMessageLike.IsSet()
}

// HasIncidentMessageLike returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasIncidentMessageLike() bool {
	if o != nil && o.IncidentMessageLike.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessageLike gets a reference to the given NullableString and assigns it to the IncidentMessageLike field.
func (o *ExecutionQueryDto) SetIncidentMessageLike(v string) {
	o.IncidentMessageLike.Set(&v)
}
// SetIncidentMessageLikeNil sets the value for IncidentMessageLike to be an explicit nil
func (o *ExecutionQueryDto) SetIncidentMessageLikeNil() {
	o.IncidentMessageLike.Set(nil)
}

// UnsetIncidentMessageLike ensures that no value is present for IncidentMessageLike, not even an explicit nil
func (o *ExecutionQueryDto) UnsetIncidentMessageLike() {
	o.IncidentMessageLike.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *ExecutionQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the Variables field.
func (o *ExecutionQueryDto) SetVariables(v []VariableQueryParameterDto) {
	o.Variables = v
}

// GetProcessVariables returns the ProcessVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetProcessVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.ProcessVariables
}

// GetProcessVariablesOk returns a tuple with the ProcessVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetProcessVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.ProcessVariables) {
		return nil, false
	}
	return o.ProcessVariables, true
}

// HasProcessVariables returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasProcessVariables() bool {
	if o != nil && !IsNil(o.ProcessVariables) {
		return true
	}

	return false
}

// SetProcessVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the ProcessVariables field.
func (o *ExecutionQueryDto) SetProcessVariables(v []VariableQueryParameterDto) {
	o.ProcessVariables = v
}

// GetVariableNamesIgnoreCase returns the VariableNamesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetVariableNamesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableNamesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableNamesIgnoreCase.Get()
}

// GetVariableNamesIgnoreCaseOk returns a tuple with the VariableNamesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetVariableNamesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNamesIgnoreCase.Get(), o.VariableNamesIgnoreCase.IsSet()
}

// HasVariableNamesIgnoreCase returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasVariableNamesIgnoreCase() bool {
	if o != nil && o.VariableNamesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableNamesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableNamesIgnoreCase field.
func (o *ExecutionQueryDto) SetVariableNamesIgnoreCase(v bool) {
	o.VariableNamesIgnoreCase.Set(&v)
}
// SetVariableNamesIgnoreCaseNil sets the value for VariableNamesIgnoreCase to be an explicit nil
func (o *ExecutionQueryDto) SetVariableNamesIgnoreCaseNil() {
	o.VariableNamesIgnoreCase.Set(nil)
}

// UnsetVariableNamesIgnoreCase ensures that no value is present for VariableNamesIgnoreCase, not even an explicit nil
func (o *ExecutionQueryDto) UnsetVariableNamesIgnoreCase() {
	o.VariableNamesIgnoreCase.Unset()
}

// GetVariableValuesIgnoreCase returns the VariableValuesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetVariableValuesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableValuesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableValuesIgnoreCase.Get()
}

// GetVariableValuesIgnoreCaseOk returns a tuple with the VariableValuesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetVariableValuesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValuesIgnoreCase.Get(), o.VariableValuesIgnoreCase.IsSet()
}

// HasVariableValuesIgnoreCase returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasVariableValuesIgnoreCase() bool {
	if o != nil && o.VariableValuesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableValuesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableValuesIgnoreCase field.
func (o *ExecutionQueryDto) SetVariableValuesIgnoreCase(v bool) {
	o.VariableValuesIgnoreCase.Set(&v)
}
// SetVariableValuesIgnoreCaseNil sets the value for VariableValuesIgnoreCase to be an explicit nil
func (o *ExecutionQueryDto) SetVariableValuesIgnoreCaseNil() {
	o.VariableValuesIgnoreCase.Set(nil)
}

// UnsetVariableValuesIgnoreCase ensures that no value is present for VariableValuesIgnoreCase, not even an explicit nil
func (o *ExecutionQueryDto) UnsetVariableValuesIgnoreCase() {
	o.VariableValuesIgnoreCase.Unset()
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionQueryDto) GetSorting() []ExecutionQueryDtoSortingInner {
	if o == nil {
		var ret []ExecutionQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionQueryDto) GetSortingOk() ([]ExecutionQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *ExecutionQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []ExecutionQueryDtoSortingInner and assigns it to the Sorting field.
func (o *ExecutionQueryDto) SetSorting(v []ExecutionQueryDtoSortingInner) {
	o.Sorting = v
}

func (o ExecutionQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BusinessKey.IsSet() {
		toSerialize["businessKey"] = o.BusinessKey.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.SignalEventSubscriptionName.IsSet() {
		toSerialize["signalEventSubscriptionName"] = o.SignalEventSubscriptionName.Get()
	}
	if o.MessageEventSubscriptionName.IsSet() {
		toSerialize["messageEventSubscriptionName"] = o.MessageEventSubscriptionName.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.IncidentId.IsSet() {
		toSerialize["incidentId"] = o.IncidentId.Get()
	}
	if o.IncidentType.IsSet() {
		toSerialize["incidentType"] = o.IncidentType.Get()
	}
	if o.IncidentMessage.IsSet() {
		toSerialize["incidentMessage"] = o.IncidentMessage.Get()
	}
	if o.IncidentMessageLike.IsSet() {
		toSerialize["incidentMessageLike"] = o.IncidentMessageLike.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.ProcessVariables != nil {
		toSerialize["processVariables"] = o.ProcessVariables
	}
	if o.VariableNamesIgnoreCase.IsSet() {
		toSerialize["variableNamesIgnoreCase"] = o.VariableNamesIgnoreCase.Get()
	}
	if o.VariableValuesIgnoreCase.IsSet() {
		toSerialize["variableValuesIgnoreCase"] = o.VariableValuesIgnoreCase.Get()
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableExecutionQueryDto struct {
	value *ExecutionQueryDto
	isSet bool
}

func (v NullableExecutionQueryDto) Get() *ExecutionQueryDto {
	return v.value
}

func (v *NullableExecutionQueryDto) Set(val *ExecutionQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionQueryDto(val *ExecutionQueryDto) *NullableExecutionQueryDto {
	return &NullableExecutionQueryDto{value: val, isSet: true}
}

func (v NullableExecutionQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


