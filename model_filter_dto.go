/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the FilterDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterDto{}

// FilterDto struct for FilterDto
type FilterDto struct {
	// The id of the filter.
	Id NullableString `json:"id,omitempty"`
	// The resource type of the filter.
	ResourceType NullableString `json:"resourceType,omitempty"`
	// The name of the filter.
	Name NullableString `json:"name,omitempty"`
	// The user id of the owner of the filter.
	Owner NullableString `json:"owner,omitempty"`
	// The query of the filter as a JSON object.
	Query map[string]interface{} `json:"query,omitempty"`
	// The properties of a filter as a JSON object.
	Properties map[string]interface{} `json:"properties,omitempty"`
	//  The number of items matched by the filter itself. Note: Only exists if the query parameter `itemCount` was set to `true`
	ItemCount NullableInt64 `json:"itemCount,omitempty"`
}

// NewFilterDto instantiates a new FilterDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterDto() *FilterDto {
	this := FilterDto{}
	return &this
}

// NewFilterDtoWithDefaults instantiates a new FilterDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterDtoWithDefaults() *FilterDto {
	this := FilterDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FilterDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *FilterDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FilterDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FilterDto) UnsetId() {
	o.Id.Unset()
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDto) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDto) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *FilterDto) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableString and assigns it to the ResourceType field.
func (o *FilterDto) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}
// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *FilterDto) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *FilterDto) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FilterDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FilterDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FilterDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FilterDto) UnsetName() {
	o.Name.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDto) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *FilterDto) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *FilterDto) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *FilterDto) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *FilterDto) UnsetOwner() {
	o.Owner.Unset()
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *FilterDto) GetQuery() map[string]interface{} {
	if o == nil || IsNil(o.Query) {
		var ret map[string]interface{}
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDto) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Query) {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *FilterDto) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given map[string]interface{} and assigns it to the Query field.
func (o *FilterDto) SetQuery(v map[string]interface{}) {
	o.Query = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *FilterDto) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDto) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *FilterDto) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *FilterDto) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDto) GetItemCount() int64 {
	if o == nil || IsNil(o.ItemCount.Get()) {
		var ret int64
		return ret
	}
	return *o.ItemCount.Get()
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDto) GetItemCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemCount.Get(), o.ItemCount.IsSet()
}

// HasItemCount returns a boolean if a field has been set.
func (o *FilterDto) HasItemCount() bool {
	if o != nil && o.ItemCount.IsSet() {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given NullableInt64 and assigns it to the ItemCount field.
func (o *FilterDto) SetItemCount(v int64) {
	o.ItemCount.Set(&v)
}
// SetItemCountNil sets the value for ItemCount to be an explicit nil
func (o *FilterDto) SetItemCountNil() {
	o.ItemCount.Set(nil)
}

// UnsetItemCount ensures that no value is present for ItemCount, not even an explicit nil
func (o *FilterDto) UnsetItemCount() {
	o.ItemCount.Unset()
}

func (o FilterDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ResourceType.IsSet() {
		toSerialize["resourceType"] = o.ResourceType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if o.ItemCount.IsSet() {
		toSerialize["itemCount"] = o.ItemCount.Get()
	}
	return toSerialize, nil
}

type NullableFilterDto struct {
	value *FilterDto
	isSet bool
}

func (v NullableFilterDto) Get() *FilterDto {
	return v.value
}

func (v *NullableFilterDto) Set(val *FilterDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterDto(val *FilterDto) *NullableFilterDto {
	return &NullableFilterDto{value: val, isSet: true}
}

func (v NullableFilterDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


