/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the BatchStatisticsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchStatisticsDto{}

// BatchStatisticsDto struct for BatchStatisticsDto
type BatchStatisticsDto struct {
	// The id of the batch.
	Id NullableString `json:"id,omitempty"`
	// The type of the batch. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
	Type NullableString `json:"type,omitempty"`
	// The total jobs of a batch is the number of batch execution jobs required to complete the batch.
	TotalJobs NullableInt32 `json:"totalJobs,omitempty"`
	// The number of batch execution jobs already created by the seed job.
	JobsCreated NullableInt32 `json:"jobsCreated,omitempty"`
	// The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see `totalJobs` property).
	BatchJobsPerSeed NullableInt32 `json:"batchJobsPerSeed,omitempty"`
	// Every batch execution job invokes the command executed by the batch `invocationsPerBatchJob` times. E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.
	InvocationsPerBatchJob NullableInt32 `json:"invocationsPerBatchJob,omitempty"`
	// The job definition id for the seed jobs of this batch.
	SeedJobDefinitionId NullableString `json:"seedJobDefinitionId,omitempty"`
	// The job definition id for the monitor jobs of this batch.
	MonitorJobDefinitionId NullableString `json:"monitorJobDefinitionId,omitempty"`
	// The job definition id for the batch execution jobs of this batch.
	BatchJobDefinitionId NullableString `json:"batchJobDefinitionId,omitempty"`
	// Indicates whether this batch is suspended or not.
	Suspended NullableBool `json:"suspended,omitempty"`
	// The tenant id of the batch.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The id of the user that created the batch.
	CreateUserId NullableString `json:"createUserId,omitempty"`
	// The time the batch was started. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information, please see the [documentation] (https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/)
	StartTime NullableTime `json:"startTime,omitempty"`
	// The time the batch execution was started, i.e., at least one batch job has been executed. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information, please see the [documentation] (https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/)
	ExecutionStartTime NullableTime `json:"executionStartTime,omitempty"`
	// The number of remaining batch execution jobs. This does include failed batch execution jobs and batch execution jobs which still have to be created by the seed job.
	RemainingJobs NullableInt32 `json:"remainingJobs,omitempty"`
	// The number of completed batch execution jobs. This does include aborted/deleted batch execution jobs.
	CompletedJobs NullableInt32 `json:"completedJobs,omitempty"`
	// The number of failed batch execution jobs. This does not include aborted or deleted batch execution jobs.
	FailedJobs NullableInt32 `json:"failedJobs,omitempty"`
}

// NewBatchStatisticsDto instantiates a new BatchStatisticsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchStatisticsDto() *BatchStatisticsDto {
	this := BatchStatisticsDto{}
	return &this
}

// NewBatchStatisticsDtoWithDefaults instantiates a new BatchStatisticsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchStatisticsDtoWithDefaults() *BatchStatisticsDto {
	this := BatchStatisticsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *BatchStatisticsDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *BatchStatisticsDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *BatchStatisticsDto) UnsetId() {
	o.Id.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *BatchStatisticsDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *BatchStatisticsDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *BatchStatisticsDto) UnsetType() {
	o.Type.Unset()
}

// GetTotalJobs returns the TotalJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetTotalJobs() int32 {
	if o == nil || IsNil(o.TotalJobs.Get()) {
		var ret int32
		return ret
	}
	return *o.TotalJobs.Get()
}

// GetTotalJobsOk returns a tuple with the TotalJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetTotalJobsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalJobs.Get(), o.TotalJobs.IsSet()
}

// HasTotalJobs returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasTotalJobs() bool {
	if o != nil && o.TotalJobs.IsSet() {
		return true
	}

	return false
}

// SetTotalJobs gets a reference to the given NullableInt32 and assigns it to the TotalJobs field.
func (o *BatchStatisticsDto) SetTotalJobs(v int32) {
	o.TotalJobs.Set(&v)
}
// SetTotalJobsNil sets the value for TotalJobs to be an explicit nil
func (o *BatchStatisticsDto) SetTotalJobsNil() {
	o.TotalJobs.Set(nil)
}

// UnsetTotalJobs ensures that no value is present for TotalJobs, not even an explicit nil
func (o *BatchStatisticsDto) UnsetTotalJobs() {
	o.TotalJobs.Unset()
}

// GetJobsCreated returns the JobsCreated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetJobsCreated() int32 {
	if o == nil || IsNil(o.JobsCreated.Get()) {
		var ret int32
		return ret
	}
	return *o.JobsCreated.Get()
}

// GetJobsCreatedOk returns a tuple with the JobsCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetJobsCreatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobsCreated.Get(), o.JobsCreated.IsSet()
}

// HasJobsCreated returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasJobsCreated() bool {
	if o != nil && o.JobsCreated.IsSet() {
		return true
	}

	return false
}

// SetJobsCreated gets a reference to the given NullableInt32 and assigns it to the JobsCreated field.
func (o *BatchStatisticsDto) SetJobsCreated(v int32) {
	o.JobsCreated.Set(&v)
}
// SetJobsCreatedNil sets the value for JobsCreated to be an explicit nil
func (o *BatchStatisticsDto) SetJobsCreatedNil() {
	o.JobsCreated.Set(nil)
}

// UnsetJobsCreated ensures that no value is present for JobsCreated, not even an explicit nil
func (o *BatchStatisticsDto) UnsetJobsCreated() {
	o.JobsCreated.Unset()
}

// GetBatchJobsPerSeed returns the BatchJobsPerSeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetBatchJobsPerSeed() int32 {
	if o == nil || IsNil(o.BatchJobsPerSeed.Get()) {
		var ret int32
		return ret
	}
	return *o.BatchJobsPerSeed.Get()
}

// GetBatchJobsPerSeedOk returns a tuple with the BatchJobsPerSeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetBatchJobsPerSeedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchJobsPerSeed.Get(), o.BatchJobsPerSeed.IsSet()
}

// HasBatchJobsPerSeed returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasBatchJobsPerSeed() bool {
	if o != nil && o.BatchJobsPerSeed.IsSet() {
		return true
	}

	return false
}

// SetBatchJobsPerSeed gets a reference to the given NullableInt32 and assigns it to the BatchJobsPerSeed field.
func (o *BatchStatisticsDto) SetBatchJobsPerSeed(v int32) {
	o.BatchJobsPerSeed.Set(&v)
}
// SetBatchJobsPerSeedNil sets the value for BatchJobsPerSeed to be an explicit nil
func (o *BatchStatisticsDto) SetBatchJobsPerSeedNil() {
	o.BatchJobsPerSeed.Set(nil)
}

// UnsetBatchJobsPerSeed ensures that no value is present for BatchJobsPerSeed, not even an explicit nil
func (o *BatchStatisticsDto) UnsetBatchJobsPerSeed() {
	o.BatchJobsPerSeed.Unset()
}

// GetInvocationsPerBatchJob returns the InvocationsPerBatchJob field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetInvocationsPerBatchJob() int32 {
	if o == nil || IsNil(o.InvocationsPerBatchJob.Get()) {
		var ret int32
		return ret
	}
	return *o.InvocationsPerBatchJob.Get()
}

// GetInvocationsPerBatchJobOk returns a tuple with the InvocationsPerBatchJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetInvocationsPerBatchJobOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvocationsPerBatchJob.Get(), o.InvocationsPerBatchJob.IsSet()
}

// HasInvocationsPerBatchJob returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasInvocationsPerBatchJob() bool {
	if o != nil && o.InvocationsPerBatchJob.IsSet() {
		return true
	}

	return false
}

// SetInvocationsPerBatchJob gets a reference to the given NullableInt32 and assigns it to the InvocationsPerBatchJob field.
func (o *BatchStatisticsDto) SetInvocationsPerBatchJob(v int32) {
	o.InvocationsPerBatchJob.Set(&v)
}
// SetInvocationsPerBatchJobNil sets the value for InvocationsPerBatchJob to be an explicit nil
func (o *BatchStatisticsDto) SetInvocationsPerBatchJobNil() {
	o.InvocationsPerBatchJob.Set(nil)
}

// UnsetInvocationsPerBatchJob ensures that no value is present for InvocationsPerBatchJob, not even an explicit nil
func (o *BatchStatisticsDto) UnsetInvocationsPerBatchJob() {
	o.InvocationsPerBatchJob.Unset()
}

// GetSeedJobDefinitionId returns the SeedJobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetSeedJobDefinitionId() string {
	if o == nil || IsNil(o.SeedJobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.SeedJobDefinitionId.Get()
}

// GetSeedJobDefinitionIdOk returns a tuple with the SeedJobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetSeedJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeedJobDefinitionId.Get(), o.SeedJobDefinitionId.IsSet()
}

// HasSeedJobDefinitionId returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasSeedJobDefinitionId() bool {
	if o != nil && o.SeedJobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetSeedJobDefinitionId gets a reference to the given NullableString and assigns it to the SeedJobDefinitionId field.
func (o *BatchStatisticsDto) SetSeedJobDefinitionId(v string) {
	o.SeedJobDefinitionId.Set(&v)
}
// SetSeedJobDefinitionIdNil sets the value for SeedJobDefinitionId to be an explicit nil
func (o *BatchStatisticsDto) SetSeedJobDefinitionIdNil() {
	o.SeedJobDefinitionId.Set(nil)
}

// UnsetSeedJobDefinitionId ensures that no value is present for SeedJobDefinitionId, not even an explicit nil
func (o *BatchStatisticsDto) UnsetSeedJobDefinitionId() {
	o.SeedJobDefinitionId.Unset()
}

// GetMonitorJobDefinitionId returns the MonitorJobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetMonitorJobDefinitionId() string {
	if o == nil || IsNil(o.MonitorJobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.MonitorJobDefinitionId.Get()
}

// GetMonitorJobDefinitionIdOk returns a tuple with the MonitorJobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetMonitorJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MonitorJobDefinitionId.Get(), o.MonitorJobDefinitionId.IsSet()
}

// HasMonitorJobDefinitionId returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasMonitorJobDefinitionId() bool {
	if o != nil && o.MonitorJobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetMonitorJobDefinitionId gets a reference to the given NullableString and assigns it to the MonitorJobDefinitionId field.
func (o *BatchStatisticsDto) SetMonitorJobDefinitionId(v string) {
	o.MonitorJobDefinitionId.Set(&v)
}
// SetMonitorJobDefinitionIdNil sets the value for MonitorJobDefinitionId to be an explicit nil
func (o *BatchStatisticsDto) SetMonitorJobDefinitionIdNil() {
	o.MonitorJobDefinitionId.Set(nil)
}

// UnsetMonitorJobDefinitionId ensures that no value is present for MonitorJobDefinitionId, not even an explicit nil
func (o *BatchStatisticsDto) UnsetMonitorJobDefinitionId() {
	o.MonitorJobDefinitionId.Unset()
}

// GetBatchJobDefinitionId returns the BatchJobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetBatchJobDefinitionId() string {
	if o == nil || IsNil(o.BatchJobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.BatchJobDefinitionId.Get()
}

// GetBatchJobDefinitionIdOk returns a tuple with the BatchJobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetBatchJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchJobDefinitionId.Get(), o.BatchJobDefinitionId.IsSet()
}

// HasBatchJobDefinitionId returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasBatchJobDefinitionId() bool {
	if o != nil && o.BatchJobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetBatchJobDefinitionId gets a reference to the given NullableString and assigns it to the BatchJobDefinitionId field.
func (o *BatchStatisticsDto) SetBatchJobDefinitionId(v string) {
	o.BatchJobDefinitionId.Set(&v)
}
// SetBatchJobDefinitionIdNil sets the value for BatchJobDefinitionId to be an explicit nil
func (o *BatchStatisticsDto) SetBatchJobDefinitionIdNil() {
	o.BatchJobDefinitionId.Set(nil)
}

// UnsetBatchJobDefinitionId ensures that no value is present for BatchJobDefinitionId, not even an explicit nil
func (o *BatchStatisticsDto) UnsetBatchJobDefinitionId() {
	o.BatchJobDefinitionId.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *BatchStatisticsDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *BatchStatisticsDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *BatchStatisticsDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *BatchStatisticsDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *BatchStatisticsDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *BatchStatisticsDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetCreateUserId returns the CreateUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetCreateUserId() string {
	if o == nil || IsNil(o.CreateUserId.Get()) {
		var ret string
		return ret
	}
	return *o.CreateUserId.Get()
}

// GetCreateUserIdOk returns a tuple with the CreateUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetCreateUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateUserId.Get(), o.CreateUserId.IsSet()
}

// HasCreateUserId returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasCreateUserId() bool {
	if o != nil && o.CreateUserId.IsSet() {
		return true
	}

	return false
}

// SetCreateUserId gets a reference to the given NullableString and assigns it to the CreateUserId field.
func (o *BatchStatisticsDto) SetCreateUserId(v string) {
	o.CreateUserId.Set(&v)
}
// SetCreateUserIdNil sets the value for CreateUserId to be an explicit nil
func (o *BatchStatisticsDto) SetCreateUserIdNil() {
	o.CreateUserId.Set(nil)
}

// UnsetCreateUserId ensures that no value is present for CreateUserId, not even an explicit nil
func (o *BatchStatisticsDto) UnsetCreateUserId() {
	o.CreateUserId.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTime and assigns it to the StartTime field.
func (o *BatchStatisticsDto) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *BatchStatisticsDto) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *BatchStatisticsDto) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetExecutionStartTime returns the ExecutionStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetExecutionStartTime() time.Time {
	if o == nil || IsNil(o.ExecutionStartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExecutionStartTime.Get()
}

// GetExecutionStartTimeOk returns a tuple with the ExecutionStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetExecutionStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionStartTime.Get(), o.ExecutionStartTime.IsSet()
}

// HasExecutionStartTime returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasExecutionStartTime() bool {
	if o != nil && o.ExecutionStartTime.IsSet() {
		return true
	}

	return false
}

// SetExecutionStartTime gets a reference to the given NullableTime and assigns it to the ExecutionStartTime field.
func (o *BatchStatisticsDto) SetExecutionStartTime(v time.Time) {
	o.ExecutionStartTime.Set(&v)
}
// SetExecutionStartTimeNil sets the value for ExecutionStartTime to be an explicit nil
func (o *BatchStatisticsDto) SetExecutionStartTimeNil() {
	o.ExecutionStartTime.Set(nil)
}

// UnsetExecutionStartTime ensures that no value is present for ExecutionStartTime, not even an explicit nil
func (o *BatchStatisticsDto) UnsetExecutionStartTime() {
	o.ExecutionStartTime.Unset()
}

// GetRemainingJobs returns the RemainingJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetRemainingJobs() int32 {
	if o == nil || IsNil(o.RemainingJobs.Get()) {
		var ret int32
		return ret
	}
	return *o.RemainingJobs.Get()
}

// GetRemainingJobsOk returns a tuple with the RemainingJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetRemainingJobsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemainingJobs.Get(), o.RemainingJobs.IsSet()
}

// HasRemainingJobs returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasRemainingJobs() bool {
	if o != nil && o.RemainingJobs.IsSet() {
		return true
	}

	return false
}

// SetRemainingJobs gets a reference to the given NullableInt32 and assigns it to the RemainingJobs field.
func (o *BatchStatisticsDto) SetRemainingJobs(v int32) {
	o.RemainingJobs.Set(&v)
}
// SetRemainingJobsNil sets the value for RemainingJobs to be an explicit nil
func (o *BatchStatisticsDto) SetRemainingJobsNil() {
	o.RemainingJobs.Set(nil)
}

// UnsetRemainingJobs ensures that no value is present for RemainingJobs, not even an explicit nil
func (o *BatchStatisticsDto) UnsetRemainingJobs() {
	o.RemainingJobs.Unset()
}

// GetCompletedJobs returns the CompletedJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetCompletedJobs() int32 {
	if o == nil || IsNil(o.CompletedJobs.Get()) {
		var ret int32
		return ret
	}
	return *o.CompletedJobs.Get()
}

// GetCompletedJobsOk returns a tuple with the CompletedJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetCompletedJobsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedJobs.Get(), o.CompletedJobs.IsSet()
}

// HasCompletedJobs returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasCompletedJobs() bool {
	if o != nil && o.CompletedJobs.IsSet() {
		return true
	}

	return false
}

// SetCompletedJobs gets a reference to the given NullableInt32 and assigns it to the CompletedJobs field.
func (o *BatchStatisticsDto) SetCompletedJobs(v int32) {
	o.CompletedJobs.Set(&v)
}
// SetCompletedJobsNil sets the value for CompletedJobs to be an explicit nil
func (o *BatchStatisticsDto) SetCompletedJobsNil() {
	o.CompletedJobs.Set(nil)
}

// UnsetCompletedJobs ensures that no value is present for CompletedJobs, not even an explicit nil
func (o *BatchStatisticsDto) UnsetCompletedJobs() {
	o.CompletedJobs.Unset()
}

// GetFailedJobs returns the FailedJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchStatisticsDto) GetFailedJobs() int32 {
	if o == nil || IsNil(o.FailedJobs.Get()) {
		var ret int32
		return ret
	}
	return *o.FailedJobs.Get()
}

// GetFailedJobsOk returns a tuple with the FailedJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchStatisticsDto) GetFailedJobsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedJobs.Get(), o.FailedJobs.IsSet()
}

// HasFailedJobs returns a boolean if a field has been set.
func (o *BatchStatisticsDto) HasFailedJobs() bool {
	if o != nil && o.FailedJobs.IsSet() {
		return true
	}

	return false
}

// SetFailedJobs gets a reference to the given NullableInt32 and assigns it to the FailedJobs field.
func (o *BatchStatisticsDto) SetFailedJobs(v int32) {
	o.FailedJobs.Set(&v)
}
// SetFailedJobsNil sets the value for FailedJobs to be an explicit nil
func (o *BatchStatisticsDto) SetFailedJobsNil() {
	o.FailedJobs.Set(nil)
}

// UnsetFailedJobs ensures that no value is present for FailedJobs, not even an explicit nil
func (o *BatchStatisticsDto) UnsetFailedJobs() {
	o.FailedJobs.Unset()
}

func (o BatchStatisticsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchStatisticsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.TotalJobs.IsSet() {
		toSerialize["totalJobs"] = o.TotalJobs.Get()
	}
	if o.JobsCreated.IsSet() {
		toSerialize["jobsCreated"] = o.JobsCreated.Get()
	}
	if o.BatchJobsPerSeed.IsSet() {
		toSerialize["batchJobsPerSeed"] = o.BatchJobsPerSeed.Get()
	}
	if o.InvocationsPerBatchJob.IsSet() {
		toSerialize["invocationsPerBatchJob"] = o.InvocationsPerBatchJob.Get()
	}
	if o.SeedJobDefinitionId.IsSet() {
		toSerialize["seedJobDefinitionId"] = o.SeedJobDefinitionId.Get()
	}
	if o.MonitorJobDefinitionId.IsSet() {
		toSerialize["monitorJobDefinitionId"] = o.MonitorJobDefinitionId.Get()
	}
	if o.BatchJobDefinitionId.IsSet() {
		toSerialize["batchJobDefinitionId"] = o.BatchJobDefinitionId.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.CreateUserId.IsSet() {
		toSerialize["createUserId"] = o.CreateUserId.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.ExecutionStartTime.IsSet() {
		toSerialize["executionStartTime"] = o.ExecutionStartTime.Get()
	}
	if o.RemainingJobs.IsSet() {
		toSerialize["remainingJobs"] = o.RemainingJobs.Get()
	}
	if o.CompletedJobs.IsSet() {
		toSerialize["completedJobs"] = o.CompletedJobs.Get()
	}
	if o.FailedJobs.IsSet() {
		toSerialize["failedJobs"] = o.FailedJobs.Get()
	}
	return toSerialize, nil
}

type NullableBatchStatisticsDto struct {
	value *BatchStatisticsDto
	isSet bool
}

func (v NullableBatchStatisticsDto) Get() *BatchStatisticsDto {
	return v.value
}

func (v *NullableBatchStatisticsDto) Set(val *BatchStatisticsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchStatisticsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchStatisticsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchStatisticsDto(val *BatchStatisticsDto) *NullableBatchStatisticsDto {
	return &NullableBatchStatisticsDto{value: val, isSet: true}
}

func (v NullableBatchStatisticsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchStatisticsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


