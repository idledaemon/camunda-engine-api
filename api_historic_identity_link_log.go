/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


type HistoricIdentityLinkLogAPI interface {

	/*
	GetHistoricIdentityLinks Get Identity Link Logs

	Queries for historic identity link logs that fulfill given parameters.
The size of the result set can be retrieved by using the
[Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/identity-links/get-identity-link-query-count/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricIdentityLinksRequest
	*/
	GetHistoricIdentityLinks(ctx context.Context) ApiGetHistoricIdentityLinksRequest

	// GetHistoricIdentityLinksExecute executes the request
	//  @return []HistoricIdentityLinkLogDto
	GetHistoricIdentityLinksExecute(r ApiGetHistoricIdentityLinksRequest) ([]HistoricIdentityLinkLogDto, *http.Response, error)

	/*
	GetHistoricIdentityLinksCount Get Identity Link Log Count

	Queries for the number of historic identity link logs that fulfill the given
parameters. Takes the same parameters as the
[Get Identity-Link-Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/identity-links/get-identity-link-query/)
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricIdentityLinksCountRequest
	*/
	GetHistoricIdentityLinksCount(ctx context.Context) ApiGetHistoricIdentityLinksCountRequest

	// GetHistoricIdentityLinksCountExecute executes the request
	//  @return CountResultDto
	GetHistoricIdentityLinksCountExecute(r ApiGetHistoricIdentityLinksCountRequest) (*CountResultDto, *http.Response, error)
}

// HistoricIdentityLinkLogAPIService HistoricIdentityLinkLogAPI service
type HistoricIdentityLinkLogAPIService service

type ApiGetHistoricIdentityLinksRequest struct {
	ctx context.Context
	ApiService HistoricIdentityLinkLogAPI
	type_ *string
	userId *string
	groupId *string
	dateBefore *time.Time
	dateAfter *time.Time
	taskId *string
	processDefinitionId *string
	processDefinitionKey *string
	operationType *string
	assignerId *string
	tenantIdIn *string
	withoutTenantId *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Restricts to identity links that have the given type (candidate/assignee/owner).
func (r ApiGetHistoricIdentityLinksRequest) Type_(type_ string) ApiGetHistoricIdentityLinksRequest {
	r.type_ = &type_
	return r
}

// Restricts to identity links that have the given user id.
func (r ApiGetHistoricIdentityLinksRequest) UserId(userId string) ApiGetHistoricIdentityLinksRequest {
	r.userId = &userId
	return r
}

// Restricts to identity links that have the given group id.
func (r ApiGetHistoricIdentityLinksRequest) GroupId(groupId string) ApiGetHistoricIdentityLinksRequest {
	r.groupId = &groupId
	return r
}

// Restricts to identity links that have the time before the given time.
func (r ApiGetHistoricIdentityLinksRequest) DateBefore(dateBefore time.Time) ApiGetHistoricIdentityLinksRequest {
	r.dateBefore = &dateBefore
	return r
}

// Restricts to identity links that have the time after the given time.
func (r ApiGetHistoricIdentityLinksRequest) DateAfter(dateAfter time.Time) ApiGetHistoricIdentityLinksRequest {
	r.dateAfter = &dateAfter
	return r
}

// Restricts to identity links that have the given task id.
func (r ApiGetHistoricIdentityLinksRequest) TaskId(taskId string) ApiGetHistoricIdentityLinksRequest {
	r.taskId = &taskId
	return r
}

// Restricts to identity links that have the given process definition id.
func (r ApiGetHistoricIdentityLinksRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricIdentityLinksRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Restricts to identity links that have the given process definition key.
func (r ApiGetHistoricIdentityLinksRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricIdentityLinksRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Restricts to identity links that have the given operationType (add/delete).
func (r ApiGetHistoricIdentityLinksRequest) OperationType(operationType string) ApiGetHistoricIdentityLinksRequest {
	r.operationType = &operationType
	return r
}

// Restricts to identity links that have the given assigner id.
func (r ApiGetHistoricIdentityLinksRequest) AssignerId(assignerId string) ApiGetHistoricIdentityLinksRequest {
	r.assignerId = &assignerId
	return r
}

// Filter by a comma-separated list of tenant ids.
func (r ApiGetHistoricIdentityLinksRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricIdentityLinksRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricIdentityLinksRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricIdentityLinksRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricIdentityLinksRequest) SortBy(sortBy string) ApiGetHistoricIdentityLinksRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricIdentityLinksRequest) SortOrder(sortOrder string) ApiGetHistoricIdentityLinksRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricIdentityLinksRequest) FirstResult(firstResult int32) ApiGetHistoricIdentityLinksRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricIdentityLinksRequest) MaxResults(maxResults int32) ApiGetHistoricIdentityLinksRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetHistoricIdentityLinksRequest) Execute() ([]HistoricIdentityLinkLogDto, *http.Response, error) {
	return r.ApiService.GetHistoricIdentityLinksExecute(r)
}

/*
GetHistoricIdentityLinks Get Identity Link Logs

Queries for historic identity link logs that fulfill given parameters.
The size of the result set can be retrieved by using the
[Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.21/reference/rest/history/identity-links/get-identity-link-query-count/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricIdentityLinksRequest
*/
func (a *HistoricIdentityLinkLogAPIService) GetHistoricIdentityLinks(ctx context.Context) ApiGetHistoricIdentityLinksRequest {
	return ApiGetHistoricIdentityLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricIdentityLinkLogDto
func (a *HistoricIdentityLinkLogAPIService) GetHistoricIdentityLinksExecute(r ApiGetHistoricIdentityLinksRequest) ([]HistoricIdentityLinkLogDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricIdentityLinkLogDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricIdentityLinkLogAPIService.GetHistoricIdentityLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/identity-link-log"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupId", r.groupId, "")
	}
	if r.dateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dateBefore", r.dateBefore, "")
	}
	if r.dateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dateAfter", r.dateAfter, "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.operationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operationType", r.operationType, "")
	}
	if r.assignerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assignerId", r.assignerId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricIdentityLinksCountRequest struct {
	ctx context.Context
	ApiService HistoricIdentityLinkLogAPI
	type_ *string
	userId *string
	groupId *string
	dateBefore *time.Time
	dateAfter *time.Time
	taskId *string
	processDefinitionId *string
	processDefinitionKey *string
	operationType *string
	assignerId *string
	tenantIdIn *string
	withoutTenantId *bool
}

// Restricts to identity links that have the given type (candidate/assignee/owner).
func (r ApiGetHistoricIdentityLinksCountRequest) Type_(type_ string) ApiGetHistoricIdentityLinksCountRequest {
	r.type_ = &type_
	return r
}

// Restricts to identity links that have the given user id.
func (r ApiGetHistoricIdentityLinksCountRequest) UserId(userId string) ApiGetHistoricIdentityLinksCountRequest {
	r.userId = &userId
	return r
}

// Restricts to identity links that have the given group id.
func (r ApiGetHistoricIdentityLinksCountRequest) GroupId(groupId string) ApiGetHistoricIdentityLinksCountRequest {
	r.groupId = &groupId
	return r
}

// Restricts to identity links that have the time before the given time.
func (r ApiGetHistoricIdentityLinksCountRequest) DateBefore(dateBefore time.Time) ApiGetHistoricIdentityLinksCountRequest {
	r.dateBefore = &dateBefore
	return r
}

// Restricts to identity links that have the time after the given time.
func (r ApiGetHistoricIdentityLinksCountRequest) DateAfter(dateAfter time.Time) ApiGetHistoricIdentityLinksCountRequest {
	r.dateAfter = &dateAfter
	return r
}

// Restricts to identity links that have the given task id.
func (r ApiGetHistoricIdentityLinksCountRequest) TaskId(taskId string) ApiGetHistoricIdentityLinksCountRequest {
	r.taskId = &taskId
	return r
}

// Restricts to identity links that have the given process definition id.
func (r ApiGetHistoricIdentityLinksCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricIdentityLinksCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Restricts to identity links that have the given process definition key.
func (r ApiGetHistoricIdentityLinksCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricIdentityLinksCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Restricts to identity links that have the given operationType (add/delete).
func (r ApiGetHistoricIdentityLinksCountRequest) OperationType(operationType string) ApiGetHistoricIdentityLinksCountRequest {
	r.operationType = &operationType
	return r
}

// Restricts to identity links that have the given assigner id.
func (r ApiGetHistoricIdentityLinksCountRequest) AssignerId(assignerId string) ApiGetHistoricIdentityLinksCountRequest {
	r.assignerId = &assignerId
	return r
}

// Filter by a comma-separated list of tenant ids.
func (r ApiGetHistoricIdentityLinksCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricIdentityLinksCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic identity links that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricIdentityLinksCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricIdentityLinksCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

func (r ApiGetHistoricIdentityLinksCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricIdentityLinksCountExecute(r)
}

/*
GetHistoricIdentityLinksCount Get Identity Link Log Count

Queries for the number of historic identity link logs that fulfill the given
parameters. Takes the same parameters as the
[Get Identity-Link-Logs](https://docs.camunda.org/manual/7.21/reference/rest/history/identity-links/get-identity-link-query/)
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricIdentityLinksCountRequest
*/
func (a *HistoricIdentityLinkLogAPIService) GetHistoricIdentityLinksCount(ctx context.Context) ApiGetHistoricIdentityLinksCountRequest {
	return ApiGetHistoricIdentityLinksCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricIdentityLinkLogAPIService) GetHistoricIdentityLinksCountExecute(r ApiGetHistoricIdentityLinksCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricIdentityLinkLogAPIService.GetHistoricIdentityLinksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/identity-link-log/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupId", r.groupId, "")
	}
	if r.dateBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dateBefore", r.dateBefore, "")
	}
	if r.dateAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dateAfter", r.dateAfter, "")
	}
	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.operationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operationType", r.operationType, "")
	}
	if r.assignerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assignerId", r.assignerId, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
