/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ActivityInstanceIncidentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityInstanceIncidentDto{}

// ActivityInstanceIncidentDto An activity instance, incident pair.
type ActivityInstanceIncidentDto struct {
	// The id of the incident.
	Id NullableString `json:"id,omitempty"`
	// The activity id in which the incident happened.
	ActivityId NullableString `json:"activityId,omitempty"`
}

// NewActivityInstanceIncidentDto instantiates a new ActivityInstanceIncidentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityInstanceIncidentDto() *ActivityInstanceIncidentDto {
	this := ActivityInstanceIncidentDto{}
	return &this
}

// NewActivityInstanceIncidentDtoWithDefaults instantiates a new ActivityInstanceIncidentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityInstanceIncidentDtoWithDefaults() *ActivityInstanceIncidentDto {
	this := ActivityInstanceIncidentDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceIncidentDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceIncidentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ActivityInstanceIncidentDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ActivityInstanceIncidentDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ActivityInstanceIncidentDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ActivityInstanceIncidentDto) UnsetId() {
	o.Id.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityInstanceIncidentDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityInstanceIncidentDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *ActivityInstanceIncidentDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *ActivityInstanceIncidentDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *ActivityInstanceIncidentDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *ActivityInstanceIncidentDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

func (o ActivityInstanceIncidentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityInstanceIncidentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	return toSerialize, nil
}

type NullableActivityInstanceIncidentDto struct {
	value *ActivityInstanceIncidentDto
	isSet bool
}

func (v NullableActivityInstanceIncidentDto) Get() *ActivityInstanceIncidentDto {
	return v.value
}

func (v *NullableActivityInstanceIncidentDto) Set(val *ActivityInstanceIncidentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityInstanceIncidentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityInstanceIncidentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityInstanceIncidentDto(val *ActivityInstanceIncidentDto) *NullableActivityInstanceIncidentDto {
	return &NullableActivityInstanceIncidentDto{value: val, isSet: true}
}

func (v NullableActivityInstanceIncidentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityInstanceIncidentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


