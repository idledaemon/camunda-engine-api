/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the DeploymentWithDefinitionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentWithDefinitionsDto{}

// DeploymentWithDefinitionsDto struct for DeploymentWithDefinitionsDto
type DeploymentWithDefinitionsDto struct {
	// The id of the deployment.
	Id NullableString `json:"id,omitempty"`
	// The tenant id of the deployment.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The time when the deployment was created.
	DeploymentTime NullableTime `json:"deploymentTime,omitempty"`
	// The source of the deployment.
	Source NullableString `json:"source,omitempty"`
	// The name of the deployment.
	Name NullableString `json:"name,omitempty"`
	// The links associated to this resource, with `method`, `href` and `rel`.
	Links []AtomLink `json:"links,omitempty"`
	// A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
	DeployedProcessDefinitions map[string]ProcessDefinitionDto `json:"deployedProcessDefinitions,omitempty"`
	// A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
	DeployedDecisionDefinitions map[string]DecisionDefinitionDto `json:"deployedDecisionDefinitions,omitempty"`
	// A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
	DeployedDecisionRequirementsDefinitions map[string]DecisionRequirementsDefinitionDto `json:"deployedDecisionRequirementsDefinitions,omitempty"`
	// A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
	DeployedCaseDefinitions map[string]CaseDefinitionDto `json:"deployedCaseDefinitions,omitempty"`
}

// NewDeploymentWithDefinitionsDto instantiates a new DeploymentWithDefinitionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentWithDefinitionsDto() *DeploymentWithDefinitionsDto {
	this := DeploymentWithDefinitionsDto{}
	return &this
}

// NewDeploymentWithDefinitionsDtoWithDefaults instantiates a new DeploymentWithDefinitionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentWithDefinitionsDtoWithDefaults() *DeploymentWithDefinitionsDto {
	this := DeploymentWithDefinitionsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DeploymentWithDefinitionsDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DeploymentWithDefinitionsDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DeploymentWithDefinitionsDto) UnsetId() {
	o.Id.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *DeploymentWithDefinitionsDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *DeploymentWithDefinitionsDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *DeploymentWithDefinitionsDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetDeploymentTime returns the DeploymentTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetDeploymentTime() time.Time {
	if o == nil || IsNil(o.DeploymentTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DeploymentTime.Get()
}

// GetDeploymentTimeOk returns a tuple with the DeploymentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetDeploymentTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentTime.Get(), o.DeploymentTime.IsSet()
}

// HasDeploymentTime returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasDeploymentTime() bool {
	if o != nil && o.DeploymentTime.IsSet() {
		return true
	}

	return false
}

// SetDeploymentTime gets a reference to the given NullableTime and assigns it to the DeploymentTime field.
func (o *DeploymentWithDefinitionsDto) SetDeploymentTime(v time.Time) {
	o.DeploymentTime.Set(&v)
}
// SetDeploymentTimeNil sets the value for DeploymentTime to be an explicit nil
func (o *DeploymentWithDefinitionsDto) SetDeploymentTimeNil() {
	o.DeploymentTime.Set(nil)
}

// UnsetDeploymentTime ensures that no value is present for DeploymentTime, not even an explicit nil
func (o *DeploymentWithDefinitionsDto) UnsetDeploymentTime() {
	o.DeploymentTime.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *DeploymentWithDefinitionsDto) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *DeploymentWithDefinitionsDto) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *DeploymentWithDefinitionsDto) UnsetSource() {
	o.Source.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DeploymentWithDefinitionsDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DeploymentWithDefinitionsDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DeploymentWithDefinitionsDto) UnsetName() {
	o.Name.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetLinks() []AtomLink {
	if o == nil {
		var ret []AtomLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetLinksOk() ([]AtomLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []AtomLink and assigns it to the Links field.
func (o *DeploymentWithDefinitionsDto) SetLinks(v []AtomLink) {
	o.Links = v
}

// GetDeployedProcessDefinitions returns the DeployedProcessDefinitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetDeployedProcessDefinitions() map[string]ProcessDefinitionDto {
	if o == nil {
		var ret map[string]ProcessDefinitionDto
		return ret
	}
	return o.DeployedProcessDefinitions
}

// GetDeployedProcessDefinitionsOk returns a tuple with the DeployedProcessDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetDeployedProcessDefinitionsOk() (*map[string]ProcessDefinitionDto, bool) {
	if o == nil || IsNil(o.DeployedProcessDefinitions) {
		return nil, false
	}
	return &o.DeployedProcessDefinitions, true
}

// HasDeployedProcessDefinitions returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasDeployedProcessDefinitions() bool {
	if o != nil && !IsNil(o.DeployedProcessDefinitions) {
		return true
	}

	return false
}

// SetDeployedProcessDefinitions gets a reference to the given map[string]ProcessDefinitionDto and assigns it to the DeployedProcessDefinitions field.
func (o *DeploymentWithDefinitionsDto) SetDeployedProcessDefinitions(v map[string]ProcessDefinitionDto) {
	o.DeployedProcessDefinitions = v
}

// GetDeployedDecisionDefinitions returns the DeployedDecisionDefinitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetDeployedDecisionDefinitions() map[string]DecisionDefinitionDto {
	if o == nil {
		var ret map[string]DecisionDefinitionDto
		return ret
	}
	return o.DeployedDecisionDefinitions
}

// GetDeployedDecisionDefinitionsOk returns a tuple with the DeployedDecisionDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetDeployedDecisionDefinitionsOk() (*map[string]DecisionDefinitionDto, bool) {
	if o == nil || IsNil(o.DeployedDecisionDefinitions) {
		return nil, false
	}
	return &o.DeployedDecisionDefinitions, true
}

// HasDeployedDecisionDefinitions returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasDeployedDecisionDefinitions() bool {
	if o != nil && !IsNil(o.DeployedDecisionDefinitions) {
		return true
	}

	return false
}

// SetDeployedDecisionDefinitions gets a reference to the given map[string]DecisionDefinitionDto and assigns it to the DeployedDecisionDefinitions field.
func (o *DeploymentWithDefinitionsDto) SetDeployedDecisionDefinitions(v map[string]DecisionDefinitionDto) {
	o.DeployedDecisionDefinitions = v
}

// GetDeployedDecisionRequirementsDefinitions returns the DeployedDecisionRequirementsDefinitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetDeployedDecisionRequirementsDefinitions() map[string]DecisionRequirementsDefinitionDto {
	if o == nil {
		var ret map[string]DecisionRequirementsDefinitionDto
		return ret
	}
	return o.DeployedDecisionRequirementsDefinitions
}

// GetDeployedDecisionRequirementsDefinitionsOk returns a tuple with the DeployedDecisionRequirementsDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetDeployedDecisionRequirementsDefinitionsOk() (*map[string]DecisionRequirementsDefinitionDto, bool) {
	if o == nil || IsNil(o.DeployedDecisionRequirementsDefinitions) {
		return nil, false
	}
	return &o.DeployedDecisionRequirementsDefinitions, true
}

// HasDeployedDecisionRequirementsDefinitions returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasDeployedDecisionRequirementsDefinitions() bool {
	if o != nil && !IsNil(o.DeployedDecisionRequirementsDefinitions) {
		return true
	}

	return false
}

// SetDeployedDecisionRequirementsDefinitions gets a reference to the given map[string]DecisionRequirementsDefinitionDto and assigns it to the DeployedDecisionRequirementsDefinitions field.
func (o *DeploymentWithDefinitionsDto) SetDeployedDecisionRequirementsDefinitions(v map[string]DecisionRequirementsDefinitionDto) {
	o.DeployedDecisionRequirementsDefinitions = v
}

// GetDeployedCaseDefinitions returns the DeployedCaseDefinitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentWithDefinitionsDto) GetDeployedCaseDefinitions() map[string]CaseDefinitionDto {
	if o == nil {
		var ret map[string]CaseDefinitionDto
		return ret
	}
	return o.DeployedCaseDefinitions
}

// GetDeployedCaseDefinitionsOk returns a tuple with the DeployedCaseDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentWithDefinitionsDto) GetDeployedCaseDefinitionsOk() (*map[string]CaseDefinitionDto, bool) {
	if o == nil || IsNil(o.DeployedCaseDefinitions) {
		return nil, false
	}
	return &o.DeployedCaseDefinitions, true
}

// HasDeployedCaseDefinitions returns a boolean if a field has been set.
func (o *DeploymentWithDefinitionsDto) HasDeployedCaseDefinitions() bool {
	if o != nil && !IsNil(o.DeployedCaseDefinitions) {
		return true
	}

	return false
}

// SetDeployedCaseDefinitions gets a reference to the given map[string]CaseDefinitionDto and assigns it to the DeployedCaseDefinitions field.
func (o *DeploymentWithDefinitionsDto) SetDeployedCaseDefinitions(v map[string]CaseDefinitionDto) {
	o.DeployedCaseDefinitions = v
}

func (o DeploymentWithDefinitionsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentWithDefinitionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.DeploymentTime.IsSet() {
		toSerialize["deploymentTime"] = o.DeploymentTime.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.DeployedProcessDefinitions != nil {
		toSerialize["deployedProcessDefinitions"] = o.DeployedProcessDefinitions
	}
	if o.DeployedDecisionDefinitions != nil {
		toSerialize["deployedDecisionDefinitions"] = o.DeployedDecisionDefinitions
	}
	if o.DeployedDecisionRequirementsDefinitions != nil {
		toSerialize["deployedDecisionRequirementsDefinitions"] = o.DeployedDecisionRequirementsDefinitions
	}
	if o.DeployedCaseDefinitions != nil {
		toSerialize["deployedCaseDefinitions"] = o.DeployedCaseDefinitions
	}
	return toSerialize, nil
}

type NullableDeploymentWithDefinitionsDto struct {
	value *DeploymentWithDefinitionsDto
	isSet bool
}

func (v NullableDeploymentWithDefinitionsDto) Get() *DeploymentWithDefinitionsDto {
	return v.value
}

func (v *NullableDeploymentWithDefinitionsDto) Set(val *DeploymentWithDefinitionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentWithDefinitionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentWithDefinitionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentWithDefinitionsDto(val *DeploymentWithDefinitionsDto) *NullableDeploymentWithDefinitionsDto {
	return &NullableDeploymentWithDefinitionsDto{value: val, isSet: true}
}

func (v NullableDeploymentWithDefinitionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentWithDefinitionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


