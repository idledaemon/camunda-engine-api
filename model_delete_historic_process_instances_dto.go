/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the DeleteHistoricProcessInstancesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteHistoricProcessInstancesDto{}

// DeleteHistoricProcessInstancesDto struct for DeleteHistoricProcessInstancesDto
type DeleteHistoricProcessInstancesDto struct {
	// A list historic process instance ids to delete.
	HistoricProcessInstanceIds []string `json:"historicProcessInstanceIds,omitempty"`
	HistoricProcessInstanceQuery *HistoricProcessInstanceQueryDto `json:"historicProcessInstanceQuery,omitempty"`
	// A string with delete reason.
	DeleteReason NullableString `json:"deleteReason,omitempty"`
	// If set to `false`, the request will still be successful if one ore more of the process ids are not found.
	FailIfNotExists NullableBool `json:"failIfNotExists,omitempty"`
}

// NewDeleteHistoricProcessInstancesDto instantiates a new DeleteHistoricProcessInstancesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteHistoricProcessInstancesDto() *DeleteHistoricProcessInstancesDto {
	this := DeleteHistoricProcessInstancesDto{}
	return &this
}

// NewDeleteHistoricProcessInstancesDtoWithDefaults instantiates a new DeleteHistoricProcessInstancesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteHistoricProcessInstancesDtoWithDefaults() *DeleteHistoricProcessInstancesDto {
	this := DeleteHistoricProcessInstancesDto{}
	return &this
}

// GetHistoricProcessInstanceIds returns the HistoricProcessInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteHistoricProcessInstancesDto) GetHistoricProcessInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HistoricProcessInstanceIds
}

// GetHistoricProcessInstanceIdsOk returns a tuple with the HistoricProcessInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteHistoricProcessInstancesDto) GetHistoricProcessInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.HistoricProcessInstanceIds) {
		return nil, false
	}
	return o.HistoricProcessInstanceIds, true
}

// HasHistoricProcessInstanceIds returns a boolean if a field has been set.
func (o *DeleteHistoricProcessInstancesDto) HasHistoricProcessInstanceIds() bool {
	if o != nil && !IsNil(o.HistoricProcessInstanceIds) {
		return true
	}

	return false
}

// SetHistoricProcessInstanceIds gets a reference to the given []string and assigns it to the HistoricProcessInstanceIds field.
func (o *DeleteHistoricProcessInstancesDto) SetHistoricProcessInstanceIds(v []string) {
	o.HistoricProcessInstanceIds = v
}

// GetHistoricProcessInstanceQuery returns the HistoricProcessInstanceQuery field value if set, zero value otherwise.
func (o *DeleteHistoricProcessInstancesDto) GetHistoricProcessInstanceQuery() HistoricProcessInstanceQueryDto {
	if o == nil || IsNil(o.HistoricProcessInstanceQuery) {
		var ret HistoricProcessInstanceQueryDto
		return ret
	}
	return *o.HistoricProcessInstanceQuery
}

// GetHistoricProcessInstanceQueryOk returns a tuple with the HistoricProcessInstanceQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteHistoricProcessInstancesDto) GetHistoricProcessInstanceQueryOk() (*HistoricProcessInstanceQueryDto, bool) {
	if o == nil || IsNil(o.HistoricProcessInstanceQuery) {
		return nil, false
	}
	return o.HistoricProcessInstanceQuery, true
}

// HasHistoricProcessInstanceQuery returns a boolean if a field has been set.
func (o *DeleteHistoricProcessInstancesDto) HasHistoricProcessInstanceQuery() bool {
	if o != nil && !IsNil(o.HistoricProcessInstanceQuery) {
		return true
	}

	return false
}

// SetHistoricProcessInstanceQuery gets a reference to the given HistoricProcessInstanceQueryDto and assigns it to the HistoricProcessInstanceQuery field.
func (o *DeleteHistoricProcessInstancesDto) SetHistoricProcessInstanceQuery(v HistoricProcessInstanceQueryDto) {
	o.HistoricProcessInstanceQuery = &v
}

// GetDeleteReason returns the DeleteReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteHistoricProcessInstancesDto) GetDeleteReason() string {
	if o == nil || IsNil(o.DeleteReason.Get()) {
		var ret string
		return ret
	}
	return *o.DeleteReason.Get()
}

// GetDeleteReasonOk returns a tuple with the DeleteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteHistoricProcessInstancesDto) GetDeleteReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteReason.Get(), o.DeleteReason.IsSet()
}

// HasDeleteReason returns a boolean if a field has been set.
func (o *DeleteHistoricProcessInstancesDto) HasDeleteReason() bool {
	if o != nil && o.DeleteReason.IsSet() {
		return true
	}

	return false
}

// SetDeleteReason gets a reference to the given NullableString and assigns it to the DeleteReason field.
func (o *DeleteHistoricProcessInstancesDto) SetDeleteReason(v string) {
	o.DeleteReason.Set(&v)
}
// SetDeleteReasonNil sets the value for DeleteReason to be an explicit nil
func (o *DeleteHistoricProcessInstancesDto) SetDeleteReasonNil() {
	o.DeleteReason.Set(nil)
}

// UnsetDeleteReason ensures that no value is present for DeleteReason, not even an explicit nil
func (o *DeleteHistoricProcessInstancesDto) UnsetDeleteReason() {
	o.DeleteReason.Unset()
}

// GetFailIfNotExists returns the FailIfNotExists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteHistoricProcessInstancesDto) GetFailIfNotExists() bool {
	if o == nil || IsNil(o.FailIfNotExists.Get()) {
		var ret bool
		return ret
	}
	return *o.FailIfNotExists.Get()
}

// GetFailIfNotExistsOk returns a tuple with the FailIfNotExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteHistoricProcessInstancesDto) GetFailIfNotExistsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailIfNotExists.Get(), o.FailIfNotExists.IsSet()
}

// HasFailIfNotExists returns a boolean if a field has been set.
func (o *DeleteHistoricProcessInstancesDto) HasFailIfNotExists() bool {
	if o != nil && o.FailIfNotExists.IsSet() {
		return true
	}

	return false
}

// SetFailIfNotExists gets a reference to the given NullableBool and assigns it to the FailIfNotExists field.
func (o *DeleteHistoricProcessInstancesDto) SetFailIfNotExists(v bool) {
	o.FailIfNotExists.Set(&v)
}
// SetFailIfNotExistsNil sets the value for FailIfNotExists to be an explicit nil
func (o *DeleteHistoricProcessInstancesDto) SetFailIfNotExistsNil() {
	o.FailIfNotExists.Set(nil)
}

// UnsetFailIfNotExists ensures that no value is present for FailIfNotExists, not even an explicit nil
func (o *DeleteHistoricProcessInstancesDto) UnsetFailIfNotExists() {
	o.FailIfNotExists.Unset()
}

func (o DeleteHistoricProcessInstancesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteHistoricProcessInstancesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HistoricProcessInstanceIds != nil {
		toSerialize["historicProcessInstanceIds"] = o.HistoricProcessInstanceIds
	}
	if !IsNil(o.HistoricProcessInstanceQuery) {
		toSerialize["historicProcessInstanceQuery"] = o.HistoricProcessInstanceQuery
	}
	if o.DeleteReason.IsSet() {
		toSerialize["deleteReason"] = o.DeleteReason.Get()
	}
	if o.FailIfNotExists.IsSet() {
		toSerialize["failIfNotExists"] = o.FailIfNotExists.Get()
	}
	return toSerialize, nil
}

type NullableDeleteHistoricProcessInstancesDto struct {
	value *DeleteHistoricProcessInstancesDto
	isSet bool
}

func (v NullableDeleteHistoricProcessInstancesDto) Get() *DeleteHistoricProcessInstancesDto {
	return v.value
}

func (v *NullableDeleteHistoricProcessInstancesDto) Set(val *DeleteHistoricProcessInstancesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteHistoricProcessInstancesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteHistoricProcessInstancesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteHistoricProcessInstancesDto(val *DeleteHistoricProcessInstancesDto) *NullableDeleteHistoricProcessInstancesDto {
	return &NullableDeleteHistoricProcessInstancesDto{value: val, isSet: true}
}

func (v NullableDeleteHistoricProcessInstancesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteHistoricProcessInstancesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


