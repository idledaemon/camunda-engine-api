/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the SchemaLogQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaLogQueryDto{}

// SchemaLogQueryDto struct for SchemaLogQueryDto
type SchemaLogQueryDto struct {
	// The version of the schema.
	Version NullableString `json:"version,omitempty"`
	// A JSON array of criteria to sort the result by. Each element of the array is                       a JSON object that specifies one ordering. The position in the array                       identifies the rank of an ordering, i.e., whether it is primary, secondary,                       etc. 
	Sorting []SchemaLogQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewSchemaLogQueryDto instantiates a new SchemaLogQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaLogQueryDto() *SchemaLogQueryDto {
	this := SchemaLogQueryDto{}
	return &this
}

// NewSchemaLogQueryDtoWithDefaults instantiates a new SchemaLogQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaLogQueryDtoWithDefaults() *SchemaLogQueryDto {
	this := SchemaLogQueryDto{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaLogQueryDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaLogQueryDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *SchemaLogQueryDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *SchemaLogQueryDto) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *SchemaLogQueryDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *SchemaLogQueryDto) UnsetVersion() {
	o.Version.Unset()
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemaLogQueryDto) GetSorting() []SchemaLogQueryDtoSortingInner {
	if o == nil {
		var ret []SchemaLogQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemaLogQueryDto) GetSortingOk() ([]SchemaLogQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *SchemaLogQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []SchemaLogQueryDtoSortingInner and assigns it to the Sorting field.
func (o *SchemaLogQueryDto) SetSorting(v []SchemaLogQueryDtoSortingInner) {
	o.Sorting = v
}

func (o SchemaLogQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaLogQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableSchemaLogQueryDto struct {
	value *SchemaLogQueryDto
	isSet bool
}

func (v NullableSchemaLogQueryDto) Get() *SchemaLogQueryDto {
	return v.value
}

func (v *NullableSchemaLogQueryDto) Set(val *SchemaLogQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaLogQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaLogQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaLogQueryDto(val *SchemaLogQueryDto) *NullableSchemaLogQueryDto {
	return &NullableSchemaLogQueryDto{value: val, isSet: true}
}

func (v NullableSchemaLogQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaLogQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


