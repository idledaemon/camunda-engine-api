/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MultipleProcessInstanceModificationInstructionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipleProcessInstanceModificationInstructionDto{}

// MultipleProcessInstanceModificationInstructionDto struct for MultipleProcessInstanceModificationInstructionDto
type MultipleProcessInstanceModificationInstructionDto struct {
	// **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.  * A cancel instruction requests cancellation of a single activity instance or all instances of one activity. * A startBeforeActivity instruction requests to enter a given activity. * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. * A startTransition instruction requests to execute a specific sequence flow.
	Type string `json:"type"`
	// Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.
	ActivityId NullableString `json:"activityId,omitempty"`
	// Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.
	TransitionId NullableString `json:"transitionId,omitempty"`
	// Can be used with instructions of type cancel. Prevents the deletion of new created activity instances.
	CancelCurrentActiveActivityInstances NullableBool `json:"cancelCurrentActiveActivityInstances,omitempty"`
}

type _MultipleProcessInstanceModificationInstructionDto MultipleProcessInstanceModificationInstructionDto

// NewMultipleProcessInstanceModificationInstructionDto instantiates a new MultipleProcessInstanceModificationInstructionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleProcessInstanceModificationInstructionDto(type_ string) *MultipleProcessInstanceModificationInstructionDto {
	this := MultipleProcessInstanceModificationInstructionDto{}
	this.Type = type_
	return &this
}

// NewMultipleProcessInstanceModificationInstructionDtoWithDefaults instantiates a new MultipleProcessInstanceModificationInstructionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleProcessInstanceModificationInstructionDtoWithDefaults() *MultipleProcessInstanceModificationInstructionDto {
	this := MultipleProcessInstanceModificationInstructionDto{}
	return &this
}

// GetType returns the Type field value
func (o *MultipleProcessInstanceModificationInstructionDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MultipleProcessInstanceModificationInstructionDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MultipleProcessInstanceModificationInstructionDto) SetType(v string) {
	o.Type = v
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultipleProcessInstanceModificationInstructionDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultipleProcessInstanceModificationInstructionDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *MultipleProcessInstanceModificationInstructionDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *MultipleProcessInstanceModificationInstructionDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *MultipleProcessInstanceModificationInstructionDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *MultipleProcessInstanceModificationInstructionDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetTransitionId returns the TransitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultipleProcessInstanceModificationInstructionDto) GetTransitionId() string {
	if o == nil || IsNil(o.TransitionId.Get()) {
		var ret string
		return ret
	}
	return *o.TransitionId.Get()
}

// GetTransitionIdOk returns a tuple with the TransitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultipleProcessInstanceModificationInstructionDto) GetTransitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransitionId.Get(), o.TransitionId.IsSet()
}

// HasTransitionId returns a boolean if a field has been set.
func (o *MultipleProcessInstanceModificationInstructionDto) HasTransitionId() bool {
	if o != nil && o.TransitionId.IsSet() {
		return true
	}

	return false
}

// SetTransitionId gets a reference to the given NullableString and assigns it to the TransitionId field.
func (o *MultipleProcessInstanceModificationInstructionDto) SetTransitionId(v string) {
	o.TransitionId.Set(&v)
}
// SetTransitionIdNil sets the value for TransitionId to be an explicit nil
func (o *MultipleProcessInstanceModificationInstructionDto) SetTransitionIdNil() {
	o.TransitionId.Set(nil)
}

// UnsetTransitionId ensures that no value is present for TransitionId, not even an explicit nil
func (o *MultipleProcessInstanceModificationInstructionDto) UnsetTransitionId() {
	o.TransitionId.Unset()
}

// GetCancelCurrentActiveActivityInstances returns the CancelCurrentActiveActivityInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultipleProcessInstanceModificationInstructionDto) GetCancelCurrentActiveActivityInstances() bool {
	if o == nil || IsNil(o.CancelCurrentActiveActivityInstances.Get()) {
		var ret bool
		return ret
	}
	return *o.CancelCurrentActiveActivityInstances.Get()
}

// GetCancelCurrentActiveActivityInstancesOk returns a tuple with the CancelCurrentActiveActivityInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultipleProcessInstanceModificationInstructionDto) GetCancelCurrentActiveActivityInstancesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelCurrentActiveActivityInstances.Get(), o.CancelCurrentActiveActivityInstances.IsSet()
}

// HasCancelCurrentActiveActivityInstances returns a boolean if a field has been set.
func (o *MultipleProcessInstanceModificationInstructionDto) HasCancelCurrentActiveActivityInstances() bool {
	if o != nil && o.CancelCurrentActiveActivityInstances.IsSet() {
		return true
	}

	return false
}

// SetCancelCurrentActiveActivityInstances gets a reference to the given NullableBool and assigns it to the CancelCurrentActiveActivityInstances field.
func (o *MultipleProcessInstanceModificationInstructionDto) SetCancelCurrentActiveActivityInstances(v bool) {
	o.CancelCurrentActiveActivityInstances.Set(&v)
}
// SetCancelCurrentActiveActivityInstancesNil sets the value for CancelCurrentActiveActivityInstances to be an explicit nil
func (o *MultipleProcessInstanceModificationInstructionDto) SetCancelCurrentActiveActivityInstancesNil() {
	o.CancelCurrentActiveActivityInstances.Set(nil)
}

// UnsetCancelCurrentActiveActivityInstances ensures that no value is present for CancelCurrentActiveActivityInstances, not even an explicit nil
func (o *MultipleProcessInstanceModificationInstructionDto) UnsetCancelCurrentActiveActivityInstances() {
	o.CancelCurrentActiveActivityInstances.Unset()
}

func (o MultipleProcessInstanceModificationInstructionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipleProcessInstanceModificationInstructionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.TransitionId.IsSet() {
		toSerialize["transitionId"] = o.TransitionId.Get()
	}
	if o.CancelCurrentActiveActivityInstances.IsSet() {
		toSerialize["cancelCurrentActiveActivityInstances"] = o.CancelCurrentActiveActivityInstances.Get()
	}
	return toSerialize, nil
}

func (o *MultipleProcessInstanceModificationInstructionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultipleProcessInstanceModificationInstructionDto := _MultipleProcessInstanceModificationInstructionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultipleProcessInstanceModificationInstructionDto)

	if err != nil {
		return err
	}

	*o = MultipleProcessInstanceModificationInstructionDto(varMultipleProcessInstanceModificationInstructionDto)

	return err
}

type NullableMultipleProcessInstanceModificationInstructionDto struct {
	value *MultipleProcessInstanceModificationInstructionDto
	isSet bool
}

func (v NullableMultipleProcessInstanceModificationInstructionDto) Get() *MultipleProcessInstanceModificationInstructionDto {
	return v.value
}

func (v *NullableMultipleProcessInstanceModificationInstructionDto) Set(val *MultipleProcessInstanceModificationInstructionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleProcessInstanceModificationInstructionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleProcessInstanceModificationInstructionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleProcessInstanceModificationInstructionDto(val *MultipleProcessInstanceModificationInstructionDto) *NullableMultipleProcessInstanceModificationInstructionDto {
	return &NullableMultipleProcessInstanceModificationInstructionDto{value: val, isSet: true}
}

func (v NullableMultipleProcessInstanceModificationInstructionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleProcessInstanceModificationInstructionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


