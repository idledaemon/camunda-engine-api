/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricDecisionInstanceQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricDecisionInstanceQueryDto{}

// HistoricDecisionInstanceQueryDto A historic decision instance query which defines a list of historic decision instances
type HistoricDecisionInstanceQueryDto struct {
	// Filter by decision instance id.
	DecisionInstanceId NullableString `json:"decisionInstanceId,omitempty"`
	// Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
	DecisionInstanceIdIn []string `json:"decisionInstanceIdIn,omitempty"`
	// Filter by the decision definition the instances belongs to.
	DecisionDefinitionId NullableString `json:"decisionDefinitionId,omitempty"`
	// Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
	DecisionDefinitionIdIn []string `json:"decisionDefinitionIdIn,omitempty"`
	// Filter by the key of the decision definition the instances belongs to.
	DecisionDefinitionKey NullableString `json:"decisionDefinitionKey,omitempty"`
	// Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
	DecisionDefinitionKeyIn []string `json:"decisionDefinitionKeyIn,omitempty"`
	// Filter by the name of the decision definition the instances belongs to.
	DecisionDefinitionName NullableString `json:"decisionDefinitionName,omitempty"`
	// Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
	DecisionDefinitionNameLike NullableString `json:"decisionDefinitionNameLike,omitempty"`
	// Filter by the process definition the instances belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Filter by the key of the process definition the instances belongs to.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Filter by the process instance the instances belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Filter by the case definition the instances belongs to.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// Filter by the key of the case definition the instances belongs to.
	CaseDefinitionKey NullableString `json:"caseDefinitionKey,omitempty"`
	// Filter by the case instance the instances belongs to.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
	ActivityIdIn []string `json:"activityIdIn,omitempty"`
	// Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
	ActivityInstanceIdIn []string `json:"activityInstanceIdIn,omitempty"`
	// Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include historic decision instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	EvaluatedBefore NullableTime `json:"evaluatedBefore,omitempty"`
	// Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	EvaluatedAfter NullableTime `json:"evaluatedAfter,omitempty"`
	// Restrict to instances that were evaluated by the given user.
	UserId NullableString `json:"userId,omitempty"`
	// Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
	RootDecisionInstanceId NullableString `json:"rootDecisionInstanceId,omitempty"`
	// Restrict to instances those are the root decision instance of an evaluation. Value may only be `true`, as `false` is the default behavior.
	RootDecisionInstancesOnly NullableBool `json:"rootDecisionInstancesOnly,omitempty"`
	// Filter by the decision requirements definition the instances belongs to.
	DecisionRequirementsDefinitionId NullableString `json:"decisionRequirementsDefinitionId,omitempty"`
	// Filter by the key of the decision requirements definition the instances belongs to.
	DecisionRequirementsDefinitionKey NullableString `json:"decisionRequirementsDefinitionKey,omitempty"`
	// Include input values in the result. Value may only be `true`, as `false` is the default behavior.
	IncludeInputs NullableBool `json:"includeInputs,omitempty"`
	// Include output values in the result. Value may only be `true`, as `false` is the default behavior.
	IncludeOutputs NullableBool `json:"includeOutputs,omitempty"`
	// Disables fetching of byte array input and output values. Value may only be `true`, as `false` is the default behavior.
	DisableBinaryFetching NullableBool `json:"disableBinaryFetching,omitempty"`
	// Disables deserialization of input and output values that are custom objects. Value may only be `true`, as `false` is the default behavior.
	DisableCustomObjectDeserialization NullableBool `json:"disableCustomObjectDeserialization,omitempty"`
}

// NewHistoricDecisionInstanceQueryDto instantiates a new HistoricDecisionInstanceQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricDecisionInstanceQueryDto() *HistoricDecisionInstanceQueryDto {
	this := HistoricDecisionInstanceQueryDto{}
	return &this
}

// NewHistoricDecisionInstanceQueryDtoWithDefaults instantiates a new HistoricDecisionInstanceQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricDecisionInstanceQueryDtoWithDefaults() *HistoricDecisionInstanceQueryDto {
	this := HistoricDecisionInstanceQueryDto{}
	return &this
}

// GetDecisionInstanceId returns the DecisionInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionInstanceId() string {
	if o == nil || IsNil(o.DecisionInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionInstanceId.Get()
}

// GetDecisionInstanceIdOk returns a tuple with the DecisionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionInstanceId.Get(), o.DecisionInstanceId.IsSet()
}

// HasDecisionInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionInstanceId() bool {
	if o != nil && o.DecisionInstanceId.IsSet() {
		return true
	}

	return false
}

// SetDecisionInstanceId gets a reference to the given NullableString and assigns it to the DecisionInstanceId field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionInstanceId(v string) {
	o.DecisionInstanceId.Set(&v)
}
// SetDecisionInstanceIdNil sets the value for DecisionInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionInstanceIdNil() {
	o.DecisionInstanceId.Set(nil)
}

// UnsetDecisionInstanceId ensures that no value is present for DecisionInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionInstanceId() {
	o.DecisionInstanceId.Unset()
}

// GetDecisionInstanceIdIn returns the DecisionInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DecisionInstanceIdIn
}

// GetDecisionInstanceIdInOk returns a tuple with the DecisionInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.DecisionInstanceIdIn) {
		return nil, false
	}
	return o.DecisionInstanceIdIn, true
}

// HasDecisionInstanceIdIn returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionInstanceIdIn() bool {
	if o != nil && !IsNil(o.DecisionInstanceIdIn) {
		return true
	}

	return false
}

// SetDecisionInstanceIdIn gets a reference to the given []string and assigns it to the DecisionInstanceIdIn field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionInstanceIdIn(v []string) {
	o.DecisionInstanceIdIn = v
}

// GetDecisionDefinitionId returns the DecisionDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionId() string {
	if o == nil || IsNil(o.DecisionDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionId.Get()
}

// GetDecisionDefinitionIdOk returns a tuple with the DecisionDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionId.Get(), o.DecisionDefinitionId.IsSet()
}

// HasDecisionDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionDefinitionId() bool {
	if o != nil && o.DecisionDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionId gets a reference to the given NullableString and assigns it to the DecisionDefinitionId field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionId(v string) {
	o.DecisionDefinitionId.Set(&v)
}
// SetDecisionDefinitionIdNil sets the value for DecisionDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionIdNil() {
	o.DecisionDefinitionId.Set(nil)
}

// UnsetDecisionDefinitionId ensures that no value is present for DecisionDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionDefinitionId() {
	o.DecisionDefinitionId.Unset()
}

// GetDecisionDefinitionIdIn returns the DecisionDefinitionIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DecisionDefinitionIdIn
}

// GetDecisionDefinitionIdInOk returns a tuple with the DecisionDefinitionIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.DecisionDefinitionIdIn) {
		return nil, false
	}
	return o.DecisionDefinitionIdIn, true
}

// HasDecisionDefinitionIdIn returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionDefinitionIdIn() bool {
	if o != nil && !IsNil(o.DecisionDefinitionIdIn) {
		return true
	}

	return false
}

// SetDecisionDefinitionIdIn gets a reference to the given []string and assigns it to the DecisionDefinitionIdIn field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionIdIn(v []string) {
	o.DecisionDefinitionIdIn = v
}

// GetDecisionDefinitionKey returns the DecisionDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionKey() string {
	if o == nil || IsNil(o.DecisionDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionKey.Get()
}

// GetDecisionDefinitionKeyOk returns a tuple with the DecisionDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionKey.Get(), o.DecisionDefinitionKey.IsSet()
}

// HasDecisionDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionDefinitionKey() bool {
	if o != nil && o.DecisionDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionKey gets a reference to the given NullableString and assigns it to the DecisionDefinitionKey field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionKey(v string) {
	o.DecisionDefinitionKey.Set(&v)
}
// SetDecisionDefinitionKeyNil sets the value for DecisionDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionKeyNil() {
	o.DecisionDefinitionKey.Set(nil)
}

// UnsetDecisionDefinitionKey ensures that no value is present for DecisionDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionDefinitionKey() {
	o.DecisionDefinitionKey.Unset()
}

// GetDecisionDefinitionKeyIn returns the DecisionDefinitionKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DecisionDefinitionKeyIn
}

// GetDecisionDefinitionKeyInOk returns a tuple with the DecisionDefinitionKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.DecisionDefinitionKeyIn) {
		return nil, false
	}
	return o.DecisionDefinitionKeyIn, true
}

// HasDecisionDefinitionKeyIn returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionDefinitionKeyIn() bool {
	if o != nil && !IsNil(o.DecisionDefinitionKeyIn) {
		return true
	}

	return false
}

// SetDecisionDefinitionKeyIn gets a reference to the given []string and assigns it to the DecisionDefinitionKeyIn field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionKeyIn(v []string) {
	o.DecisionDefinitionKeyIn = v
}

// GetDecisionDefinitionName returns the DecisionDefinitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionName() string {
	if o == nil || IsNil(o.DecisionDefinitionName.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionName.Get()
}

// GetDecisionDefinitionNameOk returns a tuple with the DecisionDefinitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionName.Get(), o.DecisionDefinitionName.IsSet()
}

// HasDecisionDefinitionName returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionDefinitionName() bool {
	if o != nil && o.DecisionDefinitionName.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionName gets a reference to the given NullableString and assigns it to the DecisionDefinitionName field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionName(v string) {
	o.DecisionDefinitionName.Set(&v)
}
// SetDecisionDefinitionNameNil sets the value for DecisionDefinitionName to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionNameNil() {
	o.DecisionDefinitionName.Set(nil)
}

// UnsetDecisionDefinitionName ensures that no value is present for DecisionDefinitionName, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionDefinitionName() {
	o.DecisionDefinitionName.Unset()
}

// GetDecisionDefinitionNameLike returns the DecisionDefinitionNameLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionNameLike() string {
	if o == nil || IsNil(o.DecisionDefinitionNameLike.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionDefinitionNameLike.Get()
}

// GetDecisionDefinitionNameLikeOk returns a tuple with the DecisionDefinitionNameLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionDefinitionNameLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionDefinitionNameLike.Get(), o.DecisionDefinitionNameLike.IsSet()
}

// HasDecisionDefinitionNameLike returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionDefinitionNameLike() bool {
	if o != nil && o.DecisionDefinitionNameLike.IsSet() {
		return true
	}

	return false
}

// SetDecisionDefinitionNameLike gets a reference to the given NullableString and assigns it to the DecisionDefinitionNameLike field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionNameLike(v string) {
	o.DecisionDefinitionNameLike.Set(&v)
}
// SetDecisionDefinitionNameLikeNil sets the value for DecisionDefinitionNameLike to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionDefinitionNameLikeNil() {
	o.DecisionDefinitionNameLike.Set(nil)
}

// UnsetDecisionDefinitionNameLike ensures that no value is present for DecisionDefinitionNameLike, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionDefinitionNameLike() {
	o.DecisionDefinitionNameLike.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricDecisionInstanceQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricDecisionInstanceQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricDecisionInstanceQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *HistoricDecisionInstanceQueryDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseDefinitionKey returns the CaseDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetCaseDefinitionKey() string {
	if o == nil || IsNil(o.CaseDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionKey.Get()
}

// GetCaseDefinitionKeyOk returns a tuple with the CaseDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetCaseDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionKey.Get(), o.CaseDefinitionKey.IsSet()
}

// HasCaseDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasCaseDefinitionKey() bool {
	if o != nil && o.CaseDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionKey gets a reference to the given NullableString and assigns it to the CaseDefinitionKey field.
func (o *HistoricDecisionInstanceQueryDto) SetCaseDefinitionKey(v string) {
	o.CaseDefinitionKey.Set(&v)
}
// SetCaseDefinitionKeyNil sets the value for CaseDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetCaseDefinitionKeyNil() {
	o.CaseDefinitionKey.Set(nil)
}

// UnsetCaseDefinitionKey ensures that no value is present for CaseDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetCaseDefinitionKey() {
	o.CaseDefinitionKey.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *HistoricDecisionInstanceQueryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetActivityIdIn returns the ActivityIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetActivityIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActivityIdIn
}

// GetActivityIdInOk returns a tuple with the ActivityIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetActivityIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActivityIdIn) {
		return nil, false
	}
	return o.ActivityIdIn, true
}

// HasActivityIdIn returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasActivityIdIn() bool {
	if o != nil && !IsNil(o.ActivityIdIn) {
		return true
	}

	return false
}

// SetActivityIdIn gets a reference to the given []string and assigns it to the ActivityIdIn field.
func (o *HistoricDecisionInstanceQueryDto) SetActivityIdIn(v []string) {
	o.ActivityIdIn = v
}

// GetActivityInstanceIdIn returns the ActivityInstanceIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetActivityInstanceIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActivityInstanceIdIn
}

// GetActivityInstanceIdInOk returns a tuple with the ActivityInstanceIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetActivityInstanceIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActivityInstanceIdIn) {
		return nil, false
	}
	return o.ActivityInstanceIdIn, true
}

// HasActivityInstanceIdIn returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasActivityInstanceIdIn() bool {
	if o != nil && !IsNil(o.ActivityInstanceIdIn) {
		return true
	}

	return false
}

// SetActivityInstanceIdIn gets a reference to the given []string and assigns it to the ActivityInstanceIdIn field.
func (o *HistoricDecisionInstanceQueryDto) SetActivityInstanceIdIn(v []string) {
	o.ActivityInstanceIdIn = v
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *HistoricDecisionInstanceQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *HistoricDecisionInstanceQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetEvaluatedBefore returns the EvaluatedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetEvaluatedBefore() time.Time {
	if o == nil || IsNil(o.EvaluatedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EvaluatedBefore.Get()
}

// GetEvaluatedBeforeOk returns a tuple with the EvaluatedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetEvaluatedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EvaluatedBefore.Get(), o.EvaluatedBefore.IsSet()
}

// HasEvaluatedBefore returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasEvaluatedBefore() bool {
	if o != nil && o.EvaluatedBefore.IsSet() {
		return true
	}

	return false
}

// SetEvaluatedBefore gets a reference to the given NullableTime and assigns it to the EvaluatedBefore field.
func (o *HistoricDecisionInstanceQueryDto) SetEvaluatedBefore(v time.Time) {
	o.EvaluatedBefore.Set(&v)
}
// SetEvaluatedBeforeNil sets the value for EvaluatedBefore to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetEvaluatedBeforeNil() {
	o.EvaluatedBefore.Set(nil)
}

// UnsetEvaluatedBefore ensures that no value is present for EvaluatedBefore, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetEvaluatedBefore() {
	o.EvaluatedBefore.Unset()
}

// GetEvaluatedAfter returns the EvaluatedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetEvaluatedAfter() time.Time {
	if o == nil || IsNil(o.EvaluatedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EvaluatedAfter.Get()
}

// GetEvaluatedAfterOk returns a tuple with the EvaluatedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetEvaluatedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EvaluatedAfter.Get(), o.EvaluatedAfter.IsSet()
}

// HasEvaluatedAfter returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasEvaluatedAfter() bool {
	if o != nil && o.EvaluatedAfter.IsSet() {
		return true
	}

	return false
}

// SetEvaluatedAfter gets a reference to the given NullableTime and assigns it to the EvaluatedAfter field.
func (o *HistoricDecisionInstanceQueryDto) SetEvaluatedAfter(v time.Time) {
	o.EvaluatedAfter.Set(&v)
}
// SetEvaluatedAfterNil sets the value for EvaluatedAfter to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetEvaluatedAfterNil() {
	o.EvaluatedAfter.Set(nil)
}

// UnsetEvaluatedAfter ensures that no value is present for EvaluatedAfter, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetEvaluatedAfter() {
	o.EvaluatedAfter.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *HistoricDecisionInstanceQueryDto) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetUserId() {
	o.UserId.Unset()
}

// GetRootDecisionInstanceId returns the RootDecisionInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetRootDecisionInstanceId() string {
	if o == nil || IsNil(o.RootDecisionInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootDecisionInstanceId.Get()
}

// GetRootDecisionInstanceIdOk returns a tuple with the RootDecisionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetRootDecisionInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootDecisionInstanceId.Get(), o.RootDecisionInstanceId.IsSet()
}

// HasRootDecisionInstanceId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasRootDecisionInstanceId() bool {
	if o != nil && o.RootDecisionInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootDecisionInstanceId gets a reference to the given NullableString and assigns it to the RootDecisionInstanceId field.
func (o *HistoricDecisionInstanceQueryDto) SetRootDecisionInstanceId(v string) {
	o.RootDecisionInstanceId.Set(&v)
}
// SetRootDecisionInstanceIdNil sets the value for RootDecisionInstanceId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetRootDecisionInstanceIdNil() {
	o.RootDecisionInstanceId.Set(nil)
}

// UnsetRootDecisionInstanceId ensures that no value is present for RootDecisionInstanceId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetRootDecisionInstanceId() {
	o.RootDecisionInstanceId.Unset()
}

// GetRootDecisionInstancesOnly returns the RootDecisionInstancesOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetRootDecisionInstancesOnly() bool {
	if o == nil || IsNil(o.RootDecisionInstancesOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.RootDecisionInstancesOnly.Get()
}

// GetRootDecisionInstancesOnlyOk returns a tuple with the RootDecisionInstancesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetRootDecisionInstancesOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootDecisionInstancesOnly.Get(), o.RootDecisionInstancesOnly.IsSet()
}

// HasRootDecisionInstancesOnly returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasRootDecisionInstancesOnly() bool {
	if o != nil && o.RootDecisionInstancesOnly.IsSet() {
		return true
	}

	return false
}

// SetRootDecisionInstancesOnly gets a reference to the given NullableBool and assigns it to the RootDecisionInstancesOnly field.
func (o *HistoricDecisionInstanceQueryDto) SetRootDecisionInstancesOnly(v bool) {
	o.RootDecisionInstancesOnly.Set(&v)
}
// SetRootDecisionInstancesOnlyNil sets the value for RootDecisionInstancesOnly to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetRootDecisionInstancesOnlyNil() {
	o.RootDecisionInstancesOnly.Set(nil)
}

// UnsetRootDecisionInstancesOnly ensures that no value is present for RootDecisionInstancesOnly, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetRootDecisionInstancesOnly() {
	o.RootDecisionInstancesOnly.Unset()
}

// GetDecisionRequirementsDefinitionId returns the DecisionRequirementsDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionRequirementsDefinitionId() string {
	if o == nil || IsNil(o.DecisionRequirementsDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionRequirementsDefinitionId.Get()
}

// GetDecisionRequirementsDefinitionIdOk returns a tuple with the DecisionRequirementsDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionRequirementsDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionRequirementsDefinitionId.Get(), o.DecisionRequirementsDefinitionId.IsSet()
}

// HasDecisionRequirementsDefinitionId returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionRequirementsDefinitionId() bool {
	if o != nil && o.DecisionRequirementsDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetDecisionRequirementsDefinitionId gets a reference to the given NullableString and assigns it to the DecisionRequirementsDefinitionId field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionRequirementsDefinitionId(v string) {
	o.DecisionRequirementsDefinitionId.Set(&v)
}
// SetDecisionRequirementsDefinitionIdNil sets the value for DecisionRequirementsDefinitionId to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionRequirementsDefinitionIdNil() {
	o.DecisionRequirementsDefinitionId.Set(nil)
}

// UnsetDecisionRequirementsDefinitionId ensures that no value is present for DecisionRequirementsDefinitionId, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionRequirementsDefinitionId() {
	o.DecisionRequirementsDefinitionId.Unset()
}

// GetDecisionRequirementsDefinitionKey returns the DecisionRequirementsDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDecisionRequirementsDefinitionKey() string {
	if o == nil || IsNil(o.DecisionRequirementsDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.DecisionRequirementsDefinitionKey.Get()
}

// GetDecisionRequirementsDefinitionKeyOk returns a tuple with the DecisionRequirementsDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDecisionRequirementsDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DecisionRequirementsDefinitionKey.Get(), o.DecisionRequirementsDefinitionKey.IsSet()
}

// HasDecisionRequirementsDefinitionKey returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDecisionRequirementsDefinitionKey() bool {
	if o != nil && o.DecisionRequirementsDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetDecisionRequirementsDefinitionKey gets a reference to the given NullableString and assigns it to the DecisionRequirementsDefinitionKey field.
func (o *HistoricDecisionInstanceQueryDto) SetDecisionRequirementsDefinitionKey(v string) {
	o.DecisionRequirementsDefinitionKey.Set(&v)
}
// SetDecisionRequirementsDefinitionKeyNil sets the value for DecisionRequirementsDefinitionKey to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDecisionRequirementsDefinitionKeyNil() {
	o.DecisionRequirementsDefinitionKey.Set(nil)
}

// UnsetDecisionRequirementsDefinitionKey ensures that no value is present for DecisionRequirementsDefinitionKey, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDecisionRequirementsDefinitionKey() {
	o.DecisionRequirementsDefinitionKey.Unset()
}

// GetIncludeInputs returns the IncludeInputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetIncludeInputs() bool {
	if o == nil || IsNil(o.IncludeInputs.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeInputs.Get()
}

// GetIncludeInputsOk returns a tuple with the IncludeInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetIncludeInputsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeInputs.Get(), o.IncludeInputs.IsSet()
}

// HasIncludeInputs returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasIncludeInputs() bool {
	if o != nil && o.IncludeInputs.IsSet() {
		return true
	}

	return false
}

// SetIncludeInputs gets a reference to the given NullableBool and assigns it to the IncludeInputs field.
func (o *HistoricDecisionInstanceQueryDto) SetIncludeInputs(v bool) {
	o.IncludeInputs.Set(&v)
}
// SetIncludeInputsNil sets the value for IncludeInputs to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetIncludeInputsNil() {
	o.IncludeInputs.Set(nil)
}

// UnsetIncludeInputs ensures that no value is present for IncludeInputs, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetIncludeInputs() {
	o.IncludeInputs.Unset()
}

// GetIncludeOutputs returns the IncludeOutputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetIncludeOutputs() bool {
	if o == nil || IsNil(o.IncludeOutputs.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeOutputs.Get()
}

// GetIncludeOutputsOk returns a tuple with the IncludeOutputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetIncludeOutputsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeOutputs.Get(), o.IncludeOutputs.IsSet()
}

// HasIncludeOutputs returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasIncludeOutputs() bool {
	if o != nil && o.IncludeOutputs.IsSet() {
		return true
	}

	return false
}

// SetIncludeOutputs gets a reference to the given NullableBool and assigns it to the IncludeOutputs field.
func (o *HistoricDecisionInstanceQueryDto) SetIncludeOutputs(v bool) {
	o.IncludeOutputs.Set(&v)
}
// SetIncludeOutputsNil sets the value for IncludeOutputs to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetIncludeOutputsNil() {
	o.IncludeOutputs.Set(nil)
}

// UnsetIncludeOutputs ensures that no value is present for IncludeOutputs, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetIncludeOutputs() {
	o.IncludeOutputs.Unset()
}

// GetDisableBinaryFetching returns the DisableBinaryFetching field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDisableBinaryFetching() bool {
	if o == nil || IsNil(o.DisableBinaryFetching.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableBinaryFetching.Get()
}

// GetDisableBinaryFetchingOk returns a tuple with the DisableBinaryFetching field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDisableBinaryFetchingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableBinaryFetching.Get(), o.DisableBinaryFetching.IsSet()
}

// HasDisableBinaryFetching returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDisableBinaryFetching() bool {
	if o != nil && o.DisableBinaryFetching.IsSet() {
		return true
	}

	return false
}

// SetDisableBinaryFetching gets a reference to the given NullableBool and assigns it to the DisableBinaryFetching field.
func (o *HistoricDecisionInstanceQueryDto) SetDisableBinaryFetching(v bool) {
	o.DisableBinaryFetching.Set(&v)
}
// SetDisableBinaryFetchingNil sets the value for DisableBinaryFetching to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDisableBinaryFetchingNil() {
	o.DisableBinaryFetching.Set(nil)
}

// UnsetDisableBinaryFetching ensures that no value is present for DisableBinaryFetching, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDisableBinaryFetching() {
	o.DisableBinaryFetching.Unset()
}

// GetDisableCustomObjectDeserialization returns the DisableCustomObjectDeserialization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricDecisionInstanceQueryDto) GetDisableCustomObjectDeserialization() bool {
	if o == nil || IsNil(o.DisableCustomObjectDeserialization.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableCustomObjectDeserialization.Get()
}

// GetDisableCustomObjectDeserializationOk returns a tuple with the DisableCustomObjectDeserialization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricDecisionInstanceQueryDto) GetDisableCustomObjectDeserializationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableCustomObjectDeserialization.Get(), o.DisableCustomObjectDeserialization.IsSet()
}

// HasDisableCustomObjectDeserialization returns a boolean if a field has been set.
func (o *HistoricDecisionInstanceQueryDto) HasDisableCustomObjectDeserialization() bool {
	if o != nil && o.DisableCustomObjectDeserialization.IsSet() {
		return true
	}

	return false
}

// SetDisableCustomObjectDeserialization gets a reference to the given NullableBool and assigns it to the DisableCustomObjectDeserialization field.
func (o *HistoricDecisionInstanceQueryDto) SetDisableCustomObjectDeserialization(v bool) {
	o.DisableCustomObjectDeserialization.Set(&v)
}
// SetDisableCustomObjectDeserializationNil sets the value for DisableCustomObjectDeserialization to be an explicit nil
func (o *HistoricDecisionInstanceQueryDto) SetDisableCustomObjectDeserializationNil() {
	o.DisableCustomObjectDeserialization.Set(nil)
}

// UnsetDisableCustomObjectDeserialization ensures that no value is present for DisableCustomObjectDeserialization, not even an explicit nil
func (o *HistoricDecisionInstanceQueryDto) UnsetDisableCustomObjectDeserialization() {
	o.DisableCustomObjectDeserialization.Unset()
}

func (o HistoricDecisionInstanceQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricDecisionInstanceQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DecisionInstanceId.IsSet() {
		toSerialize["decisionInstanceId"] = o.DecisionInstanceId.Get()
	}
	if o.DecisionInstanceIdIn != nil {
		toSerialize["decisionInstanceIdIn"] = o.DecisionInstanceIdIn
	}
	if o.DecisionDefinitionId.IsSet() {
		toSerialize["decisionDefinitionId"] = o.DecisionDefinitionId.Get()
	}
	if o.DecisionDefinitionIdIn != nil {
		toSerialize["decisionDefinitionIdIn"] = o.DecisionDefinitionIdIn
	}
	if o.DecisionDefinitionKey.IsSet() {
		toSerialize["decisionDefinitionKey"] = o.DecisionDefinitionKey.Get()
	}
	if o.DecisionDefinitionKeyIn != nil {
		toSerialize["decisionDefinitionKeyIn"] = o.DecisionDefinitionKeyIn
	}
	if o.DecisionDefinitionName.IsSet() {
		toSerialize["decisionDefinitionName"] = o.DecisionDefinitionName.Get()
	}
	if o.DecisionDefinitionNameLike.IsSet() {
		toSerialize["decisionDefinitionNameLike"] = o.DecisionDefinitionNameLike.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseDefinitionKey.IsSet() {
		toSerialize["caseDefinitionKey"] = o.CaseDefinitionKey.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.ActivityIdIn != nil {
		toSerialize["activityIdIn"] = o.ActivityIdIn
	}
	if o.ActivityInstanceIdIn != nil {
		toSerialize["activityInstanceIdIn"] = o.ActivityInstanceIdIn
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.EvaluatedBefore.IsSet() {
		toSerialize["evaluatedBefore"] = o.EvaluatedBefore.Get()
	}
	if o.EvaluatedAfter.IsSet() {
		toSerialize["evaluatedAfter"] = o.EvaluatedAfter.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.RootDecisionInstanceId.IsSet() {
		toSerialize["rootDecisionInstanceId"] = o.RootDecisionInstanceId.Get()
	}
	if o.RootDecisionInstancesOnly.IsSet() {
		toSerialize["rootDecisionInstancesOnly"] = o.RootDecisionInstancesOnly.Get()
	}
	if o.DecisionRequirementsDefinitionId.IsSet() {
		toSerialize["decisionRequirementsDefinitionId"] = o.DecisionRequirementsDefinitionId.Get()
	}
	if o.DecisionRequirementsDefinitionKey.IsSet() {
		toSerialize["decisionRequirementsDefinitionKey"] = o.DecisionRequirementsDefinitionKey.Get()
	}
	if o.IncludeInputs.IsSet() {
		toSerialize["includeInputs"] = o.IncludeInputs.Get()
	}
	if o.IncludeOutputs.IsSet() {
		toSerialize["includeOutputs"] = o.IncludeOutputs.Get()
	}
	if o.DisableBinaryFetching.IsSet() {
		toSerialize["disableBinaryFetching"] = o.DisableBinaryFetching.Get()
	}
	if o.DisableCustomObjectDeserialization.IsSet() {
		toSerialize["disableCustomObjectDeserialization"] = o.DisableCustomObjectDeserialization.Get()
	}
	return toSerialize, nil
}

type NullableHistoricDecisionInstanceQueryDto struct {
	value *HistoricDecisionInstanceQueryDto
	isSet bool
}

func (v NullableHistoricDecisionInstanceQueryDto) Get() *HistoricDecisionInstanceQueryDto {
	return v.value
}

func (v *NullableHistoricDecisionInstanceQueryDto) Set(val *HistoricDecisionInstanceQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricDecisionInstanceQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricDecisionInstanceQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricDecisionInstanceQueryDto(val *HistoricDecisionInstanceQueryDto) *NullableHistoricDecisionInstanceQueryDto {
	return &NullableHistoricDecisionInstanceQueryDto{value: val, isSet: true}
}

func (v NullableHistoricDecisionInstanceQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricDecisionInstanceQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


