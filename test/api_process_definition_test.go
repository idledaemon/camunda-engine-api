/*
Camunda Platform REST API

Testing ProcessDefinitionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package camundarestgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_camundarestgo_ProcessDefinitionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProcessDefinitionAPIService DeleteProcessDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ProcessDefinitionAPI.DeleteProcessDefinition(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService DeleteProcessDefinitionsByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		httpRes, err := apiClient.ProcessDefinitionAPI.DeleteProcessDefinitionsByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService DeleteProcessDefinitionsByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		httpRes, err := apiClient.ProcessDefinitionAPI.DeleteProcessDefinitionsByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetActivityStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetActivityStatistics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetActivityStatisticsByProcessDefinitionKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetActivityStatisticsByProcessDefinitionKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetActivityStatisticsByProcessDefinitionKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetActivityStatisticsByProcessDefinitionKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetDeployedStartForm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetDeployedStartForm(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetDeployedStartFormByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetDeployedStartFormByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetDeployedStartFormByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetDeployedStartFormByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetLatestProcessDefinitionByTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetLatestProcessDefinitionByTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinition(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionBpmn20Xml", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionBpmn20Xml(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionBpmn20XmlByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionBpmn20XmlByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionBpmn20XmlByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionBpmn20XmlByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionDiagram", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionDiagram(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionDiagramByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionDiagramByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionDiagramByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionDiagramByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetProcessDefinitionsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetProcessDefinitionsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetRenderedStartForm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetRenderedStartForm(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetRenderedStartFormByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetRenderedStartFormByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetRenderedStartFormByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetRenderedStartFormByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStartForm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStartForm(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStartFormByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStartFormByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStartFormByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStartFormByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStartFormVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStartFormVariables(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStartFormVariablesByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStartFormVariablesByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStartFormVariablesByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStartFormVariablesByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService GetStaticCalledProcessDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.GetStaticCalledProcessDefinitions(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService RestartProcessInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ProcessDefinitionAPI.RestartProcessInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService RestartProcessInstanceAsyncOperation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.RestartProcessInstanceAsyncOperation(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService StartProcessInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.StartProcessInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService StartProcessInstanceByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.StartProcessInstanceByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService StartProcessInstanceByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.StartProcessInstanceByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService SubmitForm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.SubmitForm(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService SubmitFormByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.SubmitFormByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService SubmitFormByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.ProcessDefinitionAPI.SubmitFormByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateHistoryTimeToLiveByProcessDefinitionId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateHistoryTimeToLiveByProcessDefinitionId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateHistoryTimeToLiveByProcessDefinitionKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateHistoryTimeToLiveByProcessDefinitionKey(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateProcessDefinitionSuspensionState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateProcessDefinitionSuspensionState(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateProcessDefinitionSuspensionStateById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateProcessDefinitionSuspensionStateById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateProcessDefinitionSuspensionStateByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateProcessDefinitionSuspensionStateByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProcessDefinitionAPIService UpdateProcessDefinitionSuspensionStateByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		httpRes, err := apiClient.ProcessDefinitionAPI.UpdateProcessDefinitionSuspensionStateByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
