/*
Camunda Platform REST API

Testing ExecutionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package camundarestgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_camundarestgo_ExecutionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExecutionAPIService CreateIncident", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExecutionAPI.CreateIncident(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService DeleteLocalExecutionVariable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var varName string

		httpRes, err := apiClient.ExecutionAPI.DeleteLocalExecutionVariable(context.Background(), id, varName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetExecution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExecutionAPI.GetExecution(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetExecutions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExecutionAPI.GetExecutions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetExecutionsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExecutionAPI.GetExecutionsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetLocalExecutionVariable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var varName string

		resp, httpRes, err := apiClient.ExecutionAPI.GetLocalExecutionVariable(context.Background(), id, varName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetLocalExecutionVariableBinary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var varName string

		resp, httpRes, err := apiClient.ExecutionAPI.GetLocalExecutionVariableBinary(context.Background(), id, varName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetLocalExecutionVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExecutionAPI.GetLocalExecutionVariables(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService GetMessageEventSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageName string

		resp, httpRes, err := apiClient.ExecutionAPI.GetMessageEventSubscription(context.Background(), id, messageName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService ModifyLocalExecutionVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ExecutionAPI.ModifyLocalExecutionVariables(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService PutLocalExecutionVariable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var varName string

		httpRes, err := apiClient.ExecutionAPI.PutLocalExecutionVariable(context.Background(), id, varName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService QueryExecutions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExecutionAPI.QueryExecutions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService QueryExecutionsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExecutionAPI.QueryExecutionsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService SetLocalExecutionVariableBinary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var varName string

		httpRes, err := apiClient.ExecutionAPI.SetLocalExecutionVariableBinary(context.Background(), id, varName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService SignalExecution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ExecutionAPI.SignalExecution(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExecutionAPIService TriggerEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageName string

		httpRes, err := apiClient.ExecutionAPI.TriggerEvent(context.Background(), id, messageName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
