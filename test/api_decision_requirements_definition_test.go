/*
Camunda Platform REST API

Testing DecisionRequirementsDefinitionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package camundarestgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_camundarestgo_DecisionRequirementsDefinitionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionDiagramById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionDiagramById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionDiagramByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionDiagramByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionDmnXmlById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionDmnXmlById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionDmnXmlByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionDmnXmlByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var tenantId string

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(context.Background(), key, tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DecisionRequirementsDefinitionAPIService GetDecisionRequirementsDefinitionsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DecisionRequirementsDefinitionAPI.GetDecisionRequirementsDefinitionsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
