/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProcessInstanceModificationInstructionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessInstanceModificationInstructionDto{}

// ProcessInstanceModificationInstructionDto struct for ProcessInstanceModificationInstructionDto
type ProcessInstanceModificationInstructionDto struct {
	// **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.  * A cancel instruction requests cancellation of a single activity instance or all instances of one activity. * A startBeforeActivity instruction requests to enter a given activity. * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. * A startTransition instruction requests to execute a specific sequence flow.
	Type string `json:"type"`
	Variables *TriggerVariableValueDto `json:"variables,omitempty"`
	// Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.
	ActivityId NullableString `json:"activityId,omitempty"`
	// Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.
	TransitionId NullableString `json:"transitionId,omitempty"`
	// Can be used with instructions of type `cancel`. Specifies the activity instance to cancel. Valid values are the activity instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.21/reference/rest/process-instance/get-activity-instances/).
	ActivityInstanceId NullableString `json:"activityInstanceId,omitempty"`
	// Can be used with instructions of type `cancel`. Specifies the transition instance to cancel. Valid values are the transition instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.21/reference/rest/process-instance/get-activity-instances/).
	TransitionInstanceId NullableString `json:"transitionInstanceId,omitempty"`
	// Can be used with instructions of type `startBeforeActivity`, `startAfterActivity`, and `startTransition`. Valid values are the activity instance IDs supplied by the Get Activity Instance request. If there are multiple parent activity instances of the targeted activity, this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated.  Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started, this parameter allows to specifiy under which subprocess instance the activity should be started.
	AncestorActivityInstanceId NullableString `json:"ancestorActivityInstanceId,omitempty"`
	// Can be used with instructions of type cancel. Prevents the deletion of new created activity instances.
	CancelCurrentActiveActivityInstances NullableBool `json:"cancelCurrentActiveActivityInstances,omitempty"`
}

type _ProcessInstanceModificationInstructionDto ProcessInstanceModificationInstructionDto

// NewProcessInstanceModificationInstructionDto instantiates a new ProcessInstanceModificationInstructionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessInstanceModificationInstructionDto(type_ string) *ProcessInstanceModificationInstructionDto {
	this := ProcessInstanceModificationInstructionDto{}
	this.Type = type_
	return &this
}

// NewProcessInstanceModificationInstructionDtoWithDefaults instantiates a new ProcessInstanceModificationInstructionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessInstanceModificationInstructionDtoWithDefaults() *ProcessInstanceModificationInstructionDto {
	this := ProcessInstanceModificationInstructionDto{}
	return &this
}

// GetType returns the Type field value
func (o *ProcessInstanceModificationInstructionDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProcessInstanceModificationInstructionDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProcessInstanceModificationInstructionDto) SetType(v string) {
	o.Type = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ProcessInstanceModificationInstructionDto) GetVariables() TriggerVariableValueDto {
	if o == nil || IsNil(o.Variables) {
		var ret TriggerVariableValueDto
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessInstanceModificationInstructionDto) GetVariablesOk() (*TriggerVariableValueDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given TriggerVariableValueDto and assigns it to the Variables field.
func (o *ProcessInstanceModificationInstructionDto) SetVariables(v TriggerVariableValueDto) {
	o.Variables = &v
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationInstructionDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationInstructionDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *ProcessInstanceModificationInstructionDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *ProcessInstanceModificationInstructionDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *ProcessInstanceModificationInstructionDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetTransitionId returns the TransitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationInstructionDto) GetTransitionId() string {
	if o == nil || IsNil(o.TransitionId.Get()) {
		var ret string
		return ret
	}
	return *o.TransitionId.Get()
}

// GetTransitionIdOk returns a tuple with the TransitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationInstructionDto) GetTransitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransitionId.Get(), o.TransitionId.IsSet()
}

// HasTransitionId returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasTransitionId() bool {
	if o != nil && o.TransitionId.IsSet() {
		return true
	}

	return false
}

// SetTransitionId gets a reference to the given NullableString and assigns it to the TransitionId field.
func (o *ProcessInstanceModificationInstructionDto) SetTransitionId(v string) {
	o.TransitionId.Set(&v)
}
// SetTransitionIdNil sets the value for TransitionId to be an explicit nil
func (o *ProcessInstanceModificationInstructionDto) SetTransitionIdNil() {
	o.TransitionId.Set(nil)
}

// UnsetTransitionId ensures that no value is present for TransitionId, not even an explicit nil
func (o *ProcessInstanceModificationInstructionDto) UnsetTransitionId() {
	o.TransitionId.Unset()
}

// GetActivityInstanceId returns the ActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationInstructionDto) GetActivityInstanceId() string {
	if o == nil || IsNil(o.ActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityInstanceId.Get()
}

// GetActivityInstanceIdOk returns a tuple with the ActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationInstructionDto) GetActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityInstanceId.Get(), o.ActivityInstanceId.IsSet()
}

// HasActivityInstanceId returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasActivityInstanceId() bool {
	if o != nil && o.ActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetActivityInstanceId gets a reference to the given NullableString and assigns it to the ActivityInstanceId field.
func (o *ProcessInstanceModificationInstructionDto) SetActivityInstanceId(v string) {
	o.ActivityInstanceId.Set(&v)
}
// SetActivityInstanceIdNil sets the value for ActivityInstanceId to be an explicit nil
func (o *ProcessInstanceModificationInstructionDto) SetActivityInstanceIdNil() {
	o.ActivityInstanceId.Set(nil)
}

// UnsetActivityInstanceId ensures that no value is present for ActivityInstanceId, not even an explicit nil
func (o *ProcessInstanceModificationInstructionDto) UnsetActivityInstanceId() {
	o.ActivityInstanceId.Unset()
}

// GetTransitionInstanceId returns the TransitionInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationInstructionDto) GetTransitionInstanceId() string {
	if o == nil || IsNil(o.TransitionInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.TransitionInstanceId.Get()
}

// GetTransitionInstanceIdOk returns a tuple with the TransitionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationInstructionDto) GetTransitionInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransitionInstanceId.Get(), o.TransitionInstanceId.IsSet()
}

// HasTransitionInstanceId returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasTransitionInstanceId() bool {
	if o != nil && o.TransitionInstanceId.IsSet() {
		return true
	}

	return false
}

// SetTransitionInstanceId gets a reference to the given NullableString and assigns it to the TransitionInstanceId field.
func (o *ProcessInstanceModificationInstructionDto) SetTransitionInstanceId(v string) {
	o.TransitionInstanceId.Set(&v)
}
// SetTransitionInstanceIdNil sets the value for TransitionInstanceId to be an explicit nil
func (o *ProcessInstanceModificationInstructionDto) SetTransitionInstanceIdNil() {
	o.TransitionInstanceId.Set(nil)
}

// UnsetTransitionInstanceId ensures that no value is present for TransitionInstanceId, not even an explicit nil
func (o *ProcessInstanceModificationInstructionDto) UnsetTransitionInstanceId() {
	o.TransitionInstanceId.Unset()
}

// GetAncestorActivityInstanceId returns the AncestorActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationInstructionDto) GetAncestorActivityInstanceId() string {
	if o == nil || IsNil(o.AncestorActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.AncestorActivityInstanceId.Get()
}

// GetAncestorActivityInstanceIdOk returns a tuple with the AncestorActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationInstructionDto) GetAncestorActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AncestorActivityInstanceId.Get(), o.AncestorActivityInstanceId.IsSet()
}

// HasAncestorActivityInstanceId returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasAncestorActivityInstanceId() bool {
	if o != nil && o.AncestorActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetAncestorActivityInstanceId gets a reference to the given NullableString and assigns it to the AncestorActivityInstanceId field.
func (o *ProcessInstanceModificationInstructionDto) SetAncestorActivityInstanceId(v string) {
	o.AncestorActivityInstanceId.Set(&v)
}
// SetAncestorActivityInstanceIdNil sets the value for AncestorActivityInstanceId to be an explicit nil
func (o *ProcessInstanceModificationInstructionDto) SetAncestorActivityInstanceIdNil() {
	o.AncestorActivityInstanceId.Set(nil)
}

// UnsetAncestorActivityInstanceId ensures that no value is present for AncestorActivityInstanceId, not even an explicit nil
func (o *ProcessInstanceModificationInstructionDto) UnsetAncestorActivityInstanceId() {
	o.AncestorActivityInstanceId.Unset()
}

// GetCancelCurrentActiveActivityInstances returns the CancelCurrentActiveActivityInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceModificationInstructionDto) GetCancelCurrentActiveActivityInstances() bool {
	if o == nil || IsNil(o.CancelCurrentActiveActivityInstances.Get()) {
		var ret bool
		return ret
	}
	return *o.CancelCurrentActiveActivityInstances.Get()
}

// GetCancelCurrentActiveActivityInstancesOk returns a tuple with the CancelCurrentActiveActivityInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceModificationInstructionDto) GetCancelCurrentActiveActivityInstancesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelCurrentActiveActivityInstances.Get(), o.CancelCurrentActiveActivityInstances.IsSet()
}

// HasCancelCurrentActiveActivityInstances returns a boolean if a field has been set.
func (o *ProcessInstanceModificationInstructionDto) HasCancelCurrentActiveActivityInstances() bool {
	if o != nil && o.CancelCurrentActiveActivityInstances.IsSet() {
		return true
	}

	return false
}

// SetCancelCurrentActiveActivityInstances gets a reference to the given NullableBool and assigns it to the CancelCurrentActiveActivityInstances field.
func (o *ProcessInstanceModificationInstructionDto) SetCancelCurrentActiveActivityInstances(v bool) {
	o.CancelCurrentActiveActivityInstances.Set(&v)
}
// SetCancelCurrentActiveActivityInstancesNil sets the value for CancelCurrentActiveActivityInstances to be an explicit nil
func (o *ProcessInstanceModificationInstructionDto) SetCancelCurrentActiveActivityInstancesNil() {
	o.CancelCurrentActiveActivityInstances.Set(nil)
}

// UnsetCancelCurrentActiveActivityInstances ensures that no value is present for CancelCurrentActiveActivityInstances, not even an explicit nil
func (o *ProcessInstanceModificationInstructionDto) UnsetCancelCurrentActiveActivityInstances() {
	o.CancelCurrentActiveActivityInstances.Unset()
}

func (o ProcessInstanceModificationInstructionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessInstanceModificationInstructionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.TransitionId.IsSet() {
		toSerialize["transitionId"] = o.TransitionId.Get()
	}
	if o.ActivityInstanceId.IsSet() {
		toSerialize["activityInstanceId"] = o.ActivityInstanceId.Get()
	}
	if o.TransitionInstanceId.IsSet() {
		toSerialize["transitionInstanceId"] = o.TransitionInstanceId.Get()
	}
	if o.AncestorActivityInstanceId.IsSet() {
		toSerialize["ancestorActivityInstanceId"] = o.AncestorActivityInstanceId.Get()
	}
	if o.CancelCurrentActiveActivityInstances.IsSet() {
		toSerialize["cancelCurrentActiveActivityInstances"] = o.CancelCurrentActiveActivityInstances.Get()
	}
	return toSerialize, nil
}

func (o *ProcessInstanceModificationInstructionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcessInstanceModificationInstructionDto := _ProcessInstanceModificationInstructionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcessInstanceModificationInstructionDto)

	if err != nil {
		return err
	}

	*o = ProcessInstanceModificationInstructionDto(varProcessInstanceModificationInstructionDto)

	return err
}

type NullableProcessInstanceModificationInstructionDto struct {
	value *ProcessInstanceModificationInstructionDto
	isSet bool
}

func (v NullableProcessInstanceModificationInstructionDto) Get() *ProcessInstanceModificationInstructionDto {
	return v.value
}

func (v *NullableProcessInstanceModificationInstructionDto) Set(val *ProcessInstanceModificationInstructionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessInstanceModificationInstructionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessInstanceModificationInstructionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessInstanceModificationInstructionDto(val *ProcessInstanceModificationInstructionDto) *NullableProcessInstanceModificationInstructionDto {
	return &NullableProcessInstanceModificationInstructionDto{value: val, isSet: true}
}

func (v NullableProcessInstanceModificationInstructionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessInstanceModificationInstructionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


