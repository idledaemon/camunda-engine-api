/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type MigrationAPI interface {

	/*
	ExecuteMigrationPlan Execute Migration Plan

	Executes a migration plan synchronously for multiple process instances. To execute
a migration plan asynchronously, use the
[Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.21/reference/rest/migration/execute-migration-async/)
method.

For more information about the difference between synchronous and asynchronous
execution of a migration plan, please refer to the related section of
[the user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExecuteMigrationPlanRequest
	*/
	ExecuteMigrationPlan(ctx context.Context) ApiExecuteMigrationPlanRequest

	// ExecuteMigrationPlanExecute executes the request
	ExecuteMigrationPlanExecute(r ApiExecuteMigrationPlanRequest) (*http.Response, error)

	/*
	ExecuteMigrationPlanAsync Execute Migration Plan Async (Batch)

	Executes a migration plan asynchronously (batch) for multiple process instances.
To execute a migration plan synchronously, use the
[Execute MigrationPlan](https://docs.camunda.org/manual/7.21/reference/rest/migration/execute-migration/)
method.

For more information about the difference between synchronous and asynchronous
execution of a migration plan, please refer to the related section of
[the user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExecuteMigrationPlanAsyncRequest
	*/
	ExecuteMigrationPlanAsync(ctx context.Context) ApiExecuteMigrationPlanAsyncRequest

	// ExecuteMigrationPlanAsyncExecute executes the request
	//  @return BatchDto
	ExecuteMigrationPlanAsyncExecute(r ApiExecuteMigrationPlanAsyncRequest) (*BatchDto, *http.Response, error)

	/*
	GenerateMigrationPlan Generate Migration Plan

	Generates a migration plan for two process definitions. The generated migration
plan contains migration instructions which map equal activities
between the
two process definitions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGenerateMigrationPlanRequest
	*/
	GenerateMigrationPlan(ctx context.Context) ApiGenerateMigrationPlanRequest

	// GenerateMigrationPlanExecute executes the request
	//  @return MigrationPlanDto
	GenerateMigrationPlanExecute(r ApiGenerateMigrationPlanRequest) (*MigrationPlanDto, *http.Response, error)

	/*
	ValidateMigrationPlan Validate Migration Plan

	Validates a migration plan statically without executing it. This
corresponds to the
[creation time validation](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-migration/#creation-time-validation)
described in the user guide.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiValidateMigrationPlanRequest
	*/
	ValidateMigrationPlan(ctx context.Context) ApiValidateMigrationPlanRequest

	// ValidateMigrationPlanExecute executes the request
	//  @return MigrationPlanReportDto
	ValidateMigrationPlanExecute(r ApiValidateMigrationPlanRequest) (*MigrationPlanReportDto, *http.Response, error)
}

// MigrationAPIService MigrationAPI service
type MigrationAPIService service

type ApiExecuteMigrationPlanRequest struct {
	ctx context.Context
	ApiService MigrationAPI
	migrationExecutionDto *MigrationExecutionDto
}

func (r ApiExecuteMigrationPlanRequest) MigrationExecutionDto(migrationExecutionDto MigrationExecutionDto) ApiExecuteMigrationPlanRequest {
	r.migrationExecutionDto = &migrationExecutionDto
	return r
}

func (r ApiExecuteMigrationPlanRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExecuteMigrationPlanExecute(r)
}

/*
ExecuteMigrationPlan Execute Migration Plan

Executes a migration plan synchronously for multiple process instances. To execute
a migration plan asynchronously, use the
[Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.21/reference/rest/migration/execute-migration-async/)
method.

For more information about the difference between synchronous and asynchronous
execution of a migration plan, please refer to the related section of
[the user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExecuteMigrationPlanRequest
*/
func (a *MigrationAPIService) ExecuteMigrationPlan(ctx context.Context) ApiExecuteMigrationPlanRequest {
	return ApiExecuteMigrationPlanRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MigrationAPIService) ExecuteMigrationPlanExecute(r ApiExecuteMigrationPlanRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationAPIService.ExecuteMigrationPlan")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migration/execute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.migrationExecutionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExecuteMigrationPlanAsyncRequest struct {
	ctx context.Context
	ApiService MigrationAPI
	migrationExecutionDto *MigrationExecutionDto
}

func (r ApiExecuteMigrationPlanAsyncRequest) MigrationExecutionDto(migrationExecutionDto MigrationExecutionDto) ApiExecuteMigrationPlanAsyncRequest {
	r.migrationExecutionDto = &migrationExecutionDto
	return r
}

func (r ApiExecuteMigrationPlanAsyncRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.ExecuteMigrationPlanAsyncExecute(r)
}

/*
ExecuteMigrationPlanAsync Execute Migration Plan Async (Batch)

Executes a migration plan asynchronously (batch) for multiple process instances.
To execute a migration plan synchronously, use the
[Execute MigrationPlan](https://docs.camunda.org/manual/7.21/reference/rest/migration/execute-migration/)
method.

For more information about the difference between synchronous and asynchronous
execution of a migration plan, please refer to the related section of
[the user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExecuteMigrationPlanAsyncRequest
*/
func (a *MigrationAPIService) ExecuteMigrationPlanAsync(ctx context.Context) ApiExecuteMigrationPlanAsyncRequest {
	return ApiExecuteMigrationPlanAsyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *MigrationAPIService) ExecuteMigrationPlanAsyncExecute(r ApiExecuteMigrationPlanAsyncRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationAPIService.ExecuteMigrationPlanAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migration/executeAsync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.migrationExecutionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenerateMigrationPlanRequest struct {
	ctx context.Context
	ApiService MigrationAPI
	migrationPlanGenerationDto *MigrationPlanGenerationDto
}

func (r ApiGenerateMigrationPlanRequest) MigrationPlanGenerationDto(migrationPlanGenerationDto MigrationPlanGenerationDto) ApiGenerateMigrationPlanRequest {
	r.migrationPlanGenerationDto = &migrationPlanGenerationDto
	return r
}

func (r ApiGenerateMigrationPlanRequest) Execute() (*MigrationPlanDto, *http.Response, error) {
	return r.ApiService.GenerateMigrationPlanExecute(r)
}

/*
GenerateMigrationPlan Generate Migration Plan

Generates a migration plan for two process definitions. The generated migration
plan contains migration instructions which map equal activities
between the
two process definitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenerateMigrationPlanRequest
*/
func (a *MigrationAPIService) GenerateMigrationPlan(ctx context.Context) ApiGenerateMigrationPlanRequest {
	return ApiGenerateMigrationPlanRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MigrationPlanDto
func (a *MigrationAPIService) GenerateMigrationPlanExecute(r ApiGenerateMigrationPlanRequest) (*MigrationPlanDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MigrationPlanDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationAPIService.GenerateMigrationPlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migration/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.migrationPlanGenerationDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidateMigrationPlanRequest struct {
	ctx context.Context
	ApiService MigrationAPI
	migrationPlanDto *MigrationPlanDto
}

func (r ApiValidateMigrationPlanRequest) MigrationPlanDto(migrationPlanDto MigrationPlanDto) ApiValidateMigrationPlanRequest {
	r.migrationPlanDto = &migrationPlanDto
	return r
}

func (r ApiValidateMigrationPlanRequest) Execute() (*MigrationPlanReportDto, *http.Response, error) {
	return r.ApiService.ValidateMigrationPlanExecute(r)
}

/*
ValidateMigrationPlan Validate Migration Plan

Validates a migration plan statically without executing it. This
corresponds to the
[creation time validation](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-instance-migration/#creation-time-validation)
described in the user guide.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiValidateMigrationPlanRequest
*/
func (a *MigrationAPIService) ValidateMigrationPlan(ctx context.Context) ApiValidateMigrationPlanRequest {
	return ApiValidateMigrationPlanRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MigrationPlanReportDto
func (a *MigrationAPIService) ValidateMigrationPlanExecute(r ApiValidateMigrationPlanRequest) (*MigrationPlanReportDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MigrationPlanReportDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationAPIService.ValidateMigrationPlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migration/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.migrationPlanDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
