/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type HistoricDecisionInstanceAPI interface {

	/*
	DeleteAsync Delete Async (POST)

	Delete multiple historic decision instances asynchronously (batch).
At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` 
has to be provided. If both are provided then all instances matching query 
criterion and instances from the list will be deleted.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteAsyncRequest
	*/
	DeleteAsync(ctx context.Context) ApiDeleteAsyncRequest

	// DeleteAsyncExecute executes the request
	//  @return BatchDto
	DeleteAsyncExecute(r ApiDeleteAsyncRequest) (*BatchDto, *http.Response, error)

	/*
	GetHistoricDecisionInstance Get Historic Decision Instance

	Retrieves a historic decision instance by id, according to the 
`HistoricDecisionInstance` interface in the engine.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the historic decision instance to be retrieved.
	@return ApiGetHistoricDecisionInstanceRequest
	*/
	GetHistoricDecisionInstance(ctx context.Context, id string) ApiGetHistoricDecisionInstanceRequest

	// GetHistoricDecisionInstanceExecute executes the request
	//  @return HistoricDecisionInstanceDto
	GetHistoricDecisionInstanceExecute(r ApiGetHistoricDecisionInstanceRequest) (*HistoricDecisionInstanceDto, *http.Response, error)

	/*
	GetHistoricDecisionInstances Get Historic Decision Instances

	Queries for historic decision instances that fulfill the given parameters. 
The size of the result set can be retrieved by using the 
[Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-instance/get-decision-instance-query-count/) 
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricDecisionInstancesRequest
	*/
	GetHistoricDecisionInstances(ctx context.Context) ApiGetHistoricDecisionInstancesRequest

	// GetHistoricDecisionInstancesExecute executes the request
	//  @return []HistoricDecisionInstanceDto
	GetHistoricDecisionInstancesExecute(r ApiGetHistoricDecisionInstancesRequest) ([]HistoricDecisionInstanceDto, *http.Response, error)

	/*
	GetHistoricDecisionInstancesCount Get Historic Decision Instance Count

	Queries for the number of historic decision instances that fulfill the given parameters. 
Takes the same parameters as the 
[Get Historic Decision Instances](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-instance/get-decision-instance-query/) 
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHistoricDecisionInstancesCountRequest
	*/
	GetHistoricDecisionInstancesCount(ctx context.Context) ApiGetHistoricDecisionInstancesCountRequest

	// GetHistoricDecisionInstancesCountExecute executes the request
	//  @return CountResultDto
	GetHistoricDecisionInstancesCountExecute(r ApiGetHistoricDecisionInstancesCountRequest) (*CountResultDto, *http.Response, error)

	/*
	SetRemovalTimeAsyncHistoricDecisionInstance Set Removal Time Async (POST)

	Sets the removal time to multiple historic decision instances asynchronously
(batch).

At least `historicDecisionInstanceIds` or
`historicDecisionInstanceQuery` has to be provided. If both are
provided, all instances matching query criterion and instances from the list
will be updated with a removal time.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest
	*/
	SetRemovalTimeAsyncHistoricDecisionInstance(ctx context.Context) ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest

	// SetRemovalTimeAsyncHistoricDecisionInstanceExecute executes the request
	//  @return BatchDto
	SetRemovalTimeAsyncHistoricDecisionInstanceExecute(r ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest) (*BatchDto, *http.Response, error)
}

// HistoricDecisionInstanceAPIService HistoricDecisionInstanceAPI service
type HistoricDecisionInstanceAPIService service

type ApiDeleteAsyncRequest struct {
	ctx context.Context
	ApiService HistoricDecisionInstanceAPI
	deleteHistoricDecisionInstancesDto *DeleteHistoricDecisionInstancesDto
}

func (r ApiDeleteAsyncRequest) DeleteHistoricDecisionInstancesDto(deleteHistoricDecisionInstancesDto DeleteHistoricDecisionInstancesDto) ApiDeleteAsyncRequest {
	r.deleteHistoricDecisionInstancesDto = &deleteHistoricDecisionInstancesDto
	return r
}

func (r ApiDeleteAsyncRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.DeleteAsyncExecute(r)
}

/*
DeleteAsync Delete Async (POST)

Delete multiple historic decision instances asynchronously (batch).
At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` 
has to be provided. If both are provided then all instances matching query 
criterion and instances from the list will be deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteAsyncRequest
*/
func (a *HistoricDecisionInstanceAPIService) DeleteAsync(ctx context.Context) ApiDeleteAsyncRequest {
	return ApiDeleteAsyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *HistoricDecisionInstanceAPIService) DeleteAsyncExecute(r ApiDeleteAsyncRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionInstanceAPIService.DeleteAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-instance/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteHistoricDecisionInstancesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricDecisionInstanceRequest struct {
	ctx context.Context
	ApiService HistoricDecisionInstanceAPI
	id string
	includeInputs *bool
	includeOutputs *bool
	disableBinaryFetching *bool
	disableCustomObjectDeserialization *bool
}

// Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstanceRequest) IncludeInputs(includeInputs bool) ApiGetHistoricDecisionInstanceRequest {
	r.includeInputs = &includeInputs
	return r
}

// Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstanceRequest) IncludeOutputs(includeOutputs bool) ApiGetHistoricDecisionInstanceRequest {
	r.includeOutputs = &includeOutputs
	return r
}

// Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstanceRequest) DisableBinaryFetching(disableBinaryFetching bool) ApiGetHistoricDecisionInstanceRequest {
	r.disableBinaryFetching = &disableBinaryFetching
	return r
}

// Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstanceRequest) DisableCustomObjectDeserialization(disableCustomObjectDeserialization bool) ApiGetHistoricDecisionInstanceRequest {
	r.disableCustomObjectDeserialization = &disableCustomObjectDeserialization
	return r
}

func (r ApiGetHistoricDecisionInstanceRequest) Execute() (*HistoricDecisionInstanceDto, *http.Response, error) {
	return r.ApiService.GetHistoricDecisionInstanceExecute(r)
}

/*
GetHistoricDecisionInstance Get Historic Decision Instance

Retrieves a historic decision instance by id, according to the 
`HistoricDecisionInstance` interface in the engine.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the historic decision instance to be retrieved.
 @return ApiGetHistoricDecisionInstanceRequest
*/
func (a *HistoricDecisionInstanceAPIService) GetHistoricDecisionInstance(ctx context.Context, id string) ApiGetHistoricDecisionInstanceRequest {
	return ApiGetHistoricDecisionInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistoricDecisionInstanceDto
func (a *HistoricDecisionInstanceAPIService) GetHistoricDecisionInstanceExecute(r ApiGetHistoricDecisionInstanceRequest) (*HistoricDecisionInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricDecisionInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionInstanceAPIService.GetHistoricDecisionInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-instance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeInputs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInputs", r.includeInputs, "")
	}
	if r.includeOutputs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOutputs", r.includeOutputs, "")
	}
	if r.disableBinaryFetching != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disableBinaryFetching", r.disableBinaryFetching, "")
	}
	if r.disableCustomObjectDeserialization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disableCustomObjectDeserialization", r.disableCustomObjectDeserialization, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricDecisionInstancesRequest struct {
	ctx context.Context
	ApiService HistoricDecisionInstanceAPI
	decisionInstanceId *string
	decisionInstanceIdIn *string
	decisionDefinitionId *string
	decisionDefinitionIdIn *string
	decisionDefinitionKey *string
	decisionDefinitionKeyIn *string
	decisionDefinitionName *string
	decisionDefinitionNameLike *string
	processDefinitionId *string
	processDefinitionKey *string
	processInstanceId *string
	caseDefinitionId *string
	caseDefinitionKey *string
	caseInstanceId *string
	activityIdIn *string
	activityInstanceIdIn *string
	tenantIdIn *string
	withoutTenantId *bool
	evaluatedBefore *time.Time
	evaluatedAfter *time.Time
	userId *string
	rootDecisionInstanceId *string
	rootDecisionInstancesOnly *bool
	decisionRequirementsDefinitionId *string
	decisionRequirementsDefinitionKey *string
	includeInputs *bool
	includeOutputs *bool
	disableBinaryFetching *bool
	disableCustomObjectDeserialization *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Filter by decision instance id.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionInstanceId(decisionInstanceId string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionInstanceId = &decisionInstanceId
	return r
}

// Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionInstanceIdIn(decisionInstanceIdIn string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionInstanceIdIn = &decisionInstanceIdIn
	return r
}

// Filter by the decision definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionDefinitionId(decisionDefinitionId string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionDefinitionId = &decisionDefinitionId
	return r
}

// Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionDefinitionIdIn(decisionDefinitionIdIn string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionDefinitionIdIn = &decisionDefinitionIdIn
	return r
}

// Filter by the key of the decision definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionDefinitionKey(decisionDefinitionKey string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionDefinitionKey = &decisionDefinitionKey
	return r
}

// Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionDefinitionKeyIn(decisionDefinitionKeyIn string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionDefinitionKeyIn = &decisionDefinitionKeyIn
	return r
}

// Filter by the name of the decision definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionDefinitionName(decisionDefinitionName string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionDefinitionName = &decisionDefinitionName
	return r
}

// Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionDefinitionNameLike(decisionDefinitionNameLike string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionDefinitionNameLike = &decisionDefinitionNameLike
	return r
}

// Filter by the process definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricDecisionInstancesRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by the key of the process definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricDecisionInstancesRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by the process instance the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricDecisionInstancesRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by the case definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) CaseDefinitionId(caseDefinitionId string) ApiGetHistoricDecisionInstancesRequest {
	r.caseDefinitionId = &caseDefinitionId
	return r
}

// Filter by the key of the case definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) CaseDefinitionKey(caseDefinitionKey string) ApiGetHistoricDecisionInstancesRequest {
	r.caseDefinitionKey = &caseDefinitionKey
	return r
}

// Filter by the case instance the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricDecisionInstancesRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
func (r ApiGetHistoricDecisionInstancesRequest) ActivityIdIn(activityIdIn string) ApiGetHistoricDecisionInstancesRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
func (r ApiGetHistoricDecisionInstancesRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetHistoricDecisionInstancesRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
func (r ApiGetHistoricDecisionInstancesRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricDecisionInstancesRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricDecisionInstancesRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricDecisionInstancesRequest) EvaluatedBefore(evaluatedBefore time.Time) ApiGetHistoricDecisionInstancesRequest {
	r.evaluatedBefore = &evaluatedBefore
	return r
}

// Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricDecisionInstancesRequest) EvaluatedAfter(evaluatedAfter time.Time) ApiGetHistoricDecisionInstancesRequest {
	r.evaluatedAfter = &evaluatedAfter
	return r
}

// Restrict to instances that were evaluated by the given user.
func (r ApiGetHistoricDecisionInstancesRequest) UserId(userId string) ApiGetHistoricDecisionInstancesRequest {
	r.userId = &userId
	return r
}

// Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
func (r ApiGetHistoricDecisionInstancesRequest) RootDecisionInstanceId(rootDecisionInstanceId string) ApiGetHistoricDecisionInstancesRequest {
	r.rootDecisionInstanceId = &rootDecisionInstanceId
	return r
}

// Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesRequest) RootDecisionInstancesOnly(rootDecisionInstancesOnly bool) ApiGetHistoricDecisionInstancesRequest {
	r.rootDecisionInstancesOnly = &rootDecisionInstancesOnly
	return r
}

// Filter by the decision requirements definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionRequirementsDefinitionId(decisionRequirementsDefinitionId string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionRequirementsDefinitionId = &decisionRequirementsDefinitionId
	return r
}

// Filter by the key of the decision requirements definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesRequest) DecisionRequirementsDefinitionKey(decisionRequirementsDefinitionKey string) ApiGetHistoricDecisionInstancesRequest {
	r.decisionRequirementsDefinitionKey = &decisionRequirementsDefinitionKey
	return r
}

// Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesRequest) IncludeInputs(includeInputs bool) ApiGetHistoricDecisionInstancesRequest {
	r.includeInputs = &includeInputs
	return r
}

// Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesRequest) IncludeOutputs(includeOutputs bool) ApiGetHistoricDecisionInstancesRequest {
	r.includeOutputs = &includeOutputs
	return r
}

// Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesRequest) DisableBinaryFetching(disableBinaryFetching bool) ApiGetHistoricDecisionInstancesRequest {
	r.disableBinaryFetching = &disableBinaryFetching
	return r
}

// Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesRequest) DisableCustomObjectDeserialization(disableCustomObjectDeserialization bool) ApiGetHistoricDecisionInstancesRequest {
	r.disableCustomObjectDeserialization = &disableCustomObjectDeserialization
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetHistoricDecisionInstancesRequest) SortBy(sortBy string) ApiGetHistoricDecisionInstancesRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetHistoricDecisionInstancesRequest) SortOrder(sortOrder string) ApiGetHistoricDecisionInstancesRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetHistoricDecisionInstancesRequest) FirstResult(firstResult int32) ApiGetHistoricDecisionInstancesRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetHistoricDecisionInstancesRequest) MaxResults(maxResults int32) ApiGetHistoricDecisionInstancesRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetHistoricDecisionInstancesRequest) Execute() ([]HistoricDecisionInstanceDto, *http.Response, error) {
	return r.ApiService.GetHistoricDecisionInstancesExecute(r)
}

/*
GetHistoricDecisionInstances Get Historic Decision Instances

Queries for historic decision instances that fulfill the given parameters. 
The size of the result set can be retrieved by using the 
[Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-instance/get-decision-instance-query-count/) 
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricDecisionInstancesRequest
*/
func (a *HistoricDecisionInstanceAPIService) GetHistoricDecisionInstances(ctx context.Context) ApiGetHistoricDecisionInstancesRequest {
	return ApiGetHistoricDecisionInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoricDecisionInstanceDto
func (a *HistoricDecisionInstanceAPIService) GetHistoricDecisionInstancesExecute(r ApiGetHistoricDecisionInstancesRequest) ([]HistoricDecisionInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HistoricDecisionInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionInstanceAPIService.GetHistoricDecisionInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.decisionInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionInstanceId", r.decisionInstanceId, "")
	}
	if r.decisionInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionInstanceIdIn", r.decisionInstanceIdIn, "")
	}
	if r.decisionDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionId", r.decisionDefinitionId, "")
	}
	if r.decisionDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionIdIn", r.decisionDefinitionIdIn, "")
	}
	if r.decisionDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionKey", r.decisionDefinitionKey, "")
	}
	if r.decisionDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionKeyIn", r.decisionDefinitionKeyIn, "")
	}
	if r.decisionDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionName", r.decisionDefinitionName, "")
	}
	if r.decisionDefinitionNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionNameLike", r.decisionDefinitionNameLike, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.caseDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionId", r.caseDefinitionId, "")
	}
	if r.caseDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionKey", r.caseDefinitionKey, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.evaluatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "evaluatedBefore", r.evaluatedBefore, "")
	}
	if r.evaluatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "evaluatedAfter", r.evaluatedAfter, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.rootDecisionInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootDecisionInstanceId", r.rootDecisionInstanceId, "")
	}
	if r.rootDecisionInstancesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootDecisionInstancesOnly", r.rootDecisionInstancesOnly, "")
	}
	if r.decisionRequirementsDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionRequirementsDefinitionId", r.decisionRequirementsDefinitionId, "")
	}
	if r.decisionRequirementsDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionRequirementsDefinitionKey", r.decisionRequirementsDefinitionKey, "")
	}
	if r.includeInputs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInputs", r.includeInputs, "")
	}
	if r.includeOutputs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOutputs", r.includeOutputs, "")
	}
	if r.disableBinaryFetching != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disableBinaryFetching", r.disableBinaryFetching, "")
	}
	if r.disableCustomObjectDeserialization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disableCustomObjectDeserialization", r.disableCustomObjectDeserialization, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricDecisionInstancesCountRequest struct {
	ctx context.Context
	ApiService HistoricDecisionInstanceAPI
	decisionInstanceId *string
	decisionInstanceIdIn *string
	decisionDefinitionId *string
	decisionDefinitionIdIn *string
	decisionDefinitionKey *string
	decisionDefinitionKeyIn *string
	decisionDefinitionName *string
	decisionDefinitionNameLike *string
	processDefinitionId *string
	processDefinitionKey *string
	processInstanceId *string
	caseDefinitionId *string
	caseDefinitionKey *string
	caseInstanceId *string
	activityIdIn *string
	activityInstanceIdIn *string
	tenantIdIn *string
	withoutTenantId *bool
	evaluatedBefore *time.Time
	evaluatedAfter *time.Time
	userId *string
	rootDecisionInstanceId *string
	rootDecisionInstancesOnly *bool
	decisionRequirementsDefinitionId *string
	decisionRequirementsDefinitionKey *string
}

// Filter by decision instance id.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionInstanceId(decisionInstanceId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionInstanceId = &decisionInstanceId
	return r
}

// Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionInstanceIdIn(decisionInstanceIdIn string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionInstanceIdIn = &decisionInstanceIdIn
	return r
}

// Filter by the decision definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionDefinitionId(decisionDefinitionId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionDefinitionId = &decisionDefinitionId
	return r
}

// Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionDefinitionIdIn(decisionDefinitionIdIn string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionDefinitionIdIn = &decisionDefinitionIdIn
	return r
}

// Filter by the key of the decision definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionDefinitionKey(decisionDefinitionKey string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionDefinitionKey = &decisionDefinitionKey
	return r
}

// Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionDefinitionKeyIn(decisionDefinitionKeyIn string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionDefinitionKeyIn = &decisionDefinitionKeyIn
	return r
}

// Filter by the name of the decision definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionDefinitionName(decisionDefinitionName string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionDefinitionName = &decisionDefinitionName
	return r
}

// Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionDefinitionNameLike(decisionDefinitionNameLike string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionDefinitionNameLike = &decisionDefinitionNameLike
	return r
}

// Filter by the process definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) ProcessDefinitionId(processDefinitionId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.processDefinitionId = &processDefinitionId
	return r
}

// Filter by the key of the process definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) ProcessDefinitionKey(processDefinitionKey string) ApiGetHistoricDecisionInstancesCountRequest {
	r.processDefinitionKey = &processDefinitionKey
	return r
}

// Filter by the process instance the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) ProcessInstanceId(processInstanceId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.processInstanceId = &processInstanceId
	return r
}

// Filter by the case definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) CaseDefinitionId(caseDefinitionId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.caseDefinitionId = &caseDefinitionId
	return r
}

// Filter by the key of the case definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) CaseDefinitionKey(caseDefinitionKey string) ApiGetHistoricDecisionInstancesCountRequest {
	r.caseDefinitionKey = &caseDefinitionKey
	return r
}

// Filter by the case instance the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) CaseInstanceId(caseInstanceId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.caseInstanceId = &caseInstanceId
	return r
}

// Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
func (r ApiGetHistoricDecisionInstancesCountRequest) ActivityIdIn(activityIdIn string) ApiGetHistoricDecisionInstancesCountRequest {
	r.activityIdIn = &activityIdIn
	return r
}

// Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
func (r ApiGetHistoricDecisionInstancesCountRequest) ActivityInstanceIdIn(activityInstanceIdIn string) ApiGetHistoricDecisionInstancesCountRequest {
	r.activityInstanceIdIn = &activityInstanceIdIn
	return r
}

// Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
func (r ApiGetHistoricDecisionInstancesCountRequest) TenantIdIn(tenantIdIn string) ApiGetHistoricDecisionInstancesCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetHistoricDecisionInstancesCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricDecisionInstancesCountRequest) EvaluatedBefore(evaluatedBefore time.Time) ApiGetHistoricDecisionInstancesCountRequest {
	r.evaluatedBefore = &evaluatedBefore
	return r
}

// Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
func (r ApiGetHistoricDecisionInstancesCountRequest) EvaluatedAfter(evaluatedAfter time.Time) ApiGetHistoricDecisionInstancesCountRequest {
	r.evaluatedAfter = &evaluatedAfter
	return r
}

// Restrict to instances that were evaluated by the given user.
func (r ApiGetHistoricDecisionInstancesCountRequest) UserId(userId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.userId = &userId
	return r
}

// Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
func (r ApiGetHistoricDecisionInstancesCountRequest) RootDecisionInstanceId(rootDecisionInstanceId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.rootDecisionInstanceId = &rootDecisionInstanceId
	return r
}

// Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
func (r ApiGetHistoricDecisionInstancesCountRequest) RootDecisionInstancesOnly(rootDecisionInstancesOnly bool) ApiGetHistoricDecisionInstancesCountRequest {
	r.rootDecisionInstancesOnly = &rootDecisionInstancesOnly
	return r
}

// Filter by the decision requirements definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionRequirementsDefinitionId(decisionRequirementsDefinitionId string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionRequirementsDefinitionId = &decisionRequirementsDefinitionId
	return r
}

// Filter by the key of the decision requirements definition the instances belongs to.
func (r ApiGetHistoricDecisionInstancesCountRequest) DecisionRequirementsDefinitionKey(decisionRequirementsDefinitionKey string) ApiGetHistoricDecisionInstancesCountRequest {
	r.decisionRequirementsDefinitionKey = &decisionRequirementsDefinitionKey
	return r
}

func (r ApiGetHistoricDecisionInstancesCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetHistoricDecisionInstancesCountExecute(r)
}

/*
GetHistoricDecisionInstancesCount Get Historic Decision Instance Count

Queries for the number of historic decision instances that fulfill the given parameters. 
Takes the same parameters as the 
[Get Historic Decision Instances](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-instance/get-decision-instance-query/) 
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricDecisionInstancesCountRequest
*/
func (a *HistoricDecisionInstanceAPIService) GetHistoricDecisionInstancesCount(ctx context.Context) ApiGetHistoricDecisionInstancesCountRequest {
	return ApiGetHistoricDecisionInstancesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricDecisionInstanceAPIService) GetHistoricDecisionInstancesCountExecute(r ApiGetHistoricDecisionInstancesCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionInstanceAPIService.GetHistoricDecisionInstancesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-instance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.decisionInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionInstanceId", r.decisionInstanceId, "")
	}
	if r.decisionInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionInstanceIdIn", r.decisionInstanceIdIn, "")
	}
	if r.decisionDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionId", r.decisionDefinitionId, "")
	}
	if r.decisionDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionIdIn", r.decisionDefinitionIdIn, "")
	}
	if r.decisionDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionKey", r.decisionDefinitionKey, "")
	}
	if r.decisionDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionKeyIn", r.decisionDefinitionKeyIn, "")
	}
	if r.decisionDefinitionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionName", r.decisionDefinitionName, "")
	}
	if r.decisionDefinitionNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionNameLike", r.decisionDefinitionNameLike, "")
	}
	if r.processDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionId", r.processDefinitionId, "")
	}
	if r.processDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processDefinitionKey", r.processDefinitionKey, "")
	}
	if r.processInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processInstanceId", r.processInstanceId, "")
	}
	if r.caseDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionId", r.caseDefinitionId, "")
	}
	if r.caseDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseDefinitionKey", r.caseDefinitionKey, "")
	}
	if r.caseInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "caseInstanceId", r.caseInstanceId, "")
	}
	if r.activityIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityIdIn", r.activityIdIn, "")
	}
	if r.activityInstanceIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityInstanceIdIn", r.activityInstanceIdIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.evaluatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "evaluatedBefore", r.evaluatedBefore, "")
	}
	if r.evaluatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "evaluatedAfter", r.evaluatedAfter, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.rootDecisionInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootDecisionInstanceId", r.rootDecisionInstanceId, "")
	}
	if r.rootDecisionInstancesOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rootDecisionInstancesOnly", r.rootDecisionInstancesOnly, "")
	}
	if r.decisionRequirementsDefinitionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionRequirementsDefinitionId", r.decisionRequirementsDefinitionId, "")
	}
	if r.decisionRequirementsDefinitionKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionRequirementsDefinitionKey", r.decisionRequirementsDefinitionKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest struct {
	ctx context.Context
	ApiService HistoricDecisionInstanceAPI
	setRemovalTimeToHistoricDecisionInstancesDto *SetRemovalTimeToHistoricDecisionInstancesDto
}

func (r ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest) SetRemovalTimeToHistoricDecisionInstancesDto(setRemovalTimeToHistoricDecisionInstancesDto SetRemovalTimeToHistoricDecisionInstancesDto) ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest {
	r.setRemovalTimeToHistoricDecisionInstancesDto = &setRemovalTimeToHistoricDecisionInstancesDto
	return r
}

func (r ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest) Execute() (*BatchDto, *http.Response, error) {
	return r.ApiService.SetRemovalTimeAsyncHistoricDecisionInstanceExecute(r)
}

/*
SetRemovalTimeAsyncHistoricDecisionInstance Set Removal Time Async (POST)

Sets the removal time to multiple historic decision instances asynchronously
(batch).

At least `historicDecisionInstanceIds` or
`historicDecisionInstanceQuery` has to be provided. If both are
provided, all instances matching query criterion and instances from the list
will be updated with a removal time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest
*/
func (a *HistoricDecisionInstanceAPIService) SetRemovalTimeAsyncHistoricDecisionInstance(ctx context.Context) ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest {
	return ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchDto
func (a *HistoricDecisionInstanceAPIService) SetRemovalTimeAsyncHistoricDecisionInstanceExecute(r ApiSetRemovalTimeAsyncHistoricDecisionInstanceRequest) (*BatchDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionInstanceAPIService.SetRemovalTimeAsyncHistoricDecisionInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-instance/set-removal-time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setRemovalTimeToHistoricDecisionInstancesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
