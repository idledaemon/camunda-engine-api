/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricActivityInstanceQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricActivityInstanceQueryDto{}

// HistoricActivityInstanceQueryDto A historic activity instance query which defines a group of historic activity instances
type HistoricActivityInstanceQueryDto struct {
	// Filter by activity instance id.
	ActivityInstanceId NullableString `json:"activityInstanceId,omitempty"`
	// Filter by process instance id.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// Filter by process definition id.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Filter by the id of the execution that executed the activity instance.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// Filter by the activity id (according to BPMN 2.0 XML).
	ActivityId NullableString `json:"activityId,omitempty"`
	// Filter by the activity name (according to BPMN 2.0 XML).
	ActivityName NullableString `json:"activityName,omitempty"`
	// Filter by activity type.
	ActivityType NullableString `json:"activityType,omitempty"`
	// Only include activity instances that are user tasks and assigned to a given user.
	TaskAssignee NullableString `json:"taskAssignee,omitempty"`
	// Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
	Finished NullableBool `json:"finished,omitempty"`
	// Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
	Unfinished NullableBool `json:"unfinished,omitempty"`
	// Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
	Canceled NullableBool `json:"canceled,omitempty"`
	// Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
	CompleteScope NullableBool `json:"completeScope,omitempty"`
	// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartedBefore NullableTime `json:"startedBefore,omitempty"`
	// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	StartedAfter NullableTime `json:"startedAfter,omitempty"`
	// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	FinishedBefore NullableTime `json:"finishedBefore,omitempty"`
	// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	FinishedAfter NullableTime `json:"finishedAfter,omitempty"`
	// Must be a JSON array of Strings. An activity instance must have one of the given tenant ids.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Apply sorting of the result
	Sorting []HistoricActivityInstanceQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewHistoricActivityInstanceQueryDto instantiates a new HistoricActivityInstanceQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricActivityInstanceQueryDto() *HistoricActivityInstanceQueryDto {
	this := HistoricActivityInstanceQueryDto{}
	return &this
}

// NewHistoricActivityInstanceQueryDtoWithDefaults instantiates a new HistoricActivityInstanceQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricActivityInstanceQueryDtoWithDefaults() *HistoricActivityInstanceQueryDto {
	this := HistoricActivityInstanceQueryDto{}
	return &this
}

// GetActivityInstanceId returns the ActivityInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetActivityInstanceId() string {
	if o == nil || IsNil(o.ActivityInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityInstanceId.Get()
}

// GetActivityInstanceIdOk returns a tuple with the ActivityInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetActivityInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityInstanceId.Get(), o.ActivityInstanceId.IsSet()
}

// HasActivityInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasActivityInstanceId() bool {
	if o != nil && o.ActivityInstanceId.IsSet() {
		return true
	}

	return false
}

// SetActivityInstanceId gets a reference to the given NullableString and assigns it to the ActivityInstanceId field.
func (o *HistoricActivityInstanceQueryDto) SetActivityInstanceId(v string) {
	o.ActivityInstanceId.Set(&v)
}
// SetActivityInstanceIdNil sets the value for ActivityInstanceId to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetActivityInstanceIdNil() {
	o.ActivityInstanceId.Set(nil)
}

// UnsetActivityInstanceId ensures that no value is present for ActivityInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetActivityInstanceId() {
	o.ActivityInstanceId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricActivityInstanceQueryDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricActivityInstanceQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricActivityInstanceQueryDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *HistoricActivityInstanceQueryDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetActivityName returns the ActivityName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetActivityName() string {
	if o == nil || IsNil(o.ActivityName.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityName.Get()
}

// GetActivityNameOk returns a tuple with the ActivityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetActivityNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityName.Get(), o.ActivityName.IsSet()
}

// HasActivityName returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasActivityName() bool {
	if o != nil && o.ActivityName.IsSet() {
		return true
	}

	return false
}

// SetActivityName gets a reference to the given NullableString and assigns it to the ActivityName field.
func (o *HistoricActivityInstanceQueryDto) SetActivityName(v string) {
	o.ActivityName.Set(&v)
}
// SetActivityNameNil sets the value for ActivityName to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetActivityNameNil() {
	o.ActivityName.Set(nil)
}

// UnsetActivityName ensures that no value is present for ActivityName, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetActivityName() {
	o.ActivityName.Unset()
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityType.Get()
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetActivityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityType.Get(), o.ActivityType.IsSet()
}

// HasActivityType returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasActivityType() bool {
	if o != nil && o.ActivityType.IsSet() {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given NullableString and assigns it to the ActivityType field.
func (o *HistoricActivityInstanceQueryDto) SetActivityType(v string) {
	o.ActivityType.Set(&v)
}
// SetActivityTypeNil sets the value for ActivityType to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetActivityTypeNil() {
	o.ActivityType.Set(nil)
}

// UnsetActivityType ensures that no value is present for ActivityType, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetActivityType() {
	o.ActivityType.Unset()
}

// GetTaskAssignee returns the TaskAssignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetTaskAssignee() string {
	if o == nil || IsNil(o.TaskAssignee.Get()) {
		var ret string
		return ret
	}
	return *o.TaskAssignee.Get()
}

// GetTaskAssigneeOk returns a tuple with the TaskAssignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetTaskAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskAssignee.Get(), o.TaskAssignee.IsSet()
}

// HasTaskAssignee returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasTaskAssignee() bool {
	if o != nil && o.TaskAssignee.IsSet() {
		return true
	}

	return false
}

// SetTaskAssignee gets a reference to the given NullableString and assigns it to the TaskAssignee field.
func (o *HistoricActivityInstanceQueryDto) SetTaskAssignee(v string) {
	o.TaskAssignee.Set(&v)
}
// SetTaskAssigneeNil sets the value for TaskAssignee to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetTaskAssigneeNil() {
	o.TaskAssignee.Set(nil)
}

// UnsetTaskAssignee ensures that no value is present for TaskAssignee, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetTaskAssignee() {
	o.TaskAssignee.Unset()
}

// GetFinished returns the Finished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetFinished() bool {
	if o == nil || IsNil(o.Finished.Get()) {
		var ret bool
		return ret
	}
	return *o.Finished.Get()
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finished.Get(), o.Finished.IsSet()
}

// HasFinished returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasFinished() bool {
	if o != nil && o.Finished.IsSet() {
		return true
	}

	return false
}

// SetFinished gets a reference to the given NullableBool and assigns it to the Finished field.
func (o *HistoricActivityInstanceQueryDto) SetFinished(v bool) {
	o.Finished.Set(&v)
}
// SetFinishedNil sets the value for Finished to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetFinishedNil() {
	o.Finished.Set(nil)
}

// UnsetFinished ensures that no value is present for Finished, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetFinished() {
	o.Finished.Unset()
}

// GetUnfinished returns the Unfinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetUnfinished() bool {
	if o == nil || IsNil(o.Unfinished.Get()) {
		var ret bool
		return ret
	}
	return *o.Unfinished.Get()
}

// GetUnfinishedOk returns a tuple with the Unfinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetUnfinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unfinished.Get(), o.Unfinished.IsSet()
}

// HasUnfinished returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasUnfinished() bool {
	if o != nil && o.Unfinished.IsSet() {
		return true
	}

	return false
}

// SetUnfinished gets a reference to the given NullableBool and assigns it to the Unfinished field.
func (o *HistoricActivityInstanceQueryDto) SetUnfinished(v bool) {
	o.Unfinished.Set(&v)
}
// SetUnfinishedNil sets the value for Unfinished to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetUnfinishedNil() {
	o.Unfinished.Set(nil)
}

// UnsetUnfinished ensures that no value is present for Unfinished, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetUnfinished() {
	o.Unfinished.Unset()
}

// GetCanceled returns the Canceled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetCanceled() bool {
	if o == nil || IsNil(o.Canceled.Get()) {
		var ret bool
		return ret
	}
	return *o.Canceled.Get()
}

// GetCanceledOk returns a tuple with the Canceled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetCanceledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Canceled.Get(), o.Canceled.IsSet()
}

// HasCanceled returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasCanceled() bool {
	if o != nil && o.Canceled.IsSet() {
		return true
	}

	return false
}

// SetCanceled gets a reference to the given NullableBool and assigns it to the Canceled field.
func (o *HistoricActivityInstanceQueryDto) SetCanceled(v bool) {
	o.Canceled.Set(&v)
}
// SetCanceledNil sets the value for Canceled to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetCanceledNil() {
	o.Canceled.Set(nil)
}

// UnsetCanceled ensures that no value is present for Canceled, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetCanceled() {
	o.Canceled.Unset()
}

// GetCompleteScope returns the CompleteScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetCompleteScope() bool {
	if o == nil || IsNil(o.CompleteScope.Get()) {
		var ret bool
		return ret
	}
	return *o.CompleteScope.Get()
}

// GetCompleteScopeOk returns a tuple with the CompleteScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetCompleteScopeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompleteScope.Get(), o.CompleteScope.IsSet()
}

// HasCompleteScope returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasCompleteScope() bool {
	if o != nil && o.CompleteScope.IsSet() {
		return true
	}

	return false
}

// SetCompleteScope gets a reference to the given NullableBool and assigns it to the CompleteScope field.
func (o *HistoricActivityInstanceQueryDto) SetCompleteScope(v bool) {
	o.CompleteScope.Set(&v)
}
// SetCompleteScopeNil sets the value for CompleteScope to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetCompleteScopeNil() {
	o.CompleteScope.Set(nil)
}

// UnsetCompleteScope ensures that no value is present for CompleteScope, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetCompleteScope() {
	o.CompleteScope.Unset()
}

// GetStartedBefore returns the StartedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetStartedBefore() time.Time {
	if o == nil || IsNil(o.StartedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedBefore.Get()
}

// GetStartedBeforeOk returns a tuple with the StartedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetStartedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedBefore.Get(), o.StartedBefore.IsSet()
}

// HasStartedBefore returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasStartedBefore() bool {
	if o != nil && o.StartedBefore.IsSet() {
		return true
	}

	return false
}

// SetStartedBefore gets a reference to the given NullableTime and assigns it to the StartedBefore field.
func (o *HistoricActivityInstanceQueryDto) SetStartedBefore(v time.Time) {
	o.StartedBefore.Set(&v)
}
// SetStartedBeforeNil sets the value for StartedBefore to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetStartedBeforeNil() {
	o.StartedBefore.Set(nil)
}

// UnsetStartedBefore ensures that no value is present for StartedBefore, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetStartedBefore() {
	o.StartedBefore.Unset()
}

// GetStartedAfter returns the StartedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetStartedAfter() time.Time {
	if o == nil || IsNil(o.StartedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAfter.Get()
}

// GetStartedAfterOk returns a tuple with the StartedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetStartedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAfter.Get(), o.StartedAfter.IsSet()
}

// HasStartedAfter returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasStartedAfter() bool {
	if o != nil && o.StartedAfter.IsSet() {
		return true
	}

	return false
}

// SetStartedAfter gets a reference to the given NullableTime and assigns it to the StartedAfter field.
func (o *HistoricActivityInstanceQueryDto) SetStartedAfter(v time.Time) {
	o.StartedAfter.Set(&v)
}
// SetStartedAfterNil sets the value for StartedAfter to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetStartedAfterNil() {
	o.StartedAfter.Set(nil)
}

// UnsetStartedAfter ensures that no value is present for StartedAfter, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetStartedAfter() {
	o.StartedAfter.Unset()
}

// GetFinishedBefore returns the FinishedBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetFinishedBefore() time.Time {
	if o == nil || IsNil(o.FinishedBefore.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishedBefore.Get()
}

// GetFinishedBeforeOk returns a tuple with the FinishedBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetFinishedBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedBefore.Get(), o.FinishedBefore.IsSet()
}

// HasFinishedBefore returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasFinishedBefore() bool {
	if o != nil && o.FinishedBefore.IsSet() {
		return true
	}

	return false
}

// SetFinishedBefore gets a reference to the given NullableTime and assigns it to the FinishedBefore field.
func (o *HistoricActivityInstanceQueryDto) SetFinishedBefore(v time.Time) {
	o.FinishedBefore.Set(&v)
}
// SetFinishedBeforeNil sets the value for FinishedBefore to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetFinishedBeforeNil() {
	o.FinishedBefore.Set(nil)
}

// UnsetFinishedBefore ensures that no value is present for FinishedBefore, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetFinishedBefore() {
	o.FinishedBefore.Unset()
}

// GetFinishedAfter returns the FinishedAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetFinishedAfter() time.Time {
	if o == nil || IsNil(o.FinishedAfter.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAfter.Get()
}

// GetFinishedAfterOk returns a tuple with the FinishedAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetFinishedAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishedAfter.Get(), o.FinishedAfter.IsSet()
}

// HasFinishedAfter returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasFinishedAfter() bool {
	if o != nil && o.FinishedAfter.IsSet() {
		return true
	}

	return false
}

// SetFinishedAfter gets a reference to the given NullableTime and assigns it to the FinishedAfter field.
func (o *HistoricActivityInstanceQueryDto) SetFinishedAfter(v time.Time) {
	o.FinishedAfter.Set(&v)
}
// SetFinishedAfterNil sets the value for FinishedAfter to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetFinishedAfterNil() {
	o.FinishedAfter.Set(nil)
}

// UnsetFinishedAfter ensures that no value is present for FinishedAfter, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetFinishedAfter() {
	o.FinishedAfter.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *HistoricActivityInstanceQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *HistoricActivityInstanceQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *HistoricActivityInstanceQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *HistoricActivityInstanceQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricActivityInstanceQueryDto) GetSorting() []HistoricActivityInstanceQueryDtoSortingInner {
	if o == nil {
		var ret []HistoricActivityInstanceQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricActivityInstanceQueryDto) GetSortingOk() ([]HistoricActivityInstanceQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *HistoricActivityInstanceQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []HistoricActivityInstanceQueryDtoSortingInner and assigns it to the Sorting field.
func (o *HistoricActivityInstanceQueryDto) SetSorting(v []HistoricActivityInstanceQueryDtoSortingInner) {
	o.Sorting = v
}

func (o HistoricActivityInstanceQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricActivityInstanceQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivityInstanceId.IsSet() {
		toSerialize["activityInstanceId"] = o.ActivityInstanceId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.ActivityName.IsSet() {
		toSerialize["activityName"] = o.ActivityName.Get()
	}
	if o.ActivityType.IsSet() {
		toSerialize["activityType"] = o.ActivityType.Get()
	}
	if o.TaskAssignee.IsSet() {
		toSerialize["taskAssignee"] = o.TaskAssignee.Get()
	}
	if o.Finished.IsSet() {
		toSerialize["finished"] = o.Finished.Get()
	}
	if o.Unfinished.IsSet() {
		toSerialize["unfinished"] = o.Unfinished.Get()
	}
	if o.Canceled.IsSet() {
		toSerialize["canceled"] = o.Canceled.Get()
	}
	if o.CompleteScope.IsSet() {
		toSerialize["completeScope"] = o.CompleteScope.Get()
	}
	if o.StartedBefore.IsSet() {
		toSerialize["startedBefore"] = o.StartedBefore.Get()
	}
	if o.StartedAfter.IsSet() {
		toSerialize["startedAfter"] = o.StartedAfter.Get()
	}
	if o.FinishedBefore.IsSet() {
		toSerialize["finishedBefore"] = o.FinishedBefore.Get()
	}
	if o.FinishedAfter.IsSet() {
		toSerialize["finishedAfter"] = o.FinishedAfter.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableHistoricActivityInstanceQueryDto struct {
	value *HistoricActivityInstanceQueryDto
	isSet bool
}

func (v NullableHistoricActivityInstanceQueryDto) Get() *HistoricActivityInstanceQueryDto {
	return v.value
}

func (v *NullableHistoricActivityInstanceQueryDto) Set(val *HistoricActivityInstanceQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricActivityInstanceQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricActivityInstanceQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricActivityInstanceQueryDto(val *HistoricActivityInstanceQueryDto) *NullableHistoricActivityInstanceQueryDto {
	return &NullableHistoricActivityInstanceQueryDto{value: val, isSet: true}
}

func (v NullableHistoricActivityInstanceQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricActivityInstanceQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


