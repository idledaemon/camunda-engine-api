/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the TelemetryCountDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelemetryCountDto{}

// TelemetryCountDto struct for TelemetryCountDto
type TelemetryCountDto struct {
	// An integer value representing the count for this metric.
	Count NullableInt64 `json:"count,omitempty"`
}

// NewTelemetryCountDto instantiates a new TelemetryCountDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryCountDto() *TelemetryCountDto {
	this := TelemetryCountDto{}
	return &this
}

// NewTelemetryCountDtoWithDefaults instantiates a new TelemetryCountDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryCountDtoWithDefaults() *TelemetryCountDto {
	this := TelemetryCountDto{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TelemetryCountDto) GetCount() int64 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TelemetryCountDto) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *TelemetryCountDto) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *TelemetryCountDto) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *TelemetryCountDto) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *TelemetryCountDto) UnsetCount() {
	o.Count.Unset()
}

func (o TelemetryCountDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelemetryCountDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	return toSerialize, nil
}

type NullableTelemetryCountDto struct {
	value *TelemetryCountDto
	isSet bool
}

func (v NullableTelemetryCountDto) Get() *TelemetryCountDto {
	return v.value
}

func (v *NullableTelemetryCountDto) Set(val *TelemetryCountDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryCountDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryCountDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryCountDto(val *TelemetryCountDto) *NullableTelemetryCountDto {
	return &NullableTelemetryCountDto{value: val, isSet: true}
}

func (v NullableTelemetryCountDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryCountDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


