/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the HistoricIncidentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricIncidentDto{}

// HistoricIncidentDto struct for HistoricIncidentDto
type HistoricIncidentDto struct {
	// The id of the incident.
	Id NullableString `json:"id,omitempty"`
	// The key of the process definition this incident is associated with.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// The id of the process definition this incident is associated with.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The key of the process definition this incident is associated with.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the execution this incident is associated with.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// The process instance id of the root process instance that initiated the process containing this incident.
	RootProcessInstanceId NullableString `json:"rootProcessInstanceId,omitempty"`
	// The time this incident happened.  [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	CreateTime NullableTime `json:"createTime,omitempty"`
	// The time this incident has been deleted or resolved.  [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	EndTime NullableTime `json:"endTime,omitempty"`
	// The time after which the incident should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	RemovalTime NullableTime `json:"removalTime,omitempty"`
	// The type of incident, for example: `failedJobs` will be returned in case of an incident which identified a failed job during the execution of a process instance. See the [User Guide](/manual/develop/user- guide/process-engine/incidents/#incident-types) for a list of incident types.
	IncidentType NullableString `json:"incidentType,omitempty"`
	// The id of the activity this incident is associated with.
	ActivityId NullableString `json:"activityId,omitempty"`
	// The id of the activity on which the last exception occurred.
	FailedActivityId NullableString `json:"failedActivityId,omitempty"`
	// The id of the associated cause incident which has been triggered.
	CauseIncidentId NullableString `json:"causeIncidentId,omitempty"`
	// The id of the associated root cause incident which has been triggered.
	RootCauseIncidentId NullableString `json:"rootCauseIncidentId,omitempty"`
	// The payload of this incident.
	Configuration NullableString `json:"configuration,omitempty"`
	// The payload of this incident at the time when it occurred.
	HistoryConfiguration NullableString `json:"historyConfiguration,omitempty"`
	// The message of this incident.
	IncidentMessage NullableString `json:"incidentMessage,omitempty"`
	// The id of the tenant this incident is associated with.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The job definition id the incident is associated with.
	JobDefinitionId NullableString `json:"jobDefinitionId,omitempty"`
	// If true, this incident is open.
	Open NullableBool `json:"open,omitempty"`
	// If true, this incident has been deleted.
	Deleted NullableBool `json:"deleted,omitempty"`
	// If true, this incident has been resolved.
	Resolved NullableBool `json:"resolved,omitempty"`
	// The annotation set to the incident.
	Annotation NullableString `json:"annotation,omitempty"`
}

// NewHistoricIncidentDto instantiates a new HistoricIncidentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricIncidentDto() *HistoricIncidentDto {
	this := HistoricIncidentDto{}
	return &this
}

// NewHistoricIncidentDtoWithDefaults instantiates a new HistoricIncidentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricIncidentDtoWithDefaults() *HistoricIncidentDto {
	this := HistoricIncidentDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *HistoricIncidentDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HistoricIncidentDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HistoricIncidentDto) UnsetId() {
	o.Id.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *HistoricIncidentDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *HistoricIncidentDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *HistoricIncidentDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *HistoricIncidentDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *HistoricIncidentDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *HistoricIncidentDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *HistoricIncidentDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *HistoricIncidentDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *HistoricIncidentDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetRootProcessInstanceId returns the RootProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetRootProcessInstanceId() string {
	if o == nil || IsNil(o.RootProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.RootProcessInstanceId.Get()
}

// GetRootProcessInstanceIdOk returns a tuple with the RootProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetRootProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstanceId.Get(), o.RootProcessInstanceId.IsSet()
}

// HasRootProcessInstanceId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasRootProcessInstanceId() bool {
	if o != nil && o.RootProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstanceId gets a reference to the given NullableString and assigns it to the RootProcessInstanceId field.
func (o *HistoricIncidentDto) SetRootProcessInstanceId(v string) {
	o.RootProcessInstanceId.Set(&v)
}
// SetRootProcessInstanceIdNil sets the value for RootProcessInstanceId to be an explicit nil
func (o *HistoricIncidentDto) SetRootProcessInstanceIdNil() {
	o.RootProcessInstanceId.Set(nil)
}

// UnsetRootProcessInstanceId ensures that no value is present for RootProcessInstanceId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetRootProcessInstanceId() {
	o.RootProcessInstanceId.Unset()
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime.Get()
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateTime.Get(), o.CreateTime.IsSet()
}

// HasCreateTime returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasCreateTime() bool {
	if o != nil && o.CreateTime.IsSet() {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given NullableTime and assigns it to the CreateTime field.
func (o *HistoricIncidentDto) SetCreateTime(v time.Time) {
	o.CreateTime.Set(&v)
}
// SetCreateTimeNil sets the value for CreateTime to be an explicit nil
func (o *HistoricIncidentDto) SetCreateTimeNil() {
	o.CreateTime.Set(nil)
}

// UnsetCreateTime ensures that no value is present for CreateTime, not even an explicit nil
func (o *HistoricIncidentDto) UnsetCreateTime() {
	o.CreateTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *HistoricIncidentDto) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *HistoricIncidentDto) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *HistoricIncidentDto) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetRemovalTime returns the RemovalTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetRemovalTime() time.Time {
	if o == nil || IsNil(o.RemovalTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RemovalTime.Get()
}

// GetRemovalTimeOk returns a tuple with the RemovalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetRemovalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTime.Get(), o.RemovalTime.IsSet()
}

// HasRemovalTime returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasRemovalTime() bool {
	if o != nil && o.RemovalTime.IsSet() {
		return true
	}

	return false
}

// SetRemovalTime gets a reference to the given NullableTime and assigns it to the RemovalTime field.
func (o *HistoricIncidentDto) SetRemovalTime(v time.Time) {
	o.RemovalTime.Set(&v)
}
// SetRemovalTimeNil sets the value for RemovalTime to be an explicit nil
func (o *HistoricIncidentDto) SetRemovalTimeNil() {
	o.RemovalTime.Set(nil)
}

// UnsetRemovalTime ensures that no value is present for RemovalTime, not even an explicit nil
func (o *HistoricIncidentDto) UnsetRemovalTime() {
	o.RemovalTime.Unset()
}

// GetIncidentType returns the IncidentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetIncidentType() string {
	if o == nil || IsNil(o.IncidentType.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentType.Get()
}

// GetIncidentTypeOk returns a tuple with the IncidentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetIncidentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentType.Get(), o.IncidentType.IsSet()
}

// HasIncidentType returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasIncidentType() bool {
	if o != nil && o.IncidentType.IsSet() {
		return true
	}

	return false
}

// SetIncidentType gets a reference to the given NullableString and assigns it to the IncidentType field.
func (o *HistoricIncidentDto) SetIncidentType(v string) {
	o.IncidentType.Set(&v)
}
// SetIncidentTypeNil sets the value for IncidentType to be an explicit nil
func (o *HistoricIncidentDto) SetIncidentTypeNil() {
	o.IncidentType.Set(nil)
}

// UnsetIncidentType ensures that no value is present for IncidentType, not even an explicit nil
func (o *HistoricIncidentDto) UnsetIncidentType() {
	o.IncidentType.Unset()
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetActivityId() string {
	if o == nil || IsNil(o.ActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.ActivityId.Get()
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityId.Get(), o.ActivityId.IsSet()
}

// HasActivityId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasActivityId() bool {
	if o != nil && o.ActivityId.IsSet() {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given NullableString and assigns it to the ActivityId field.
func (o *HistoricIncidentDto) SetActivityId(v string) {
	o.ActivityId.Set(&v)
}
// SetActivityIdNil sets the value for ActivityId to be an explicit nil
func (o *HistoricIncidentDto) SetActivityIdNil() {
	o.ActivityId.Set(nil)
}

// UnsetActivityId ensures that no value is present for ActivityId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetActivityId() {
	o.ActivityId.Unset()
}

// GetFailedActivityId returns the FailedActivityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetFailedActivityId() string {
	if o == nil || IsNil(o.FailedActivityId.Get()) {
		var ret string
		return ret
	}
	return *o.FailedActivityId.Get()
}

// GetFailedActivityIdOk returns a tuple with the FailedActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetFailedActivityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedActivityId.Get(), o.FailedActivityId.IsSet()
}

// HasFailedActivityId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasFailedActivityId() bool {
	if o != nil && o.FailedActivityId.IsSet() {
		return true
	}

	return false
}

// SetFailedActivityId gets a reference to the given NullableString and assigns it to the FailedActivityId field.
func (o *HistoricIncidentDto) SetFailedActivityId(v string) {
	o.FailedActivityId.Set(&v)
}
// SetFailedActivityIdNil sets the value for FailedActivityId to be an explicit nil
func (o *HistoricIncidentDto) SetFailedActivityIdNil() {
	o.FailedActivityId.Set(nil)
}

// UnsetFailedActivityId ensures that no value is present for FailedActivityId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetFailedActivityId() {
	o.FailedActivityId.Unset()
}

// GetCauseIncidentId returns the CauseIncidentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetCauseIncidentId() string {
	if o == nil || IsNil(o.CauseIncidentId.Get()) {
		var ret string
		return ret
	}
	return *o.CauseIncidentId.Get()
}

// GetCauseIncidentIdOk returns a tuple with the CauseIncidentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetCauseIncidentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CauseIncidentId.Get(), o.CauseIncidentId.IsSet()
}

// HasCauseIncidentId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasCauseIncidentId() bool {
	if o != nil && o.CauseIncidentId.IsSet() {
		return true
	}

	return false
}

// SetCauseIncidentId gets a reference to the given NullableString and assigns it to the CauseIncidentId field.
func (o *HistoricIncidentDto) SetCauseIncidentId(v string) {
	o.CauseIncidentId.Set(&v)
}
// SetCauseIncidentIdNil sets the value for CauseIncidentId to be an explicit nil
func (o *HistoricIncidentDto) SetCauseIncidentIdNil() {
	o.CauseIncidentId.Set(nil)
}

// UnsetCauseIncidentId ensures that no value is present for CauseIncidentId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetCauseIncidentId() {
	o.CauseIncidentId.Unset()
}

// GetRootCauseIncidentId returns the RootCauseIncidentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetRootCauseIncidentId() string {
	if o == nil || IsNil(o.RootCauseIncidentId.Get()) {
		var ret string
		return ret
	}
	return *o.RootCauseIncidentId.Get()
}

// GetRootCauseIncidentIdOk returns a tuple with the RootCauseIncidentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetRootCauseIncidentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootCauseIncidentId.Get(), o.RootCauseIncidentId.IsSet()
}

// HasRootCauseIncidentId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasRootCauseIncidentId() bool {
	if o != nil && o.RootCauseIncidentId.IsSet() {
		return true
	}

	return false
}

// SetRootCauseIncidentId gets a reference to the given NullableString and assigns it to the RootCauseIncidentId field.
func (o *HistoricIncidentDto) SetRootCauseIncidentId(v string) {
	o.RootCauseIncidentId.Set(&v)
}
// SetRootCauseIncidentIdNil sets the value for RootCauseIncidentId to be an explicit nil
func (o *HistoricIncidentDto) SetRootCauseIncidentIdNil() {
	o.RootCauseIncidentId.Set(nil)
}

// UnsetRootCauseIncidentId ensures that no value is present for RootCauseIncidentId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetRootCauseIncidentId() {
	o.RootCauseIncidentId.Unset()
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetConfiguration() string {
	if o == nil || IsNil(o.Configuration.Get()) {
		var ret string
		return ret
	}
	return *o.Configuration.Get()
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Configuration.Get(), o.Configuration.IsSet()
}

// HasConfiguration returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasConfiguration() bool {
	if o != nil && o.Configuration.IsSet() {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given NullableString and assigns it to the Configuration field.
func (o *HistoricIncidentDto) SetConfiguration(v string) {
	o.Configuration.Set(&v)
}
// SetConfigurationNil sets the value for Configuration to be an explicit nil
func (o *HistoricIncidentDto) SetConfigurationNil() {
	o.Configuration.Set(nil)
}

// UnsetConfiguration ensures that no value is present for Configuration, not even an explicit nil
func (o *HistoricIncidentDto) UnsetConfiguration() {
	o.Configuration.Unset()
}

// GetHistoryConfiguration returns the HistoryConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetHistoryConfiguration() string {
	if o == nil || IsNil(o.HistoryConfiguration.Get()) {
		var ret string
		return ret
	}
	return *o.HistoryConfiguration.Get()
}

// GetHistoryConfigurationOk returns a tuple with the HistoryConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetHistoryConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryConfiguration.Get(), o.HistoryConfiguration.IsSet()
}

// HasHistoryConfiguration returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasHistoryConfiguration() bool {
	if o != nil && o.HistoryConfiguration.IsSet() {
		return true
	}

	return false
}

// SetHistoryConfiguration gets a reference to the given NullableString and assigns it to the HistoryConfiguration field.
func (o *HistoricIncidentDto) SetHistoryConfiguration(v string) {
	o.HistoryConfiguration.Set(&v)
}
// SetHistoryConfigurationNil sets the value for HistoryConfiguration to be an explicit nil
func (o *HistoricIncidentDto) SetHistoryConfigurationNil() {
	o.HistoryConfiguration.Set(nil)
}

// UnsetHistoryConfiguration ensures that no value is present for HistoryConfiguration, not even an explicit nil
func (o *HistoricIncidentDto) UnsetHistoryConfiguration() {
	o.HistoryConfiguration.Unset()
}

// GetIncidentMessage returns the IncidentMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetIncidentMessage() string {
	if o == nil || IsNil(o.IncidentMessage.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessage.Get()
}

// GetIncidentMessageOk returns a tuple with the IncidentMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetIncidentMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessage.Get(), o.IncidentMessage.IsSet()
}

// HasIncidentMessage returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasIncidentMessage() bool {
	if o != nil && o.IncidentMessage.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessage gets a reference to the given NullableString and assigns it to the IncidentMessage field.
func (o *HistoricIncidentDto) SetIncidentMessage(v string) {
	o.IncidentMessage.Set(&v)
}
// SetIncidentMessageNil sets the value for IncidentMessage to be an explicit nil
func (o *HistoricIncidentDto) SetIncidentMessageNil() {
	o.IncidentMessage.Set(nil)
}

// UnsetIncidentMessage ensures that no value is present for IncidentMessage, not even an explicit nil
func (o *HistoricIncidentDto) UnsetIncidentMessage() {
	o.IncidentMessage.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *HistoricIncidentDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *HistoricIncidentDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetJobDefinitionId returns the JobDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetJobDefinitionId() string {
	if o == nil || IsNil(o.JobDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.JobDefinitionId.Get()
}

// GetJobDefinitionIdOk returns a tuple with the JobDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetJobDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobDefinitionId.Get(), o.JobDefinitionId.IsSet()
}

// HasJobDefinitionId returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasJobDefinitionId() bool {
	if o != nil && o.JobDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetJobDefinitionId gets a reference to the given NullableString and assigns it to the JobDefinitionId field.
func (o *HistoricIncidentDto) SetJobDefinitionId(v string) {
	o.JobDefinitionId.Set(&v)
}
// SetJobDefinitionIdNil sets the value for JobDefinitionId to be an explicit nil
func (o *HistoricIncidentDto) SetJobDefinitionIdNil() {
	o.JobDefinitionId.Set(nil)
}

// UnsetJobDefinitionId ensures that no value is present for JobDefinitionId, not even an explicit nil
func (o *HistoricIncidentDto) UnsetJobDefinitionId() {
	o.JobDefinitionId.Unset()
}

// GetOpen returns the Open field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetOpen() bool {
	if o == nil || IsNil(o.Open.Get()) {
		var ret bool
		return ret
	}
	return *o.Open.Get()
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetOpenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Open.Get(), o.Open.IsSet()
}

// HasOpen returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasOpen() bool {
	if o != nil && o.Open.IsSet() {
		return true
	}

	return false
}

// SetOpen gets a reference to the given NullableBool and assigns it to the Open field.
func (o *HistoricIncidentDto) SetOpen(v bool) {
	o.Open.Set(&v)
}
// SetOpenNil sets the value for Open to be an explicit nil
func (o *HistoricIncidentDto) SetOpenNil() {
	o.Open.Set(nil)
}

// UnsetOpen ensures that no value is present for Open, not even an explicit nil
func (o *HistoricIncidentDto) UnsetOpen() {
	o.Open.Unset()
}

// GetDeleted returns the Deleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted.Get()) {
		var ret bool
		return ret
	}
	return *o.Deleted.Get()
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deleted.Get(), o.Deleted.IsSet()
}

// HasDeleted returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasDeleted() bool {
	if o != nil && o.Deleted.IsSet() {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given NullableBool and assigns it to the Deleted field.
func (o *HistoricIncidentDto) SetDeleted(v bool) {
	o.Deleted.Set(&v)
}
// SetDeletedNil sets the value for Deleted to be an explicit nil
func (o *HistoricIncidentDto) SetDeletedNil() {
	o.Deleted.Set(nil)
}

// UnsetDeleted ensures that no value is present for Deleted, not even an explicit nil
func (o *HistoricIncidentDto) UnsetDeleted() {
	o.Deleted.Unset()
}

// GetResolved returns the Resolved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetResolved() bool {
	if o == nil || IsNil(o.Resolved.Get()) {
		var ret bool
		return ret
	}
	return *o.Resolved.Get()
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetResolvedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resolved.Get(), o.Resolved.IsSet()
}

// HasResolved returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasResolved() bool {
	if o != nil && o.Resolved.IsSet() {
		return true
	}

	return false
}

// SetResolved gets a reference to the given NullableBool and assigns it to the Resolved field.
func (o *HistoricIncidentDto) SetResolved(v bool) {
	o.Resolved.Set(&v)
}
// SetResolvedNil sets the value for Resolved to be an explicit nil
func (o *HistoricIncidentDto) SetResolvedNil() {
	o.Resolved.Set(nil)
}

// UnsetResolved ensures that no value is present for Resolved, not even an explicit nil
func (o *HistoricIncidentDto) UnsetResolved() {
	o.Resolved.Unset()
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoricIncidentDto) GetAnnotation() string {
	if o == nil || IsNil(o.Annotation.Get()) {
		var ret string
		return ret
	}
	return *o.Annotation.Get()
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoricIncidentDto) GetAnnotationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Annotation.Get(), o.Annotation.IsSet()
}

// HasAnnotation returns a boolean if a field has been set.
func (o *HistoricIncidentDto) HasAnnotation() bool {
	if o != nil && o.Annotation.IsSet() {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given NullableString and assigns it to the Annotation field.
func (o *HistoricIncidentDto) SetAnnotation(v string) {
	o.Annotation.Set(&v)
}
// SetAnnotationNil sets the value for Annotation to be an explicit nil
func (o *HistoricIncidentDto) SetAnnotationNil() {
	o.Annotation.Set(nil)
}

// UnsetAnnotation ensures that no value is present for Annotation, not even an explicit nil
func (o *HistoricIncidentDto) UnsetAnnotation() {
	o.Annotation.Unset()
}

func (o HistoricIncidentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricIncidentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.RootProcessInstanceId.IsSet() {
		toSerialize["rootProcessInstanceId"] = o.RootProcessInstanceId.Get()
	}
	if o.CreateTime.IsSet() {
		toSerialize["createTime"] = o.CreateTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.RemovalTime.IsSet() {
		toSerialize["removalTime"] = o.RemovalTime.Get()
	}
	if o.IncidentType.IsSet() {
		toSerialize["incidentType"] = o.IncidentType.Get()
	}
	if o.ActivityId.IsSet() {
		toSerialize["activityId"] = o.ActivityId.Get()
	}
	if o.FailedActivityId.IsSet() {
		toSerialize["failedActivityId"] = o.FailedActivityId.Get()
	}
	if o.CauseIncidentId.IsSet() {
		toSerialize["causeIncidentId"] = o.CauseIncidentId.Get()
	}
	if o.RootCauseIncidentId.IsSet() {
		toSerialize["rootCauseIncidentId"] = o.RootCauseIncidentId.Get()
	}
	if o.Configuration.IsSet() {
		toSerialize["configuration"] = o.Configuration.Get()
	}
	if o.HistoryConfiguration.IsSet() {
		toSerialize["historyConfiguration"] = o.HistoryConfiguration.Get()
	}
	if o.IncidentMessage.IsSet() {
		toSerialize["incidentMessage"] = o.IncidentMessage.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.JobDefinitionId.IsSet() {
		toSerialize["jobDefinitionId"] = o.JobDefinitionId.Get()
	}
	if o.Open.IsSet() {
		toSerialize["open"] = o.Open.Get()
	}
	if o.Deleted.IsSet() {
		toSerialize["deleted"] = o.Deleted.Get()
	}
	if o.Resolved.IsSet() {
		toSerialize["resolved"] = o.Resolved.Get()
	}
	if o.Annotation.IsSet() {
		toSerialize["annotation"] = o.Annotation.Get()
	}
	return toSerialize, nil
}

type NullableHistoricIncidentDto struct {
	value *HistoricIncidentDto
	isSet bool
}

func (v NullableHistoricIncidentDto) Get() *HistoricIncidentDto {
	return v.value
}

func (v *NullableHistoricIncidentDto) Set(val *HistoricIncidentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricIncidentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricIncidentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricIncidentDto(val *HistoricIncidentDto) *NullableHistoricIncidentDto {
	return &NullableHistoricIncidentDto{value: val, isSet: true}
}

func (v NullableHistoricIncidentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricIncidentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


