/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the UserCredentialsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCredentialsDto{}

// UserCredentialsDto struct for UserCredentialsDto
type UserCredentialsDto struct {
	// The users new password.
	Password NullableString `json:"password,omitempty"`
	// The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).
	AuthenticatedUserPassword NullableString `json:"authenticatedUserPassword,omitempty"`
}

// NewUserCredentialsDto instantiates a new UserCredentialsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCredentialsDto() *UserCredentialsDto {
	this := UserCredentialsDto{}
	return &this
}

// NewUserCredentialsDtoWithDefaults instantiates a new UserCredentialsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCredentialsDtoWithDefaults() *UserCredentialsDto {
	this := UserCredentialsDto{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserCredentialsDto) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserCredentialsDto) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *UserCredentialsDto) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *UserCredentialsDto) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *UserCredentialsDto) UnsetPassword() {
	o.Password.Unset()
}

// GetAuthenticatedUserPassword returns the AuthenticatedUserPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserCredentialsDto) GetAuthenticatedUserPassword() string {
	if o == nil || IsNil(o.AuthenticatedUserPassword.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticatedUserPassword.Get()
}

// GetAuthenticatedUserPasswordOk returns a tuple with the AuthenticatedUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserCredentialsDto) GetAuthenticatedUserPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticatedUserPassword.Get(), o.AuthenticatedUserPassword.IsSet()
}

// HasAuthenticatedUserPassword returns a boolean if a field has been set.
func (o *UserCredentialsDto) HasAuthenticatedUserPassword() bool {
	if o != nil && o.AuthenticatedUserPassword.IsSet() {
		return true
	}

	return false
}

// SetAuthenticatedUserPassword gets a reference to the given NullableString and assigns it to the AuthenticatedUserPassword field.
func (o *UserCredentialsDto) SetAuthenticatedUserPassword(v string) {
	o.AuthenticatedUserPassword.Set(&v)
}
// SetAuthenticatedUserPasswordNil sets the value for AuthenticatedUserPassword to be an explicit nil
func (o *UserCredentialsDto) SetAuthenticatedUserPasswordNil() {
	o.AuthenticatedUserPassword.Set(nil)
}

// UnsetAuthenticatedUserPassword ensures that no value is present for AuthenticatedUserPassword, not even an explicit nil
func (o *UserCredentialsDto) UnsetAuthenticatedUserPassword() {
	o.AuthenticatedUserPassword.Unset()
}

func (o UserCredentialsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCredentialsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.AuthenticatedUserPassword.IsSet() {
		toSerialize["authenticatedUserPassword"] = o.AuthenticatedUserPassword.Get()
	}
	return toSerialize, nil
}

type NullableUserCredentialsDto struct {
	value *UserCredentialsDto
	isSet bool
}

func (v NullableUserCredentialsDto) Get() *UserCredentialsDto {
	return v.value
}

func (v *NullableUserCredentialsDto) Set(val *UserCredentialsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCredentialsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCredentialsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCredentialsDto(val *UserCredentialsDto) *NullableUserCredentialsDto {
	return &NullableUserCredentialsDto{value: val, isSet: true}
}

func (v NullableUserCredentialsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCredentialsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


