/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the HistoryTimeToLiveDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryTimeToLiveDto{}

// HistoryTimeToLiveDto struct for HistoryTimeToLiveDto
type HistoryTimeToLiveDto struct {
	// New value for historyTimeToLive field of the definition. Can be `null` if `enforceHistoryTimeToLive` is configured to `false`. Cannot be negative.
	HistoryTimeToLive NullableInt32 `json:"historyTimeToLive,omitempty"`
}

// NewHistoryTimeToLiveDto instantiates a new HistoryTimeToLiveDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryTimeToLiveDto() *HistoryTimeToLiveDto {
	this := HistoryTimeToLiveDto{}
	return &this
}

// NewHistoryTimeToLiveDtoWithDefaults instantiates a new HistoryTimeToLiveDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryTimeToLiveDtoWithDefaults() *HistoryTimeToLiveDto {
	this := HistoryTimeToLiveDto{}
	return &this
}

// GetHistoryTimeToLive returns the HistoryTimeToLive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HistoryTimeToLiveDto) GetHistoryTimeToLive() int32 {
	if o == nil || IsNil(o.HistoryTimeToLive.Get()) {
		var ret int32
		return ret
	}
	return *o.HistoryTimeToLive.Get()
}

// GetHistoryTimeToLiveOk returns a tuple with the HistoryTimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HistoryTimeToLiveDto) GetHistoryTimeToLiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryTimeToLive.Get(), o.HistoryTimeToLive.IsSet()
}

// HasHistoryTimeToLive returns a boolean if a field has been set.
func (o *HistoryTimeToLiveDto) HasHistoryTimeToLive() bool {
	if o != nil && o.HistoryTimeToLive.IsSet() {
		return true
	}

	return false
}

// SetHistoryTimeToLive gets a reference to the given NullableInt32 and assigns it to the HistoryTimeToLive field.
func (o *HistoryTimeToLiveDto) SetHistoryTimeToLive(v int32) {
	o.HistoryTimeToLive.Set(&v)
}
// SetHistoryTimeToLiveNil sets the value for HistoryTimeToLive to be an explicit nil
func (o *HistoryTimeToLiveDto) SetHistoryTimeToLiveNil() {
	o.HistoryTimeToLive.Set(nil)
}

// UnsetHistoryTimeToLive ensures that no value is present for HistoryTimeToLive, not even an explicit nil
func (o *HistoryTimeToLiveDto) UnsetHistoryTimeToLive() {
	o.HistoryTimeToLive.Unset()
}

func (o HistoryTimeToLiveDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryTimeToLiveDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HistoryTimeToLive.IsSet() {
		toSerialize["historyTimeToLive"] = o.HistoryTimeToLive.Get()
	}
	return toSerialize, nil
}

type NullableHistoryTimeToLiveDto struct {
	value *HistoryTimeToLiveDto
	isSet bool
}

func (v NullableHistoryTimeToLiveDto) Get() *HistoryTimeToLiveDto {
	return v.value
}

func (v *NullableHistoryTimeToLiveDto) Set(val *HistoryTimeToLiveDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryTimeToLiveDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryTimeToLiveDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryTimeToLiveDto(val *HistoryTimeToLiveDto) *NullableHistoryTimeToLiveDto {
	return &NullableHistoryTimeToLiveDto{value: val, isSet: true}
}

func (v NullableHistoryTimeToLiveDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryTimeToLiveDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


