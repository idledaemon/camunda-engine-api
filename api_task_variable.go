/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type TaskVariableAPI interface {

	/*
	DeleteTaskVariable Delete Task Variable

	Removes a variable that is visible to a task. A variable is visible to a task if it is a local task
variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to delete the variable from.
	@param varName The name of the variable to be removed.
	@return ApiDeleteTaskVariableRequest
	*/
	DeleteTaskVariable(ctx context.Context, id string, varName string) ApiDeleteTaskVariableRequest

	// DeleteTaskVariableExecute executes the request
	DeleteTaskVariableExecute(r ApiDeleteTaskVariableRequest) (*http.Response, error)

	/*
	GetTaskVariable Get Task Variable

	Retrieves a variable from the context of a given task.
The variable must be visible from the task. It is visible from the task if it is a local task variable or
declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to retrieve the variable from.
	@param varName The name of the variable to get.
	@return ApiGetTaskVariableRequest
	*/
	GetTaskVariable(ctx context.Context, id string, varName string) ApiGetTaskVariableRequest

	// GetTaskVariableExecute executes the request
	//  @return VariableValueDto
	GetTaskVariableExecute(r ApiGetTaskVariableRequest) (*VariableValueDto, *http.Response, error)

	/*
	GetTaskVariableBinary Get Task Variable (Binary)

	Retrieves a binary variable from the context of a given task. Applicable for byte array and file
variables. The variable must be visible from the task. It is visible from the task if it is a local task
variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to retrieve the variable for.
	@param varName The name of the variable to retrieve.
	@return ApiGetTaskVariableBinaryRequest
	*/
	GetTaskVariableBinary(ctx context.Context, id string, varName string) ApiGetTaskVariableBinaryRequest

	// GetTaskVariableBinaryExecute executes the request
	//  @return *os.File
	GetTaskVariableBinaryExecute(r ApiGetTaskVariableBinaryRequest) (*os.File, *http.Response, error)

	/*
	GetTaskVariables Get Task Variables

	Retrieves all variables visible from the task. A variable is visible from the task if it is a local task
variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to retrieve the variables from.
	@return ApiGetTaskVariablesRequest
	*/
	GetTaskVariables(ctx context.Context, id string) ApiGetTaskVariablesRequest

	// GetTaskVariablesExecute executes the request
	//  @return map[string]VariableValueDto
	GetTaskVariablesExecute(r ApiGetTaskVariablesRequest) (*map[string]VariableValueDto, *http.Response, error)

	/*
	ModifyTaskVariables Update/Delete Task Variables

	Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is
updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a
local task variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to set variables for.
	@return ApiModifyTaskVariablesRequest
	*/
	ModifyTaskVariables(ctx context.Context, id string) ApiModifyTaskVariablesRequest

	// ModifyTaskVariablesExecute executes the request
	ModifyTaskVariablesExecute(r ApiModifyTaskVariablesRequest) (*http.Response, error)

	/*
	PutTaskVariable Update Task Variable

	Updates a process variable that is visible from the Task scope. A variable is visible from the task if it
is a local task variable, or declared in a parent scope of the task. See the documentation on
[variable scopes and visibility](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).

**Note**: If a variable doesn't exist, the variable is created in the top-most scope
visible from the task.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to set the variable for.
	@param varName The name of the variable to set.
	@return ApiPutTaskVariableRequest
	*/
	PutTaskVariable(ctx context.Context, id string, varName string) ApiPutTaskVariableRequest

	// PutTaskVariableExecute executes the request
	PutTaskVariableExecute(r ApiPutTaskVariableRequest) (*http.Response, error)

	/*
	SetBinaryTaskVariable Update Task Variable (Binary)

	Sets the serialized value for a binary variable or the binary value for a file variable visible from the
task. A variable is visible from the task if it is a local task variable or declared in a parent scope of
the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task to retrieve the variable for.
	@param varName The name of the variable to retrieve.
	@return ApiSetBinaryTaskVariableRequest
	*/
	SetBinaryTaskVariable(ctx context.Context, id string, varName string) ApiSetBinaryTaskVariableRequest

	// SetBinaryTaskVariableExecute executes the request
	SetBinaryTaskVariableExecute(r ApiSetBinaryTaskVariableRequest) (*http.Response, error)
}

// TaskVariableAPIService TaskVariableAPI service
type TaskVariableAPIService service

type ApiDeleteTaskVariableRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	varName string
}

func (r ApiDeleteTaskVariableRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTaskVariableExecute(r)
}

/*
DeleteTaskVariable Delete Task Variable

Removes a variable that is visible to a task. A variable is visible to a task if it is a local task
variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to delete the variable from.
 @param varName The name of the variable to be removed.
 @return ApiDeleteTaskVariableRequest
*/
func (a *TaskVariableAPIService) DeleteTaskVariable(ctx context.Context, id string, varName string) ApiDeleteTaskVariableRequest {
	return ApiDeleteTaskVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
func (a *TaskVariableAPIService) DeleteTaskVariableExecute(r ApiDeleteTaskVariableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.DeleteTaskVariable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables/{varName}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTaskVariableRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	varName string
	deserializeValue *bool
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetTaskVariableRequest) DeserializeValue(deserializeValue bool) ApiGetTaskVariableRequest {
	r.deserializeValue = &deserializeValue
	return r
}

func (r ApiGetTaskVariableRequest) Execute() (*VariableValueDto, *http.Response, error) {
	return r.ApiService.GetTaskVariableExecute(r)
}

/*
GetTaskVariable Get Task Variable

Retrieves a variable from the context of a given task.
The variable must be visible from the task. It is visible from the task if it is a local task variable or
declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to retrieve the variable from.
 @param varName The name of the variable to get.
 @return ApiGetTaskVariableRequest
*/
func (a *TaskVariableAPIService) GetTaskVariable(ctx context.Context, id string, varName string) ApiGetTaskVariableRequest {
	return ApiGetTaskVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
//  @return VariableValueDto
func (a *TaskVariableAPIService) GetTaskVariableExecute(r ApiGetTaskVariableRequest) (*VariableValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VariableValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.GetTaskVariable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables/{varName}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deserializeValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValue", r.deserializeValue, "")
	} else {
		var defaultValue bool = true
		r.deserializeValue = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskVariableBinaryRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	varName string
}

func (r ApiGetTaskVariableBinaryRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetTaskVariableBinaryExecute(r)
}

/*
GetTaskVariableBinary Get Task Variable (Binary)

Retrieves a binary variable from the context of a given task. Applicable for byte array and file
variables. The variable must be visible from the task. It is visible from the task if it is a local task
variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to retrieve the variable for.
 @param varName The name of the variable to retrieve.
 @return ApiGetTaskVariableBinaryRequest
*/
func (a *TaskVariableAPIService) GetTaskVariableBinary(ctx context.Context, id string, varName string) ApiGetTaskVariableBinaryRequest {
	return ApiGetTaskVariableBinaryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
//  @return *os.File
func (a *TaskVariableAPIService) GetTaskVariableBinaryExecute(r ApiGetTaskVariableBinaryRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.GetTaskVariableBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables/{varName}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "text/plain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskVariablesRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	deserializeValues *bool
}

// Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
func (r ApiGetTaskVariablesRequest) DeserializeValues(deserializeValues bool) ApiGetTaskVariablesRequest {
	r.deserializeValues = &deserializeValues
	return r
}

func (r ApiGetTaskVariablesRequest) Execute() (*map[string]VariableValueDto, *http.Response, error) {
	return r.ApiService.GetTaskVariablesExecute(r)
}

/*
GetTaskVariables Get Task Variables

Retrieves all variables visible from the task. A variable is visible from the task if it is a local task
variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to retrieve the variables from.
 @return ApiGetTaskVariablesRequest
*/
func (a *TaskVariableAPIService) GetTaskVariables(ctx context.Context, id string) ApiGetTaskVariablesRequest {
	return ApiGetTaskVariablesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]VariableValueDto
func (a *TaskVariableAPIService) GetTaskVariablesExecute(r ApiGetTaskVariablesRequest) (*map[string]VariableValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]VariableValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.GetTaskVariables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deserializeValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deserializeValues", r.deserializeValues, "")
	} else {
		var defaultValue bool = true
		r.deserializeValues = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTaskVariablesRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	patchVariablesDto *PatchVariablesDto
}

func (r ApiModifyTaskVariablesRequest) PatchVariablesDto(patchVariablesDto PatchVariablesDto) ApiModifyTaskVariablesRequest {
	r.patchVariablesDto = &patchVariablesDto
	return r
}

func (r ApiModifyTaskVariablesRequest) Execute() (*http.Response, error) {
	return r.ApiService.ModifyTaskVariablesExecute(r)
}

/*
ModifyTaskVariables Update/Delete Task Variables

Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is
updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a
local task variable or declared in a parent scope of the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to set variables for.
 @return ApiModifyTaskVariablesRequest
*/
func (a *TaskVariableAPIService) ModifyTaskVariables(ctx context.Context, id string) ApiModifyTaskVariablesRequest {
	return ApiModifyTaskVariablesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TaskVariableAPIService) ModifyTaskVariablesExecute(r ApiModifyTaskVariablesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.ModifyTaskVariables")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchVariablesDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutTaskVariableRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	varName string
	variableValueDto *VariableValueDto
}

func (r ApiPutTaskVariableRequest) VariableValueDto(variableValueDto VariableValueDto) ApiPutTaskVariableRequest {
	r.variableValueDto = &variableValueDto
	return r
}

func (r ApiPutTaskVariableRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutTaskVariableExecute(r)
}

/*
PutTaskVariable Update Task Variable

Updates a process variable that is visible from the Task scope. A variable is visible from the task if it
is a local task variable, or declared in a parent scope of the task. See the documentation on
[variable scopes and visibility](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).

**Note**: If a variable doesn't exist, the variable is created in the top-most scope
visible from the task.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to set the variable for.
 @param varName The name of the variable to set.
 @return ApiPutTaskVariableRequest
*/
func (a *TaskVariableAPIService) PutTaskVariable(ctx context.Context, id string, varName string) ApiPutTaskVariableRequest {
	return ApiPutTaskVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
func (a *TaskVariableAPIService) PutTaskVariableExecute(r ApiPutTaskVariableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.PutTaskVariable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables/{varName}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.variableValueDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetBinaryTaskVariableRequest struct {
	ctx context.Context
	ApiService TaskVariableAPI
	id string
	varName string
	data *os.File
	valueType *string
}

// The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory.
func (r ApiSetBinaryTaskVariableRequest) Data(data *os.File) ApiSetBinaryTaskVariableRequest {
	r.data = data
	return r
}

// The name of the variable type. Either Bytes for a byte array variable or File for a file variable.
func (r ApiSetBinaryTaskVariableRequest) ValueType(valueType string) ApiSetBinaryTaskVariableRequest {
	r.valueType = &valueType
	return r
}

func (r ApiSetBinaryTaskVariableRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetBinaryTaskVariableExecute(r)
}

/*
SetBinaryTaskVariable Update Task Variable (Binary)

Sets the serialized value for a binary variable or the binary value for a file variable visible from the
task. A variable is visible from the task if it is a local task variable or declared in a parent scope of
the task. See documentation on
[visiblity of variables](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task to retrieve the variable for.
 @param varName The name of the variable to retrieve.
 @return ApiSetBinaryTaskVariableRequest
*/
func (a *TaskVariableAPIService) SetBinaryTaskVariable(ctx context.Context, id string, varName string) ApiSetBinaryTaskVariableRequest {
	return ApiSetBinaryTaskVariableRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		varName: varName,
	}
}

// Execute executes the request
func (a *TaskVariableAPIService) SetBinaryTaskVariableExecute(r ApiSetBinaryTaskVariableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskVariableAPIService.SetBinaryTaskVariable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/{id}/variables/{varName}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"varName"+"}", url.PathEscape(parameterValueToString(r.varName, "varName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var dataLocalVarFormFileName string
	var dataLocalVarFileName     string
	var dataLocalVarFileBytes    []byte

	dataLocalVarFormFileName = "data"
	dataLocalVarFile := r.data

	if dataLocalVarFile != nil {
		fbs, _ := io.ReadAll(dataLocalVarFile)

		dataLocalVarFileBytes = fbs
		dataLocalVarFileName = dataLocalVarFile.Name()
		dataLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: dataLocalVarFileBytes, fileName: dataLocalVarFileName, formFileName: dataLocalVarFormFileName})
	}
	if r.valueType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "valueType", r.valueType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
