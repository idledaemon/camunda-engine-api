/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
	"time"
)

// checks if the TaskDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDto{}

// TaskDto struct for TaskDto
type TaskDto struct {
	// The task id.
	Id NullableString `json:"id,omitempty"`
	// The task name.
	Name NullableString `json:"name,omitempty"`
	// The assignee's id.
	Assignee NullableString `json:"assignee,omitempty"`
	// The owner's id.
	Owner NullableString `json:"owner,omitempty"`
	// The date the task was created on. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	Created NullableTime `json:"created,omitempty"`
	// The date the task was last updated. Every action that fires a [task update event](https://docs.camunda.org/manual/7.21/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) will update this property. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	LastUpdated NullableTime `json:"lastUpdated,omitempty"`
	// The task's due date. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	Due NullableTime `json:"due,omitempty"`
	// The follow-up date for the task. [Default format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	FollowUp NullableTime `json:"followUp,omitempty"`
	// The task's delegation state. Possible values are `PENDING` and `RESOLVED`.
	DelegationState NullableString `json:"delegationState,omitempty"`
	// The task's description.
	Description NullableString `json:"description,omitempty"`
	// The id of the execution the task belongs to.
	ExecutionId NullableString `json:"executionId,omitempty"`
	// The id the parent task, if this task is a subtask.
	ParentTaskId NullableString `json:"parentTaskId,omitempty"`
	// The task's priority.
	Priority NullableInt32 `json:"priority,omitempty"`
	// The id of the process definition the task belongs to.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// The id of the process instance the task belongs to.
	ProcessInstanceId NullableString `json:"processInstanceId,omitempty"`
	// The id of the case execution the task belongs to.
	CaseExecutionId NullableString `json:"caseExecutionId,omitempty"`
	// The id of the case definition the task belongs to.
	CaseDefinitionId NullableString `json:"caseDefinitionId,omitempty"`
	// The id of the case instance the task belongs to.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// The task's key.
	TaskDefinitionKey NullableString `json:"taskDefinitionKey,omitempty"`
	// Whether the task belongs to a process instance that is suspended.
	Suspended NullableBool `json:"suspended,omitempty"`
	// If not `null`, the form key for the task.
	FormKey NullableString `json:"formKey,omitempty"`
	CamundaFormRef *CamundaFormRef `json:"camundaFormRef,omitempty"`
	// If not `null`, the tenant id of the task.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewTaskDto instantiates a new TaskDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDto() *TaskDto {
	this := TaskDto{}
	return &this
}

// NewTaskDtoWithDefaults instantiates a new TaskDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDtoWithDefaults() *TaskDto {
	this := TaskDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TaskDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TaskDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TaskDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TaskDto) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TaskDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TaskDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TaskDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TaskDto) UnsetName() {
	o.Name.Unset()
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetAssignee() string {
	if o == nil || IsNil(o.Assignee.Get()) {
		var ret string
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *TaskDto) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableString and assigns it to the Assignee field.
func (o *TaskDto) SetAssignee(v string) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *TaskDto) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *TaskDto) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *TaskDto) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *TaskDto) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *TaskDto) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *TaskDto) UnsetOwner() {
	o.Owner.Unset()
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetCreated() time.Time {
	if o == nil || IsNil(o.Created.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *TaskDto) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableTime and assigns it to the Created field.
func (o *TaskDto) SetCreated(v time.Time) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *TaskDto) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *TaskDto) UnsetCreated() {
	o.Created.Unset()
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TaskDto) HasLastUpdated() bool {
	if o != nil && o.LastUpdated.IsSet() {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given NullableTime and assigns it to the LastUpdated field.
func (o *TaskDto) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}
// SetLastUpdatedNil sets the value for LastUpdated to be an explicit nil
func (o *TaskDto) SetLastUpdatedNil() {
	o.LastUpdated.Set(nil)
}

// UnsetLastUpdated ensures that no value is present for LastUpdated, not even an explicit nil
func (o *TaskDto) UnsetLastUpdated() {
	o.LastUpdated.Unset()
}

// GetDue returns the Due field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetDue() time.Time {
	if o == nil || IsNil(o.Due.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Due.Get()
}

// GetDueOk returns a tuple with the Due field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetDueOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Due.Get(), o.Due.IsSet()
}

// HasDue returns a boolean if a field has been set.
func (o *TaskDto) HasDue() bool {
	if o != nil && o.Due.IsSet() {
		return true
	}

	return false
}

// SetDue gets a reference to the given NullableTime and assigns it to the Due field.
func (o *TaskDto) SetDue(v time.Time) {
	o.Due.Set(&v)
}
// SetDueNil sets the value for Due to be an explicit nil
func (o *TaskDto) SetDueNil() {
	o.Due.Set(nil)
}

// UnsetDue ensures that no value is present for Due, not even an explicit nil
func (o *TaskDto) UnsetDue() {
	o.Due.Unset()
}

// GetFollowUp returns the FollowUp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetFollowUp() time.Time {
	if o == nil || IsNil(o.FollowUp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FollowUp.Get()
}

// GetFollowUpOk returns a tuple with the FollowUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetFollowUpOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowUp.Get(), o.FollowUp.IsSet()
}

// HasFollowUp returns a boolean if a field has been set.
func (o *TaskDto) HasFollowUp() bool {
	if o != nil && o.FollowUp.IsSet() {
		return true
	}

	return false
}

// SetFollowUp gets a reference to the given NullableTime and assigns it to the FollowUp field.
func (o *TaskDto) SetFollowUp(v time.Time) {
	o.FollowUp.Set(&v)
}
// SetFollowUpNil sets the value for FollowUp to be an explicit nil
func (o *TaskDto) SetFollowUpNil() {
	o.FollowUp.Set(nil)
}

// UnsetFollowUp ensures that no value is present for FollowUp, not even an explicit nil
func (o *TaskDto) UnsetFollowUp() {
	o.FollowUp.Unset()
}

// GetDelegationState returns the DelegationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetDelegationState() string {
	if o == nil || IsNil(o.DelegationState.Get()) {
		var ret string
		return ret
	}
	return *o.DelegationState.Get()
}

// GetDelegationStateOk returns a tuple with the DelegationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetDelegationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegationState.Get(), o.DelegationState.IsSet()
}

// HasDelegationState returns a boolean if a field has been set.
func (o *TaskDto) HasDelegationState() bool {
	if o != nil && o.DelegationState.IsSet() {
		return true
	}

	return false
}

// SetDelegationState gets a reference to the given NullableString and assigns it to the DelegationState field.
func (o *TaskDto) SetDelegationState(v string) {
	o.DelegationState.Set(&v)
}
// SetDelegationStateNil sets the value for DelegationState to be an explicit nil
func (o *TaskDto) SetDelegationStateNil() {
	o.DelegationState.Set(nil)
}

// UnsetDelegationState ensures that no value is present for DelegationState, not even an explicit nil
func (o *TaskDto) UnsetDelegationState() {
	o.DelegationState.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TaskDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TaskDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TaskDto) UnsetDescription() {
	o.Description.Unset()
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *TaskDto) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *TaskDto) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *TaskDto) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *TaskDto) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetParentTaskId returns the ParentTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetParentTaskId() string {
	if o == nil || IsNil(o.ParentTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentTaskId.Get()
}

// GetParentTaskIdOk returns a tuple with the ParentTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetParentTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTaskId.Get(), o.ParentTaskId.IsSet()
}

// HasParentTaskId returns a boolean if a field has been set.
func (o *TaskDto) HasParentTaskId() bool {
	if o != nil && o.ParentTaskId.IsSet() {
		return true
	}

	return false
}

// SetParentTaskId gets a reference to the given NullableString and assigns it to the ParentTaskId field.
func (o *TaskDto) SetParentTaskId(v string) {
	o.ParentTaskId.Set(&v)
}
// SetParentTaskIdNil sets the value for ParentTaskId to be an explicit nil
func (o *TaskDto) SetParentTaskIdNil() {
	o.ParentTaskId.Set(nil)
}

// UnsetParentTaskId ensures that no value is present for ParentTaskId, not even an explicit nil
func (o *TaskDto) UnsetParentTaskId() {
	o.ParentTaskId.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetPriority() int32 {
	if o == nil || IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *TaskDto) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *TaskDto) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *TaskDto) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *TaskDto) UnsetPriority() {
	o.Priority.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *TaskDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *TaskDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *TaskDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *TaskDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessInstanceId returns the ProcessInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetProcessInstanceId() string {
	if o == nil || IsNil(o.ProcessInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessInstanceId.Get()
}

// GetProcessInstanceIdOk returns a tuple with the ProcessInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetProcessInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessInstanceId.Get(), o.ProcessInstanceId.IsSet()
}

// HasProcessInstanceId returns a boolean if a field has been set.
func (o *TaskDto) HasProcessInstanceId() bool {
	if o != nil && o.ProcessInstanceId.IsSet() {
		return true
	}

	return false
}

// SetProcessInstanceId gets a reference to the given NullableString and assigns it to the ProcessInstanceId field.
func (o *TaskDto) SetProcessInstanceId(v string) {
	o.ProcessInstanceId.Set(&v)
}
// SetProcessInstanceIdNil sets the value for ProcessInstanceId to be an explicit nil
func (o *TaskDto) SetProcessInstanceIdNil() {
	o.ProcessInstanceId.Set(nil)
}

// UnsetProcessInstanceId ensures that no value is present for ProcessInstanceId, not even an explicit nil
func (o *TaskDto) UnsetProcessInstanceId() {
	o.ProcessInstanceId.Unset()
}

// GetCaseExecutionId returns the CaseExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetCaseExecutionId() string {
	if o == nil || IsNil(o.CaseExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseExecutionId.Get()
}

// GetCaseExecutionIdOk returns a tuple with the CaseExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetCaseExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseExecutionId.Get(), o.CaseExecutionId.IsSet()
}

// HasCaseExecutionId returns a boolean if a field has been set.
func (o *TaskDto) HasCaseExecutionId() bool {
	if o != nil && o.CaseExecutionId.IsSet() {
		return true
	}

	return false
}

// SetCaseExecutionId gets a reference to the given NullableString and assigns it to the CaseExecutionId field.
func (o *TaskDto) SetCaseExecutionId(v string) {
	o.CaseExecutionId.Set(&v)
}
// SetCaseExecutionIdNil sets the value for CaseExecutionId to be an explicit nil
func (o *TaskDto) SetCaseExecutionIdNil() {
	o.CaseExecutionId.Set(nil)
}

// UnsetCaseExecutionId ensures that no value is present for CaseExecutionId, not even an explicit nil
func (o *TaskDto) UnsetCaseExecutionId() {
	o.CaseExecutionId.Unset()
}

// GetCaseDefinitionId returns the CaseDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetCaseDefinitionId() string {
	if o == nil || IsNil(o.CaseDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseDefinitionId.Get()
}

// GetCaseDefinitionIdOk returns a tuple with the CaseDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetCaseDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseDefinitionId.Get(), o.CaseDefinitionId.IsSet()
}

// HasCaseDefinitionId returns a boolean if a field has been set.
func (o *TaskDto) HasCaseDefinitionId() bool {
	if o != nil && o.CaseDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetCaseDefinitionId gets a reference to the given NullableString and assigns it to the CaseDefinitionId field.
func (o *TaskDto) SetCaseDefinitionId(v string) {
	o.CaseDefinitionId.Set(&v)
}
// SetCaseDefinitionIdNil sets the value for CaseDefinitionId to be an explicit nil
func (o *TaskDto) SetCaseDefinitionIdNil() {
	o.CaseDefinitionId.Set(nil)
}

// UnsetCaseDefinitionId ensures that no value is present for CaseDefinitionId, not even an explicit nil
func (o *TaskDto) UnsetCaseDefinitionId() {
	o.CaseDefinitionId.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *TaskDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *TaskDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *TaskDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *TaskDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetTaskDefinitionKey returns the TaskDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetTaskDefinitionKey() string {
	if o == nil || IsNil(o.TaskDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.TaskDefinitionKey.Get()
}

// GetTaskDefinitionKeyOk returns a tuple with the TaskDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetTaskDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskDefinitionKey.Get(), o.TaskDefinitionKey.IsSet()
}

// HasTaskDefinitionKey returns a boolean if a field has been set.
func (o *TaskDto) HasTaskDefinitionKey() bool {
	if o != nil && o.TaskDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetTaskDefinitionKey gets a reference to the given NullableString and assigns it to the TaskDefinitionKey field.
func (o *TaskDto) SetTaskDefinitionKey(v string) {
	o.TaskDefinitionKey.Set(&v)
}
// SetTaskDefinitionKeyNil sets the value for TaskDefinitionKey to be an explicit nil
func (o *TaskDto) SetTaskDefinitionKeyNil() {
	o.TaskDefinitionKey.Set(nil)
}

// UnsetTaskDefinitionKey ensures that no value is present for TaskDefinitionKey, not even an explicit nil
func (o *TaskDto) UnsetTaskDefinitionKey() {
	o.TaskDefinitionKey.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *TaskDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *TaskDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *TaskDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *TaskDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetFormKey returns the FormKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetFormKey() string {
	if o == nil || IsNil(o.FormKey.Get()) {
		var ret string
		return ret
	}
	return *o.FormKey.Get()
}

// GetFormKeyOk returns a tuple with the FormKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetFormKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FormKey.Get(), o.FormKey.IsSet()
}

// HasFormKey returns a boolean if a field has been set.
func (o *TaskDto) HasFormKey() bool {
	if o != nil && o.FormKey.IsSet() {
		return true
	}

	return false
}

// SetFormKey gets a reference to the given NullableString and assigns it to the FormKey field.
func (o *TaskDto) SetFormKey(v string) {
	o.FormKey.Set(&v)
}
// SetFormKeyNil sets the value for FormKey to be an explicit nil
func (o *TaskDto) SetFormKeyNil() {
	o.FormKey.Set(nil)
}

// UnsetFormKey ensures that no value is present for FormKey, not even an explicit nil
func (o *TaskDto) UnsetFormKey() {
	o.FormKey.Unset()
}

// GetCamundaFormRef returns the CamundaFormRef field value if set, zero value otherwise.
func (o *TaskDto) GetCamundaFormRef() CamundaFormRef {
	if o == nil || IsNil(o.CamundaFormRef) {
		var ret CamundaFormRef
		return ret
	}
	return *o.CamundaFormRef
}

// GetCamundaFormRefOk returns a tuple with the CamundaFormRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDto) GetCamundaFormRefOk() (*CamundaFormRef, bool) {
	if o == nil || IsNil(o.CamundaFormRef) {
		return nil, false
	}
	return o.CamundaFormRef, true
}

// HasCamundaFormRef returns a boolean if a field has been set.
func (o *TaskDto) HasCamundaFormRef() bool {
	if o != nil && !IsNil(o.CamundaFormRef) {
		return true
	}

	return false
}

// SetCamundaFormRef gets a reference to the given CamundaFormRef and assigns it to the CamundaFormRef field.
func (o *TaskDto) SetCamundaFormRef(v CamundaFormRef) {
	o.CamundaFormRef = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TaskDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TaskDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TaskDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TaskDto) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o TaskDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}
	if o.LastUpdated.IsSet() {
		toSerialize["lastUpdated"] = o.LastUpdated.Get()
	}
	if o.Due.IsSet() {
		toSerialize["due"] = o.Due.Get()
	}
	if o.FollowUp.IsSet() {
		toSerialize["followUp"] = o.FollowUp.Get()
	}
	if o.DelegationState.IsSet() {
		toSerialize["delegationState"] = o.DelegationState.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExecutionId.IsSet() {
		toSerialize["executionId"] = o.ExecutionId.Get()
	}
	if o.ParentTaskId.IsSet() {
		toSerialize["parentTaskId"] = o.ParentTaskId.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessInstanceId.IsSet() {
		toSerialize["processInstanceId"] = o.ProcessInstanceId.Get()
	}
	if o.CaseExecutionId.IsSet() {
		toSerialize["caseExecutionId"] = o.CaseExecutionId.Get()
	}
	if o.CaseDefinitionId.IsSet() {
		toSerialize["caseDefinitionId"] = o.CaseDefinitionId.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.TaskDefinitionKey.IsSet() {
		toSerialize["taskDefinitionKey"] = o.TaskDefinitionKey.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.FormKey.IsSet() {
		toSerialize["formKey"] = o.FormKey.Get()
	}
	if !IsNil(o.CamundaFormRef) {
		toSerialize["camundaFormRef"] = o.CamundaFormRef
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

type NullableTaskDto struct {
	value *TaskDto
	isSet bool
}

func (v NullableTaskDto) Get() *TaskDto {
	return v.value
}

func (v *NullableTaskDto) Set(val *TaskDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDto(val *TaskDto) *NullableTaskDto {
	return &NullableTaskDto{value: val, isSet: true}
}

func (v NullableTaskDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


