/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the MissingAuthorizationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MissingAuthorizationDto{}

// MissingAuthorizationDto struct for MissingAuthorizationDto
type MissingAuthorizationDto struct {
	// The permission name that the user is missing.
	PermissionName NullableString `json:"permissionName,omitempty"`
	// The name of the resource that the user is missing permission for.
	ResourceName NullableString `json:"resourceName,omitempty"`
	// The id of the resource that the user is missing permission for.
	ResourceId NullableString `json:"resourceId,omitempty"`
}

// NewMissingAuthorizationDto instantiates a new MissingAuthorizationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMissingAuthorizationDto() *MissingAuthorizationDto {
	this := MissingAuthorizationDto{}
	return &this
}

// NewMissingAuthorizationDtoWithDefaults instantiates a new MissingAuthorizationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissingAuthorizationDtoWithDefaults() *MissingAuthorizationDto {
	this := MissingAuthorizationDto{}
	return &this
}

// GetPermissionName returns the PermissionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MissingAuthorizationDto) GetPermissionName() string {
	if o == nil || IsNil(o.PermissionName.Get()) {
		var ret string
		return ret
	}
	return *o.PermissionName.Get()
}

// GetPermissionNameOk returns a tuple with the PermissionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MissingAuthorizationDto) GetPermissionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermissionName.Get(), o.PermissionName.IsSet()
}

// HasPermissionName returns a boolean if a field has been set.
func (o *MissingAuthorizationDto) HasPermissionName() bool {
	if o != nil && o.PermissionName.IsSet() {
		return true
	}

	return false
}

// SetPermissionName gets a reference to the given NullableString and assigns it to the PermissionName field.
func (o *MissingAuthorizationDto) SetPermissionName(v string) {
	o.PermissionName.Set(&v)
}
// SetPermissionNameNil sets the value for PermissionName to be an explicit nil
func (o *MissingAuthorizationDto) SetPermissionNameNil() {
	o.PermissionName.Set(nil)
}

// UnsetPermissionName ensures that no value is present for PermissionName, not even an explicit nil
func (o *MissingAuthorizationDto) UnsetPermissionName() {
	o.PermissionName.Unset()
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MissingAuthorizationDto) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MissingAuthorizationDto) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *MissingAuthorizationDto) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *MissingAuthorizationDto) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *MissingAuthorizationDto) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *MissingAuthorizationDto) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MissingAuthorizationDto) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MissingAuthorizationDto) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// HasResourceId returns a boolean if a field has been set.
func (o *MissingAuthorizationDto) HasResourceId() bool {
	if o != nil && o.ResourceId.IsSet() {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given NullableString and assigns it to the ResourceId field.
func (o *MissingAuthorizationDto) SetResourceId(v string) {
	o.ResourceId.Set(&v)
}
// SetResourceIdNil sets the value for ResourceId to be an explicit nil
func (o *MissingAuthorizationDto) SetResourceIdNil() {
	o.ResourceId.Set(nil)
}

// UnsetResourceId ensures that no value is present for ResourceId, not even an explicit nil
func (o *MissingAuthorizationDto) UnsetResourceId() {
	o.ResourceId.Unset()
}

func (o MissingAuthorizationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MissingAuthorizationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PermissionName.IsSet() {
		toSerialize["permissionName"] = o.PermissionName.Get()
	}
	if o.ResourceName.IsSet() {
		toSerialize["resourceName"] = o.ResourceName.Get()
	}
	if o.ResourceId.IsSet() {
		toSerialize["resourceId"] = o.ResourceId.Get()
	}
	return toSerialize, nil
}

type NullableMissingAuthorizationDto struct {
	value *MissingAuthorizationDto
	isSet bool
}

func (v NullableMissingAuthorizationDto) Get() *MissingAuthorizationDto {
	return v.value
}

func (v *NullableMissingAuthorizationDto) Set(val *MissingAuthorizationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMissingAuthorizationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMissingAuthorizationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissingAuthorizationDto(val *MissingAuthorizationDto) *NullableMissingAuthorizationDto {
	return &NullableMissingAuthorizationDto{value: val, isSet: true}
}

func (v NullableMissingAuthorizationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissingAuthorizationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


