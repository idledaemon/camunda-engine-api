/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the ProcessInstanceQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessInstanceQueryDto{}

// ProcessInstanceQueryDto A process instance query which defines a group of process instances
type ProcessInstanceQueryDto struct {
	// Filter by the deployment the id belongs to.
	DeploymentId NullableString `json:"deploymentId,omitempty"`
	// Filter by the process definition the instances run on.
	ProcessDefinitionId NullableString `json:"processDefinitionId,omitempty"`
	// Filter by the key of the process definition the instances run on.
	ProcessDefinitionKey NullableString `json:"processDefinitionKey,omitempty"`
	// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
	ProcessDefinitionKeyIn []string `json:"processDefinitionKeyIn,omitempty"`
	// Exclude instances by a list of process definition keys. A process instance must not have one of the given process definition keys. Must be a JSON array of Strings.
	ProcessDefinitionKeyNotIn []string `json:"processDefinitionKeyNotIn,omitempty"`
	// Filter by process instance business key.
	BusinessKey NullableString `json:"businessKey,omitempty"`
	// Filter by process instance business key that the parameter is a substring of.
	BusinessKeyLike NullableString `json:"businessKeyLike,omitempty"`
	// Filter by case instance id.
	CaseInstanceId NullableString `json:"caseInstanceId,omitempty"`
	// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
	SuperProcessInstance NullableString `json:"superProcessInstance,omitempty"`
	// Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
	SubProcessInstance NullableString `json:"subProcessInstance,omitempty"`
	// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
	SuperCaseInstance NullableString `json:"superCaseInstance,omitempty"`
	// Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
	SubCaseInstance NullableString `json:"subCaseInstance,omitempty"`
	// Only include active process instances. Value may only be true, as false is the default behavior.
	Active NullableBool `json:"active,omitempty"`
	// Only include suspended process instances. Value may only be true, as false is the default behavior.
	Suspended NullableBool `json:"suspended,omitempty"`
	// Filter by a list of process instance ids. Must be a JSON array of Strings.
	ProcessInstanceIds []string `json:"processInstanceIds,omitempty"`
	// Filter by presence of incidents. Selects only process instances that have an incident.
	WithIncident NullableBool `json:"withIncident,omitempty"`
	// Filter by the incident id.
	IncidentId NullableString `json:"incidentId,omitempty"`
	// Filter by the incident type. See the User Guide for a list of incident types.
	IncidentType NullableString `json:"incidentType,omitempty"`
	// Filter by the incident message. Exact match.
	IncidentMessage NullableString `json:"incidentMessage,omitempty"`
	// Filter by the incident message that the parameter is a substring of.
	IncidentMessageLike NullableString `json:"incidentMessageLike,omitempty"`
	// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
	TenantIdIn []string `json:"tenantIdIn,omitempty"`
	// Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.
	WithoutTenantId NullableBool `json:"withoutTenantId,omitempty"`
	// Only include process instances which process definition has no tenant id.
	ProcessDefinitionWithoutTenantId NullableBool `json:"processDefinitionWithoutTenantId,omitempty"`
	// Filter by a list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
	ActivityIdIn []string `json:"activityIdIn,omitempty"`
	// Restrict the query to all process instances that are top level process instances.
	RootProcessInstances NullableBool `json:"rootProcessInstances,omitempty"`
	// Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)
	LeafProcessInstances NullableBool `json:"leafProcessInstances,omitempty"`
	// A JSON array to only include process instances that have variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (String) is the variable name, `operator` (String) is the comparison operator to be used and `value` the variable value. The `value` may be String, Number or Boolean.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
	Variables []VariableQueryParameterDto `json:"variables,omitempty"`
	// Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
	VariableNamesIgnoreCase NullableBool `json:"variableNamesIgnoreCase,omitempty"`
	// Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
	VariableValuesIgnoreCase NullableBool `json:"variableValuesIgnoreCase,omitempty"`
	// A JSON array of nested process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query's predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: `sorting` See the [User guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
	OrQueries []ProcessInstanceQueryDto `json:"orQueries,omitempty"`
	// Apply sorting of the result
	Sorting []ProcessInstanceQueryDtoSortingInner `json:"sorting,omitempty"`
}

// NewProcessInstanceQueryDto instantiates a new ProcessInstanceQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessInstanceQueryDto() *ProcessInstanceQueryDto {
	this := ProcessInstanceQueryDto{}
	return &this
}

// NewProcessInstanceQueryDtoWithDefaults instantiates a new ProcessInstanceQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessInstanceQueryDtoWithDefaults() *ProcessInstanceQueryDto {
	this := ProcessInstanceQueryDto{}
	return &this
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *ProcessInstanceQueryDto) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *ProcessInstanceQueryDto) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

// GetProcessDefinitionId returns the ProcessDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetProcessDefinitionId() string {
	if o == nil || IsNil(o.ProcessDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionId.Get()
}

// GetProcessDefinitionIdOk returns a tuple with the ProcessDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetProcessDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionId.Get(), o.ProcessDefinitionId.IsSet()
}

// HasProcessDefinitionId returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasProcessDefinitionId() bool {
	if o != nil && o.ProcessDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionId gets a reference to the given NullableString and assigns it to the ProcessDefinitionId field.
func (o *ProcessInstanceQueryDto) SetProcessDefinitionId(v string) {
	o.ProcessDefinitionId.Set(&v)
}
// SetProcessDefinitionIdNil sets the value for ProcessDefinitionId to be an explicit nil
func (o *ProcessInstanceQueryDto) SetProcessDefinitionIdNil() {
	o.ProcessDefinitionId.Set(nil)
}

// UnsetProcessDefinitionId ensures that no value is present for ProcessDefinitionId, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetProcessDefinitionId() {
	o.ProcessDefinitionId.Unset()
}

// GetProcessDefinitionKey returns the ProcessDefinitionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetProcessDefinitionKey() string {
	if o == nil || IsNil(o.ProcessDefinitionKey.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessDefinitionKey.Get()
}

// GetProcessDefinitionKeyOk returns a tuple with the ProcessDefinitionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetProcessDefinitionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionKey.Get(), o.ProcessDefinitionKey.IsSet()
}

// HasProcessDefinitionKey returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasProcessDefinitionKey() bool {
	if o != nil && o.ProcessDefinitionKey.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionKey gets a reference to the given NullableString and assigns it to the ProcessDefinitionKey field.
func (o *ProcessInstanceQueryDto) SetProcessDefinitionKey(v string) {
	o.ProcessDefinitionKey.Set(&v)
}
// SetProcessDefinitionKeyNil sets the value for ProcessDefinitionKey to be an explicit nil
func (o *ProcessInstanceQueryDto) SetProcessDefinitionKeyNil() {
	o.ProcessDefinitionKey.Set(nil)
}

// UnsetProcessDefinitionKey ensures that no value is present for ProcessDefinitionKey, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetProcessDefinitionKey() {
	o.ProcessDefinitionKey.Unset()
}

// GetProcessDefinitionKeyIn returns the ProcessDefinitionKeyIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetProcessDefinitionKeyIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessDefinitionKeyIn
}

// GetProcessDefinitionKeyInOk returns a tuple with the ProcessDefinitionKeyIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetProcessDefinitionKeyInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessDefinitionKeyIn) {
		return nil, false
	}
	return o.ProcessDefinitionKeyIn, true
}

// HasProcessDefinitionKeyIn returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasProcessDefinitionKeyIn() bool {
	if o != nil && !IsNil(o.ProcessDefinitionKeyIn) {
		return true
	}

	return false
}

// SetProcessDefinitionKeyIn gets a reference to the given []string and assigns it to the ProcessDefinitionKeyIn field.
func (o *ProcessInstanceQueryDto) SetProcessDefinitionKeyIn(v []string) {
	o.ProcessDefinitionKeyIn = v
}

// GetProcessDefinitionKeyNotIn returns the ProcessDefinitionKeyNotIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetProcessDefinitionKeyNotIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessDefinitionKeyNotIn
}

// GetProcessDefinitionKeyNotInOk returns a tuple with the ProcessDefinitionKeyNotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetProcessDefinitionKeyNotInOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessDefinitionKeyNotIn) {
		return nil, false
	}
	return o.ProcessDefinitionKeyNotIn, true
}

// HasProcessDefinitionKeyNotIn returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasProcessDefinitionKeyNotIn() bool {
	if o != nil && !IsNil(o.ProcessDefinitionKeyNotIn) {
		return true
	}

	return false
}

// SetProcessDefinitionKeyNotIn gets a reference to the given []string and assigns it to the ProcessDefinitionKeyNotIn field.
func (o *ProcessInstanceQueryDto) SetProcessDefinitionKeyNotIn(v []string) {
	o.ProcessDefinitionKeyNotIn = v
}

// GetBusinessKey returns the BusinessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetBusinessKey() string {
	if o == nil || IsNil(o.BusinessKey.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessKey.Get()
}

// GetBusinessKeyOk returns a tuple with the BusinessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetBusinessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessKey.Get(), o.BusinessKey.IsSet()
}

// HasBusinessKey returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasBusinessKey() bool {
	if o != nil && o.BusinessKey.IsSet() {
		return true
	}

	return false
}

// SetBusinessKey gets a reference to the given NullableString and assigns it to the BusinessKey field.
func (o *ProcessInstanceQueryDto) SetBusinessKey(v string) {
	o.BusinessKey.Set(&v)
}
// SetBusinessKeyNil sets the value for BusinessKey to be an explicit nil
func (o *ProcessInstanceQueryDto) SetBusinessKeyNil() {
	o.BusinessKey.Set(nil)
}

// UnsetBusinessKey ensures that no value is present for BusinessKey, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetBusinessKey() {
	o.BusinessKey.Unset()
}

// GetBusinessKeyLike returns the BusinessKeyLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetBusinessKeyLike() string {
	if o == nil || IsNil(o.BusinessKeyLike.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessKeyLike.Get()
}

// GetBusinessKeyLikeOk returns a tuple with the BusinessKeyLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetBusinessKeyLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessKeyLike.Get(), o.BusinessKeyLike.IsSet()
}

// HasBusinessKeyLike returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasBusinessKeyLike() bool {
	if o != nil && o.BusinessKeyLike.IsSet() {
		return true
	}

	return false
}

// SetBusinessKeyLike gets a reference to the given NullableString and assigns it to the BusinessKeyLike field.
func (o *ProcessInstanceQueryDto) SetBusinessKeyLike(v string) {
	o.BusinessKeyLike.Set(&v)
}
// SetBusinessKeyLikeNil sets the value for BusinessKeyLike to be an explicit nil
func (o *ProcessInstanceQueryDto) SetBusinessKeyLikeNil() {
	o.BusinessKeyLike.Set(nil)
}

// UnsetBusinessKeyLike ensures that no value is present for BusinessKeyLike, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetBusinessKeyLike() {
	o.BusinessKeyLike.Unset()
}

// GetCaseInstanceId returns the CaseInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetCaseInstanceId() string {
	if o == nil || IsNil(o.CaseInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.CaseInstanceId.Get()
}

// GetCaseInstanceIdOk returns a tuple with the CaseInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetCaseInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInstanceId.Get(), o.CaseInstanceId.IsSet()
}

// HasCaseInstanceId returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasCaseInstanceId() bool {
	if o != nil && o.CaseInstanceId.IsSet() {
		return true
	}

	return false
}

// SetCaseInstanceId gets a reference to the given NullableString and assigns it to the CaseInstanceId field.
func (o *ProcessInstanceQueryDto) SetCaseInstanceId(v string) {
	o.CaseInstanceId.Set(&v)
}
// SetCaseInstanceIdNil sets the value for CaseInstanceId to be an explicit nil
func (o *ProcessInstanceQueryDto) SetCaseInstanceIdNil() {
	o.CaseInstanceId.Set(nil)
}

// UnsetCaseInstanceId ensures that no value is present for CaseInstanceId, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetCaseInstanceId() {
	o.CaseInstanceId.Unset()
}

// GetSuperProcessInstance returns the SuperProcessInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetSuperProcessInstance() string {
	if o == nil || IsNil(o.SuperProcessInstance.Get()) {
		var ret string
		return ret
	}
	return *o.SuperProcessInstance.Get()
}

// GetSuperProcessInstanceOk returns a tuple with the SuperProcessInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetSuperProcessInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuperProcessInstance.Get(), o.SuperProcessInstance.IsSet()
}

// HasSuperProcessInstance returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasSuperProcessInstance() bool {
	if o != nil && o.SuperProcessInstance.IsSet() {
		return true
	}

	return false
}

// SetSuperProcessInstance gets a reference to the given NullableString and assigns it to the SuperProcessInstance field.
func (o *ProcessInstanceQueryDto) SetSuperProcessInstance(v string) {
	o.SuperProcessInstance.Set(&v)
}
// SetSuperProcessInstanceNil sets the value for SuperProcessInstance to be an explicit nil
func (o *ProcessInstanceQueryDto) SetSuperProcessInstanceNil() {
	o.SuperProcessInstance.Set(nil)
}

// UnsetSuperProcessInstance ensures that no value is present for SuperProcessInstance, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetSuperProcessInstance() {
	o.SuperProcessInstance.Unset()
}

// GetSubProcessInstance returns the SubProcessInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetSubProcessInstance() string {
	if o == nil || IsNil(o.SubProcessInstance.Get()) {
		var ret string
		return ret
	}
	return *o.SubProcessInstance.Get()
}

// GetSubProcessInstanceOk returns a tuple with the SubProcessInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetSubProcessInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubProcessInstance.Get(), o.SubProcessInstance.IsSet()
}

// HasSubProcessInstance returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasSubProcessInstance() bool {
	if o != nil && o.SubProcessInstance.IsSet() {
		return true
	}

	return false
}

// SetSubProcessInstance gets a reference to the given NullableString and assigns it to the SubProcessInstance field.
func (o *ProcessInstanceQueryDto) SetSubProcessInstance(v string) {
	o.SubProcessInstance.Set(&v)
}
// SetSubProcessInstanceNil sets the value for SubProcessInstance to be an explicit nil
func (o *ProcessInstanceQueryDto) SetSubProcessInstanceNil() {
	o.SubProcessInstance.Set(nil)
}

// UnsetSubProcessInstance ensures that no value is present for SubProcessInstance, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetSubProcessInstance() {
	o.SubProcessInstance.Unset()
}

// GetSuperCaseInstance returns the SuperCaseInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetSuperCaseInstance() string {
	if o == nil || IsNil(o.SuperCaseInstance.Get()) {
		var ret string
		return ret
	}
	return *o.SuperCaseInstance.Get()
}

// GetSuperCaseInstanceOk returns a tuple with the SuperCaseInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetSuperCaseInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuperCaseInstance.Get(), o.SuperCaseInstance.IsSet()
}

// HasSuperCaseInstance returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasSuperCaseInstance() bool {
	if o != nil && o.SuperCaseInstance.IsSet() {
		return true
	}

	return false
}

// SetSuperCaseInstance gets a reference to the given NullableString and assigns it to the SuperCaseInstance field.
func (o *ProcessInstanceQueryDto) SetSuperCaseInstance(v string) {
	o.SuperCaseInstance.Set(&v)
}
// SetSuperCaseInstanceNil sets the value for SuperCaseInstance to be an explicit nil
func (o *ProcessInstanceQueryDto) SetSuperCaseInstanceNil() {
	o.SuperCaseInstance.Set(nil)
}

// UnsetSuperCaseInstance ensures that no value is present for SuperCaseInstance, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetSuperCaseInstance() {
	o.SuperCaseInstance.Unset()
}

// GetSubCaseInstance returns the SubCaseInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetSubCaseInstance() string {
	if o == nil || IsNil(o.SubCaseInstance.Get()) {
		var ret string
		return ret
	}
	return *o.SubCaseInstance.Get()
}

// GetSubCaseInstanceOk returns a tuple with the SubCaseInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetSubCaseInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubCaseInstance.Get(), o.SubCaseInstance.IsSet()
}

// HasSubCaseInstance returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasSubCaseInstance() bool {
	if o != nil && o.SubCaseInstance.IsSet() {
		return true
	}

	return false
}

// SetSubCaseInstance gets a reference to the given NullableString and assigns it to the SubCaseInstance field.
func (o *ProcessInstanceQueryDto) SetSubCaseInstance(v string) {
	o.SubCaseInstance.Set(&v)
}
// SetSubCaseInstanceNil sets the value for SubCaseInstance to be an explicit nil
func (o *ProcessInstanceQueryDto) SetSubCaseInstanceNil() {
	o.SubCaseInstance.Set(nil)
}

// UnsetSubCaseInstance ensures that no value is present for SubCaseInstance, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetSubCaseInstance() {
	o.SubCaseInstance.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *ProcessInstanceQueryDto) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *ProcessInstanceQueryDto) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetActive() {
	o.Active.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *ProcessInstanceQueryDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *ProcessInstanceQueryDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetProcessInstanceIds returns the ProcessInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetProcessInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessInstanceIds
}

// GetProcessInstanceIdsOk returns a tuple with the ProcessInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetProcessInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessInstanceIds) {
		return nil, false
	}
	return o.ProcessInstanceIds, true
}

// HasProcessInstanceIds returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasProcessInstanceIds() bool {
	if o != nil && !IsNil(o.ProcessInstanceIds) {
		return true
	}

	return false
}

// SetProcessInstanceIds gets a reference to the given []string and assigns it to the ProcessInstanceIds field.
func (o *ProcessInstanceQueryDto) SetProcessInstanceIds(v []string) {
	o.ProcessInstanceIds = v
}

// GetWithIncident returns the WithIncident field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetWithIncident() bool {
	if o == nil || IsNil(o.WithIncident.Get()) {
		var ret bool
		return ret
	}
	return *o.WithIncident.Get()
}

// GetWithIncidentOk returns a tuple with the WithIncident field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetWithIncidentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithIncident.Get(), o.WithIncident.IsSet()
}

// HasWithIncident returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasWithIncident() bool {
	if o != nil && o.WithIncident.IsSet() {
		return true
	}

	return false
}

// SetWithIncident gets a reference to the given NullableBool and assigns it to the WithIncident field.
func (o *ProcessInstanceQueryDto) SetWithIncident(v bool) {
	o.WithIncident.Set(&v)
}
// SetWithIncidentNil sets the value for WithIncident to be an explicit nil
func (o *ProcessInstanceQueryDto) SetWithIncidentNil() {
	o.WithIncident.Set(nil)
}

// UnsetWithIncident ensures that no value is present for WithIncident, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetWithIncident() {
	o.WithIncident.Unset()
}

// GetIncidentId returns the IncidentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetIncidentId() string {
	if o == nil || IsNil(o.IncidentId.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentId.Get()
}

// GetIncidentIdOk returns a tuple with the IncidentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetIncidentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentId.Get(), o.IncidentId.IsSet()
}

// HasIncidentId returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasIncidentId() bool {
	if o != nil && o.IncidentId.IsSet() {
		return true
	}

	return false
}

// SetIncidentId gets a reference to the given NullableString and assigns it to the IncidentId field.
func (o *ProcessInstanceQueryDto) SetIncidentId(v string) {
	o.IncidentId.Set(&v)
}
// SetIncidentIdNil sets the value for IncidentId to be an explicit nil
func (o *ProcessInstanceQueryDto) SetIncidentIdNil() {
	o.IncidentId.Set(nil)
}

// UnsetIncidentId ensures that no value is present for IncidentId, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetIncidentId() {
	o.IncidentId.Unset()
}

// GetIncidentType returns the IncidentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetIncidentType() string {
	if o == nil || IsNil(o.IncidentType.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentType.Get()
}

// GetIncidentTypeOk returns a tuple with the IncidentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetIncidentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentType.Get(), o.IncidentType.IsSet()
}

// HasIncidentType returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasIncidentType() bool {
	if o != nil && o.IncidentType.IsSet() {
		return true
	}

	return false
}

// SetIncidentType gets a reference to the given NullableString and assigns it to the IncidentType field.
func (o *ProcessInstanceQueryDto) SetIncidentType(v string) {
	o.IncidentType.Set(&v)
}
// SetIncidentTypeNil sets the value for IncidentType to be an explicit nil
func (o *ProcessInstanceQueryDto) SetIncidentTypeNil() {
	o.IncidentType.Set(nil)
}

// UnsetIncidentType ensures that no value is present for IncidentType, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetIncidentType() {
	o.IncidentType.Unset()
}

// GetIncidentMessage returns the IncidentMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetIncidentMessage() string {
	if o == nil || IsNil(o.IncidentMessage.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessage.Get()
}

// GetIncidentMessageOk returns a tuple with the IncidentMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetIncidentMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessage.Get(), o.IncidentMessage.IsSet()
}

// HasIncidentMessage returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasIncidentMessage() bool {
	if o != nil && o.IncidentMessage.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessage gets a reference to the given NullableString and assigns it to the IncidentMessage field.
func (o *ProcessInstanceQueryDto) SetIncidentMessage(v string) {
	o.IncidentMessage.Set(&v)
}
// SetIncidentMessageNil sets the value for IncidentMessage to be an explicit nil
func (o *ProcessInstanceQueryDto) SetIncidentMessageNil() {
	o.IncidentMessage.Set(nil)
}

// UnsetIncidentMessage ensures that no value is present for IncidentMessage, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetIncidentMessage() {
	o.IncidentMessage.Unset()
}

// GetIncidentMessageLike returns the IncidentMessageLike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetIncidentMessageLike() string {
	if o == nil || IsNil(o.IncidentMessageLike.Get()) {
		var ret string
		return ret
	}
	return *o.IncidentMessageLike.Get()
}

// GetIncidentMessageLikeOk returns a tuple with the IncidentMessageLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetIncidentMessageLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncidentMessageLike.Get(), o.IncidentMessageLike.IsSet()
}

// HasIncidentMessageLike returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasIncidentMessageLike() bool {
	if o != nil && o.IncidentMessageLike.IsSet() {
		return true
	}

	return false
}

// SetIncidentMessageLike gets a reference to the given NullableString and assigns it to the IncidentMessageLike field.
func (o *ProcessInstanceQueryDto) SetIncidentMessageLike(v string) {
	o.IncidentMessageLike.Set(&v)
}
// SetIncidentMessageLikeNil sets the value for IncidentMessageLike to be an explicit nil
func (o *ProcessInstanceQueryDto) SetIncidentMessageLikeNil() {
	o.IncidentMessageLike.Set(nil)
}

// UnsetIncidentMessageLike ensures that no value is present for IncidentMessageLike, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetIncidentMessageLike() {
	o.IncidentMessageLike.Unset()
}

// GetTenantIdIn returns the TenantIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetTenantIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIdIn
}

// GetTenantIdInOk returns a tuple with the TenantIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetTenantIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIdIn) {
		return nil, false
	}
	return o.TenantIdIn, true
}

// HasTenantIdIn returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasTenantIdIn() bool {
	if o != nil && !IsNil(o.TenantIdIn) {
		return true
	}

	return false
}

// SetTenantIdIn gets a reference to the given []string and assigns it to the TenantIdIn field.
func (o *ProcessInstanceQueryDto) SetTenantIdIn(v []string) {
	o.TenantIdIn = v
}

// GetWithoutTenantId returns the WithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetWithoutTenantId() bool {
	if o == nil || IsNil(o.WithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.WithoutTenantId.Get()
}

// GetWithoutTenantIdOk returns a tuple with the WithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithoutTenantId.Get(), o.WithoutTenantId.IsSet()
}

// HasWithoutTenantId returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasWithoutTenantId() bool {
	if o != nil && o.WithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetWithoutTenantId gets a reference to the given NullableBool and assigns it to the WithoutTenantId field.
func (o *ProcessInstanceQueryDto) SetWithoutTenantId(v bool) {
	o.WithoutTenantId.Set(&v)
}
// SetWithoutTenantIdNil sets the value for WithoutTenantId to be an explicit nil
func (o *ProcessInstanceQueryDto) SetWithoutTenantIdNil() {
	o.WithoutTenantId.Set(nil)
}

// UnsetWithoutTenantId ensures that no value is present for WithoutTenantId, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetWithoutTenantId() {
	o.WithoutTenantId.Unset()
}

// GetProcessDefinitionWithoutTenantId returns the ProcessDefinitionWithoutTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetProcessDefinitionWithoutTenantId() bool {
	if o == nil || IsNil(o.ProcessDefinitionWithoutTenantId.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessDefinitionWithoutTenantId.Get()
}

// GetProcessDefinitionWithoutTenantIdOk returns a tuple with the ProcessDefinitionWithoutTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetProcessDefinitionWithoutTenantIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessDefinitionWithoutTenantId.Get(), o.ProcessDefinitionWithoutTenantId.IsSet()
}

// HasProcessDefinitionWithoutTenantId returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasProcessDefinitionWithoutTenantId() bool {
	if o != nil && o.ProcessDefinitionWithoutTenantId.IsSet() {
		return true
	}

	return false
}

// SetProcessDefinitionWithoutTenantId gets a reference to the given NullableBool and assigns it to the ProcessDefinitionWithoutTenantId field.
func (o *ProcessInstanceQueryDto) SetProcessDefinitionWithoutTenantId(v bool) {
	o.ProcessDefinitionWithoutTenantId.Set(&v)
}
// SetProcessDefinitionWithoutTenantIdNil sets the value for ProcessDefinitionWithoutTenantId to be an explicit nil
func (o *ProcessInstanceQueryDto) SetProcessDefinitionWithoutTenantIdNil() {
	o.ProcessDefinitionWithoutTenantId.Set(nil)
}

// UnsetProcessDefinitionWithoutTenantId ensures that no value is present for ProcessDefinitionWithoutTenantId, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetProcessDefinitionWithoutTenantId() {
	o.ProcessDefinitionWithoutTenantId.Unset()
}

// GetActivityIdIn returns the ActivityIdIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetActivityIdIn() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ActivityIdIn
}

// GetActivityIdInOk returns a tuple with the ActivityIdIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetActivityIdInOk() ([]string, bool) {
	if o == nil || IsNil(o.ActivityIdIn) {
		return nil, false
	}
	return o.ActivityIdIn, true
}

// HasActivityIdIn returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasActivityIdIn() bool {
	if o != nil && !IsNil(o.ActivityIdIn) {
		return true
	}

	return false
}

// SetActivityIdIn gets a reference to the given []string and assigns it to the ActivityIdIn field.
func (o *ProcessInstanceQueryDto) SetActivityIdIn(v []string) {
	o.ActivityIdIn = v
}

// GetRootProcessInstances returns the RootProcessInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetRootProcessInstances() bool {
	if o == nil || IsNil(o.RootProcessInstances.Get()) {
		var ret bool
		return ret
	}
	return *o.RootProcessInstances.Get()
}

// GetRootProcessInstancesOk returns a tuple with the RootProcessInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetRootProcessInstancesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootProcessInstances.Get(), o.RootProcessInstances.IsSet()
}

// HasRootProcessInstances returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasRootProcessInstances() bool {
	if o != nil && o.RootProcessInstances.IsSet() {
		return true
	}

	return false
}

// SetRootProcessInstances gets a reference to the given NullableBool and assigns it to the RootProcessInstances field.
func (o *ProcessInstanceQueryDto) SetRootProcessInstances(v bool) {
	o.RootProcessInstances.Set(&v)
}
// SetRootProcessInstancesNil sets the value for RootProcessInstances to be an explicit nil
func (o *ProcessInstanceQueryDto) SetRootProcessInstancesNil() {
	o.RootProcessInstances.Set(nil)
}

// UnsetRootProcessInstances ensures that no value is present for RootProcessInstances, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetRootProcessInstances() {
	o.RootProcessInstances.Unset()
}

// GetLeafProcessInstances returns the LeafProcessInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetLeafProcessInstances() bool {
	if o == nil || IsNil(o.LeafProcessInstances.Get()) {
		var ret bool
		return ret
	}
	return *o.LeafProcessInstances.Get()
}

// GetLeafProcessInstancesOk returns a tuple with the LeafProcessInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetLeafProcessInstancesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeafProcessInstances.Get(), o.LeafProcessInstances.IsSet()
}

// HasLeafProcessInstances returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasLeafProcessInstances() bool {
	if o != nil && o.LeafProcessInstances.IsSet() {
		return true
	}

	return false
}

// SetLeafProcessInstances gets a reference to the given NullableBool and assigns it to the LeafProcessInstances field.
func (o *ProcessInstanceQueryDto) SetLeafProcessInstances(v bool) {
	o.LeafProcessInstances.Set(&v)
}
// SetLeafProcessInstancesNil sets the value for LeafProcessInstances to be an explicit nil
func (o *ProcessInstanceQueryDto) SetLeafProcessInstancesNil() {
	o.LeafProcessInstances.Set(nil)
}

// UnsetLeafProcessInstances ensures that no value is present for LeafProcessInstances, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetLeafProcessInstances() {
	o.LeafProcessInstances.Unset()
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetVariables() []VariableQueryParameterDto {
	if o == nil {
		var ret []VariableQueryParameterDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetVariablesOk() ([]VariableQueryParameterDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableQueryParameterDto and assigns it to the Variables field.
func (o *ProcessInstanceQueryDto) SetVariables(v []VariableQueryParameterDto) {
	o.Variables = v
}

// GetVariableNamesIgnoreCase returns the VariableNamesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetVariableNamesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableNamesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableNamesIgnoreCase.Get()
}

// GetVariableNamesIgnoreCaseOk returns a tuple with the VariableNamesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetVariableNamesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableNamesIgnoreCase.Get(), o.VariableNamesIgnoreCase.IsSet()
}

// HasVariableNamesIgnoreCase returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasVariableNamesIgnoreCase() bool {
	if o != nil && o.VariableNamesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableNamesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableNamesIgnoreCase field.
func (o *ProcessInstanceQueryDto) SetVariableNamesIgnoreCase(v bool) {
	o.VariableNamesIgnoreCase.Set(&v)
}
// SetVariableNamesIgnoreCaseNil sets the value for VariableNamesIgnoreCase to be an explicit nil
func (o *ProcessInstanceQueryDto) SetVariableNamesIgnoreCaseNil() {
	o.VariableNamesIgnoreCase.Set(nil)
}

// UnsetVariableNamesIgnoreCase ensures that no value is present for VariableNamesIgnoreCase, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetVariableNamesIgnoreCase() {
	o.VariableNamesIgnoreCase.Unset()
}

// GetVariableValuesIgnoreCase returns the VariableValuesIgnoreCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetVariableValuesIgnoreCase() bool {
	if o == nil || IsNil(o.VariableValuesIgnoreCase.Get()) {
		var ret bool
		return ret
	}
	return *o.VariableValuesIgnoreCase.Get()
}

// GetVariableValuesIgnoreCaseOk returns a tuple with the VariableValuesIgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetVariableValuesIgnoreCaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValuesIgnoreCase.Get(), o.VariableValuesIgnoreCase.IsSet()
}

// HasVariableValuesIgnoreCase returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasVariableValuesIgnoreCase() bool {
	if o != nil && o.VariableValuesIgnoreCase.IsSet() {
		return true
	}

	return false
}

// SetVariableValuesIgnoreCase gets a reference to the given NullableBool and assigns it to the VariableValuesIgnoreCase field.
func (o *ProcessInstanceQueryDto) SetVariableValuesIgnoreCase(v bool) {
	o.VariableValuesIgnoreCase.Set(&v)
}
// SetVariableValuesIgnoreCaseNil sets the value for VariableValuesIgnoreCase to be an explicit nil
func (o *ProcessInstanceQueryDto) SetVariableValuesIgnoreCaseNil() {
	o.VariableValuesIgnoreCase.Set(nil)
}

// UnsetVariableValuesIgnoreCase ensures that no value is present for VariableValuesIgnoreCase, not even an explicit nil
func (o *ProcessInstanceQueryDto) UnsetVariableValuesIgnoreCase() {
	o.VariableValuesIgnoreCase.Unset()
}

// GetOrQueries returns the OrQueries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetOrQueries() []ProcessInstanceQueryDto {
	if o == nil {
		var ret []ProcessInstanceQueryDto
		return ret
	}
	return o.OrQueries
}

// GetOrQueriesOk returns a tuple with the OrQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetOrQueriesOk() ([]ProcessInstanceQueryDto, bool) {
	if o == nil || IsNil(o.OrQueries) {
		return nil, false
	}
	return o.OrQueries, true
}

// HasOrQueries returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasOrQueries() bool {
	if o != nil && !IsNil(o.OrQueries) {
		return true
	}

	return false
}

// SetOrQueries gets a reference to the given []ProcessInstanceQueryDto and assigns it to the OrQueries field.
func (o *ProcessInstanceQueryDto) SetOrQueries(v []ProcessInstanceQueryDto) {
	o.OrQueries = v
}

// GetSorting returns the Sorting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessInstanceQueryDto) GetSorting() []ProcessInstanceQueryDtoSortingInner {
	if o == nil {
		var ret []ProcessInstanceQueryDtoSortingInner
		return ret
	}
	return o.Sorting
}

// GetSortingOk returns a tuple with the Sorting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessInstanceQueryDto) GetSortingOk() ([]ProcessInstanceQueryDtoSortingInner, bool) {
	if o == nil || IsNil(o.Sorting) {
		return nil, false
	}
	return o.Sorting, true
}

// HasSorting returns a boolean if a field has been set.
func (o *ProcessInstanceQueryDto) HasSorting() bool {
	if o != nil && !IsNil(o.Sorting) {
		return true
	}

	return false
}

// SetSorting gets a reference to the given []ProcessInstanceQueryDtoSortingInner and assigns it to the Sorting field.
func (o *ProcessInstanceQueryDto) SetSorting(v []ProcessInstanceQueryDtoSortingInner) {
	o.Sorting = v
}

func (o ProcessInstanceQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessInstanceQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	if o.ProcessDefinitionId.IsSet() {
		toSerialize["processDefinitionId"] = o.ProcessDefinitionId.Get()
	}
	if o.ProcessDefinitionKey.IsSet() {
		toSerialize["processDefinitionKey"] = o.ProcessDefinitionKey.Get()
	}
	if o.ProcessDefinitionKeyIn != nil {
		toSerialize["processDefinitionKeyIn"] = o.ProcessDefinitionKeyIn
	}
	if o.ProcessDefinitionKeyNotIn != nil {
		toSerialize["processDefinitionKeyNotIn"] = o.ProcessDefinitionKeyNotIn
	}
	if o.BusinessKey.IsSet() {
		toSerialize["businessKey"] = o.BusinessKey.Get()
	}
	if o.BusinessKeyLike.IsSet() {
		toSerialize["businessKeyLike"] = o.BusinessKeyLike.Get()
	}
	if o.CaseInstanceId.IsSet() {
		toSerialize["caseInstanceId"] = o.CaseInstanceId.Get()
	}
	if o.SuperProcessInstance.IsSet() {
		toSerialize["superProcessInstance"] = o.SuperProcessInstance.Get()
	}
	if o.SubProcessInstance.IsSet() {
		toSerialize["subProcessInstance"] = o.SubProcessInstance.Get()
	}
	if o.SuperCaseInstance.IsSet() {
		toSerialize["superCaseInstance"] = o.SuperCaseInstance.Get()
	}
	if o.SubCaseInstance.IsSet() {
		toSerialize["subCaseInstance"] = o.SubCaseInstance.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.ProcessInstanceIds != nil {
		toSerialize["processInstanceIds"] = o.ProcessInstanceIds
	}
	if o.WithIncident.IsSet() {
		toSerialize["withIncident"] = o.WithIncident.Get()
	}
	if o.IncidentId.IsSet() {
		toSerialize["incidentId"] = o.IncidentId.Get()
	}
	if o.IncidentType.IsSet() {
		toSerialize["incidentType"] = o.IncidentType.Get()
	}
	if o.IncidentMessage.IsSet() {
		toSerialize["incidentMessage"] = o.IncidentMessage.Get()
	}
	if o.IncidentMessageLike.IsSet() {
		toSerialize["incidentMessageLike"] = o.IncidentMessageLike.Get()
	}
	if o.TenantIdIn != nil {
		toSerialize["tenantIdIn"] = o.TenantIdIn
	}
	if o.WithoutTenantId.IsSet() {
		toSerialize["withoutTenantId"] = o.WithoutTenantId.Get()
	}
	if o.ProcessDefinitionWithoutTenantId.IsSet() {
		toSerialize["processDefinitionWithoutTenantId"] = o.ProcessDefinitionWithoutTenantId.Get()
	}
	if o.ActivityIdIn != nil {
		toSerialize["activityIdIn"] = o.ActivityIdIn
	}
	if o.RootProcessInstances.IsSet() {
		toSerialize["rootProcessInstances"] = o.RootProcessInstances.Get()
	}
	if o.LeafProcessInstances.IsSet() {
		toSerialize["leafProcessInstances"] = o.LeafProcessInstances.Get()
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.VariableNamesIgnoreCase.IsSet() {
		toSerialize["variableNamesIgnoreCase"] = o.VariableNamesIgnoreCase.Get()
	}
	if o.VariableValuesIgnoreCase.IsSet() {
		toSerialize["variableValuesIgnoreCase"] = o.VariableValuesIgnoreCase.Get()
	}
	if o.OrQueries != nil {
		toSerialize["orQueries"] = o.OrQueries
	}
	if o.Sorting != nil {
		toSerialize["sorting"] = o.Sorting
	}
	return toSerialize, nil
}

type NullableProcessInstanceQueryDto struct {
	value *ProcessInstanceQueryDto
	isSet bool
}

func (v NullableProcessInstanceQueryDto) Get() *ProcessInstanceQueryDto {
	return v.value
}

func (v *NullableProcessInstanceQueryDto) Set(val *ProcessInstanceQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessInstanceQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessInstanceQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessInstanceQueryDto(val *ProcessInstanceQueryDto) *NullableProcessInstanceQueryDto {
	return &NullableProcessInstanceQueryDto{value: val, isSet: true}
}

func (v NullableProcessInstanceQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessInstanceQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


