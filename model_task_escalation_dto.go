/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the TaskEscalationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskEscalationDto{}

// TaskEscalationDto struct for TaskEscalationDto
type TaskEscalationDto struct {
	// An escalation code that indicates the predefined escalation. It is used to identify the BPMN escalation handler.
	EscalationCode NullableString `json:"escalationCode,omitempty"`
	// A JSON object containing variable key-value pairs.
	Variables map[string]VariableValueDto `json:"variables,omitempty"`
}

// NewTaskEscalationDto instantiates a new TaskEscalationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskEscalationDto() *TaskEscalationDto {
	this := TaskEscalationDto{}
	return &this
}

// NewTaskEscalationDtoWithDefaults instantiates a new TaskEscalationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskEscalationDtoWithDefaults() *TaskEscalationDto {
	this := TaskEscalationDto{}
	return &this
}

// GetEscalationCode returns the EscalationCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskEscalationDto) GetEscalationCode() string {
	if o == nil || IsNil(o.EscalationCode.Get()) {
		var ret string
		return ret
	}
	return *o.EscalationCode.Get()
}

// GetEscalationCodeOk returns a tuple with the EscalationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskEscalationDto) GetEscalationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EscalationCode.Get(), o.EscalationCode.IsSet()
}

// HasEscalationCode returns a boolean if a field has been set.
func (o *TaskEscalationDto) HasEscalationCode() bool {
	if o != nil && o.EscalationCode.IsSet() {
		return true
	}

	return false
}

// SetEscalationCode gets a reference to the given NullableString and assigns it to the EscalationCode field.
func (o *TaskEscalationDto) SetEscalationCode(v string) {
	o.EscalationCode.Set(&v)
}
// SetEscalationCodeNil sets the value for EscalationCode to be an explicit nil
func (o *TaskEscalationDto) SetEscalationCodeNil() {
	o.EscalationCode.Set(nil)
}

// UnsetEscalationCode ensures that no value is present for EscalationCode, not even an explicit nil
func (o *TaskEscalationDto) UnsetEscalationCode() {
	o.EscalationCode.Unset()
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskEscalationDto) GetVariables() map[string]VariableValueDto {
	if o == nil {
		var ret map[string]VariableValueDto
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskEscalationDto) GetVariablesOk() (*map[string]VariableValueDto, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return &o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *TaskEscalationDto) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]VariableValueDto and assigns it to the Variables field.
func (o *TaskEscalationDto) SetVariables(v map[string]VariableValueDto) {
	o.Variables = v
}

func (o TaskEscalationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskEscalationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EscalationCode.IsSet() {
		toSerialize["escalationCode"] = o.EscalationCode.Get()
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullableTaskEscalationDto struct {
	value *TaskEscalationDto
	isSet bool
}

func (v NullableTaskEscalationDto) Get() *TaskEscalationDto {
	return v.value
}

func (v *NullableTaskEscalationDto) Set(val *TaskEscalationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskEscalationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskEscalationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskEscalationDto(val *TaskEscalationDto) *NullableTaskEscalationDto {
	return &NullableTaskEscalationDto{value: val, isSet: true}
}

func (v NullableTaskEscalationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskEscalationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


