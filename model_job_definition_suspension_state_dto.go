/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"encoding/json"
)

// checks if the JobDefinitionSuspensionStateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobDefinitionSuspensionStateDto{}

// JobDefinitionSuspensionStateDto struct for JobDefinitionSuspensionStateDto
type JobDefinitionSuspensionStateDto struct {
	// A Boolean value which indicates whether to activate or suspend a given instance  (e.g. process instance, job, job definition, or batch). When the value is set to true,  the given instance will be suspended and when the value is set to false,  the given instance will be activated.
	Suspended NullableBool `json:"suspended,omitempty"`
	// A `Boolean` value which indicates whether to activate or suspend also all jobs of the referenced job definitions. When the value is set to `true`, all jobs of the provided job definitions will be activated or suspended and when the value is set to `false`, the suspension state of all jobs of the provided job definitions will not be updated.
	IncludeJobs NullableBool `json:"includeJobs,omitempty"`
	// The date on which the referenced job definitions will be activated or suspended. If null, the suspension state of the given job definitions is updated immediately. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM- dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
	ExecutionDate NullableString `json:"executionDate,omitempty"`
}

// NewJobDefinitionSuspensionStateDto instantiates a new JobDefinitionSuspensionStateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobDefinitionSuspensionStateDto() *JobDefinitionSuspensionStateDto {
	this := JobDefinitionSuspensionStateDto{}
	return &this
}

// NewJobDefinitionSuspensionStateDtoWithDefaults instantiates a new JobDefinitionSuspensionStateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobDefinitionSuspensionStateDtoWithDefaults() *JobDefinitionSuspensionStateDto {
	this := JobDefinitionSuspensionStateDto{}
	return &this
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionSuspensionStateDto) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionSuspensionStateDto) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *JobDefinitionSuspensionStateDto) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *JobDefinitionSuspensionStateDto) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *JobDefinitionSuspensionStateDto) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *JobDefinitionSuspensionStateDto) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetIncludeJobs returns the IncludeJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionSuspensionStateDto) GetIncludeJobs() bool {
	if o == nil || IsNil(o.IncludeJobs.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeJobs.Get()
}

// GetIncludeJobsOk returns a tuple with the IncludeJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionSuspensionStateDto) GetIncludeJobsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeJobs.Get(), o.IncludeJobs.IsSet()
}

// HasIncludeJobs returns a boolean if a field has been set.
func (o *JobDefinitionSuspensionStateDto) HasIncludeJobs() bool {
	if o != nil && o.IncludeJobs.IsSet() {
		return true
	}

	return false
}

// SetIncludeJobs gets a reference to the given NullableBool and assigns it to the IncludeJobs field.
func (o *JobDefinitionSuspensionStateDto) SetIncludeJobs(v bool) {
	o.IncludeJobs.Set(&v)
}
// SetIncludeJobsNil sets the value for IncludeJobs to be an explicit nil
func (o *JobDefinitionSuspensionStateDto) SetIncludeJobsNil() {
	o.IncludeJobs.Set(nil)
}

// UnsetIncludeJobs ensures that no value is present for IncludeJobs, not even an explicit nil
func (o *JobDefinitionSuspensionStateDto) UnsetIncludeJobs() {
	o.IncludeJobs.Unset()
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobDefinitionSuspensionStateDto) GetExecutionDate() string {
	if o == nil || IsNil(o.ExecutionDate.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionDate.Get()
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobDefinitionSuspensionStateDto) GetExecutionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionDate.Get(), o.ExecutionDate.IsSet()
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *JobDefinitionSuspensionStateDto) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate.IsSet() {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given NullableString and assigns it to the ExecutionDate field.
func (o *JobDefinitionSuspensionStateDto) SetExecutionDate(v string) {
	o.ExecutionDate.Set(&v)
}
// SetExecutionDateNil sets the value for ExecutionDate to be an explicit nil
func (o *JobDefinitionSuspensionStateDto) SetExecutionDateNil() {
	o.ExecutionDate.Set(nil)
}

// UnsetExecutionDate ensures that no value is present for ExecutionDate, not even an explicit nil
func (o *JobDefinitionSuspensionStateDto) UnsetExecutionDate() {
	o.ExecutionDate.Unset()
}

func (o JobDefinitionSuspensionStateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobDefinitionSuspensionStateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.IncludeJobs.IsSet() {
		toSerialize["includeJobs"] = o.IncludeJobs.Get()
	}
	if o.ExecutionDate.IsSet() {
		toSerialize["executionDate"] = o.ExecutionDate.Get()
	}
	return toSerialize, nil
}

type NullableJobDefinitionSuspensionStateDto struct {
	value *JobDefinitionSuspensionStateDto
	isSet bool
}

func (v NullableJobDefinitionSuspensionStateDto) Get() *JobDefinitionSuspensionStateDto {
	return v.value
}

func (v *NullableJobDefinitionSuspensionStateDto) Set(val *JobDefinitionSuspensionStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobDefinitionSuspensionStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobDefinitionSuspensionStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobDefinitionSuspensionStateDto(val *JobDefinitionSuspensionStateDto) *NullableJobDefinitionSuspensionStateDto {
	return &NullableJobDefinitionSuspensionStateDto{value: val, isSet: true}
}

func (v NullableJobDefinitionSuspensionStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobDefinitionSuspensionStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


