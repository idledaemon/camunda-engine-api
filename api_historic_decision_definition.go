/*
Camunda Platform REST API

OpenApi Spec for Camunda Platform REST API.

API version: 7.21.2-ee
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camundarestgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type HistoricDecisionDefinitionAPI interface {

	/*
	GetCleanableHistoricDecisionInstanceReport Get Cleanable Decision Instance Report

	Retrieves a report about a decision definition and finished decision instances
relevant to history cleanup (see
[History cleanup](https://docs.camunda.org/manual/7.21/user-guide/process-engine/history/#history-cleanup)), 
so that you can tune the history time to live.
These reports include the count of the finished historic decision
instances, cleanable decision instances and basic decision definition
data - id, key, name and version.
The size of the result set can be retrieved by using the 
[Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCleanableHistoricDecisionInstanceReportRequest
	*/
	GetCleanableHistoricDecisionInstanceReport(ctx context.Context) ApiGetCleanableHistoricDecisionInstanceReportRequest

	// GetCleanableHistoricDecisionInstanceReportExecute executes the request
	//  @return []CleanableHistoricDecisionInstanceReportResultDto
	GetCleanableHistoricDecisionInstanceReportExecute(r ApiGetCleanableHistoricDecisionInstanceReportRequest) ([]CleanableHistoricDecisionInstanceReportResultDto, *http.Response, error)

	/*
	GetCleanableHistoricDecisionInstanceReportCount Get Cleanable Decision Instance Report Count

	Queries for the number of report results about a decision definition and finished
decision instances relevant to history cleanup (see
[History cleanup](https://docs.camunda.org/manual/7.21/user-guide/process-engine/history/#history-cleanup)).
Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/) 
method.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCleanableHistoricDecisionInstanceReportCountRequest
	*/
	GetCleanableHistoricDecisionInstanceReportCount(ctx context.Context) ApiGetCleanableHistoricDecisionInstanceReportCountRequest

	// GetCleanableHistoricDecisionInstanceReportCountExecute executes the request
	//  @return CountResultDto
	GetCleanableHistoricDecisionInstanceReportCountExecute(r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) (*CountResultDto, *http.Response, error)
}

// HistoricDecisionDefinitionAPIService HistoricDecisionDefinitionAPI service
type HistoricDecisionDefinitionAPIService service

type ApiGetCleanableHistoricDecisionInstanceReportRequest struct {
	ctx context.Context
	ApiService HistoricDecisionDefinitionAPI
	decisionDefinitionIdIn *string
	decisionDefinitionKeyIn *string
	tenantIdIn *string
	withoutTenantId *bool
	compact *bool
	sortBy *string
	sortOrder *string
	firstResult *int32
	maxResults *int32
}

// Filter by decision definition ids. Must be a comma-separated list of decision definition ids.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) DecisionDefinitionIdIn(decisionDefinitionIdIn string) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.decisionDefinitionIdIn = &decisionDefinitionIdIn
	return r
}

// Filter by decision definition keys. Must be a comma-separated list of decision definition keys.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) DecisionDefinitionKeyIn(decisionDefinitionKeyIn string) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.decisionDefinitionKeyIn = &decisionDefinitionKeyIn
	return r
}

// Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) TenantIdIn(tenantIdIn string) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include decision definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60;  is the default behavior.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) WithoutTenantId(withoutTenantId bool) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include decision instances which have more than zero finished instances. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) Compact(compact bool) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.compact = &compact
	return r
}

// Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) SortBy(sortBy string) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.sortBy = &sortBy
	return r
}

// Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) SortOrder(sortOrder string) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.sortOrder = &sortOrder
	return r
}

// Pagination of results. Specifies the index of the first result to return.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) FirstResult(firstResult int32) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.firstResult = &firstResult
	return r
}

// Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) MaxResults(maxResults int32) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetCleanableHistoricDecisionInstanceReportRequest) Execute() ([]CleanableHistoricDecisionInstanceReportResultDto, *http.Response, error) {
	return r.ApiService.GetCleanableHistoricDecisionInstanceReportExecute(r)
}

/*
GetCleanableHistoricDecisionInstanceReport Get Cleanable Decision Instance Report

Retrieves a report about a decision definition and finished decision instances
relevant to history cleanup (see
[History cleanup](https://docs.camunda.org/manual/7.21/user-guide/process-engine/history/#history-cleanup)), 
so that you can tune the history time to live.
These reports include the count of the finished historic decision
instances, cleanable decision instances and basic decision definition
data - id, key, name and version.
The size of the result set can be retrieved by using the 
[Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCleanableHistoricDecisionInstanceReportRequest
*/
func (a *HistoricDecisionDefinitionAPIService) GetCleanableHistoricDecisionInstanceReport(ctx context.Context) ApiGetCleanableHistoricDecisionInstanceReportRequest {
	return ApiGetCleanableHistoricDecisionInstanceReportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CleanableHistoricDecisionInstanceReportResultDto
func (a *HistoricDecisionDefinitionAPIService) GetCleanableHistoricDecisionInstanceReportExecute(r ApiGetCleanableHistoricDecisionInstanceReportRequest) ([]CleanableHistoricDecisionInstanceReportResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CleanableHistoricDecisionInstanceReportResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionDefinitionAPIService.GetCleanableHistoricDecisionInstanceReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-definition/cleanable-decision-instance-report"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.decisionDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionIdIn", r.decisionDefinitionIdIn, "")
	}
	if r.decisionDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionKeyIn", r.decisionDefinitionKeyIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.compact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compact", r.compact, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.firstResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstResult", r.firstResult, "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCleanableHistoricDecisionInstanceReportCountRequest struct {
	ctx context.Context
	ApiService HistoricDecisionDefinitionAPI
	decisionDefinitionIdIn *string
	decisionDefinitionKeyIn *string
	tenantIdIn *string
	withoutTenantId *bool
	compact *bool
}

// Filter by decision definition ids. Must be a comma-separated list of decision definition ids.
func (r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) DecisionDefinitionIdIn(decisionDefinitionIdIn string) ApiGetCleanableHistoricDecisionInstanceReportCountRequest {
	r.decisionDefinitionIdIn = &decisionDefinitionIdIn
	return r
}

// Filter by decision definition keys. Must be a comma-separated list of decision definition keys.
func (r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) DecisionDefinitionKeyIn(decisionDefinitionKeyIn string) ApiGetCleanableHistoricDecisionInstanceReportCountRequest {
	r.decisionDefinitionKeyIn = &decisionDefinitionKeyIn
	return r
}

// Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids.
func (r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) TenantIdIn(tenantIdIn string) ApiGetCleanableHistoricDecisionInstanceReportCountRequest {
	r.tenantIdIn = &tenantIdIn
	return r
}

// Only include decision definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60;  is the default behavior.
func (r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) WithoutTenantId(withoutTenantId bool) ApiGetCleanableHistoricDecisionInstanceReportCountRequest {
	r.withoutTenantId = &withoutTenantId
	return r
}

// Only include decision instances which have more than zero finished instances. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
func (r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) Compact(compact bool) ApiGetCleanableHistoricDecisionInstanceReportCountRequest {
	r.compact = &compact
	return r
}

func (r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) Execute() (*CountResultDto, *http.Response, error) {
	return r.ApiService.GetCleanableHistoricDecisionInstanceReportCountExecute(r)
}

/*
GetCleanableHistoricDecisionInstanceReportCount Get Cleanable Decision Instance Report Count

Queries for the number of report results about a decision definition and finished
decision instances relevant to history cleanup (see
[History cleanup](https://docs.camunda.org/manual/7.21/user-guide/process-engine/history/#history-cleanup)).
Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.21/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/) 
method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCleanableHistoricDecisionInstanceReportCountRequest
*/
func (a *HistoricDecisionDefinitionAPIService) GetCleanableHistoricDecisionInstanceReportCount(ctx context.Context) ApiGetCleanableHistoricDecisionInstanceReportCountRequest {
	return ApiGetCleanableHistoricDecisionInstanceReportCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountResultDto
func (a *HistoricDecisionDefinitionAPIService) GetCleanableHistoricDecisionInstanceReportCountExecute(r ApiGetCleanableHistoricDecisionInstanceReportCountRequest) (*CountResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoricDecisionDefinitionAPIService.GetCleanableHistoricDecisionInstanceReportCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/history/decision-definition/cleanable-decision-instance-report/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.decisionDefinitionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionIdIn", r.decisionDefinitionIdIn, "")
	}
	if r.decisionDefinitionKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "decisionDefinitionKeyIn", r.decisionDefinitionKeyIn, "")
	}
	if r.tenantIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIdIn", r.tenantIdIn, "")
	}
	if r.withoutTenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withoutTenantId", r.withoutTenantId, "")
	}
	if r.compact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compact", r.compact, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
